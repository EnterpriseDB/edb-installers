<project>
    <!-- Package details -->
    <shortName>slony</shortName>
    <fullName>Slony_I_PGPG_CURRENT_VERSION</fullName>
    <version>PG_VERSION_SLONY-PG_BUILDNUM_SLONY</version>

    <!-- These options are used on Windows -->
    <startMenuGroupName>${branding}</startMenuGroupName>

    <!-- Product Specific Options -->
    <productDisplayName>Slony ${productVersion} for Postgres ${PGMajorVersion}.${PGMinorVersion}</productDisplayName>
    <productComments>Slony ${productVersion} for Postgres ${PGMajorVersion}.${PGMinorVersion}, packaged by EnterpriseDB</productComments>
    <productUrlHelpLink>http://www.enterprisedb.com</productUrlHelpLink>
    <productUrlInfoAbout>http://www.enterprisedb.com</productUrlInfoAbout>

    <!-- The options are used for RPM registration -->
    <description>Slony ${productVersion}, packaged by EnterpriseDB</description>
    <summary>${msg(install.summary)}</summary>
    <vendor>EnterpriseDB</vendor>
    <release>1</release>

    <!-- Installer Size -->
    <width>550</width>
    <height>400</height>

    <!-- Misc package options -->
    <installerFilename>slony-pgPG_CURRENT_VERSION-${product_version}-${platform_name}.${platform_exec_suffix}</installerFilename>
    <enableRollback>0</enableRollback>
    <requireInstallationByRootUser>${admin_rights}</requireInstallationByRootUser>
    <windowsSoftwareRegistryPrefix/>
    <saveRelativePaths>1</saveRelativePaths>
    <outputDirectory>../output</outputDirectory>
    <uninstallerDirectory>${installdir}/Slony</uninstallerDirectory>
    <uninstallerName>uninstall-${product_shortname}</uninstallerName>
    <unattendedModeUI>minimal</unattendedModeUI>
    <compressionAlgorithm>lzma</compressionAlgorithm>
    <installationLogFile>${system_temp_directory}/install-${product_shortname}.log</installationLogFile>
    <uninstallationLogFile>${system_temp_directory}/uninstall-${product_shortname}.log</uninstallationLogFile>
    <allowWindowResize>1</allowWindowResize>

    <!-- Images -->
    <disableSplashScreen>1</disableSplashScreen>
    <leftImage>../resources/pg-side.png</leftImage>

    <!-- i18n files for the UI -->
    <allowedLanguages>en</allowedLanguages>
    <customLanguageFileList>
        <language>
            <code>en</code>
            <encoding>iso8859-1</encoding>
            <file>i18n/en.lng</file>
        </language>
    </customLanguageFileList>
    <preShowHelpActionList>
	<!-- Set the PG Major Version -->
        <setInstallerVariable name="PGMajorVersion" value="PG_MAJOR_VERSION"/>
        <setInstallerVariable name="PGMinorVersion" value="PG_MINOR_VERSION"/>
        <!-- WIN: Set the pghome default value when pghome not set -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="defaultpghome" value="${platform_install_prefix}\PostgreSQL\${PGMajorVersion}"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>

        <!-- LIN & LIN64: Set the pghome default value when pghome not set -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="defaultpghome" value="${platform_install_prefix}/PostgreSQL/${PGMajorVersion}"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </actionGroup>

        <!-- MAC: Set the pghome default value when pghome not set -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="defaultpghome" value="/Library/PostgreSQL/${PGMajorVersion}"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </actionGroup>
    </preShowHelpActionList>
    <!-- Prebuild Actons-->
    <preBuildActionList>
      <setInstallerVariable name="originalplatform" value="${platform_name}"/>
      <setInstallerVariable name="originalplatform" value="linux-x32">
          <ruleList>
              <compareText text="${platform_name}" value="linux"/>
          </ruleList>
      </setInstallerVariable>
    </preBuildActionList>

    <!-- Initialisation actions -->
    <initializationActionList>
        <setInstallerVariable name="productVersion" persist="1" value="PG_VERSION_SLONY"/>
        <setInstallerVariable name="project.parameter(extract_mode).ask" value="0"/>

        <setInstallerVariable name="win64_platform" value="0"/>
        <setInstallerVariable name="win64_platform" value="1">
            <ruleList>
                <platformTest type="windows-x64"/>
            </ruleList>
        </setInstallerVariable>

        <!-- Abort Installation as trying to  run a 32-bit installer on 64-bit machine -->
        <throwError>
          <customErrorMessage>${msg(platform.not.match)}</customErrorMessage>
          <text>Unknown Error</text>
          <ruleList>
            <platformTest type="linux-x64"/>
            <compareText text="${originalplatform}" value="linux-x32"/>
          </ruleList>
        </throwError>

        <!-- Set the Slony version(if exists) -->
        <setInstallerVariable name="SlonyVersion" value=""/>
        <setInstallerVariable name="SlonyMajorVersion" value="SLONY_MAJOR_VERSION"/>
        <setInstallerVariable name="SlonyMajorVersionInstalled" value=""/>

        <!-- Set the PG Current version(if exists) -->
        <setInstallerVariable name="PGCurrentVersion" value="PG_CURRENT_VERSION" persist="1"/>

        <!-- Set the PG Major Version -->
        <setInstallerVariable name="PGMajorVersion" value="PG_MAJOR_VERSION" persist="1"/>
        <setInstallerVariable name="PGMinorVersion" value="PG_MINOR_VERSION" persist="1"/>

        <!-- WIN: Set the pghome default value for unattended mode -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="defaultpghome" value="${platform_install_prefix}\PostgreSQL\${PGMajorVersion}"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${installer_ui}</text>
                    <value>unattended</value>
                </compareText>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>

        <!-- LIN & LIN64: Set the pghome default value for unattended mode -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="defaultpghome" value="${platform_install_prefix}/PostgreSQL/${PGMajorVersion}"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${installer_ui}</text>
                    <value>unattended</value>
                </compareText>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </actionGroup>

        <!-- MAC: Set the pghome default value for unattended mode -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="defaultpghome" value="/Library/PostgreSQL/${PGMajorVersion}"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${installer_ui}</text>
                    <value>unattended</value>
                </compareText>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </actionGroup>

        <!-- WIN: Set the pghome default value when pghome not set -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="defaultpghome" value="${platform_install_prefix}\PostgreSQL\${PGMajorVersion}"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${pghome}</text>
                    <value/>
                </compareText>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>

        <!-- LIN & LIN64: Set the pghome default value when pghome not set -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="defaultpghome" value="${platform_install_prefix}/PostgreSQL/${PGMajorVersion}"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${pghome}</text>
                    <value/>
                </compareText>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </actionGroup>

        <!-- MAC: Set the pghome default value when pghome not set -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="defaultpghome" value="/Library/PostgreSQL/${PGMajorVersion}"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${pghome}</text>
                    <value/>
                </compareText>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </actionGroup>
    </initializationActionList>

    <!-- Preinstallation actions -->
    <preInstallationActionList>

        <actionGroup>
            <actionList>
                <!-- Do not create uninstaller in case of extract-only mode -->
                <setInstallerVariable name="createUninstaller" value="0" persist="1"/>
                <setInstallerVariable name="branding" value="" persist="1"/>
            </actionList>
            <ruleList>
                <isTrue value="${extract_mode}"/>
            </ruleList>
        </actionGroup>

        <!-- Do not perform the below actions in case of extract-only mode -->
        <actionGroup>
            <actionList>
                <!-- Abort installation if not super-user and not running in extract-only mode-->
                <throwError text="${msg(Installer.Warning.RootPrivileges)}">
                    <ruleList>
                       <isFalse value="${installer_is_root_install}"/>
                    </ruleList>
                </throwError>
                <setInstallerVariable name="project.windowsSoftwareRegistryPrefix" value="${project.vendor}\${project.fullName}"/>

                <!-- Creates the ini file if not exits -->
                <touchFile path="/etc/postgres-reg.ini">
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </touchFile>
                <setInstallerVariable name="defaultpghome" value="${pghome}"/>

                <!-- WIN: Get the branding & check Previous Installation of Slony -->
                <actionGroup>
                    <actionList>
                        <!-- Get the branding -->
                        <registryGet>
                            <name>Branding</name>
                            <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Slony_I_PG${PGCurrentVersion}</key>
                            <variable>iBranding</variable>
                        </registryGet>

                        <registryGet>
                            <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Slony_I_PG${PGCurrentVersion}</key>
                            <name>Version</name>
                            <variable>SlonyVersion</variable>
                        </registryGet>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </actionGroup>

                <!-- LIN & MAC: Get the branding & check Previous Installation of Slony -->
                <actionGroup>
                    <actionList>
                        <!-- Get the branding. -->
                        <iniFileGet>
                            <file>/etc/postgres-reg.ini</file>
                            <key>Branding</key>
                            <section>Slony_I_PG${PGCurrentVersion}</section>
                            <variable>iBranding</variable>
                        </iniFileGet>

                        <iniFileGet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>Slony_I_PG${PGCurrentVersion}</section>
                            <key>Version</key>
                            <variable>SlonyVersion</variable>
                        </iniFileGet>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </actionGroup>
                <setInstallerVariableFromRegEx>
                    <name>SlonyMajorVersionInstalled</name>
                    <text>${SlonyVersion}</text>
                    <pattern>^([0-9]*.[0-9]*).(.*)$</pattern>
                    <substitution>\1</substitution>
                    <ruleList>
                       <compareText>
                           <logic>does_not_equal</logic>
                           <text>${SlonyVersion}</text>
                           <value/>
                       </compareText>
                    </ruleList>
                </setInstallerVariableFromRegEx>

                <!-- If there appears to be an existing installation, with no Branding value. -->
                <!-- force the default value. Otherwise, set the branding to whatever we read, -->
                <!-- or, set the default -->

		<!-- In case of 32 bit installation on win64 append (x86) in the branding-->
		<setInstallerVariable name="branding_suffix" value=""/>
		<setInstallerVariable name="branding_suffix" value=" (x86)">
		    <ruleList>
			<isTrue value="${win64_platform}"/>
			<compareValues value1="@@WINDIR@@" value2="windows-x64" logic="does_not_equal"/>
		    </ruleList>
		</setInstallerVariable>

	       <!-- In case of 32 bit installer being run on 64 bit machine, change display name to
	       have suffix x86 for example in case of add or remove programs menu -->
	       <setInstallerVariable name="project.productDisplayName" value="${product_fullname} ${product_version}${branding_suffix}"/>


                <!-- Existing, old install (version, but no branding) -->
                <setInstallerVariable>
                    <name>branding</name>
                    <persist>0</persist>
                    <value>PostgreSQL PG_MAJOR_VERSION${branding_suffix}</value>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${SlonyVersion}</text>
                            <value></value>
                        </compareText>
                        <compareText>
                            <logic>equals</logic>
                            <text>${iBranding}</text>
                            <value></value>
                        </compareText>
                    </ruleList>
                </setInstallerVariable>

                <!-- Existing install, with branding -->
                <setInstallerVariable>
                    <name>branding</name>
                    <persist>0</persist>
                    <value>${iBranding}</value>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${iBranding}</text>
                            <value></value>
                        </compareText>
                    </ruleList>
                </setInstallerVariable>

                <!-- New install, nothing set on the command line -->
                <setInstallerVariable>
                    <name>branding</name>
                    <persist>0</persist>
                    <value>PostgreSQL PG_MAJOR_VERSION${branding_suffix}</value>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>${branding}</text>
                            <value></value>
                        </compareText>
                    </ruleList>
                </setInstallerVariable>

                <logMessage>
                    <text>Using branding: ${branding}</text>
                </logMessage>

                <!-- LIN & MAC: Set installation directory in case of reinstall/upgrade -->
                <actionGroup>
                    <actionList>
                        <iniFileGet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>Slony_I_PG${PGCurrentVersion}</section>
                            <key>InstallationDirectory</key>
                            <variable>installdir</variable>
                        </iniFileGet>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${SlonyVersion}</text>
                            <value/>
                        </compareText>
                        <compareValues>
                            <logic>equals</logic>
                            <value1>${SlonyMajorVersion}</value1>
                            <value2>${SlonyMajorVersionInstalled}</value2>
                        </compareValues>
                    </ruleList>
                </actionGroup>

                <!-- WIN: Set installation directory in case of reinstall/upgrade -->
                <actionGroup>
                    <actionList>
                        <registryGet>
                            <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Slony_I_PG${PGCurrentVersion}</key>
                            <name>Location</name>
                            <variable>installdir</variable>
                        </registryGet>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${SlonyVersion)</text>
                            <value/>
                        </compareText>
                        <compareText>
                            <logic>equals</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                        <compareValues>
                            <logic>equals</logic>
                            <value1>${SlonyMajorVersion}</value1>
                            <value2>${SlonyMajorVersionInstalled}</value2>
                        </compareValues>
                    </ruleList>
                </actionGroup>

                <!-- Exit the installation if the Slony version installed is not the same as the current Version -->
                <actionGroup>
                    <actionList>
                        <showWarning>
                            <text>${msg(slony.incompatible.install.error)}</text>
                        </showWarning>
                        <exit>
                           <exitCode>0</exitCode>
                        </exit>
                    </actionList>
                    <ruleList>
                        <compareValues>
                            <logic>does_not_equal</logic>
                            <value1>${SlonyMajorVersion}</value1>
                            <value2>${SlonyMajorVersionInstalled}</value2>
                        </compareValues>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${SlonyMajorVersionInstalled}</text>
                            <value/>
                        </compareText>
                    </ruleList>
                </actionGroup>

                <!-- LIN | MAC : Exit the installation if the installdir is not valid (Unattended mode/Upgrade mode) -->
                <actionGroup>
                    <actionList>
                        <showWarning>
                            <text>${msg(slony.installdir.pgerror)}</text>
                        </showWarning>
                        <exit>
                           <exitCode>0</exitCode>
                        </exit>
                    </actionList>
                    <ruleList>
                        <fileTest>
                            <path>${installdir}/bin/pg_config</path>
                            <condition>not_exists</condition>
                        </fileTest>
                        <compareText>
                            <text>${platform_name}</text>
                            <logic>does_not_equal</logic>
                            <value>windows</value>
                        </compareText>
                        <ruleGroup>
                            <ruleEvaluationLogic>or</ruleEvaluationLogic>
                            <ruleList>   
                                <compareText>
                                    <logic>equals</logic>
                                    <text>${installer_ui}</text>
                                    <value>unattended</value>
                                </compareText>
                                <compareText>
                                    <logic>does_not_equal</logic>
                                    <text>${SlonyMajorVersionInstalled}</text>
                                    <value/>
                                </compareText>
                            </ruleList>   
                        </ruleGroup>
                    </ruleList>
                </actionGroup>

		<actionGroup>
		    <actionList>
			<logMessage text="Check if 32 bit Slony installer is being tried out aginst PG x64 bit. This condition will be hit in case of unattended mode and prefix specified"/>
			<registryGet>
			    <wowMode>64</wowMode>
			    <key>HKEY_LOCAL_MACHINE\SOFTWARE\PostgreSQL\Installations\postgresql-x64-PG_MAJOR_VERSION</key>
			    <name>Base Directory</name>
			    <variable>pginstalldir</variable>
			</registryGet>
			<throwError text="${msg(slony.incompatible.pg64.error)}">
			    <ruleList>
				<compareText>
				    <nocase>1</nocase>
				    <logic>equals</logic>
				    <text>${installdir}</text>
				    <value>${pginstalldir}</value>
				</compareText>
                                <compareText>
                                    <logic>equals</logic>
                                    <text>${installer_ui}</text>
                                    <value>unattended</value>
                                </compareText>
			    </ruleList>
			</throwError>
    		    </actionList>
                    <ruleList>
                        <compareText>
                            <text>${platform_name}</text>
                            <logic>equals</logic>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
		</actionGroup>

                <!-- WIN: Exit the installation if the installdir is not valid (Unattended mode/Upgrade mode) -->
                <actionGroup>
                    <actionList>
                        <showWarning>
                            <text>${msg(slony.installdir.pgerror)}</text>
                        </showWarning>
                        <exit>
                           <exitCode>0</exitCode>
                        </exit>
                    </actionList>
                    <ruleList>
                        <fileTest>
                            <path>${installdir}\bin\pg_config.exe</path>
                            <condition>not_exists</condition>
                        </fileTest>
                        <compareText>
                            <text>${platform_name}</text>
                            <logic>equals</logic>
                            <value>windows</value>
                        </compareText>
                        <ruleGroup>
                            <ruleEvaluationLogic>or</ruleEvaluationLogic>
                            <ruleList>   
                                <compareText>
                                    <logic>equals</logic>
                                    <text>${installer_ui}</text>
                                    <value>unattended</value>
                                </compareText>
                                <compareText>
                                    <logic>does_not_equal</logic>
                                    <text>${SlonyMajorVersionInstalled}</text>
                                    <value/>
                                </compareText>
                            </ruleList>   
                        </ruleGroup>
                    </ruleList>
                </actionGroup>

                <!-- Exits the installation if the postgresql version is not compatible with slony version (Unattended mode) -->
                <actionGroup>
                    <actionList>
                         <setInstallerVariableFromScriptOutput>
                            <name>pg_version_str</name>
                            <exec>${installdir}/bin/pg_config</exec>
                            <execArgs>--version</execArgs>
                            <workingDirectory>${installdir}/bin</workingDirectory>
                            <ruleList>
                               <compareText>
                                  <text>${platform_name}</text>
                                  <logic>does_not_equal</logic>
                                  <value>windows</value>
                               </compareText>
                            </ruleList>
                        </setInstallerVariableFromScriptOutput>
                        <setInstallerVariableFromScriptOutput>
                            <name>pg_version_str</name>
                            <exec>${installdir}\bin\pg_config.exe</exec>
                            <execArgs>--version</execArgs>
                            <workingDirectory>${installdir}\bin</workingDirectory>
                            <ruleList>
                               <compareText>
                                  <text>${platform_name}</text>
                                  <logic>equals</logic>
                                  <value>windows</value>
                               </compareText>
                            </ruleList>
                        </setInstallerVariableFromScriptOutput>
                        <setInstallerVariableFromRegEx>
                              <name>pg_version</name>
                              <text>${pg_version_str}</text>
                              <pattern>^PostgreSQL ([0-9].[0-9]).?[\w]*$</pattern>
                              <substitution>\1</substitution>
                              <ruleList>
                                 <compareText>
                                     <logic>does_not_equal</logic>
                                     <text>${pg_version_str}</text>
                                     <value/>
                                </compareText>
                              </ruleList>
                        </setInstallerVariableFromRegEx>
                        <showWarning>
                            <text>${msg(slony.incompatible.pg.error)}</text>
                            <ruleList>
                              <compareText>
                                  <logic>does_not_equal</logic>
                                  <text>${pg_version}</text>
                                   <value>PG_MAJOR_VERSION</value>
                              </compareText>
                           </ruleList>
                        </showWarning>
                        <exit>
                           <exitCode>0</exitCode>
                           <ruleList>
                              <compareText>
                                  <logic>does_not_equal</logic>
                                  <text>${pg_version}</text>
                                   <value>PG_MAJOR_VERSION</value>
                              </compareText>
                           </ruleList>
                        </exit>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>${installer_ui}</text>
                            <value>unattended</value>
                        </compareText>
                    </ruleList>
                </actionGroup>

                <!-- Setting the installation type as upgrade if previous installation found -->
                <actionGroup>
                    <actionList>
                        <setInstallerVariable name="installationType" value="upgrade"/>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${SlonyVersion}</text>
                            <value/>
                        </compareText>
                        <compareValues>
                            <logic>equals</logic>
                            <value1>${SlonyMajorVersion}</value1>
                            <value2>${SlonyMajorVersionInstalled}</value2>
                        </compareValues>
                    </ruleList>
                </actionGroup>
            </actionList>
            <ruleList>
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </actionGroup>
    </preInstallationActionList>

    <!-- Post installation actions -->
    <postInstallationActionList>

        <!-- Do not perform these actions with extract-only mode -->
        <actionGroup>
            <actionList>

                <!-- LIN & MAC: Write the Slony Version to INI File -->
                <actionGroup>
                    <actionList>
                        <iniFileSet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>Slony_I_PG${PGCurrentVersion}</section>
                            <key>Description</key>
                            <value>${msg(install.summary)}</value>
                        </iniFileSet>
                        <iniFileSet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>Slony_I_PG${PGCurrentVersion}</section>
                            <key>InstallationDirectory</key>
                            <value>${installdir}</value>
                        </iniFileSet>
                        <iniFileSet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>Slony_I_PG${PGCurrentVersion}</section>
                            <key>Version</key>
                            <value>${product_version}</value>
                        </iniFileSet>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <text>${platform_name}</text>
                            <logic>does_not_equal</logic>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </actionGroup>
        
                <!-- LIN & MAC: Create Menu Shortcuts -->
                <actionGroup>
                    <actionList>
                        <runProgram>
                            <program>${installdir}/Slony/installer/Slony/createshortcuts.sh</program>
                            <programArguments>"${installdir}" "${PGMajorVersion}" "${productVersion}" "${branding}"</programArguments>
                            <progressText>${msg(progress.text.creating.shortcuts)}</progressText>
                            <abortOnError>0</abortOnError>
                            <showMessageOnError>0</showMessageOnError>
                        </runProgram>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </actionGroup>
        
                <!-- LIN & MAC: Configure Slony -->
                <actionGroup>
                    <actionList>
                        <runProgram>
                            <program>${installdir}/Slony/installer/Slony/configureslony.sh</program>
                            <programArguments>"${installdir}"</programArguments>
                            <abortOnError>0</abortOnError>
                            <showMessageOnError>0</showMessageOnError>
                        </runProgram>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </actionGroup>
        
                <setInstallerVariableFromScriptOutput>
                    <name>pg_pkglibdir_str</name>
                    <exec>${installdir}\bin\pg_config.exe</exec>
                    <execArgs>--pkglibdir</execArgs>
                    <workingDirectory>${installdir}\bin</workingDirectory>
                    <ruleList>
                        <compareText>
                            <text>${platform_name}</text>
                            <logic>equals</logic>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </setInstallerVariableFromScriptOutput>
        
                <setInstallerVariableFromScriptOutput>
                    <name>pg_sharedir_str</name>
                    <exec>${installdir}\bin\pg_config.exe</exec>
                    <execArgs>--sharedir</execArgs>
                    <workingDirectory>${installdir}\bin</workingDirectory>
                    <ruleList>
                        <compareText>
                            <text>${platform_name}</text>
                            <logic>equals</logic>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </setInstallerVariableFromScriptOutput>
        
                <setInstallerVariableFromRegEx>
                    <name>pg_pkglibdir</name>
                    <text>${pg_pkglibdir_str}</text>
                    <pattern>/</pattern>
                    <substitution>\</substitution>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${pg_pkglibdir_str}</text>
                            <value/>
                        </compareText>
                    </ruleList>
                </setInstallerVariableFromRegEx>
        
                <setInstallerVariableFromRegEx>
                    <name>pg_sharedir</name>
                    <text>${pg_sharedir_str}</text>
                    <pattern>/</pattern>
                    <substitution>\</substitution>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${pg_sharedir_str}</text>
                            <value/>
                        </compareText>
                    </ruleList>
                </setInstallerVariableFromRegEx>
        
                <substitute>
                     <files>${installdir}\Slony\installer\Slony\configureslony.bat</files>
                     <substitutionList>
                        <substitution>
                           <pattern>@@PKG_LIBDIR@@</pattern>
                           <value>${pg_pkglibdir}</value>
                        </substitution>
                        <substitution>
                           <pattern>@@SHARE_DIR@@</pattern>
                           <value>${pg_sharedir}</value>
                        </substitution>
                     </substitutionList>
                     <ruleList>
                         <compareText>
                             <logic>equals</logic>
                             <text>${platform_name}</text>
                             <value>windows</value>
                         </compareText>
                     </ruleList>
                </substitute>
        
                <!-- WIN: Configure Slony -->
                <actionGroup>
                    <actionList>
                        <runProgram>
                            <program>${installdir}\Slony\installer\Slony\configureslony.bat</program>
                            <programArguments>"${installdir}"</programArguments>
                            <abortOnError>0</abortOnError>
                            <showMessageOnError>1</showMessageOnError>
                        </runProgram>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </actionGroup>
        
                <substitute>
                     <files>${installdir}\Slony\installer\Slony\removeFiles.bat</files>
                     <substitutionList>
                        <substitution>
                           <pattern>"</pattern>
                           <value></value>
                        </substitution>
                     </substitutionList>
                     <ruleList>
                         <compareText>
                             <logic>equals</logic>
                             <text>${platform_name}</text>
                             <value>windows</value>
                         </compareText>
                     </ruleList>
                </substitute>
        
                <!-- Branding info -->
                <logMessage>
                    <text>Write the branding to the ini file...</text>
                </logMessage>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>Slony_I_PG${PGCurrentVersion}</section>
                    <key>Branding</key>
                    <value>${branding}</value>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </iniFileSet>
                <registrySet>
                    <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Slony_I_PG${PGCurrentVersion}</key>
                    <name>Branding</name>
                    <value>${branding}</value>
                </registrySet>
            </actionList>
            <ruleList>
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </actionGroup>
    </postInstallationActionList>

    <!-- preUninstallation actions -->
    <preUninstallationActionList>

        <!-- Abort uninstallation if not super-user/Administrator -->
        <actionGroup>
            <actionList>
                <showWarning text="${msg(Installer.Warning.UninstallerAdministratorPrivileges)}"/>
                <exit/>
            </actionList>
            <ruleList>
                <isFalse value="${installer_is_root_install}"/>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>
        <actionGroup>
            <actionList>
                <showWarning text="${msg(Installer.Warning.UninstallerRootPrivileges)}"/>
                <exit/>
            </actionList>
            <ruleList>
                <isFalse value="${installer_is_root_install}"/>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>

        <!-- Set the PG Current version(if exists) -->
        <setInstallerVariable name="PGCurrentVersion" value="PG_CURRENT_VERSION">
            <persist>1</persist>
        </setInstallerVariable>

        <!-- LIN & MAC: Unsetting the Slony values in the ini file -->
        <actionGroup>
            <actionList>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>Slony_I_PG${PGCurrentVersion}</section>
                    <key>Description</key>
                    <value/>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>Slony_I_PG${PGCurrentVersion}</section>
                    <key>InstallationDirectory</key>
                    <value/>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>Slony_I_PG${PGCurrentVersion}</section>
                    <key>Version</key>
                    <value/>
                </iniFileSet>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>

        <!-- LIN & LIN64: Remove Menu shortcuts -->
        <actionGroup>
            <actionList>
                <runProgram>
                    <program>${installdir}/Slony/installer/Slony/removeshortcuts.sh</program>
                    <programArguments>"${installdir}" "${productVersion}" "${PGMajorVersion}" "${branding}"</programArguments>
                    <workingDirectory>${installdir}/Slony/installer/Slony</workingDirectory>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </actionGroup>

        <!-- MAC : Remove Menu shortcuts -->
        <actionGroup>
            <actionList>
                <deleteFile>
                    <path>/Applications/${branding}/Slony Documentation.app</path>
                </deleteFile>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </actionGroup>

        <!-- LIN & MAC: Deleting library files we copied to other place while installation -->
        <actionGroup>
            <actionList>
                <runProgram>
                    <program>${installdir}/Slony/installer/Slony/removeFiles.sh</program>
                    <programArguments>"${installdir}"</programArguments>
                </runProgram>

                <!-- Deleting the file created during installation -->
                <deleteFile>
                    <path>${installdir}/Slony/installer/Slony/removeFiles.sh</path>
                    <ruleList>
                        <fileExists>
                            <path>${installdir}/Slony/installer/Slony/removeFiles.sh</path>
                        </fileExists>
                    </ruleList>
                </deleteFile>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>

        <!-- WIN: Deleting library files we copied to other place while installation -->
        <actionGroup>
            <actionList>
                <runProgram>
                    <program>${installdir}\Slony\installer\Slony\removeFiles.bat</program>
                    <programArguments>"${installdir}"</programArguments>
                </runProgram>

                <!-- Deleting the file created during installation -->
                <deleteFile>
                    <path>${installdir}\Slony\installer\Slony\removeFiles.bat</path>
                    <ruleList>
                        <fileExists>
                            <path>${installdir}\Slony\installer\Slony\removeFiles.bat</path>
                        </fileExists>
                    </ruleList>
                </deleteFile>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>

        <!-- Cleanup the branding info -->
        <iniFileSet>
            <file>/etc/postgres-reg.ini</file>
            <section>Slony_I_PG${PGCurrentVersion}</section>
            <key>Branding</key>
            <value></value>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </iniFileSet>
        <registryDelete>
            <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Slony_I_PG${PGCurrentVersion}</key>
            <name>Branding</name>
        </registryDelete>

    </preUninstallationActionList>

    <!-- Components -->
    <componentList>
        <component>
            <name>Slony</name>
            <description>Slony</description>
            <canBeEdited>0</canBeEdited>
            <selected>1</selected>
            <show>1</show>
            <folderList>
                <!-- WIN: Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/bin</destination>
                    <name>programfilesbinwindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/windows/bin/slon.exe</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/windows/bin/slonik.exe</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/windows/bin/pthreadGC2.dll</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/lib</destination>
                    <name>programfileslibwindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/windows/lib/slony1_funcs.dll</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/share</destination>
                    <name>programfilessharewindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/windows/Slony</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installation Files</description>
                    <destination>${installdir}/Slony</destination>
                    <name>installfileswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/windows/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Launch And Menu Scripts</description>
                    <destination>${installdir}/Slony</destination>
                    <name>menuandlaunchfileswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/windows/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <!-- LIN: Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/bin</destination>
                    <name>programfilesbinlinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/linux/bin/slon</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/linux/bin/slonik</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/linux/bin/slony_logshipper</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/lib</destination>
                    <name>programfilesliblinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/linux/lib/slony1_funcs.so</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/share</destination>
                    <name>programfilessharelinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux/Slony</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installation Files</description>
                    <destination>${installdir}/Slony</destination>
                    <name>installfileslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Launch And Menu Scripts</description>
                    <destination>${installdir}/Slony</destination>
                    <name>menuandlaunchfileslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <!-- LIN-X64: Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/bin</destination>
                    <name>programfilesbinlinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/linux-x64/bin/slon</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/linux-x64/bin/slonik</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/linux-x64/bin/slony_logshipper</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/lib</destination>
                    <name>programfilesliblinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/linux-x64/lib/slony1_funcs.so</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/share</destination>
                    <name>programfilessharelinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-x64/Slony</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installation Files</description>
                    <destination>${installdir}/Slony</destination>
                    <name>installfileslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-x64/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Launch And Menu Scripts</description>
                    <destination>${installdir}/Slony</destination>
                    <name>menuandlaunchfileslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-x64/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
               <!-- LIN-X64: Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/bin</destination>
                    <name>programfilesbinlinux-ppc64</name>
                    <platforms>linux-ppc</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/linux-ppc64/bin/slon</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/linux-ppc64/bin/slonik</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/linux-ppc64/bin/slony_logshipper</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/lib</destination>
                    <name>programfilesliblinux-ppc64</name>
                    <platforms>linux-ppc</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/linux-ppc64/lib/slony1_funcs.so</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/share</destination>
                    <name>programfilessharelinux-ppc64</name>
                    <platforms>linux-ppc</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-ppc64/Slony</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installation Files</description>
                    <destination>${installdir}/Slony</destination>
                    <name>installfileslinux-ppc64</name>
                    <platforms>linux-ppc</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-ppc64/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Launch And Menu Scripts</description>
                    <destination>${installdir}/Slony</destination>
                    <name>menuandlaunchfileslinux-ppc64</name>
                    <platforms>linux-ppc</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-ppc64/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <!-- MAC: Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/bin</destination>
                    <name>programfilesbinosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/osx/bin/slon</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/osx/bin/slonik</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/osx/bin/slony_logshipper</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/lib</destination>
                    <name>programfileslibosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/osx/lib/slony1_funcs.so</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/share</destination>
                    <name>programfilesshareosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/osx/Slony</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installation Files</description>
                    <destination>${installdir}/Slony</destination>
                    <name>installfilesosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/osx/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Launch And Menu Scripts</description>
                    <destination>${installdir}/Slony</destination>
                    <name>menuandlaunchfilesosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/osx/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
            </folderList>
            <!-- WIN: Start Menu -->
            <startMenuShortcutList>
                 <!-- Launch Slony -->
                 <startMenuLinkShortcut>
                    <comment>Slony Documentation</comment>
                    <name>Slony Documentation</name>
                    <runInTerminal>0</runInTerminal>
                    <url>http://www.slony.info/documentation/</url>
                    <windowsIcon>${installdir}\Slony\scripts\images\pg-launchSlonyDocs.ico</windowsIcon>
                    <ruleList>
                        <isTrue value="${admin_rights}"/>
                    </ruleList>
                 </startMenuLinkShortcut>
            </startMenuShortcutList>
        </component>
    </componentList>

    <parameterList>
        <booleanParameter name="extract_mode" cliOptionName="extract-only" default="0" ask="1" cliOptionShow="1"/>
        <booleanParameter name="admin_rights" cliOptionName="require-admin" default="0" ask="0" cliOptionShow="0"/>
        <stringParameter name="originalplatform" ask="0" cliOptionShow="0"/>
        <stringParameter name="branding" cliOptionName="branding" ask="0" cliOptionShow="0"/>

        <!-- Postgres Home Directory for CLI Option -->
        <directoryParameter>
            <name>pghome</name>
            <description>PostgreSQL Home Directory</description>
            <explanation/>
            <value/>
            <default>${installdir}</default>
            <allowEmptyValue>1</allowEmptyValue>
            <mustBeWritable>0</mustBeWritable>
            <mustExist>0</mustExist>
            <ask>0</ask>
            <width>40</width>
        </directoryParameter>

        <!-- Default Postgres Home for CLI Option -->
        <stringParameter>
            <name>defaultpghome</name>
            <description/>
            <explanation/>
            <value/>
            <default/>
            <ask>0</ask>
            <allowEmptyValue>1</allowEmptyValue>
            <width>40</width>
        </stringParameter>

        <!-- Install Directory -->
        <directoryParameter>
            <name>installdir</name>
            <description>Installer.Parameter.installdir.description</description>
            <explanation>Installer.Parameter.installdir.explanation</explanation>
            <value>${defaultpghome}</value>
            <default/>
            <allowEmptyValue>0</allowEmptyValue>
            <ask>yes</ask>
            <cliOptionName>prefix</cliOptionName>
            <mustBeWritable>yes</mustBeWritable>
            <mustExist>0</mustExist>
            <width>40</width>
            <ruleEvaluationLogic>OR</ruleEvaluationLogic>
            <ruleList>
                <compareText>
                    <text>${SlonyVersion}</text>
                    <logic>equals</logic>
                    <value/>
                </compareText>
                <compareValues>
                    <logic>does_not_equal</logic>
                    <value1>${SlonyMajorVersion}</value1>
                    <value2>${SlonyMajorVersionInstalled}</value2>
                </compareValues>
                <isTrue value="${extract_mode}"/>
            </ruleList>

            <!-- Validating whether installdir is empty -->
            <validationActionList>
                <actionGroup>
                    <actionList>
                        <setInstallerVariable name="installdir" value="${defaultpghome}" />
                        <throwError>
                            <text>${msg(slony.installdir.empty)}</text>
                        </throwError>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <text>${installdir}</text>
                            <logic>equals</logic>
                            <value/>
                        </compareText>
                        <isFalse value="${extract_mode}"/>
                    </ruleList>
                </actionGroup>
            </validationActionList>
            <validationActionList>
                <!-- Validating whether installdir contains whitespaces (Linux) -->
                <actionGroup>
                   <actionList>
                       <setInstallerVariable name="installdir" value="${default_installdir}" />
                       <showWarning>
                          <text>${msg(slony.installdir.error)}</text>
                       </showWarning>
                       <setInstallerVariable name="next_page" value="installdir"/>
                   </actionList>
                   <ruleList>
                     <regExMatch>
                         <text>${installdir}</text>
                         <logic>does_not_match</logic>
                         <pattern>^/([0-9a-zA-Z_/\.\-]*)$</pattern>
                     </regExMatch>
                     <compareText>
                         <text>${platform_name}</text>
                         <logic>does_not_equal</logic>
                         <value>windows</value>
                     </compareText>
                  </ruleList>
                </actionGroup>

                <!-- Validating whether installdir is valid (Windows) -->
                <actionGroup>
                   <actionList>
                       <setInstallerVariable name="installdir" value="${default_installdir}" />
                       <showWarning>
                          <text>${msg(slony.installdir.error)}</text>
                       </showWarning>
                       <setInstallerVariable name="next_page" value="installdir"/>
                   </actionList>
                   <ruleList>
                     <regExMatch>
                         <text>${installdir}</text>
                         <logic>does_not_match</logic>
                         <pattern>^([a-zA-Z]:)\\([0-9a-zA-Z_\\\s\.\-\(\)]*)$</pattern>
                     </regExMatch>
                     <compareText>
                         <text>${platform_name}</text>
                         <logic>equals</logic>
                         <value>windows</value>
                     </compareText>
                  </ruleList>
                </actionGroup>
            </validationActionList>

            <validationActionList>
                <actionGroup>
                    <actionList>
                        <setInstallerVariable name="installdir" value="${defaultpghome}" />
                        <throwError>
                            <text>${msg(slony.installdir.pgerror)}</text>
                        </throwError>
                    </actionList>
                    <ruleList>
                        <fileTest>
                           <path>${installdir}/bin/pg_config</path>
                           <condition>not_exists</condition>
                        </fileTest>
                        <compareText>
                           <text>${platform_name}</text>
                           <logic>does_not_equal</logic>
                           <value>windows</value>
                        </compareText>
                        <isFalse value="${extract_mode}"/>
                    </ruleList>
                </actionGroup>
                <actionGroup>
                    <actionList>
                        <setInstallerVariable name="installdir" value="${defaultpghome}" />
                        <throwError>
                            <text>${msg(slony.installdir.pgerror)}</text>
                        </throwError>
                    </actionList>
                    <ruleList>
                        <fileTest>
                           <path>${installdir}\bin\pg_config.exe</path>
                           <condition>not_exists</condition>
                        </fileTest>
                        <compareText>
                           <text>${platform_name}</text>
                           <logic>equals</logic>
                           <value>windows</value>
                        </compareText>
                        <isFalse value="${extract_mode}"/>
                    </ruleList>
                </actionGroup>
            </validationActionList>
            <validationActionList>
                <actionGroup>
                    <actionList>
                        <setInstallerVariableFromScriptOutput>
                            <name>pg_version_str</name>
                            <exec>${installdir}/bin/pg_config</exec>
                            <execArgs>--version</execArgs>
                            <workingDirectory>${installdir}/bin</workingDirectory>
                            <ruleList>
                                <compareText>
                                   <text>${platform_name}</text>
                                   <logic>does_not_equal</logic>
                                   <value>windows</value>
                                </compareText>
                            </ruleList>
                        </setInstallerVariableFromScriptOutput>
                        <setInstallerVariableFromScriptOutput>
                            <name>pg_version_str</name>
                            <exec>${installdir}\bin\pg_config.exe</exec>
                            <execArgs>--version</execArgs>
                            <workingDirectory>${installdir}\bin</workingDirectory>
                            <ruleList>
                                <compareText>
                                   <text>${platform_name}</text>
                                   <logic>equals</logic>
                                   <value>windows</value>
                                </compareText>
                            </ruleList>
                        </setInstallerVariableFromScriptOutput>
                        <setInstallerVariableFromRegEx>
                              <name>pg_version</name>
                              <text>${pg_version_str}</text>
                              <pattern>^PostgreSQL ([0-9].[0-9]).?[\w]*$</pattern>
                              <substitution>\1</substitution>
                              <ruleList>
                                 <compareText>
                                     <logic>does_not_equal</logic>
                                     <text>${pg_version_str}</text>
                                     <value/>
                                </compareText>
                              </ruleList>
                        </setInstallerVariableFromRegEx>
                    </actionList>
                    <ruleList>
                        <isFalse value="${extract_mode}"/>
                    </ruleList>
                </actionGroup>
            </validationActionList>
            <validationActionList>
                <actionGroup>
                    <actionList>
                        <setInstallerVariable name="installdir" value="${defaultpghome}" />
                        <showWarning>
                            <text>${msg(slony.incompatible.pg.error)}</text>
                        </showWarning>
                        <setInstallerVariable name="next_page" value="installdir"/>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${pg_version}</text>
                            <value>PG_MAJOR_VERSION</value>
                        </compareText>
                        <isFalse value="${extract_mode}"/>
                    </ruleList>
                </actionGroup>
            </validationActionList>

           <!-- Check if 32 bit Slony installer is being tried out aginst PG x64 bit -->
            <validationActionList>
               <actionGroup>   
                   <actionList>
                       <registryGet>
                           <wowMode>64</wowMode>
                           <key>HKEY_LOCAL_MACHINE\SOFTWARE\PostgreSQL\Installations\postgresql-x64-PG_MAJOR_VERSION</key>
                           <name>Base Directory</name>
                           <variable>pginstalldir</variable>
                       </registryGet>
                   </actionList>
               </actionGroup>
                <actionGroup>
                    <actionList>
                        <setInstallerVariable name="installdir" value="${defaultpghome}" />
                       <showWarning>
                            <text>${msg(slony.incompatible.pg64.error)}</text>
                        </showWarning>
                        <setInstallerVariable name="next_page" value="installdir"/>
                    </actionList>
                    <ruleList>
                        <compareText>
			    <nocase>1</nocase>
                            <logic>equals</logic>
                            <text>${installdir}</text>
                            <value>${pginstalldir}</value>
                        </compareText>
                        <isFalse value="${extract_mode}"/>
                    </ruleList>
                </actionGroup>
            </validationActionList>
        </directoryParameter>
        <!-- Explain that we're using an existing installation directory -->
        <labelParameter>
            <name>upgrade</name>
            <title>${msg(upgrade.existing.installation.title)}</title>
            <description>${msg(upgrade.existing.installation.description)}</description>
            <ruleList>
                <compareText>
                    <text>${SlonyVersion}</text>
                    <logic>does_not_equal</logic>
                    <value/>
                </compareText>
                <compareValues>
                    <logic>equals</logic>
                    <value1>${SlonyMajorVersion}</value1>
                    <value2>${SlonyMajorVersionInstalled}</value2>
                </compareValues>
            </ruleList>
        </labelParameter>
    </parameterList>
</project>
