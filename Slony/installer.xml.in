<project>
    <!-- Package details -->
    <shortName>slony</shortName>
    <fullName>Slony</fullName>
    <version>PG_VERSION_SLONY</version>
    <!-- These options are used on Windows -->
    <startMenuGroupName>PostgreSQL</startMenuGroupName>
    <!-- Product Specific Options -->
    <productDisplayName>${product_fullname} ${product_version}</productDisplayName>
    <productComments>${product_fullname} ${product_version}, packaged by EnterpriseDB</productComments>
    <productUrlHelpLink>http://www.enterprisedb.com</productUrlHelpLink>
    <productUrlInfoAbout>http://www.enterprisedb.com</productUrlInfoAbout>
    <!-- The options are used for RPM registration -->
    <description>${product_fullname} ${product_version}, packaged by EnterpriseDB</description>
    <summary>${msg(install.summary)}</summary>
    <vendor>EnterpriseDB</vendor>
    <release>1</release>
    <!-- Installer Size -->
    <width>550</width>
    <height>400</height>

    <!-- Misc package options -->
    <installerFilename>slony-pgPG_CURRENT_VERSION-${product_version}-PG_BUILDNUM_SLONY-${platform_name}.${platform_exec_suffix}</installerFilename>
    <enableRollback>0</enableRollback>
    <requireInstallationByRootUser>1</requireInstallationByRootUser>
    <saveRelativePaths>1</saveRelativePaths>
    <outputDirectory>../output</outputDirectory>
    <uninstallerDirectory>${installdir}/Slony</uninstallerDirectory>
    <uninstallerName>uninstall-${product_shortname}</uninstallerName>
    <unattendedModeUI>minimal</unattendedModeUI>
    <compressionAlgorithm>lzma</compressionAlgorithm>
    <installationLogFile>${system_temp_directory}/install-${product_shortname}.log</installationLogFile>

    <!-- Images -->
    <disableSplashScreen>1</disableSplashScreen>
    <leftImage>../resources/pg-side.png</leftImage>

    <!-- i18n files for the UI -->
    <customLanguageFileList>
        <language>
            <code>en</code>
            <encoding>iso8859-1</encoding>
            <file>i18n/en.lng</file>
        </language>
    </customLanguageFileList>
    <!-- Prebuild Actons-->
    <preBuildActionList>
      <setInstallerVariable name="originalplatform" value="${platform_name}"/>
      <setInstallerVariable name="originalplatform" value="linux-x32">
          <ruleList>
              <compareText text="${platform_name}" value="linux"/>
          </ruleList>
      </setInstallerVariable>
    </preBuildActionList>
    <!-- Initialisation actions -->
    <initializationActionList>
	<!-- Abort Installation as trying to  run a 32-bit installer on 64-bit machine -->
        <throwError>
          <customErrorMessage>${msg(platform.not.match)}</customErrorMessage>
          <text>Unknown Error</text>
          <ruleList>
            <platformTest type="linux-x64"/>
            <compareText text="${originalplatform}" value="linux-x32"/>
          </ruleList>
        </throwError>
        <!-- Set the Slony version(if exists) -->
        <setInstallerVariable name="SlonyVersion" value="">
            <persist>0</persist>
        </setInstallerVariable>
        <setInstallerVariable name="SlonyMajorVersion" value="SLONY_MAJOR_VERSION">
            <persist>0</persist>
        </setInstallerVariable>
        <!-- Set the PG Current version(if exists) -->
        <setInstallerVariable name="PGCurrentVersion" value="PG_CURRENT_VERSION">
            <persist>1</persist>
        </setInstallerVariable>
        <!-- Set the PG Major Version -->
        <setInstallerVariable name="PGMajorVersion" value="PG_MAJOR_VERSION">
            <persist>1</persist>
        </setInstallerVariable>
        <!-- WIN: Set the    pghome default value for unattended mode -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="defaultpghome" value="${env(SYSTEMDIR)}\Program Files\PostgreSQL\8.3"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${installer_ui}</text>
                    <value>unattended</value>
                </compareText>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
        <!-- LIN & LIN64: Set the pghome default value for unattended mode -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="defaultpghome" value="/opt/PostgreSQL/8.3"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${installer_ui}</text>
                    <value>unattended</value>
                </compareText>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </actionGroup>
        <!-- MAC: Set the    pghome default value for unattended mode -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="defaultpghome" value="/Library/PostgreSQL/8.3"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${installer_ui}</text>
                    <value>unattended</value>
                </compareText>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </actionGroup>
    </initializationActionList>
    <!-- Preinstallation actions -->
    <preInstallationActionList>
        <!-- Creates the ini file if not exits -->
        <touchFile path="/etc/postgres-reg.ini">
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </touchFile>
        <setInstallerVariable name="defaultpghome" value="${pghome}"/>
        <!-- WIN: Set the    pghome default value when pghome not set -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="defaultpghome" value="${env(SYSTEMDIR)}\Program Files\PostgreSQL\8.3"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${pghome}</text>
                    <value/>
                </compareText>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
        <!-- LIN & LIN64: Set the pghome default value when pghome not set -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="defaultpghome" value="/opt/PostgreSQL/8.3"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${pghome}</text>
                    <value/>
                </compareText>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </actionGroup>
        <!-- MAC: Set the    pghome default value when pghome not set -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="defaultpghome" value="/Library/PostgreSQL/8.3"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${pghome}</text>
                    <value/>
                </compareText>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </actionGroup>
        <!-- WIN: Check Previous Installation of Slony -->
        <actionGroup>
            <actionList>
                <registryGet>
                    <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Slony_I_PG${PGCurrentVersion}</key>
                    <name>Version</name>
                    <variable>SlonyVersion</variable>
                </registryGet>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
        <!-- WIN: Set installation directory in case of reinstall/upgrade -->
        <actionGroup>
            <actionList>
                <registryGet>
                    <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Slony_I_PG${PGCurrentVersion}</key>
                    <name>Location</name>
                    <variable>installdir</variable>
                </registryGet>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${SlonyVersion)</text>
                    <value/>
                </compareText>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
        <!-- LIN & MAC: Check Previous Installation of Slony -->
        <actionGroup>
            <actionList>
                <iniFileGet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>Slony_I_PG${PGCurrentVersion}</section>
                    <key>Version</key>
                    <variable>SlonyVersion</variable>
                </iniFileGet>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
        <setInstallerVariableFromRegEx>
            <name>SlonyMajorVersionInstalled</name>
            <text>${SlonyVersion}</text>
            <pattern>^([0-9]*.[0-9]*).(.*)$</pattern>
            <substitution>\1</substitution>
            <ruleList>
               <compareText>
                   <logic>does_not_equal</logic>
                   <text>${SlonyVersion}</text>
                   <value/>
               </compareText>
            </ruleList>
        </setInstallerVariableFromRegEx>
        <!-- LIN & MAC: Set installation directory in case of reinstall/upgrade -->
        <actionGroup>
            <actionList>
                <iniFileGet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>Slony_I_PG${PGCurrentVersion}</section>
                    <key>InstallationDirectory</key>
                    <variable>installdir</variable>
                </iniFileGet>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${SlonyVersion}</text>
                    <value/>
                </compareText>
                <compareValues>
                    <logic>equals</logic>
                    <value1>${SlonyMajorVersion}</value1>
                    <value2>${SlonyMajorVersionInstalled}</value2>
                </compareValues>
            </ruleList>
        </actionGroup>
        <!-- Setting the installation type as upgrade if previous installation found -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="installationType" value="upgrade"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${SlonyVersion}</text>
                    <value/>
                </compareText>
                <compareValues>
                    <logic>equals</logic>
                    <value1>${SlonyMajorVersion}</value1>
                    <value2>${SlonyMajorVersionInstalled}</value2>
                </compareValues>
            </ruleList>
        </actionGroup>
    </preInstallationActionList>
    <!-- Post installation actions -->
    <postInstallationActionList>
        <!-- LIN & MAC: Write the Slony Version to INI File -->
        <actionGroup>
            <actionList>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>Slony_I_PG${PGCurrentVersion}</section>
                    <key>Description</key>
                    <value>${msg(install.summary)}</value>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>Slony_I_PG${PGCurrentVersion}</section>
                    <key>InstallationDirectory</key>
                    <value>${installdir}</value>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>Slony_I_PG${PGCurrentVersion}</section>
                    <key>Version</key>
                    <value>${product_version}</value>
                </iniFileSet>
            </actionList>
            <ruleList>
                <compareText>
                    <text>${platform_name}</text>
                    <logic>does_not_equal</logic>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
        <!-- LIN & MAC: Create Menu Shortcuts -->
        <actionGroup>
            <actionList>
                <runProgram>
                    <program>${installdir}/Slony/installer/Slony/createshortcuts.sh</program>
                    <programArguments>"${installdir}" "${PGMajorVersion}" "${product_version}" </programArguments>
                    <progressText>${msg(progress.text.creating.shortcuts)}</progressText>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
        <!-- LIN & MAC: Configure Slony -->
        <actionGroup>
            <actionList>
                <runProgram>
                    <program>${installdir}/Slony/installer/Slony/configureslony.sh</program>
                    <programArguments>"${installdir}"</programArguments>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${SlonyVersion}</text>
                    <value/>
                </compareText>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
    </postInstallationActionList>
    <!-- preUninstallation actions -->
    <preUninstallationActionList>
        <!-- Set the PG Current version(if exists) -->
        <setInstallerVariable name="PGCurrentVersion" value="PG_CURRENT_VERSION">
            <persist>1</persist>
        </setInstallerVariable>
        <!-- LIN & MAC: Unsetting the Slony values in the ini file -->
        <actionGroup>
            <actionList>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>Slony_I_PG${PGCurrentVersion}</section>
                    <key>Description</key>
                    <value/>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>Slony_I_PG${PGCurrentVersion}</section>
                    <key>InstallationDirectory</key>
                    <value/>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>Slony_I_PG${PGCurrentVersion}</section>
                    <key>Version</key>
                    <value/>
                </iniFileSet>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
        <!-- LIN & LIN64: Remove Menu shortcuts -->
        <actionGroup>
            <actionList>
                <runProgram>
                    <program>${installdir}/Slony/installer/Slony/removeshortcuts.sh</program>
                    <programArguments>"${installdir}" "${product_version}" </programArguments>
                    <workingDirectory>${installdir}/Slony/installer/Slony</workingDirectory>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </actionGroup>
        <!-- MAC : Remove Menu shortcuts -->
        <actionGroup>
            <actionList>
                <deleteFile>
                    <path>/Applications/PostgreSQL PG_MAJOR_VERSION/Slony Documentation.app</path>
                </deleteFile>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </actionGroup>
        <!-- LIN & MAC: Deleting library files we copied to other place while installation -->
        <actionGroup>
            <actionList>
                <runProgram>
                    <program>${installdir}/Slony/installer/Slony/removeFiles.sh</program>
                    <programArguments>"${installdir}"</programArguments>
                </runProgram>
                <!-- Deleting the file created during installation -->
                <deleteFile>
                    <path>${installdir}/Slony/installer/Slony/removeFiles.sh</path>
                    <ruleList>
                        <fileExists>
                            <path>${installdir}/Slony/installer/Slony/removeFiles.sh</path>
                        </fileExists>
                    </ruleList>
                </deleteFile>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
    </preUninstallationActionList>
    <!-- Components -->
    <componentList>
        <component>
            <name>Slony</name>
            <description>Slony</description>
            <canBeEdited>0</canBeEdited>
            <selected>1</selected>
            <show>1</show>
            <folderList>
                <!-- LIN: Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/bin</destination>
                    <name>programfilesbinlinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/linux/bin/slon</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/linux/bin/slonik</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/linux/bin/slony_logshipper</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/lib</destination>
                    <name>programfilesliblinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/linux/lib/slony1_funcs.so</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/linux/lib/xxid.so</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/share</destination>
                    <name>programfilessharelinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux/Slony</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installation Files</description>
                    <destination>${installdir}/Slony</destination>
                    <name>installfileslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Launch And Menu Scripts</description>
                    <destination>${installdir}/Slony</destination>
                    <name>menuandlaunchfileslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <!-- LIN-X64: Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/bin</destination>
                    <name>programfilesbinlinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/linux-x64/bin/slon</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/linux-x64/bin/slonik</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/linux-x64/bin/slony_logshipper</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/lib</destination>
                    <name>programfilesliblinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/linux-x64/lib/slony1_funcs.so</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/linux-x64/lib/xxid.so</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/share</destination>
                    <name>programfilessharelinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-x64/Slony</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installation Files</description>
                    <destination>${installdir}/Slony</destination>
                    <name>installfileslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-x64/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Launch And Menu Scripts</description>
                    <destination>${installdir}/Slony</destination>
                    <name>menuandlaunchfileslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-x64/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <!-- MAC: Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/bin</destination>
                    <name>programfilesbinosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/osx/bin/slon</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/osx/bin/slonik</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/osx/bin/slony_logshipper</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/lib</destination>
                    <name>programfileslibosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/osx/lib/slony1_funcs.so</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/osx/lib/xxid.so</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/share</destination>
                    <name>programfilesshareosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/osx/Slony</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installation Files</description>
                    <destination>${installdir}/Slony</destination>
                    <name>installfilesosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/osx/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Launch And Menu Scripts</description>
                    <destination>${installdir}/Slony</destination>
                    <name>menuandlaunchfilesosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/osx/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
            </folderList>
        </component>
    </componentList>
    <parameterList>
	<stringParameter name="originalplatform" ask="0" cliOptionShow="0"/>
        <!-- Postgres Home Directory for CLI Option -->
        <directoryParameter>
            <name>pghome</name>
            <description>PostgreSQL Home Directory</description>
            <explanation/>
            <value/>
            <default>${installdir}</default>
            <allowEmptyValue>1</allowEmptyValue>
            <mustBeWritable>0</mustBeWritable>
            <mustExist>0</mustExist>
            <ask>0</ask>
            <width>40</width>
        </directoryParameter>
        <!-- Default Postgres Home for CLI Option -->
        <stringParameter>
            <name>defaultpghome</name>
            <description/>
            <explanation/>
            <value/>
            <default/>
            <ask>0</ask>
            <allowEmptyValue>1</allowEmptyValue>
            <width>40</width>
        </stringParameter>
        <!-- Install Directory -->
        <directoryParameter>
            <name>installdir</name>
            <description>Installer.Parameter.installdir.description</description>
            <explanation>Installer.Parameter.installdir.explanation</explanation>
            <value/>
            <default>${defaultpghome}</default>
            <allowEmptyValue>0</allowEmptyValue>
            <ask>yes</ask>
            <cliOptionName>prefix</cliOptionName>
            <mustBeWritable>yes</mustBeWritable>
            <mustExist>0</mustExist>
            <width>40</width>
            <ruleEvaluationLogic>OR</ruleEvaluationLogic>
            <ruleList>
                <compareText>
                    <text>${SlonyVersion}</text>
                    <logic>equals</logic>
                    <value/>
                </compareText>
                <compareValues>
                    <logic>does_not_equal</logic>
                    <value1>${SlonyMajorVersion}</value1>
                    <value2>${SlonyMajorVersionInstalled}</value2>
                </compareValues>
            </ruleList>
            <!-- Validating whether installdir contains whitespaces (Linux) -->
            <validationActionList>
                <actionGroup>
                    <actionList>
                        <throwError>
                            <text>${msg(slony.installdir.error)}</text>
                        </throwError>
                    </actionList>
                    <ruleList>
                        <regExMatch>
                            <text>${installdir}</text>
                            <logic>matches</logic>
                            <pattern>^.*\s.*$</pattern>
                        </regExMatch>
                        <compareText>
                            <text>${platform_name}</text>
                            <logic>does_not_equal</logic>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </actionGroup>
            </validationActionList>
            <validationActionList>
                <actionGroup>
                    <actionList>
                        <throwError>
                            <text>${msg(slony.installdir.pgerror)}</text>
                        </throwError>
                    </actionList>
                    <ruleList>
                        <fileTest>
                            <path>${installdir}/bin/psql</path>
                            <condition>not_exists</condition>
                        </fileTest>
                        <fileTest>
                            <path>${installdir}/bin/postgres</path>
                            <condition>not_exists</condition>
                        </fileTest>
                        <compareText>
                            <text>${platform_name}</text>
                            <logic>does_not_equal</logic>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </actionGroup>
            </validationActionList>
            <validationActionList>
            <createDirectory path="${system_temp_directory}/${product_fullname}" />
                <unpackFile>
                    <component>Slony</component>
                    <destination>${system_temp_directory}/${product_fullname}/check-pgversion.sh</destination>
                    <folder>installfilesosx</folder>
                    <origin>installer/Slony/check-pgversion.sh</origin>
                    <ruleList>
                        <compareText>
                           <text>${platform_name}</text>
                           <logic>equals</logic>
                           <value>osx</value>
                        </compareText>
                    </ruleList>
                </unpackFile>
                <unpackFile>
                    <component>Slony</component>
                    <destination>${system_temp_directory}/${product_fullname}/check-pgversion.sh</destination>
                    <folder>installfileslinux</folder>
                    <origin>installer/Slony/check-pgversion.sh</origin>
                    <ruleList>
                        <compareText>
                           <text>${platform_name}</text>
                           <logic>equals</logic>
                           <value>linux</value>
                        </compareText>
                    </ruleList>
                </unpackFile>
                <unpackFile>
                    <component>Slony</component>
                    <destination>${system_temp_directory}/${product_fullname}/check-pgversion.sh</destination>
                    <folder>installfileslinux-x64</folder>
                    <origin>installer/Slony/check-pgversion.sh</origin>
                    <ruleList>
                        <compareText>
                           <text>${platform_name}</text>
                           <logic>equals</logic>
                           <value>linux-x64</value>
                        </compareText>
                    </ruleList>
                </unpackFile>
                <setInstallerVariableFromScriptOutput>
                    <name>pg_version</name>
                    <exec>${system_temp_directory}/${product_fullname}/check-pgversion.sh</exec>
                    <execArgs>"${installdir}"</execArgs>
                    <workingDirectory>${system_temp_directory}/${product_fullname}</workingDirectory>
                </setInstallerVariableFromScriptOutput>
            </validationActionList>
            <validationActionList>
                <actionGroup>
                    <actionList>
                        <showWarning>
                            <text>${msg(slony.incompatible.pg.error)}</text>
                        </showWarning>
                        <exit>
                            <exitCode>0</exitCode>
                        </exit>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${pg_version}</text>
                            <value>PG_MAJOR_VERSION</value>            
                        </compareText>
                    </ruleList>
                </actionGroup>
            </validationActionList>
            <validationActionList>
                <actionGroup>
                    <actionList>
                        <showWarning>
                            <text>${msg(slony.incompatible.install.error)}</text>
                        </showWarning>
                        <exit>
                            <exitCode>0</exitCode>
                        </exit>
                    </actionList>
                    <ruleList>
                        <fileExists>
                            <path>${installdir}/bin/slon</path>
                        </fileExists>
                        <compareText>
                            <text>${platform_name}</text>
                            <logic>does_not_equal</logic>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </actionGroup>
            </validationActionList>
        </directoryParameter>
    </parameterList>
</project>
