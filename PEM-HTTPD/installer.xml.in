<project>
  <!-- Package details -->
  <shortName>pemhttpd</shortName>
  <fullName>PEM-HTTPD</fullName>
  <version>PG_VERSION_PEMHTTPD-PG_BUILDNUM_PEMHTTPD</version>
  <startMenuGroupName>${branding}</startMenuGroupName>
  <!-- Product Specific Options -->
  <productComments>PEM-HTTPD ${productVersion}, packaged by EnterpriseDB</productComments>
  <productDisplayName>PEM-HTTPD ${productVersion}</productDisplayName>
  <productUrlHelpLink>http://www.enterprisedb.com</productUrlHelpLink>
  <productUrlInfoAbout>http://www.enterprisedb.com</productUrlInfoAbout>
  <!-- The options are used for RPM registration -->
  <description>EnterpriseDB ${product_fullname}</description>
  <summary>${msg(install.summary)}</summary>
  <vendor>EnterpriseDB</vendor>
  <release>1</release>

  <!-- Installer Size -->
  <width>550</width>
  <height>400</height>

  <!-- Misc options -->
  <installerFilename>pem-httpd-${product_version}-${platform_name}.${platform_exec_suffix}</installerFilename>
  <compressionAlgorithm>lzma</compressionAlgorithm>
  <enableRollback>0</enableRollback>
  <requireInstallationByRootUser>1</requireInstallationByRootUser>
  <saveRelativePaths>1</saveRelativePaths>
  <outputDirectory>../output</outputDirectory>
  <uninstallerName>uninstall-${product_shortname}</uninstallerName>
  <uninstallerDirectory>${installdir}</uninstallerDirectory>
  <unattendedModeUI>minimal</unattendedModeUI>
  <installationLogFile>${system_temp_directory}/install-${product_shortname}.log</installationLogFile>
  <uninstallationLogFile>${system_temp_directory}/uninstall-${product_shortname}.log</uninstallationLogFile>
  <allowWindowResize>1</allowWindowResize>
  <windowsSoftwareRegistryPrefix></windowsSoftwareRegistryPrefix>

  <!-- Images -->
  <disableSplashScreen>1</disableSplashScreen>
  <leftImage>../resources/pg-side.png</leftImage>

  <!-- i18n files for the UI -->
  <allowedLanguages>en</allowedLanguages>
  <customLanguageFileList>
    <language>
      <code>en</code>
      <encoding>iso8859-1</encoding>
      <file>i18n/en.lng</file>
    </language>
  </customLanguageFileList>
  <!-- Custom functions -->
  <functionDefinitionList>
    <actionDefinition name="createTempDir">
       <actionList>
         <globalVariables names="random_number"/>
         <actionGroup>
           <actionList>
            <setInstallerVariable name="iteration" value="0"/>
            <!-- Create a random number to use unique filenames -->
             <while>
               <actionList>
                 <generateRandomValue length="10" variable="random_number"/>
                 <runProgram>
                   <program>sh</program>
                   <programArguments>-c &lt;&lt;EOF '
                                     umask 0077
                                     mkdir "${system_temp_directory}/${dirPrefix}_${random_number}"
                                     if [ $? -ne 0 ];
                                     then
                                        exit 100
                                     fi
                                     '
EOF
                   </programArguments>
                 </runProgram>
                 <break>
                   <ruleList>
                    <compareText logic="equals" text="0" value="${program_exit_code}"/>
                   </ruleList>
                 </break>
                <actionGroup>
                  <actionList>
                    <throwError text="${msg(cannot.create.tmp.dir)}" abortOnError="1">
                      <ruleList>
                        <compareValues value1="${iteration}" logic="equals" value2="9"/>
                      </ruleList>
                    </throwError>
                  </actionList>
                </actionGroup>
                 <mathExpression text="${iteration}+1" variable="iteration"/>
               </actionList>
               <conditionRuleList>
                 <compareValues value1="${iteration}" logic="less" value2="10"/>
               </conditionRuleList>
             </while>
             <setInstallerVariable name="random_number" value="${random_number}"/>
           </actionList>
           <ruleList>
             <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
           </ruleList>
         </actionGroup>
         <actionGroup>
           <actionList>
             <generateRandomValue length="10" variable="random_number"/>
             <createDirectory path="${system_temp_directory}/${dirPrefix}_${random_number}"/>
             <setInstallerVariable name="random_number" value="${random_number}"/>
           </actionList>
           <ruleList>
             <compareText logic="equals" text="${platform_name}" value="windows"/>
           </ruleList>
         </actionGroup>
       </actionList>
       <parameterList>
         <stringParameter name="dirPrefix" allowEmptyValue="0"/>
       </parameterList>
    </actionDefinition>
    <include file="../scripts/determineLinuxInitSystem.xml"/>
    <include file="../scripts/linuxServiceAction.xml"/>
  </functionDefinitionList>
  <!-- Prebuild Actions -->
  <preBuildActionList>
    <setInstallerVariable name="originalplatform" value="${platform_name}"/>
    <setInstallerVariable name="originalplatform" value="linux-x32">
        <ruleList>
            <compareText text="${platform_name}" value="linux"/>
        </ruleList>
    </setInstallerVariable>
    <setInstallerVariable name="project.parameter(install_runtimes).ask" value="0">
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </setInstallerVariable>
   </preBuildActionList>
  <preShowHelpActionList>
    <!-- LIN & WIN: Set the default installation directory -->
    <setInstallerVariable>
      <name>default_installdir</name>
      <persist>1</persist>
      <value>${platform_install_prefix}/edb/pem/httpd</value>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </setInstallerVariable>
    <setInstallerVariable name="booleanAllowedTag" value="&#10;                                Allowed: yes no"/>
    <setInstallerVariable name="project.parameter(extract_mode).value" value="${project.parameter(extract_mode).value}${booleanAllowedTag}"/>
    <setInstallerVariable name="project.parameter(install_runtimes).value" value="${project.parameter(install_runtimes).value}${booleanAllowedTag}">
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
      </ruleList>
    </setInstallerVariable>
    <!-- MAC : Set the default installation directory -->
    <setInstallerVariable>
      <name>default_installdir</name>
      <persist>1</persist>
      <value>/Library/edb/pem/httpd</value>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </setInstallerVariable>
    <setInstallerVariable name="defaultport" value="8080"/>
 </preShowHelpActionList>
  <!-- Initialisation actions -->
  <initializationActionList>
      <setInstallerVariable name="project.parameter(lppython_loc).ask" value="0" />
      <setInstallerVariable name="project.parameter(install_runtimes).ask" value="0"/>
      <setInstallerVariable name="productVersion" persist="1" value="PG_VERSION_PEMHTTPD" />
      <!-- Abort Installation as trying to  run a 32-bit installer on 64-bit machine -->
      <throwError>
        <customErrorMessage>${msg(platform.not.match)}</customErrorMessage>
        <text>Unknown Error</text>
        <ruleList>
          <platformTest type="linux-x64"/>
          <compareText text="${originalplatform}" value="linux-x32"/>
        </ruleList>
      </throwError>
      <!-- Abort installation if SELinux is enabled -->
      <throwError>
        <customErrorMessage>${msg(selinux.not.permissive)}</customErrorMessage>
        <text>SELinux Error</text>
        <ruleList>
          <compareText>
            <logic>contains</logic>
            <text>${platform_name}</text>
            <value>linux</value>
          </compareText>
          <fileContentTest text="1" path="/selinux/enforce" logic="contains"/>
        </ruleList>
      </throwError>
      <!-- WIN & LIN: Set the default values for unattended mode -->
    <actionGroup>
      <actionList>
        <setInstallerVariable name="installdir" value="${platform_install_prefix}/edb/pem/httpd" persist="1"/>
      </actionList>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${installer_ui}</text>
          <value>unattended</value>
        </compareText>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </actionGroup>
    <!-- MAC : Set the  default values for unattended mode -->
    <actionGroup>
      <actionList>
        <setInstallerVariable name="installdir" value="/Library/edb/pem/httpd"/>
      </actionList>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${installer_ui}</text>
          <value>unattended</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </actionGroup>
      <!-- LIN & WIN: Set the default installation directory -->
    <setInstallerVariable>
      <name>default_installdir</name>
      <persist>1</persist>
      <value>${platform_install_prefix}/edb/pem/httpd</value>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </setInstallerVariable>
    <!-- MAC : Set the default installation directory -->
    <setInstallerVariable>
      <name>default_installdir</name>
      <persist>1</persist>
      <value>/Library/edb/pem/httpd</value>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </setInstallerVariable>
    <setInstallerVariable name="python_path" value=""/>
    <setInstallerVariable name="pemversion" value="7"/>
    <setInstallerVariable name="lppython_loc" value=""/>
  </initializationActionList>
  <!-- Preinstallation actions -->
  <preInstallationActionList>
  <!-- Check what is the umask set for root user. If it is not correct, then throw error
       We do this by checking the permission of the directory created by root.-->
   <actionGroup>
     <actionList>
       <runProgram program="umask" programArguments="| cut -b4"/>
       <setInstallerVariable name="umask_value" value="${program_stdout}" persist="1"/>
       <logMessage text="Last umask bit=${umask_value}"/>
       <!-- Throw error if umask last bit is not equals to 0 or 2 -->
       <throwError text="${msg(error.umask.permissions)}">
         <ruleList>
           <ruleGroup negate="1">
             <ruleList>
               <ruleGroup ruleEvaluationLogic="or">
                 <ruleList>
                   <compareText logic="equals" text="${umask_value}" value="0"/>
                   <compareText logic="equals" text="${umask_value}" value="2"/>
                 </ruleList>
               </ruleGroup>
             </ruleList>
           </ruleGroup>
         </ruleList>
       </throwError>
     </actionList>
     <ruleList>
       <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
     </ruleList>
   </actionGroup>

   <!-- Abort installation if SELinux is enabled -->
   <actionGroup>
     <actionList>
       <setInstallerVariable name="enforce_file" value="/sys/fs/selinux/enforce"/>
       <setInstallerVariable name="enforce_file" value="/selinux/enforce">
       <ruleList>
         <fileExists path="/selinux/enforce"/>
       </ruleList>
       </setInstallerVariable>
       <throwError>
         <customErrorMessage>${msg(selinux.not.permissive)}</customErrorMessage>
         <text>SELinux Error</text>
         <ruleList>
           <fileContentTest text="1" path="${enforce_file}" logic="contains"/>
         </ruleList>
       </throwError>
     </actionList>
     <ruleList>
       <compareText logic="contains" text="${platform_name}" value="linux"/>
       <isFalse value="${extract_mode}"/>
     </ruleList>
   </actionGroup>

   <!-- Check if the install  directory specified has atleast read permissions for user enterprisedb/postgres (others group)-->
   <actionGroup>
     <actionList>
       <unpackFile>
         <component>PEMHTTPD</component>
         <destination>${system_temp_directory}/checkDirPermissions.sh</destination>
         <origin>installer/PEM-HTTPD/checkDirPermissions.sh</origin>
         <folder>programfileslinux</folder>
         <ruleList>
           <compareText text="${platform_name}" logic="equals" value="linux"/>
         </ruleList>
       </unpackFile>

       <unpackFile>
         <component>PEMHTTPD</component>
         <destination>${system_temp_directory}/checkDirPermissions.sh</destination>
         <origin>installer/PEM-HTTPD/checkDirPermissions.sh</origin>
         <folder>programfileslinux-x64</folder>
         <ruleList>
           <compareText text="${platform_name}" logic="equals" value="linux-x64"/>
         </ruleList>
       </unpackFile>
       <setInstallerVariable name="directory_name" value="${default_installdir}"/>
         <runProgram>
           <program>${system_temp_directory}/checkDirPermissions.sh</program>
           <programArguments>${directory_name}/</programArguments>
         </runProgram>
        <setInstallerVariable name="isPermissionDeniedOnDirectory" value="${program_stdout}"/>
        <throwError text="${msg(error.directory.permissions.denied)}" abortOnError="1">
          <ruleList>
            <compareText text="${isPermissionDeniedOnDirectory}" logic="equals" value="100"/>
          </ruleList>
        </throwError>

     </actionList>
     <ruleList>
       <compareText logic="does_not_contain" text="${platform_name}" value="windows"/>
       <isFalse value="${extract_mode}"/>
     </ruleList>
   </actionGroup>
     <!-- Creating a temporary directory -->
     <createTempDir dirPrefix="${product_shortname}"/>

    <setInstallerVariable name="project.windowsSoftwareRegistryPrefix" value="${project.vendor}\PEM-HTTPD"/>
    <setInstallerVariable name="executablePath" value=""/>
    <setInstallerVariable name="selinux" value="" />
    <foreach variables="path" values="/bin /usr/bin /sbin /usr/sbin">
      <actionList>
        <setInstallerVariable name="executablePath" value="${path}/getenforce">
          <ruleList>
            <fileTest condition="executable"/>
            <compareText text="${executablePath}" logic="equals" value=""/>
          </ruleList>
        </setInstallerVariable>
      </actionList>
      <ruleList>
        <platformTest type="linux"/>
      </ruleList>
    </foreach>

    <!-- Check for SELinux -->
    <actionGroup>
      <actionList>
        <setInstallerVariableFromScriptOutput>
          <name>selinux</name>
          <exec>${executablePath}</exec>
          <execArgs/>
        </setInstallerVariableFromScriptOutput>
        <showWarning text="${msg(warn.selinux)}" >
          <ruleList>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${selinux}</text>
              <value>Disabled</value>
            </compareText>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${selinux}</text>
              <value/>
            </compareText>
          </ruleList>
        </showWarning>
      </actionList>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${executablePath}</text>
          <value/>
        </compareText>
        <compareText>
          <logic>contains</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </actionGroup>

    <actionGroup>
      <actionList>
        <!-- Abort installation if not super-user and not running in extract-only mode-->
        <throwError text="${msg(Installer.Warning.RootPrivileges)}">
          <ruleList>
            <isFalse value="${installer_is_root_install}"/>
            <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
          </ruleList>
        </throwError>
        <throwError text="${msg(Installer.Warning.AdministratorPrivileges)}">
          <ruleList>
            <isFalse value="${installer_is_root_install}"/>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
          </ruleList>
        </throwError>
      </actionList>
      <ruleList>
        <isFalse value="${extract_mode}"/>
      </ruleList>
    </actionGroup>
    <!-- Creates the ini file if not exits -->
    <touchFile path="/etc/postgres-reg.ini">
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
        <isFalse value="${extract_mode}"/>
      </ruleList>
    </touchFile>
    <setInstallerVariable name="pemhttpdVersion" value="" />
    <setInstallerVariable name="iBranding" value="" />

    <!-- determine the init on Linux -->
    <determineLinuxInitSystem>
      <ruleList>
        <isFalse value="${extract_mode}"/>
      </ruleList>
    </determineLinuxInitSystem>

    <!-- If the branding specified on the command line is not Postgres Enterprise Manager, that means
         this installer is being run stand alone, Hence check for the PEM installation -->
    <actionGroup>
      <actionList>
        <setInstallerVariable name="pemversion" value="7">
        <ruleList>
          <compareVersions logic="greater_or_equal" version1="${peminstalledversion}" version2="7.0"/>
          <compareText logic="does_not_equal" text="${peminstalledversion}" value=""/>
        </ruleList>
        </setInstallerVariable>
      </actionList>
      <ruleList>
        <compareText logic="does_not_equal" text="${branding}" value="Postgres Enterprise Manager"/>
        <compareText logic="contains" text="${platform_name}" value="linux"/>
      </ruleList>
    </actionGroup>

    <!-- If the branding specified on the command line is not Postgres Enterprise Manager, that means
         this installer is being run stand alone, Hence check for the PEM installation -->
    <actionGroup>
      <actionList>
        <setInstallerVariable name="pemversion" value="7">
        <ruleList>
          <compareVersions logic="greater_or_equal" version1="${peminstalledversion}" version2="7.0"/>
        </ruleList>
        </setInstallerVariable>
      </actionList>
      <ruleList>
        <compareText logic="does_not_equal" text="${branding}" value="Postgres Enterprise Manager"/>
        <compareText logic="contains" text="${platform_name}" value="windows"/>
      </ruleList>
    </actionGroup>

    <!-- PEM 7 requires LP 10 -->
    <actionGroup>
      <actionList>
        <setInstallerVariable name="LANGUAGEPACK_VERSION" value="10"/>
        <setInstallerVariable name="PYTHON_VERSION" value="3.4"/>
        <setInstallerVariable name="MOD_WSGI_MODULE" value="mod_wsgi-py34-VC10.so"/>
      </actionList>
      <ruleList>
        <compareText logic="equals" text="${pemversion}" value="7"/>
      </ruleList>
    </actionGroup>

    <!-- Linux: Check for the existence of ApacheHTTPD -->
    <actionGroup>
      <actionList>
        <iniFileGet file="/etc/postgres-reg.ini" variable="apachehttpd_installdir"
         section="ApacheHTTPD" key="InstallationDirectory"/>
      </actionList>
      <ruleList>
        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
      </ruleList>
    </actionGroup>
    <!-- Win: Check for the existence of ApacheHTTPD -->
    <actionGroup>
      <actionList>
        <registryGet name="Location" variable="apachehttpd_installdir"
          key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\ApacheHTTPD"/>
        </actionList>
        <ruleList>
          <compareText logic="equals" text="${platform_name}" value="windows"/>
        </ruleList>
    </actionGroup>
    <actionGroup>
      <actionList>
        <setInstallerVariable name="apachehttpd_uninstall" value="${apachehttpd_installdir}/uninstall-apachehttpd"/>
        <setInstallerVariable name="apachehttpd_uninstall" value="${apachehttpd_installdir}\uninstall-apachehttpd.exe">
        <ruleList>
          <compareText logic="equals" text="${platform_name}" value="windows"/>
        </ruleList>
        </setInstallerVariable>

        <actionGroup>
          <actionList>
            <consoleWrite text="&#xA;Info: ${msg(upgrade.existing.apachehttpd.installation.description)}&#xA;"/>
            <logMessage text="&#xA;Info: ${msg(upgrade.existing.apachehttpd.installation.description)}&#xA;"/>
          </actionList>
          <ruleList>
            <!-- following check means mode equals unattended -->
            <compareText text="${installer_interactivity}" logic="does_not_equal" value="normal"/>
          </ruleList>
        </actionGroup>

        <actionGroup>
          <actionList>
            <showQuestion>
              <default>yes</default>
              <text>${msg(uninstall.apachehttpd.warning.message)}</text>
              <variable>response</variable>
            </showQuestion>
            <!-- Exit the installation if the user wants to quit -->
            <exit exitCode="201">
              <ruleList>
                <compareText logic="equals" value="no" text="${response}"/>
              </ruleList>
            </exit>
          </actionList>
            <ruleList>
              <compareText text="${installer_interactivity}" logic="equals" value="normal"/>
            </ruleList>
        </actionGroup>

        <runProgram>
          <program>${apachehttpd_uninstall}</program>
	  <programArguments>--mode unattended</programArguments>
	  <showMessageOnError>1</showMessageOnError>
          <abortOnError>1</abortOnError>
          <progressText>${uninstall.apachehttpd.message}</progressText>
        </runProgram>
      </actionList>
      <ruleList>
        <compareText logic="does_not_equal" text="${apachehttpd_installdir}" value=""/>
        <isFalse value="${extract_mode}"/>
      </ruleList>
    </actionGroup>

    <!-- LIN: check for the LanguagePack installation and set the python path
         case: when PEM is installed and LP python is not provided on command line -->
    <actionGroup>
      <actionList>
        <setInstallerVariable name="req_lp_version" value="${LANGUAGEPACK_VERSION}" persist="1"/>
        <iniFileGet file="/etc/postgres-reg.ini" variable="lp_tmp_var"
          section="edb_languagepack_${LANGUAGEPACK_VERSION}" key="InstallationDirectory"/>
        <iniFileGet file="/etc/postgres-reg.ini" variable="lp_version"
          section="edb_languagepack_${LANGUAGEPACK_VERSION}" key="Version"/>
        <setInstallerVariable name="python_path" value="${lp_tmp_var}/Python-${PYTHON_VERSION}" persist="1">
        <ruleList>
          <ruleGroup>
            <ruleEvaluationLogic>or</ruleEvaluationLogic>
            <ruleList>
              <compareText logic="does_not_equal" text="${lp_tmp_var}" value=""/>
              <compareText logic="contains" text="${lp_version}" value="${req_lp_version}"/>
            </ruleList>
          </ruleGroup>
          <compareText logic="equals" text="${lppython_loc}" value=""/>
        </ruleList>
        </setInstallerVariable>
      </actionList>
      <ruleList>
        <compareText logic="contains" text="${platform_name}" value="linux"/>
        <compareText logic="does_not_equal" text="${pemversion}" value="0"/>
      </ruleList>
    </actionGroup>

    <!-- WIN: check for the LanguagePack installation and set the python path
         case: when PEM is installed and LP python is not provided on command line -->
    <actionGroup>
      <actionList>
        <setInstallerVariable name="req_lp_version" value="${LANGUAGEPACK_VERSION}" persist="1"/>
        <registryGet wowMode="32" name="Base Directory" variable="lp_tmp_var"
          key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\languagepack\edb\${LANGUAGEPACK_VERSION}"/>
        <registryGet wowMode="32" name="Version" variable="lp_version"
          key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\languagepack\edb\${LANGUAGEPACK_VERSION}"/>
        <setInstallerVariable name="python_path" value="${lp_tmp_var}/Python-${PYTHON_VERSION}" persist="1">
        <ruleList>
          <ruleGroup>
            <ruleEvaluationLogic>or</ruleEvaluationLogic>
            <ruleList>
              <compareText logic="does_not_equal" text="${lp_tmp_var}" value=""/>
              <compareText logic="contains" text="${lp_version}" value="${req_lp_version}"/>
            </ruleList>
          </ruleGroup>
          <compareText logic="equals" text="${lppython_loc}" value=""/>
        </ruleList>
        </setInstallerVariable>
        <logMessage text="${lp_tmp_var} == ${lp_version} == ${python_path}"/>
      </actionList>
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
        <compareText logic="does_not_equal" text="${pemversion}" value="0"/>
      </ruleList>
    </actionGroup>

    <!-- Set Python path
         case: when LP python is provided on command line, irrespective of PEM is not installed or not -->
    <actionGroup>
      <actionList>
        <setInstallerVariable name="python_path" value="${lppython_loc}" persist="1">
        <ruleList>
          <compareText logic="does_not_equal" text="${lppython_loc}" value=""/>
        </ruleList>
        </setInstallerVariable>
      </actionList>
      <!--<ruleList>
        <compareText logic="contains" text="${platform_name}" value="linux"/>
      </ruleList> -->
    </actionGroup>

    <!-- Getting apache home value from ini file - Linux | Mac -->
    <actionGroup>
      <actionList>
        <setInstallerVariable name="apacheport" value=""/>
        <setInstallerVariable name="apache_home" value=""/>
        <iniFileGet>
          <file>/etc/postgres-reg.ini</file>
          <section>PEM-HTTPD</section>
          <key>APACHE_HOME</key>
          <variable>apache_home</variable>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
        </iniFileGet>
        <iniFileGet>
          <file>/etc/postgres-reg.ini</file>
          <section>PEM-HTTPD</section>
          <key>APACHE_HPORT</key>
          <variable>apacheport</variable>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
        </iniFileGet>
        <iniFileGet>
          <file>/etc/postgres-reg.ini</file>
          <section>PEM-HTTPD</section>
          <key>Version</key>
          <variable>pemhttpdVersion</variable>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
        </iniFileGet>
        <!-- LIN & MAC: Get the branding & check Previous Installation of PEM-HTTPD -->
        <iniFileGet>
          <file>/etc/postgres-reg.ini</file>
          <section>PEM-HTTPD</section>
          <key>Branding</key>
          <variable>iBranding</variable>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
        </iniFileGet>
      </actionList>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </actionGroup>
    <!-- Linux | Mac : Set the installation directory in case of re-install/upgrade -->
    <actionGroup>
      <actionList>
	<iniFileGet>
          <file>/etc/postgres-reg.ini</file>
          <section>PEM-HTTPD</section>
          <key>InstallationDirectory</key>
          <variable>installdir</variable>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
        </iniFileGet>
      </actionList>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
	<compareText>
          <logic>does_not_equal</logic>
          <text>${apache_home}</text>
          <value/>
        </compareText>
      </ruleList>
    </actionGroup>
   <!-- Stopping apache if already started -  MAC  -->
    <runProgram>
      <program>launchctl</program>
      <programArguments>unload /Library/LaunchDaemons/com.edb.launchd.apache.plist</programArguments>
      <workingDirectory/>
      <abortOnError>0</abortOnError>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${apache_home}</text>
          <value/>
        </compareText>
      </ruleList>
    </runProgram>
    <!-- Stopping apache if already started - Linux and Mac  -->
    <linuxServiceAction
      name="PEMHTTPD" action="stop" systemdBooted="${is_init_systemd}"
      abortOnError="0" showMessageOnError="0">
      <ruleList>
        <compareText>
          <logic>contains</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </linuxServiceAction>
    <runProgram>
      <program>${apache_home}/bin/apachectl</program>
      <programArguments>"stop"</programArguments>
      <workingDirectory>${apache_home}/bin</workingDirectory>
      <abortOnError>0</abortOnError>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>does_not_contain</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${apache_home}</text>
          <value/>
        </compareText>
      </ruleList>
    </runProgram>
    <!-- WIN : Set the Apache Port from registry. PEM-HTTPD Installation would have set these values -->
    <actionGroup>
      <actionList>
        <setInstallerVariable name="apacheport" value=""/>
        <setInstallerVariable name="apache_home" value=""/>
        <registryGet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PEM-HTTPD</key>
          <name>APACHE_HPORT</name>
          <variable>apacheport</variable>
        </registryGet>
        <registryGet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PEM-HTTPD</key>
          <name>APACHE_HOME</name>
          <variable>apache_home</variable>
        </registryGet>
        <registryGet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PEM-HTTPD</key>
          <name>Branding</name>
          <variable>iBranding</variable>
        </registryGet>
      </actionList>
      <ruleList>
        <compareText>
          <logic>contains</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </actionGroup>
    <!-- Windows : Set the installation directory in case of re-install/upgrade -->
    <actionGroup>
      <actionList>
	<registryGet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PEM-HTTPD</key>
          <name>Location</name>
          <variable>installdir</variable>
        </registryGet>
	<registryGet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PEM-HTTPD</key>
          <name>Version</name>
          <variable>pemhttpdVersion</variable>
        </registryGet>
      </actionList>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${apache_home}</text>
          <value/>
        </compareText>
      </ruleList>
    </actionGroup>

    <!-- If there appears to be an existing installation, with no Branding value. -->
    <!-- force the default value. Otherwise, set the branding to whatever we read, -->
    <!-- or, set the default -->
    <!-- Existing, old install (version, but no branding) -->
    <setInstallerVariable>
      <name>branding</name>
      <persist>0</persist>
      <value>PostgreSQL</value>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${pemhttpdVersion}</text>
          <value/>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${iBranding}</text>
          <value/>
        </compareText>
      </ruleList>
    </setInstallerVariable>
    <!-- Existing install, with branding -->
    <setInstallerVariable>
      <name>branding</name>
      <persist>0</persist>
      <value>${iBranding}</value>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${iBranding}</text>
          <value/>
        </compareText>
      </ruleList>
    </setInstallerVariable>
    <!-- New install, nothing set on the command line -->
    <setInstallerVariable>
      <name>branding</name>
      <persist>0</persist>
      <value>Postgres Enterprise Manager</value>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${branding}</text>
          <value/>
        </compareText>
      </ruleList>
    </setInstallerVariable>
    <logMessage>
      <text>Using branding: ${branding}</text>
    </logMessage>
    <!-- Getting the Version Installed minus the buildnum -->
    <setInstallerVariableFromRegEx>
        <name>pemhttpdVersionInstalled</name>
        <text>${pemhttpdVersion}</text>
        <pattern>([0-9]*)-[0-9]*$</pattern>
        <substitution>\1</substitution>
        <ruleList>
           <compareText>
               <logic>does_not_equal</logic>
               <text>${pemhttpdVersion}</text>
               <value/>
           </compareText>
        </ruleList>
   </setInstallerVariableFromRegEx>

    <actionGroup>
      <actionList>
         <!-- Unpacking the Script file to temporary directory -->
         <unpackFile>
           <component>PEMHTTPD</component>
           <destination>${system_temp_directory}\vcredist_x86.exe</destination>
           <folder>programfileswindows</folder>
           <origin>installer/PEM-HTTPD/vcredist_x86.exe</origin>
         </unpackFile>
         <!-- Running VC Dist file | WIN  -->
         <runProgram>
            <program>${system_temp_directory}\vcredist_x86.exe</program>
            <programArguments>/q /norestart</programArguments>
            <workingDirectory>${system_temp_directory}</workingDirectory>
            <showMessageOnError>0</showMessageOnError>
            <abortOnError>0</abortOnError>
           <!-- <customErrorMessage>${msg(error.installing.runtimes)}</customErrorMessage> -->
         </runProgram>
         <throwError text="${msg(error.installing.runtimes)}">
	  <ruleList>
	    <compareText logic="equals" text="${program_exit_code}" value="127"/>
	  </ruleList>
	</throwError>
	<actionGroup>
	  <actionList>
	    <logMessage text="${msg(warning.reboot.machine)}"/>
	    <setInstallerVariable name="rebootRequired" value="1"/>
	  </actionList>
	  <ruleList>
	    <compareText logic="equals" text="${program_exit_code}" value="3010"/>
	  </ruleList>
        </actionGroup>
      </actionList>
      <ruleList>
         <compareText>
            <logic>equals</logic>
            <text>${platform_name}</text>
            <value>windows</value>
         </compareText>
         <isTrue value="${install_runtimes}"/>
      </ruleList>
    </actionGroup>

    <!-- Stopping apache if already started - Windows  -->
    <runProgram>
      <program>wscript</program>
      <programArguments>//NOLOGO "${installdir}/installer/PEM-HTTPD/stopApache.vbs" "${installdir}"</programArguments>
      <workingDirectory>${installdir}/installer/PEM-HTTPD</workingDirectory>
      <abortOnError>0</abortOnError>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${apache_home}</text>
          <value/>
        </compareText>
        <fileExists>
          <path>${installdir}/installer/PEM-HTTPD/stopApache.vbs</path>
        </fileExists>
      </ruleList>
    </runProgram>
    <!-- Stopping apache if already started - (Old) Windows  -->
    <runProgram>
      <program>wscript</program>
      <programArguments>//NOLOGO "${installdir}/apache/stopApache.vbs" "${installdir}\apache"</programArguments>
      <workingDirectory>${installdir}/apache</workingDirectory>
      <abortOnError>0</abortOnError>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${apache_home}</text>
          <value/>
        </compareText>
        <fileExists>
          <path>${installdir}/apache/stopApache.vbs</path>
        </fileExists>
      </ruleList>
    </runProgram>

    <!-- Waiting for the installer to stop Apache service -->
    <!-- Assuming it can safely stop in 3 sec -->
    <wait ms="3000"/>


    <!-- Get a default port number - ideally 8080 -->
    <getFreePort>
        <variable>defaultport</variable>
        <initialPort>8080</initialPort>
        <finalPort>65535</finalPort>
        <ruleList>
           <isTrue value="${installer_is_root_install}"/>
        </ruleList>
    </getFreePort>
    <!-- Set the default port to the previously installed apache port if exists -->
    <actionGroup>
      <actionList>
        <setInstallerVariable name="defaultport" value="${apacheport}"/>
      </actionList>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <value/>
          <text>${apacheport}</text>
        </compareText>
      </ruleList>
    </actionGroup>
    <!-- Set the actual port value to previously installed apache port, if exist, in order
         to ignore the CLI option specified -->
    <setInstallerVariable name="port" value="${apacheport}" >
      <ruleList>
         <compareText logic="does_not_equal" text="${apacheport}" value="" />
      </ruleList>
    </setInstallerVariable>

    <!-- RM 35851. Fix the Base Directory value in the registry-->
    <setInstallerVariableFromRegEx>
      <name>installdir</name>
      <pattern>/</pattern>
      <substitution>\</substitution>
      <text>${installdir}</text>
      <ruleList>
        <stringTest>
          <text>${installdir}</text>
          <type>not_empty</type>
        </stringTest>
        <isFalse value="${extract_mode}"/>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
      </ruleList>
    </setInstallerVariableFromRegEx>

    <actionGroup>
      <actionList>
        <throwError>
           <text>${msg(config.port.invalid)}</text>
           <ruleEvaluationLogic>or</ruleEvaluationLogic>
           <ruleList>
              <compareValues>
                 <value1>${port}</value1>
                 <logic>less</logic>
                 <value2>1</value2>
              </compareValues>
              <compareValues>
    	     <value1>${port}</value1>
                 <logic>greater</logic>
                 <value2>65535</value2>
              </compareValues>
           </ruleList>
        </throwError>
        <throwError>
           <text>${msg(config.port.in.use)}</text>
           <ruleList>
              <portTest>
                 <condition>cannot_bind</condition>
                 <port>${port}</port>
              </portTest>
           </ruleList>
        </throwError>
        <throwError>
           <text>${msg(config.port.invalid)}</text>
           <ruleList>
             <stringTest>
               <text>${port}</text>
               <type>not_digit</type>
             </stringTest>
           </ruleList>
        </throwError>
        <throwError>
           <text>${msg(config.port.invalid)}</text>
             <ruleList>
                <stringTest>
                    <text>${port}</text>
                    <type>empty</type>
                </stringTest>
             </ruleList>
         </throwError>
         <throwError>
              <text>${msg(pemhttpd.installdir.error.unix)}</text>
	      <ruleList>
		<regExMatch>
		    <text>${installdir}</text>
		    <logic>matches</logic>
		    <pattern>^/+(usr)?$</pattern>
		</regExMatch>
		<compareText>
		    <text>${platform_name}</text>
		    <logic>does_not_equal</logic>
		    <value>windows</value>
		</compareText>
	      </ruleList>
         </throwError>
         <throwError>
              <text>${msg(pemhttpd.installdir.error)}</text>
              <ruleList>
                  <regExMatch>
                      <text>${installdir}</text>
                      <logic>does_not_match</logic>
                      <pattern>^/([0-9a-zA-Z_/\.\-]*)$</pattern>
                  </regExMatch>
                  <compareText>
                    <text>${platform_name}</text>
                      <logic>does_not_equal</logic>
                      <value>windows</value>
                  </compareText>
                </ruleList>
         </throwError>
         <throwError>
              <text>${msg(pemhttpd.installdir.error)}</text>
	      <ruleList>
		<regExMatch>
		    <text>${installdir}</text>
		    <logic>does_not_match</logic>
		    <pattern>^([a-zA-Z]:)\\([0-9a-zA-Z_\\\s\.\-\(\)]*)$</pattern>
		</regExMatch>
		<compareText>
		    <text>${platform_name}</text>
		    <logic>equals</logic>
		    <value>windows</value>
		</compareText>
	      </ruleList>
         </throwError>
      </actionList>
      <ruleList>
  	<compareText>
            <logic>equals</logic>
            <text>${installer_ui}</text>
            <value>unattended</value>
          </compareText>
      </ruleList>
    </actionGroup>
    <actionGroup>
      <actionList>
        <createBackupFile>
          <path>${installdir}/apache/conf/httpd.conf</path>
        </createBackupFile>
        <renameFile origin="${installdir}/apache/bin/envvars" destination="${installdir}/apache/bin/envvars.bak" >
          <ruleList>
            <fileExists path="${installdir}/apache/bin/envvars"/>
          </ruleList>
        </renameFile>
      </actionList>
      <ruleList>
        <compareText logic="does_not_equal" text="${pemhttpdVersion}" value=""/>
      </ruleList>
    </actionGroup>
  </preInstallationActionList>
  <!-- Ready to install actions -->
  <readyToInstallActionList>
    <!-- determine the init on Linux -->
    <determineLinuxInitSystem>
      <ruleList>
        <isFalse value="${extract_mode}"/>
      </ruleList>
    </determineLinuxInitSystem>

    <actionGroup>
      <ruleList>
        <compareText logic="does_not_equal" text="${pemhttpdVersion}"
          value=""/>
      </ruleList>
      <actionList>

        <!-- Stop the existing PEMHTTPD service -->
        <linuxServiceAction
          name="PEMHTTPD" action="stop" systemdBooted="${is_init_systemd}"
          abortOnError="0" showMessageOnError="0">
          <ruleList>
            <compareText>
              <logic>contains</logic>
              <text>${platform_name}</text>
              <value>linux</value>
            </compareText>
          </ruleList>
        </linuxServiceAction>
        <runProgram program="launchctl"
          programArguments="unload /Library/LaunchDaemons/com.edb.launchd.apache.plist"
          workingDirectory="${installdir}/apache/bin"
          abortOnError="0" showMessageOnError="0">
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="osx"/>
          </ruleList>
        </runProgram>
        <stopWindowsService serviceName="PEMHTTPD"
          delay="60000"
          abortOnError="0" showMessageOnError="0">
          <ruleList>
            <compareText logic="equals" text="${platform_name}"
              value="windows"/>
          </ruleList>
        </stopWindowsService>

        <!-- Wait for sometime after stopping the existing service -->
        <wait ms="5000"/>

      </actionList>
    </actionGroup>
  </readyToInstallActionList>
  <!-- Postinstallation actions -->
  <postInstallationActionList>
    <!-- WIN| Substituting Apache-Home in the install/uninstall service script -->
    <actionGroup>
      <actionList>
        <registryGet wowMode="32" name="Base Directory" variable="python_tmp_var"
          key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\languagepack\edb\${LANGUAGEPACK_VERSION}"/>
        <setInstallerVariable name="python_home" value="${python_tmp_var}\Python-${PYTHON_VERSION}" persist="1"/>
      </actionList>
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
        <compareText logic="does_not_equal" text="${python_path}" value=""/>
      </ruleList>
    </actionGroup>

    <substitute>
      <files>${installdir}/installer/PEM-HTTPD/install-apache.bat</files>
         <substitutionList>
            <substitution>
               <pattern>@@APACHE_HOME@@</pattern>
               <value>${installdir}\apache</value>
            </substitution>
         </substitutionList>
         <ruleList>
            <compareText>
               <logic>equals</logic>
               <text>${platform_name}</text>
               <value>windows</value>
            </compareText>
         </ruleList>
    </substitute>
    <substitute>
      <files>${installdir}/installer/PEM-HTTPD/install-apache.bat</files>
         <substitutionList>
            <substitution>
              <pattern>REM SET</pattern>
              <value>SET</value>
            </substitution>
            <substitution>
              <pattern>@@LP_PYTHON_HOME@@</pattern>
              <value>${python_home}</value>
            </substitution>
         </substitutionList>
         <ruleList>
            <compareText>
               <logic>equals</logic>
               <text>${platform_name}</text>
               <value>windows</value>
            </compareText>
            <compareText logic="does_not_equal" text="${python_path}" value=""/>
         </ruleList>
    </substitute>

    <substitute>
      <files>${installdir}/installer/PEM-HTTPD/uninstall-apache.bat</files>
         <substitutionList>
            <substitution>
               <pattern>@@APACHE_HOME@@</pattern>
               <value>${installdir}\apache</value>
            </substitution>
         </substitutionList>
         <ruleList>
            <compareText>
               <logic>equals</logic>
               <text>${platform_name}</text>
               <value>windows</value>
            </compareText>
         </ruleList>
    </substitute>
    <substitute>
      <files>${installdir}/installer/PEM-HTTPD/start-apache.bat</files>
         <substitutionList>
            <substitution>
              <pattern>REM SET</pattern>
              <value>SET</value>
            </substitution>
            <substitution>
              <pattern>@@LP_PYTHON_HOME@@</pattern>
              <value>${python_home}</value>
            </substitution>
         </substitutionList>
         <ruleList>
            <compareText>
               <logic>equals</logic>
               <text>${platform_name}</text>
               <value>windows</value>
            </compareText>
         </ruleList>
    </substitute>
    <substitute>
      <files>${installdir}/installer/PEM-HTTPD/start-apache.bat</files>
         <substitutionList>
            <substitution>
               <pattern>@@APACHE_HOME@@</pattern>
               <value>${installdir}\apache</value>
            </substitution>
            <substitution>
              <pattern>@@LP_PYTHON_HOME@@</pattern>
              <value>${python_home}</value>
            </substitution>
         </substitutionList>
         <ruleList>
            <compareText>
               <logic>equals</logic>
               <text>${platform_name}</text>
               <value>windows</value>
            </compareText>
            <compareText logic="does_not_equal" text="${python_path}" value=""/>
         </ruleList>
    </substitute>
    <!-- Setting the PORT, SERVER-ROOT in httpd.conf file -->
    <substitute>
       <files>${installdir}/apache/conf/httpd.conf</files>
       <substitutionList>
         <substitution>
           <pattern>@@PORT@@</pattern>
           <value>${port}</value>
         </substitution>
         <substitution>
           <pattern>@@INSTALL_DIR@@</pattern>
           <value>${installdir}/apache</value>
         </substitution>
       </substitutionList>
    </substitute>
    <substitute>
       <files>${installdir}/apache/conf/extra/httpd-ssl.conf</files>
       <substitutionList>
         <substitution>
           <pattern>@@INSTALL_DIR@@</pattern>
           <value>${installdir}/apache</value>
         </substitution>
       </substitutionList>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
    </substitute>
    <!-- Configuring Scripts to set the installation path in Apache -->
    <runProgram>
      <customErrorMessage>${msg(error.configure.pemhttpd)}</customErrorMessage>
      <program>${installdir}/installer/PEM-HTTPD/configurePEMHTTPD.sh</program>
      <programArguments>"${installdir}" "${system_temp_directory}/${product_shortname}_${random_number}"</programArguments>
      <workingDirectory>${installdir}/installer/PEM-HTTPD</workingDirectory>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </runProgram>

    <!-- If LP is not installed, log the message -->
    <actionGroup>
      <actionList>
        <logMessage text="${msg(languagepack.not.installed)}"/>
      </actionList>
      <ruleList>
        <compareText logic="equals" text="${python_path}" value=""/>
      </ruleList>
    </actionGroup>

    <!-- LIN: Check if the given Python Path exist -->
    <actionGroup>
      <actionList>
        <logMessage text="${python_path}/bin/python doesn't exist" />
        <setInstallerVariable name="python_path" value="" />
      </actionList>
      <ruleList>
        <fileExists negate="1" path="${python_path}/bin/python"/>
        <compareText logic="does_not_equal" text="${python_path}" value=""/>
        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
      </ruleList>
    </actionGroup>

    <!-- WIN: Check if the given Python Path exist -->
    <actionGroup>
      <actionList>
        <logMessage text="${python_path}\python.exe doesn't exist" />
        <setInstallerVariable name="python_path" value="" />
      </actionList>
      <ruleList>
        <fileExists negate="1" path="${python_path}\python.exe"/>
        <compareText logic="does_not_equal" text="${python_path}" value=""/>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
      </ruleList>
    </actionGroup>

    <!-- LIN: Set the LP python location in apache environment -->
    <actionGroup>
      <actionList>
        <iniFileGet file="/etc/postgres-reg.ini" variable="python_tmp_var"
          section="edb_languagepack_${LANGUAGEPACK_VERSION}" key="InstallationDirectory"/>
        <setInstallerVariable name="python_home" value="${python_path}" persist="1"/>
        <logMessage text="Setting Python path in envvars"/>
        <substitute files="${installdir}/apache/bin/envvars">
          <substitutionList>
            <substitution>
              <pattern>@@LP_PYTHON_HOME@@</pattern>
              <value>${python_home}</value>
            </substitution>
          </substitutionList>
        </substitute>
      </actionList>
      <ruleList>
        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
        <compareText logic="does_not_equal" text="${python_path}" value=""/>
      </ruleList>
    </actionGroup>

    <!-- LIN | MAC: Adding text for mod_wsgi config in apache -->
    <actionGroup>
      <actionList>
    <addTextToFile>
      <file>${installdir}/apache/conf/httpd.conf</file>
      <text>
LoadModule wsgi_module ${installdir}/apache/modules/mod_wsgi.so
include conf/addons/*.conf
      </text>
    </addTextToFile>
        <iniFileSet>
          <file>/etc/postgres-reg.ini</file>
          <section>PEM-HTTPD</section>
          <key>MODWSGI_ENABLE</key>
          <value>1</value>
        </iniFileSet>
      </actionList>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
        <compareText logic="does_not_equal" text="${python_path}" value=""/>
      </ruleList>
    </actionGroup>

    <!-- WIN: Adding text for mod_wsgi config in apache -->
    <actionGroup>
      <actionList>
    <addTextToFile>
      <file>${installdir}\apache\conf\httpd.conf</file>
      <text>
LoadModule wsgi_module "${installdir}\apache\modules\${MOD_WSGI_MODULE}"
include conf\addons\*.conf
      </text>
    </addTextToFile>
        <registrySet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PEM-HTTPD</key>
          <name>MODWSGI_ENABLE</name>
          <value>1</value>
        </registrySet>
      </actionList>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
        <compareText logic="does_not_equal" text="${python_path}" value=""/>
      </ruleList>
      </actionGroup>

    <!-- Creating a addons directory for additional conf files -->
    <createDirectory path="${installdir}/apache/conf/addons" >
        <ruleList>
             <fileTest>
                 <path>${installdir}/apache/conf/addons</path>
                 <condition>not_exists</condition>
             </fileTest>
        </ruleList>
    </createDirectory>

    <!-- Linux | MAC: Adding a application secure conf which prohibit directory listings of applications under www context -->
    <actionGroup>
        <actionList>
             <touchFile path="${installdir}/apache/conf/addons/application_secure.conf" />
             <addTextToFile>
                   <file>${installdir}/apache/conf/addons/application_secure.conf</file>
                   <text>
&lt;Directory "${installdir}/apache/www/*/scripts"&gt;
   Options -Indexes -FollowSymLinks
   Order allow,deny
   Deny from all
&lt;/Directory&gt;

&lt;Directory "${installdir}/apache/www/*/installer"&gt;
   Options -Indexes -FollowSymLinks
   Order allow,deny
   Deny from all
&lt;/Directory&gt;
                   </text>
             </addTextToFile>
        </actionList>
        <ruleList>
             <fileTest>
                 <path>${installdir}/apache/conf/addons/application_secure.conf</path>
                 <condition>not_exists</condition>
             </fileTest>
             <compareText>
                  <logic>does_not_equal</logic>
                  <text>${platform_name}</text>
                  <value>windows</value>
             </compareText>
        </ruleList>
     </actionGroup>

    <!-- WIN: Adding a application secure conf which prohibit directory listings of applications under www context -->
    <actionGroup>
        <actionList>
             <touchFile path="${installdir}\apache\conf\addons\application_secure.conf" />
             <addTextToFile>
                   <file>${installdir}\apache\conf\addons\application_secure.conf</file>
                   <text>
&lt;Directory "${installdir}\apache\www\*\scripts"&gt;
   Options -Indexes -FollowSymLinks
   Order allow,deny
   Deny from all
&lt;/Directory&gt;

&lt;Directory "${installdir}\apache\www\*\installer"&gt;
   Options -Indexes -FollowSymLinks
   Order allow,deny
   Deny from all
&lt;/Directory&gt;
                   </text>
             </addTextToFile>
        </actionList>
        <ruleList>
             <fileTest>
                 <path>${installdir}\apache\conf\addons\application_secure.conf</path>
                 <condition>not_exists</condition>
             </fileTest>
             <compareText>
                  <logic>equals</logic>
                  <text>${platform_name}</text>
                  <value>windows</value>
             </compareText>
        </ruleList>
     </actionGroup>

    <!--RM32246. If PEMHTTPD is updated from 2.2 to 2.4, then edit the httpd config files if present with new syntax-->
    <actionGroup>
        <!--Edit httpd.conf to add new syntax-->
        <actionList>
            <logMessage text="Updating the httpd configuration..."/>
            <substitute>
                <type>exact</type>
                <files>${installdir}/apache/conf/addons/httpd.conf</files>
                <substitutionList>
                    <substitution>
                        <pattern>Options -Indexes -FollowSymLinks MultiViews ExecCGI</pattern>
                        <value>Options -Indexes -FollowSymLinks +MultiViews +ExecCGI</value>
                    </substitution>
                </substitutionList>
                <substitutionList>
                    <substitution>
                        <pattern>Order Allow,Deny</pattern>
                        <value></value>
                    </substitution>
                </substitutionList>
                <substitutionList>
                    <substitution>
                        <pattern>Allow from all</pattern>
                        <value>Require all granted</value>
                    </substitution>
                </substitutionList>
            </substitute>
        </actionList>
        <ruleList>
            <fileExists path="${installdir}/apache/conf/addons/httpd.conf" />
        </ruleList>
    </actionGroup>
    <!--Edit httpd-ssl-httpd.conf to comment SSLMutex which is no longer supported.-->
    <actionGroup>
        <actionList>
            <logMessage text="Updating the httpd SSL configuration..."/>
            <substitute>
                <type>regexp</type>
                <files>${installdir}/apache/conf/addons/httpd-ssl-httpd.conf</files>
                <substitutionList>
                    <substitution>
                        <pattern>SSLMutex*</pattern>
                        <value>#SSLMutex*</value>
                    </substitution>
                </substitutionList>
            </substitute>
        </actionList>
        <ruleList>
            <fileExists path="${installdir}/apache/conf/addons/httpd-ssl-httpd.conf" />
        </ruleList>
    </actionGroup>

    <!-- Install PEM-HTTPD as a service -->
    <runProgram>
      <customErrorMessage>${msg(error.service.pemhttpd)}</customErrorMessage>
      <program>${installdir}/installer/PEM-HTTPD/startupcfg.sh</program>
      <programArguments>"${installdir}" "${linux_init_system}"</programArguments>
      <workingDirectory>${installdir}/installer/PEM-HTTPD</workingDirectory>
      <abortOnError>0</abortOnError>
      <ruleList>
        <compareText>
          <logic>contains</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </runProgram>
    <actionGroup>
      <actionList>
        <!-- Set the Apache Home and Apache Port(default 8080) to inifile. -->
        <iniFileSet>
          <file>/etc/postgres-reg.ini</file>
          <section>PEM-HTTPD</section>
          <key>APACHE_HOME</key>
          <value>${installdir}/apache</value>
        </iniFileSet>
        <iniFileSet>
          <file>/etc/postgres-reg.ini</file>
          <section>PEM-HTTPD</section>
          <key>APACHE_HPORT</key>
          <value>${port}</value>
        </iniFileSet>
        <iniFileSet>
          <file>/etc/postgres-reg.ini</file>
          <section>PEM-HTTPD</section>
          <key>Description</key>
          <value>${msg(install.summary)}</value>
        </iniFileSet>
        <iniFileSet>
          <file>/etc/postgres-reg.ini</file>
          <section>PEM-HTTPD</section>
          <key>InstallationDirectory</key>
          <value>${installdir}</value>
        </iniFileSet>
        <iniFileSet>
          <file>/etc/postgres-reg.ini</file>
          <section>PEM-HTTPD</section>
          <key>Version</key>
          <value>${product_version}</value>
        </iniFileSet>
        <iniFileSet>
          <file>/etc/postgres-reg.ini</file>
          <section>PEM-HTTPD</section>
          <key>Branding</key>
          <value>${branding}</value>
        </iniFileSet>
      </actionList>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </actionGroup>
    <actionGroup>
     <actionList>
        <!-- Linux - Starting Apache -->
	<linuxServiceAction
          name="PEMHTTPD" action="start" systemdBooted="${is_init_systemd}"
          customErrorMessage="${msg(error.start.apache)}" ruleEvaluationLogic="or">
          <ruleList>
	    <compareText>
                <logic>equals</logic>
                <text>${selinux}</text>
                <value>Disabled</value>
             </compareText>
             <compareText>
                <logic>equals</logic>
                <text>${selinux}</text>
                <value/>
             </compareText>
          </ruleList>
        </linuxServiceAction>
      </actionList>
      <ruleList>
        <compareText>
          <logic>contains</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </actionGroup>
    <actionGroup>
      <actionList>
        <!-- Linux | Mac - Creating Menu Shortcuts -->
        <runProgram>
          <program>${installdir}/installer/PEM-HTTPD/createshortcuts.sh</program>
          <programArguments>"${installdir}" "${branding}" "${system_temp_directory}/${product_shortname}_${random_number}"</programArguments>
          <progressText>${msg(progress.text.creating.shortcuts)}</progressText>
          <workingDirectory>${installdir}/installer/PEM-HTTPD</workingDirectory>
          <abortOnError>0</abortOnError>
        </runProgram>
      </actionList>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </actionGroup>
    <!-- Install Apache as Service -->
    <actionGroup>
      <actionList>
        <registrySet>
          <key>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\PEMHTTPD</key>
          <name>Environment</name>
          <type>REG_MULTI_SZ</type>
          <value>PATH=${python_home.unix};%PATH% PYTHONHOME=${python_home.unix} PYTHONPATH=${python_home.unix}</value>
        <ruleList>
            <compareText logic="does_not_equal" text="${python_path}" value=""/>
        </ruleList>
        </registrySet>
        <registrySet>
          <key>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\PEMHTTPD</key>
          <name>Environment</name>
          <type>REG_MULTI_SZ</type>
          <value>PATH=%PATH%</value>
        <ruleList>
            <compareText logic="equals" text="${python_path}" value=""/>
        </ruleList>
        </registrySet>
        <wait ms="3000"/>
        <runProgram>
          <showMessageOnError>0</showMessageOnError>
          <program>${installdir}\installer\PEM-HTTPD\install-apache.bat</program>
          <programArguments/>
          <workingDirectory>${installdir}\installer\PEM-HTTPD</workingDirectory>
        </runProgram>
        <wait ms="3000"/>
      </actionList>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </actionGroup>
    <!-- MAC: Install Apache as Service -->
    <actionGroup>
      <actionList>
        <runProgram>
          <customErrorMessage>${msg(error.install.apache)}</customErrorMessage>
          <program>${installdir}/installer/PEM-HTTPD/startupcfg.sh</program>
          <programArguments>"${installdir}"</programArguments>
          <workingDirectory>${installdir}/installer/PEM-HTTPD</workingDirectory>
        </runProgram>
      </actionList>
      <ruleList>
        <compareText>
          <logic>contains</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </actionGroup>

     <!-- MAC: Install Apache as Service (in upgrade) for older installations -->
    <actionGroup>
      <actionList>
        <runProgram>
          <customErrorMessage>${msg(error.install.apache)}</customErrorMessage>
          <program>${installdir}/installer/PEM-HTTPD/startupcfg.sh</program>
          <programArguments>"${installdir}"</programArguments>
          <workingDirectory>${installdir}/installer/PEM-HTTPD</workingDirectory>
        </runProgram>
      </actionList>
      <ruleList>
        <compareText>
          <logic>contains</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
	<fileExists>
          <path>/Library/StartupItems/PEMHTTPD</path>
        </fileExists>
      </ruleList>
    </actionGroup>

    <!-- MAC: Remove the startup item from older installations -->
    <deleteFile>
      <path>/Library/StartupItems/PEMHTTPD</path>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
	<fileExists>
          <path>/Library/StartupItems/PEMHTTPD</path>
        </fileExists>
      </ruleList>
    </deleteFile>

    <actionGroup>
      <actionList>
        <!-- Set the Apache Home and Apache Port(default 8080) to registry. -->
        <registrySet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PEM-HTTPD</key>
          <name>APACHE_HOME</name>
          <value>${installdir}\apache</value>
        </registrySet>
        <registrySet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PEM-HTTPD</key>
          <name>APACHE_HPORT</name>
          <value>${port}</value>
        </registrySet>
        <registrySet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PEM-HTTPD</key>
          <name>Branding</name>
          <value>${branding}</value>
        </registrySet>
      </actionList>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </actionGroup>
    <actionGroup>
      <actionList>
        <!-- WIN - Starting Apache -->
	<runProgram>
	  <customErrorMessage>${msg(error.start.apache)}</customErrorMessage>
	  <program>sc</program>
	  <programArguments>start PEMHTTPD</programArguments>
	  <abortOnError>0</abortOnError>
	</runProgram>
      </actionList>
      <ruleList>
        <compareText>
          <logic>contains</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </actionGroup>

    <!-- Delete Add/Remove Programs Entry From Old Windows Installation -->
    <actionGroup>
        <actionList>
            <registryDelete>
                <key>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\PEMHTTPD ${pemhttpdVersion}</key>
                <showMessageOnError>0</showMessageOnError>
                <abortOnError>0</abortOnError>
            </registryDelete>
        </actionList>
        <ruleList>
            <compareText>
                <logic>equals</logic>
                <text>${platform_name}</text>
                <value>windows</value>
            </compareText>
            <compareText>
                <logic>does_not_equal</logic>
                <text>${apache_home}</text>
                <value/>
            </compareText>
        </ruleList>
    </actionGroup>

      <deleteFile path="${system_temp_directory}/${product_shortname}_${random_number}" >
            <ruleList>
                <fileExists path="${system_temp_directory}/${product_shortname}_${random_number}" />
            </ruleList>
      </deleteFile>

    </postInstallationActionList>

    <!-- If User is upgrading Apache from 2.2 to 2.4, give them an option to view the documentation link -->
    <finalPageActionList>
        <launchBrowser>
            <url>http://httpd.apache.org/docs/2.4/upgrading.html</url>
            <progressText>${msg(launch.apache24.doc)}</progressText>
            <abortOnError>0</abortOnError>
            <show>1</show>
            <ruleList>
                <regExMatch logic="matches" text="${pemhttpdVersionInstalled}" pattern="^2.2"/>
                <regExMatch logic="matches" text="${productVersion}" pattern="^2.4"/>
                <compareText logic="equals" text="${installer_ui}" value="gui" />
            </ruleList>
        </launchBrowser>
    </finalPageActionList>

    <installationAbortedActionList>
      <deleteFile path="${system_temp_directory}/${product_shortname}_${random_number}" >
        <ruleList>
          <fileExists path="${system_temp_directory}/${product_shortname}_${random_number}" />
        </ruleList>
      </deleteFile>
    </installationAbortedActionList>
  <!-- preUninstallation actions -->
  <preUninstallationActionList>

     <!-- determine the init on Linux -->
     <determineLinuxInitSystem>
       <ruleList>
         <isFalse value="${extract_mode}"/>
       </ruleList>
     </determineLinuxInitSystem>

     <createTempDir dirPrefix="${product_shortname}">
     <ruleList>
        <compareText logic="contains" text="${platform_name}" value="linux"/>
      </ruleList>
    </createTempDir>
    <!-- Stop Apache | MAC-->
    <runProgram>
       <customErrorMessage>${msg(error.uninstall.stop.apache)}</customErrorMessage>
       <program>launchctl</program>
       <programArguments>unload /Library/LaunchDaemons/com.edb.launchd.apache.plist</programArguments>
       <workingDirectory/>
       <abortOnError>0</abortOnError>
        <ruleList>
           <compareText>
               <logic>equals</logic>
               <text>${platform_name}</text>
               <value>osx</value>
           </compareText>
        </ruleList>
    </runProgram>
    <!-- Linux | Mac actionList -->
    <actionGroup>
      <actionList>
        <!-- Stop Apache -->
        <linuxServiceAction
          name="PEMHTTPD" action="stop" systemdBooted="${is_init_systemd}"
          abortOnError="0" showMessageOnError="0">
          <ruleList>
            <compareText>
              <logic>contains</logic>
              <text>${platform_name}</text>
              <value>linux</value>
            </compareText>
          </ruleList>
        </linuxServiceAction>
        <runProgram>
          <customErrorMessage>${msg(error.uninstall.stop.apache)}</customErrorMessage>
          <program>${installdir}/apache/bin/apachectl</program>
          <programArguments>"stop"</programArguments>
          <workingDirectory>${installdir}/apache/bin</workingDirectory>
          <abortOnError>0</abortOnError>
          <ruleList>
	      <compareText>
                <logic>does_not_contain</logic>
                <text>${platform_name}</text>
                <value>linux</value>
              </compareText>
              <compareText>
                  <logic>does_not_equal</logic>
                  <text>${platform_name}</text>
                  <value>windows</value>
              </compareText>
          </ruleList>
        </runProgram>
        <!-- Unset values in the ini file -->
        <iniFileSet>
          <file>/etc/postgres-reg.ini</file>
          <section>PEM-HTTPD</section>
          <key>APACHE_HOME</key>
          <value/>
        </iniFileSet>
        <iniFileSet>
          <file>/etc/postgres-reg.ini</file>
          <section>PEM-HTTPD</section>
          <key>APACHE_HPORT</key>
          <value/>
        </iniFileSet>
        <iniFileSet>
          <file>/etc/postgres-reg.ini</file>
          <section>PEM-HTTPD</section>
          <key>Description</key>
          <value/>
        </iniFileSet>
        <iniFileSet>
          <file>/etc/postgres-reg.ini</file>
          <section>PEM-HTTPD</section>
          <key>InstallationDirectory</key>
          <value/>
        </iniFileSet>
        <iniFileSet>
          <file>/etc/postgres-reg.ini</file>
          <section>PEM-HTTPD</section>
          <key>Version</key>
          <value/>
        </iniFileSet>
        <iniFileSet>
          <file>/etc/postgres-reg.ini</file>
          <section>PEM-HTTPD</section>
          <key>Branding</key>
          <value/>
        </iniFileSet>
        <iniFileSet>
          <file>/etc/postgres-reg.ini</file>
          <section>PEM-HTTPD</section>
          <key>MODWSGI_ENABLE</key>
          <value/>
        </iniFileSet>
      </actionList>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </actionGroup>
    <actionGroup>
      <actionList>
        <!-- Remove the shortcuts -->
        <runProgram>
          <customErrorMessage>${msg(error.uninstall.apache)}</customErrorMessage>
          <program>${installdir}/installer/PEM-HTTPD/removeshortcuts.sh</program>
          <programArguments>"${installdir}" "${branding}" "${system_temp_directory}/${product_shortname}_${random_number}"</programArguments>
          <workingDirectory>${installdir}/installer/PEM-HTTPD</workingDirectory>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
        </runProgram>
        <!-- Uninstall the PEM-HTTPD service -->

	<!-- Attempt to remove any runlevel config with chkconfig -->
        <runProgram>
          <program>/sbin/chkconfig</program>
          <programArguments>--del PEMHTTPD</programArguments>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
	  <ruleList>
            <isTrue value="${is_init_sysvinit}"/>
          </ruleList>
        </runProgram>

        <!-- Remove the startup script -->

        <runProgram program="/usr/bin/systemctl"
          programArguments="disable PEMHTTPD.service"
          abortOnError="0" showMessageOnError="0"
          customErrorMessage="${msg(error.uninstall.apache)}">
          <ruleList>
            <isTrue value="${is_init_systemd}"/>
          </ruleList>
        </runProgram>

        <deleteFile>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
          <path>/etc/init.d/PEMHTTPD</path>
	  <ruleList>
	    <fileExists path="/etc/init.d/PEMHTTPD"/>
          </ruleList>
        </deleteFile>

	<deleteFile path="/usr/lib/systemd/system/PEMHTTPD.service">
          <ruleList>
	    <fileExists path="/usr/lib/systemd/system/PEMHTTPD.service"/>
          </ruleList>
        </deleteFile>

        <!-- Attempt to remove any runlevel config with update-rc.d -->
        <runProgram>
          <program>/usr/sbin/update-rc.d</program>
          <programArguments>-f PEMHTTPD remove</programArguments>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
	  <ruleList>
            <isTrue value="${is_init_upstart}"/>
          </ruleList>
        </runProgram>

      </actionList>
      <ruleList>
        <compareText>
          <logic>contains</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </actionGroup>
    <!-- MAC: Remove menu shortcuts -->
    <deleteFile>
      <path>/Applications/${branding}/PEMHTTPD</path>
      <abortOnError>0</abortOnError>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </deleteFile>

    <!-- MAC: Uninstall Apache Service -->
    <deleteFile>
      <path>/Library/LaunchDaemons/com.edb.launchd.apache.plist</path>
      <abortOnError>0</abortOnError>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </deleteFile>
    <!-- WIN actionList -->
    <actionGroup>
      <actionList>
        <!-- Uninstall Apache Service -->
        <runProgram>
          <customErrorMessage>${msg(error.uninstall.apache)}</customErrorMessage>
          <program>${installdir}\installer\PEM-HTTPD\uninstall-apache.bat</program>
          <programArguments/>
          <workingDirectory>${installdir}\installer\PEM-HTTPD</workingDirectory>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
        </runProgram>
      </actionList>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </actionGroup>
    <!-- Deleting the apache server logs if exists -->
    <actionGroup>
      <actionList>
        <deleteFile>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
          <path>${installdir}/apache/logs</path>
        </deleteFile>
      </actionList>
      <ruleList>
        <fileExists>
          <path>${installdir}/apache/logs</path>
        </fileExists>
      </ruleList>
    </actionGroup>

    <!-- Remove the application_secure.conf file -->
    <deleteFile path="${installdir}/apache/conf/addons/application_secure.conf" >
	<ruleList>
	    <fileExists path="${installdir}/apache/conf/addons/application_secure.conf" />
	</ruleList>
    </deleteFile>

    <!-- Remove the addons directory -->
    <deleteFile path="${installdir}/apache/conf/addons" >
	<ruleList>
	    <fileExists path="${installdir}/apache/conf/addons" />
            <fileTest path="${installdir}/apache/conf/addons" condition="is_empty" />
	</ruleList>
    </deleteFile>

    <!-- Clear out any residual registry entres -->
    <actionGroup>
      <actionList>
	    <registryDelete key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PEMHTTPD" />
      </actionList>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </actionGroup>

  </preUninstallationActionList>
    <postUninstallationActionList>
      <!-- Upgradation of Apache 2.4 on 2.2. new Uninstaller will not remove the old files installed with 2.2. Remove them explicitly.-->
      <deleteFile path="${installdir}/apache/manual" >
  	<ruleList>
  	    <fileExists path="${installdir}/apache/manual" />
  	</ruleList>
      </deleteFile>
      <deleteFile path="${installdir}/apache/icons" >
  	<ruleList>
  	    <fileExists path="${installdir}/apache/icons" />
  	</ruleList>
      </deleteFile>
      <deleteFile path="${installdir}/apache/www" >
  	<ruleList>
  	    <fileExists path="${installdir}/apache/www" />
  	</ruleList>
      </deleteFile>
      <deleteFile path="${installdir}/apache/include" >
  	<ruleList>
  	    <fileExists path="${installdir}/apache/include" />
  	</ruleList>
      </deleteFile>
      <deleteFile path="${installdir}/apache/modules" >
  	<ruleList>
  	    <fileExists path="${installdir}/apache/modules" />
  	</ruleList>
      </deleteFile>
      <deleteFile path="${installdir}/apache/lib" >
  	<ruleList>
  	    <fileExists path="${installdir}/apache/lib" />
  	</ruleList>
      </deleteFile>
      <deleteFile path="${installdir}/apache/README-win32.txt" >
  	<ruleList>
  	    <fileExists path="${installdir}/apache/README-win32.txt" />
  	</ruleList>
      </deleteFile>
      <deleteFile path="${system_temp_directory}/${product_shortname}_${random_number}" >
        <ruleList>
           <compareText logic="contains" text="${platform_name}" value="linux"/>
        </ruleList>
      </deleteFile>
    </postUninstallationActionList>

  <!-- Components -->
  <componentList>
    <component>
      <name>PEMHTTPD</name>
      <description>Apache</description>
      <canBeEdited>0</canBeEdited>
      <selected>1</selected>
      <show>1</show>
      <folderList>
        <!-- WIN: Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfiles</name>
          <platforms>all</platforms>
        </folder>
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfileswindows</name>
          <platforms>windows</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/windows/apache</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/windows/installer</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/windows/scripts</origin>
            </distributionDirectory>
	    <distributionFile origin="staging/windows/pem_httpd_3rd_party_licenses.txt"/>
          </distributionFileList>
        </folder>
        <folder>
          <description>Startup Files</description>
          <destination>${installdir}/apache/www/images</destination>
          <name>startupimagefileswindows</name>
          <platforms>windows</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>resources/edblogo.png</origin>
            </distributionFile>
          </distributionFileList>
        </folder>
        <!-- Linux Program Files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfileslinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/linux/apache</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/linux/installer</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/linux/scripts</origin>
            </distributionDirectory>
	    <distributionFile origin="staging/linux/pem_httpd_3rd_party_licenses.txt"/>
          </distributionFileList>
        </folder>
        <folder>
          <description>Startup Files</description>
          <destination>${installdir}/apache/www/images</destination>
          <name>startupimagefileslinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>resources/edblogo.png</origin>
            </distributionFile>
          </distributionFileList>
        </folder>
        <!-- Linux-X64: Program Files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfileslinux-x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/linux-x64/apache</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/linux-x64/installer</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/linux-x64/scripts</origin>
            </distributionDirectory>
	    <distributionFile origin="staging/linux-x64/pem_httpd_3rd_party_licenses.txt"/>
          </distributionFileList>
        </folder>
        <folder>
          <description>Startup Files</description>
          <destination>${installdir}/apache/www/images</destination>
          <name>startupimagefileslinux-x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>resources/edblogo.png</origin>
            </distributionFile>
          </distributionFileList>
        </folder>
        <!-- MAC Program Files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfilesosx</name>
          <platforms>osx</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/osx/apache</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/osx/installer</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/osx/scripts</origin>
            </distributionDirectory>
	    <distributionFile origin="staging/osx/pem_httpd_3rd_party_licenses.txt"/>
          </distributionFileList>
        </folder>
        <folder>
          <description>Startup Files</description>
          <destination>${installdir}/apache/www/images</destination>
          <name>startupimagefilesosx</name>
          <platforms>osx</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>resources/edblogo.png</origin>
            </distributionFile>
          </distributionFileList>
        </folder>
      </folderList>
      <!-- WIN: Start Menu -->
      <startMenuShortcutList>
        <startMenuShortcut>
          <!-- Launch Apache -->
          <comment>PEM-HTTPD</comment>
          <name>PEMHTTPD</name>
          <runInTerminal>0</runInTerminal>
          <windowsExec>wscript</windowsExec>
          <windowsExecArgs>//NoLogo "${installdir}\scripts\launchApacheHTTPD.vbs"</windowsExecArgs>
          <windowsIcon>${installdir}\scripts\images\run.ico</windowsIcon>
        </startMenuShortcut>
      </startMenuShortcutList>
    </component>
  </componentList>
  <parameterList>
    <booleanParameter name="extract_mode" cliOptionName="extract-only" default="0" ask="0" cliOptionShow="1"/>
    <stringParameter name="originalplatform" ask="0" cliOptionShow="0"/>
    <stringParameter name="branding" cliOptionName="branding" ask="0" cliOptionShow="0"/>
    <stringParameter name="pemversion" cliOptionName="pemversion" ask="0" cliOptionShow="0"/>
    <stringParameter name="lppython_loc" cliOptionName="lppython" default="" ask="0" cliOptionShow="0"
      description="LanguagePack Python installation path"/>
    <booleanParameter>
      <name>install_runtimes</name>
      <description>${msg(install.runtimes.description)}</description>
      <explanation/>
      <value/>
      <default>yes</default>
      <ask>yes</ask>
      <cliOptionName>install_runtimes</cliOptionName>
      <cliOptionShow>1</cliOptionShow>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
        <isFalse value="${extract_mode}"/>
      </ruleList>
    </booleanParameter>
    <parameterGroup>
      <!-- Apache Port -->
      <name>apacheport</name>
      <title>${msg(apache.details.title)}</title>
      <explanation>${msg(apache.details.explanation)}</explanation>
      <value/>
      <default/>
      <parameterList>
        <stringParameter>
          <name>port</name>
          <description>Apache Port</description>
          <explanation/>
          <value>${defaultport}</value>
          <default>${defaultport}</default>
          <allowEmptyValue>0</allowEmptyValue>
          <width>40</width>
          <validationActionList>
              <throwError>
                  <text>${msg(config.port.invalid)}</text>
                  <ruleList>
                     <stringTest>
                         <text>${port}</text>
                         <type>not_digit</type>
                     </stringTest>
                  </ruleList>
              </throwError>
              <throwError>
                  <text>${msg(config.port.invalid)}</text>
                  <ruleList>
                     <stringTest>
                         <text>${port}</text>
                         <type>empty</type>
                     </stringTest>
                  </ruleList>
              </throwError>
              <throwError>
                  <text>${msg(config.port.invalid)}</text>
                  <ruleEvaluationLogic>or</ruleEvaluationLogic>
                  <ruleList>
                     <compareValues>
                         <value1>${port}</value1>
                         <logic>less</logic>
                         <value2>1</value2>
                     </compareValues>
                     <compareValues>
                         <value1>${port}</value1>
                         <logic>greater</logic>
                         <value2>65535</value2>
                     </compareValues>
                  </ruleList>
              </throwError>
              <throwError>
                  <text>${msg(config.port.in.use)}</text>
                  <ruleList>
                      <portTest>
                         <condition>cannot_bind</condition>
                         <port>${port}</port>
                      </portTest>
                  </ruleList>
              </throwError>
          </validationActionList>
        </stringParameter>
      </parameterList>
      <ruleList>
        <compareText>
          <text>${apacheport}</text>
          <logic>equals</logic>
          <value/>
        </compareText>
      </ruleList>
    </parameterGroup>
    <!-- Install Directory -->
    <directoryParameter>
      <name>installdir</name>
      <description>Installer.Parameter.installdir.description</description>
      <explanation>Installer.Parameter.installdir.explanation</explanation>
      <value>${default_installdir}</value>
      <default/>
      <allowEmptyValue>0</allowEmptyValue>
      <ask>yes</ask>
      <cliOptionName>prefix</cliOptionName>
      <mustBeWritable>yes</mustBeWritable>
      <mustExist>0</mustExist>
      <width>40</width>
      <ruleList>
        <compareText>
          <text>${apacheport}</text>
          <logic>equals</logic>
          <value/>
        </compareText>
      </ruleList>
      <!-- Validating whether installdir is empty -->
      <validationActionList>
        <actionGroup>
           <actionList>
             <setInstallerVariable name="installdir" value="${default_installdir}" />
             <throwError>
              <text>${msg(pemhttpd.installdir.empty)}</text>
             </throwError>
           </actionList>
           <ruleList>
             <compareText>
               <text>${installdir}</text>
               <logic>equals</logic>
               <value />
             </compareText>
           </ruleList>
        </actionGroup>
      </validationActionList>
      <postShowPageActionList>
        <!-- Validating whether installdir is valid (Linux | MAC) -->
        <actionGroup>
          <actionList>
	    <setInstallerVariable name="installdir" value="${default_installdir}" />
            <showWarning>
              <text>${msg(pemhttpd.installdir.error)}</text>
            </showWarning>
            <setInstallerVariable name="next_page" value="installdir"/>
          </actionList>
          <ruleList>
            <regExMatch>
              <text>${installdir}</text>
              <logic>does_not_match</logic>
              <pattern>^/([0-9a-zA-Z_/\.\-]*)$</pattern>
            </regExMatch>
            <compareText>
              <text>${platform_name}</text>
              <logic>does_not_equal</logic>
              <value>windows</value>
            </compareText>
          </ruleList>
        </actionGroup>
        <actionGroup>
          <actionList>
	    <setInstallerVariable name="installdir" value="${default_installdir}" />
            <showWarning>
              <text>${msg(pemhttpd.installdir.error.unix)}</text>
            </showWarning>
            <setInstallerVariable name="next_page" value="installdir"/>
          </actionList>
          <ruleList>
            <regExMatch>
              <text>${installdir}</text>
              <logic>matches</logic>
              <pattern>^/+(usr)?$</pattern>
            </regExMatch>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </actionGroup>

        <!-- Validating whether installdir is valid (Windows) -->
        <actionGroup>
          <actionList>
	    <setInstallerVariable name="installdir" value="${default_installdir}" />
            <showWarning>
              <text>${msg(pemhttpd.installdir.error)}</text>
            </showWarning>
            <setInstallerVariable name="next_page" value="installdir"/>
          </actionList>
          <ruleList>
            <regExMatch>
              <text>${installdir}</text>
              <logic>does_not_match</logic>
              <pattern>^([a-zA-Z]:)\\([0-9a-zA-Z_\\\s\.\-\(\)]*)$</pattern>
            </regExMatch>
            <compareText>
              <text>${platform_name}</text>
              <logic>equals</logic>
              <value>windows</value>
            </compareText>
          </ruleList>
        </actionGroup>
      </postShowPageActionList>
    </directoryParameter>
     <!-- Explain that we're using an existing installation directory -->
        <labelParameter>
            <name>upgrade</name>
            <title>${msg(upgrade.existing.installation.title)}</title>
            <description>${msg(upgrade.existing.installation.description)}</description>
            <ruleList>
		 <compareText>
		  <text>${apacheport}</text>
	          <logic>does_not_equal</logic>
		  <value/>
	        </compareText>
            </ruleList>
    </labelParameter>
  </parameterList>
</project>
