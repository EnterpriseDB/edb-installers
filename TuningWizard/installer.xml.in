<project>
  <!-- Package details -->
  <shortName>tuningwizard</shortName>
  <fullName>TuningWizard</fullName>
  <version>PG_VERSION_TUNINGWIZARD-PG_BUILDNUM_TUNINGWIZARD</version>
  
  <!-- These options are used on Windows -->
  <startMenuGroupName>${branding}</startMenuGroupName>
  
  <!-- Product Specific Options -->
  <productDisplayName>EnterpriseDB ${product_fullname} ${productVersion}</productDisplayName>
  <productComments>EnterpriseDB ${product_fullname} ${productVersion}</productComments>
  <productUrlHelpLink>http://www.enterprisedb.com</productUrlHelpLink>
  <productUrlInfoAbout>http://www.enterprisedb.com</productUrlInfoAbout>
  
  <!-- The options are used for RPM registration -->
  <description>${product_fullname} ${productVersion} by EnterpriseDB</description>
  <summary>${msg(install.summary)}</summary>
  <vendor>EnterpriseDB</vendor>
  <release>1</release>

  <!-- Installer Size -->
  <width>550</width>
  <height>400</height>

  <!-- Misc package options -->
  <installerFilename>${product_shortname}-${product_version}-${platform_name}.${platform_exec_suffix}</installerFilename>
  <enableRollback>0</enableRollback>
  <requireInstallationByRootUser>1</requireInstallationByRootUser>
  <saveRelativePaths>1</saveRelativePaths>
  <outputDirectory>../output</outputDirectory>
  <uninstallerDirectory>${installdir}</uninstallerDirectory>
  <uninstallerName>uninstall-${product_shortname}</uninstallerName>
  <unattendedModeUI>minimal</unattendedModeUI>
  <compressionAlgorithm>lzma</compressionAlgorithm>
  <installationLogFile>${system_temp_directory}/install-${product_shortname}.log</installationLogFile>

  <!-- Images -->
  <disableSplashScreen>1</disableSplashScreen>
  <leftImage>../resources/edb-side.png</leftImage>

  <!-- i18n files for the UI -->
  <allowedLanguages>en</allowedLanguages>
  <customLanguageFileList>
    <language code="en" encoding="iso8859-1" file="i18n/en.lng"/>
  </customLanguageFileList>
  <preShowHelpActionList>
    <!-- MAC : Set the default installation directory -->
    <setInstallerVariable name="default_installdir" persist="1" value="/Library/PostgreSQL/EnterpriseDB-TuningWizard">
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="osx"/>
      </ruleList>
    </setInstallerVariable>
    
    <!-- LIN/LIN-X64 : Set the default installation directory -->
    <setInstallerVariable name="default_installdir" persist="1" value="${platform_install_prefix}/PostgreSQL/EnterpriseDB-TuningWizard">
      <ruleList>
        <compareText logic="contains" text="${platform_name}" value="linux"/>
      </ruleList>
    </setInstallerVariable>
    
    <!-- WIN : Set the default installation directory -->
    <setInstallerVariable name="default_installdir" persist="1" value="${platform_install_prefix}\PostgreSQL\EnterpriseDB-TuningWizard">
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
      </ruleList>
    </setInstallerVariable>
  </preShowHelpActionList>
  <!-- Prebuild Actons-->
  <preBuildActionList>
    <setInstallerVariable name="originalplatform" value="${platform_name}"/>
    <setInstallerVariable name="originalplatform" value="linux-x32">
      <ruleList>
        <compareText text="${platform_name}" value="linux"/>
      </ruleList>
    </setInstallerVariable>
  </preBuildActionList>
  
  <!-- Initialisation actions -->
  <initializationActionList>
    <setInstallerVariable name="productVersion" persist="1" value="PG_VERSION_TUNINGWIZARD" />
  
    <!-- Abort Installation as trying to  run a 32-bit installer on 64-bit machine -->
    <throwError customErrorMessage="${msg(platform.not.match)}" text="Unknown Error">
      <ruleList>
        <platformTest type="linux-x64"/>
        <compareText text="${originalplatform}" value="linux-x32"/>
      </ruleList>
    </throwError>
    
    <!-- Set the TuningWizard version(if exists) -->
    <setInstallerVariable name="TuningWizardVersion" value="" persist="0"/>
    
    <!-- MAC : Set the default installation directory -->
    <setInstallerVariable name="default_installdir" persist="1" value="/Library/PostgreSQL/EnterpriseDB-TuningWizard">
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="osx"/>
      </ruleList>
    </setInstallerVariable>
    
    <!-- LIN/LIN-X64 : Set the default installation directory -->
    <setInstallerVariable name="default_installdir" persist="1" value="${platform_install_prefix}/PostgreSQL/EnterpriseDB-TuningWizard">
      <ruleList>
        <compareText logic="contains" text="${platform_name}" value="linux"/>
      </ruleList>
    </setInstallerVariable>
    
    <!-- WIN : Set the default installation directory -->
    <setInstallerVariable name="default_installdir" persist="1" value="${platform_install_prefix}\PostgreSQL\EnterpriseDB-TuningWizard">
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
      </ruleList>
    </setInstallerVariable>
  </initializationActionList>
  
  <!-- Preinstallation actions -->
  <preInstallationActionList>
  
    <setInstallerVariable name="iExistingEmail" persist="0" value=""/>

    <!-- LIN & MAC: Check Previous Installation of TuningWizard -->
    <actionGroup>
      <actionList>
        <!-- Creates the ini file if not exits -->
        <touchFile path="/etc/postgres-reg.ini"/>

        <iniFileGet file="/etc/postgres-reg.ini"
          section="TuningWizard" key="Branding" variable="iBranding"/>
        <iniFileGet file="/etc/postgres-reg.ini"
          section="TuningWizard" key="Version" variable="TuningWizardVersion"/>
        <!-- Set the Installation Directory in case of re-install/upgrade -->
        <actionGroup>
          <actionList>
            <iniFileGet file="/etc/postgres-reg.ini" section="TuningWizard" key="InstallationDirectory" variable="installdir"/>
            <iniFileGet file="/etc/postgres-reg.ini" section="TuningWizard" key="Username" variable="iExistingEmail"/>
          </actionList>
          <ruleList>
            <compareText logic="does_not_equal" text="${TuningWizardVersion}" value=""/>
          </ruleList>
        </actionGroup>
      </actionList>
      <ruleList>
        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
      </ruleList>
    </actionGroup>
    
    <!-- WIN: Check Previous Installation of TuningWizard -->
    <actionGroup>
      <actionList>
        <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\TuningWizard" name="Version" variable="TuningWizardVersion"/>
        <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\TuningWizard" name="Branding" variable="iBranding"/>

        <!-- Set the Installation Directory in case of re-install/upgrade-->
        <actionGroup>
          <actionList>
            <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\TuningWizard" name="InstallationDirectory" variable="installdir"/>
            <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\TuningWizard" name="Username" variable="iExistingEmail"/>
          </actionList>
          <ruleList>
            <compareText logic="does_not_equal" text="${TuningWizardVersion}" value=""/>
          </ruleList>
        </actionGroup>
      </actionList>
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
      </ruleList>
    </actionGroup>
    
    <!-- If there appears to be an existing installation, with no Branding value. --> 
    <!-- force the default value. Otherwise, set the branding to whatever we read, -->
    <!-- or, set the default -->
    
    <!-- Existing, old install (version, but no branding) -->
    <setInstallerVariable name="branding" persist="0" value="PostgreSQL">
      <ruleList>
        <compareText logic="does_not_equal" text="${TuningWizardVersion}" value=""/>
        <compareText logic="equals" text="${iBranding}" value=""/>
      </ruleList>
    </setInstallerVariable>

    <!-- Existing install, with branding -->
    <setInstallerVariable name="branding" persist="0" value="${iBranding}">
      <ruleList>
        <compareText logic="does_not_equal" text="${iBranding}" value=""/>
      </ruleList>
    </setInstallerVariable>
    
    <!-- New install, nothing set on the command line -->
    <setInstallerVariable name="branding" persist="0" value="PostgreSQL">
      <ruleList>
        <compareText logic="equals" text="${branding}" value=""/>
      </ruleList>
    </setInstallerVariable>
  
    <logMessage text="Using branding: ${branding}"/>

    <!-- Existing, old install (version found, but no Username and not provided on the command-line) -->
    <setInstallerVariable name="existingEmail" persist="0" value="">
      <ruleList>
        <compareText logic="does_not_equal" text="${TuningWizardVersion}" value=""/>
        <compareText logic="equals" text="${iExistingEmail}" value=""/>
        <compareText logic="does_not_equal" text="${existingEmail}" value=""/>
      </ruleList>
    </setInstallerVariable>
 
    <!-- Existing install with Username (ignore command-line) -->
    <setInstallerVariable name="existingEmail" persist="0" value="${iExistingEmail}">
      <ruleList>
        <compareText logic="does_not_equal" text="${TuningWizardVersion}" value=""/>
        <compareText logic="does_not_equal" text="${iExistingEmail}" value=""/>
      </ruleList>
    </setInstallerVariable>

    <!-- Setting the installation type as upgrade if previous installation found -->
    <actionGroup>
      <actionList>
        <setInstallerVariable name="installationType" value="upgrade"/>
      </actionList>
      <ruleList>
        <compareText logic="does_not_equal" text="${TuningWizardVersion}" value=""/>
      </ruleList>
    </actionGroup>

    <!-- LIN/LIN-X64/MAC: Unpack existing-enterprisedb-mail authentication scripts -->
    <actionGroup>
      <actionList>
        <createDirectory path="${system_temp_directory}/tuningwizard"/>
        <!-- Lin: Unpack scripts and required libraries -->
        <actionGroup>
          <actionList>
            <unpackFile
              component="userValidation"
              destination="${system_temp_directory}/tuningwizard/sysinfo.sh"
              folder="scriptslinux"
              origin="sysinfo.sh"/>
            <unpackFile
              component="userValidation"
              destination="${system_temp_directory}/tuningwizard/validateUserClient.o"
              folder="scriptslinux"
              origin="validateUserClient.o"/>
            <unpackDirectory
              component="userValidation"
              destination="${system_temp_directory}/tuningwizard/"
              folder="scriptslinux"
              origin="lib"/>
          </actionList>
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="linux"/>
          </ruleList>
        </actionGroup>
        <!-- Lin-x64: Unpack scripts and required libraries -->
        <actionGroup>
          <actionList>
            <unpackFile
              component="userValidation"
              destination="${system_temp_directory}/tuningwizard/sysinfo.sh"
              folder="scriptslinux-x64"
              origin="sysinfo.sh"/>
            <unpackFile
              component="userValidation"
              destination="${system_temp_directory}/tuningwizard/validateUserClient.o"
              folder="scriptslinux-x64"
              origin="validateUserClient.o"/>
            <unpackDirectory
              component="userValidation"
              destination="${system_temp_directory}/tuningwizard/"
              folder="scriptslinux-x64"
              origin="lib"/>
          </actionList>
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="linux-x64"/>
          </ruleList>
        </actionGroup>
        <!-- MAC: Unpack scripts and required libraries -->
        <actionGroup>
          <actionList>
            <unpackFile
              component="userValidation"
              destination="${system_temp_directory}/tuningwizard/sysinfo.sh"
              folder="scriptsosx"
              origin="sysinfo.sh"/>
            <unpackFile
              component="userValidation"
              destination="${system_temp_directory}/tuningwizard/validateUserClient.o"
              folder="scriptsosx"
              origin="validateUserClient.o"/>
          </actionList>
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="osx"/>
          </ruleList>
        </actionGroup>

        <!-- Use script to generate the required information, while validating email -->
        <setEnvironmentVariable name="LD_LIBRARY_PATH" value="${system_temp_directory}/tuningwizard/lib"/>
        <!-- Generate UUID -->
        <setInstallerVariableFromScriptOutput name="uuid_val" showMessageOnError="0" exec="uuidgen" abortOnError="0"/>
        <!-- User predefined value, if uuidgen does not exist -->
        <setInstallerVariable name="uuid_val" value="16a874e6-241e-44ae-b27e-74aecded209a">
          <ruleList>
            <compareText value="" logic="equals" text="${uuid_val}"/>
          </ruleList>
        </setInstallerVariable>
        <!-- run sysinfo.sh -->
        <runProgram program="${system_temp_directory}/tuningwizard/sysinfo.sh"
                    workingDirectory="${system_temp_directory}/tuningwizard"
                    showMessageOnError="0"
                    abortOnError="0"/>
        <propertiesFileGet
          file="${system_temp_directory}/tuningwizard/sysinfo.properties"
          key="PROCESSOR_ARCH"
          variable="processor_arch"/>
        <propertiesFileGet
          file="${system_temp_directory}/tuningwizard/sysinfo.properties"
          key="TOTAL_MEM_IN_GB"
          variable="total_mem_in_gb"/>
        <propertiesFileGet
          file="${system_temp_directory}/tuningwizard/sysinfo.properties"
          key="OS"
          variable="os"/>
        <propertiesFileGet
          file="${system_temp_directory}/tuningwizard/sysinfo.properties"
          key="NUMBER_OF_PROCESSORS"
          variable="number_of_processors"/>
        <propertiesFileGet
          file="${system_temp_directory}/tuningwizard/sysinfo.properties"
          key="PROCESSOR_TYPE"
          variable="processor_type"/>
        <propertiesFileGet
          file="${system_temp_directory}/tuningwizard/sysinfo.properties"
          key="LANGUAGE"
          variable="language"/>
        <propertiesFileGet
          file="${system_temp_directory}/tuningwizard/sysinfo.properties"
          key="SHARED_MEMORY_IN_MB"
          variable="shared_memory_in_mb"/>
      </actionList>
      <ruleList>
        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
      </ruleList>
    </actionGroup>
    <actionGroup>
      <actionList>
        <createDirectory path="${system_temp_directory}\tuningwizard"/>
        <unpackFile
          component="userValidation"
          destination="${system_temp_directory}\tuningwizard\validateUserClient.exe"
          folder="scriptswindows"
          origin="validateUserClient.exe"/>
        <unpackFile
          component="userValidation"
          destination="${system_temp_directory}\tuningwizard\dbserver_guid.exe"
          folder="scriptswindows"
          origin="dbserver_guid.exe"/>
        <setInstallerVariableFromScriptOutput
          name="uuid_val"
          showMessageOnError="0"
          exec="${system_temp_directory}\tuningwizard\dbserver_guid.exe"
          abortOnError="0"/>
        <setInstallerVariableFromRegEx
          name="uuid_val"
          text="${uuid_val}"
          pattern="^dbser_guid=([^\S]*)$"
          substitution="\1"
          abortOnError="0"
          showMessageOnError="0">
          <ruleList>
            <compareText logic="does_not_equal" text="${uuid_val}" value=""/>
          </ruleList>
        </setInstallerVariableFromRegEx>
        <setInstallerVariable name="uuid_val" value="16a874e6-241e-44ae-b27e-74aecded209a">
          <ruleEvaluationLogic>or</ruleEvaluationLogic>
          <ruleList>
            <compareText text="${uuid_val}" logic="equals" value=""/>
            <regExMatch text="${uuid_val}" logic="does_not_match" pattern="^([A-Fa-f0-9\-]*)$"/>
          </ruleList>
        </setInstallerVariable>
      </actionList>
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
      </ruleList>
    </actionGroup>
    <actionGroup>
      <actionList>
        <throwError text="Please provide the email and password for the EnterpriseDB." abortOnError="1">
          <ruleEvaluationLogic>or</ruleEvaluationLogic>
          <ruleList>
            <compareText logic="equals" text="${existingEmail}" value=""/>
            <compareText logic="equals" text="${existingPassword}" value=""/>
          </ruleList>
        </throwError>
        <logMessage text="Sending parameter:&quot;${uuid_val}&quot; &quot;TuningWizard&quot; &quot;false&quot; &quot;false&quot; &quot;${language}&quot; &quot;${os}&quot; &quot;${number_of_processors}&quot; &quot;${processor_arch}&quot; &quot;${processor_type}&quot; &quot;${total_mem_in_gb}&quot; &quot;${shared_memory_in_mb}&quot; &quot;${existingEmail}&quot; &quot;${existingPassword}&quot;">
          <ruleList>
            <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
          </ruleList>
        </logMessage>
        <setInstallerVariableFromScriptOutput
          customErrorMessage="${msg(validatinguser.ws.error)}"
          exec="${system_temp_directory}/tuningwizard/validateUserClient.o"
          execArgs="&quot;${uuid_val}&quot; &quot;TuningWizard&quot; &quot;false&quot; &quot;false&quot; &quot;${language}&quot; &quot;${os}&quot; &quot;${number_of_processors}&quot; &quot;${processor_arch}&quot; &quot;${processor_type}&quot; &quot;${total_mem_in_gb}&quot; &quot;${shared_memory_in_mb}&quot; &quot;${existingEmail}&quot; &quot;${existingPassword}&quot;"
          name="ws_existinguser_result"
          abortOnError="0"
          workingDirectory="${system_temp_directory}/tuningwizard">
          <ruleList>
            <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
          </ruleList>
        </setInstallerVariableFromScriptOutput>
        <logMessage text="Sending parameter: &quot;TuningWizard&quot; &quot;false&quot; &quot;false&quot; &quot;${existingEmail}&quot; &quot;${existingPassword}&quot; &quot;${uuid_val}&quot;">
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
          </ruleList>
        </logMessage>
        <setInstallerVariableFromScriptOutput
          customErrorMessage="${msg(validatinguser.ws.error)}"
          exec="${system_temp_directory}\tuningwizard/validateUserClient.exe"
          execArgs="&quot;TuningWizard&quot; &quot;false&quot; &quot;false&quot; &quot;${existingEmail}&quot; &quot;${existingPassword}&quot; &quot;${uuid_val}&quot;"
          name="ws_existinguser_result"
          abortOnError="0"
          workingDirectory="${system_temp_directory}\tuningwizard">
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
          </ruleList>
        </setInstallerVariableFromScriptOutput>
        <stringModify text="${ws_existinguser_result}" variable="ws_existinguser_result" logic="trim"/>
        <throwError abortOnError="1" text="${msg(ws.email.not.authenticated)}">
          <ruleList>
            <compareText logic="equals" text="${ws_existinguser_result}" value="1"/>
          </ruleList>
        </throwError>
        <throwError abortOnError="1" text="${msg(ws.email.not.validated)}">
          <ruleList>
            <compareText logic="equals" text="${ws_existinguser_result}" value="2"/>
          </ruleList>
        </throwError>
        <throwError abortOnError="1" text="${msg(ws.email.already.exists)}">
          <ruleList>
            <compareText logic="equals" text="${ws_existinguser_result}" value="3"/>
          </ruleList>
        </throwError>
        <throwError abortOnError="1" text="${msg(ws.exception.from.server)}">
          <ruleList>
            <compareText logic="equals" text="${ws_existinguser_result}" value="4"/>
          </ruleList>
        </throwError>
        <throwError abortOnError="1" text="${msg(ws.internet.not.connected)}">
          <ruleList>
            <compareText logic="equals" text="${ws_existinguser_result}" value=""/>
          </ruleList>
        </throwError>
      </actionList>
      <ruleList>
        <compareText logic="equals" text="${installer_ui}" value="unattended"/>
        <compareText logic="equals" text="${iExistingEmail}" value=""/>
      </ruleList>
    </actionGroup>
  </preInstallationActionList>
  
  <!-- Post installation actions -->
  <postInstallationActionList>
  
    <!-- Write the TuningWizard Version to INI File -->
    <actionGroup>
      <actionList>
        <iniFileSet file="/etc/postgres-reg.ini" section="TuningWizard" key="Description" value="${msg(install.summary)}"/>
        <iniFileSet file="/etc/postgres-reg.ini" section="TuningWizard" key="InstallationDirectory" value="${installdir}"/>
        <iniFileSet file="/etc/postgres-reg.ini" section="TuningWizard" key="Version" value="${product_version}"/>
        <iniFileSet file="/etc/postgres-reg.ini" section="TuningWizard" key="Branding" value="${branding}"/>
        <iniFileSet file="/etc/postgres-reg.ini" section="TuningWizard" key="Username" value="${existingEmail}"/>
      </actionList>
      <ruleList>
        <compareText text="${platform_name}" logic="does_not_equal" value="windows"/>
      </ruleList>
    </actionGroup>
    
    <actionGroup>
      <actionList>
        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\TuningWizard" name="Description" value="${msg(install.summary)}"/>
        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\TuningWizard" name="InstallationDirectory" value="${installdir}"/>
        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\TuningWizard" name="Version" value="${product_version}"/>
        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\TuningWizard" name="Branding" value="${branding}"/>
        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\TuningWizard" name="Username" value="${existingEmail}"/>
      </actionList>
      <ruleList>
        <compareText text="${platform_name}" logic="equals" value="windows"/>
      </ruleList>
    </actionGroup>
    
    <!-- LIN & MAC: Setting the installation directory in the launch script -->
    <actionGroup>
      <actionList>
        <substitute files="${installdir}/scripts/launchTuningWizard.sh">
          <substitutionList>
            <substitution pattern="@@INSTALLDIR@@" value="${installdir}"/>
          </substitutionList>
        </substitute>
        <substitute files="${installdir}/scripts/ctlTuningWizard.sh">
          <substitutionList>
            <substitution pattern="@@INSTALLDIR@@" value="${installdir}"/>
          </substitutionList>
        </substitute>
        <substitute files="${installdir}/scripts/runTuningWizard.sh">
          <substitutionList>
            <substitution pattern="@@INSTALLDIR@@" value="${installdir}"/>
          </substitutionList>
        </substitute>
      </actionList>
      <ruleList>
        <compareText text="${platform_name}" logic="contains" value="linux"/>
      </ruleList>
    </actionGroup>
    
    <!-- LIN & MAC: Create Menu Shortcuts -->
    <runProgram
      program="${installdir}/installer/TuningWizard/createshortcuts.sh"
      programArguments="&quot;${installdir}&quot; &quot;${branding}&quot;"
      progressText="${msg(progress.text.creating.shortcuts)}"
      abortOnError="0"
      workingDirectory="${installdir}/installer/TuningWizard"
      showMessageOnError="1">
      <ruleList>
        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
      </ruleList>
    </runProgram>
  </postInstallationActionList>
  
  <!-- preUninstallation actions -->
  <preUninstallationActionList>
  
    <!-- Unsetting the TuningWizard values in the ini file -->
    <actionGroup>
      <actionList>
        <iniFileSet file="/etc/postgres-reg.ini" section="TuningWizard" key="Description" value=""/>
        <iniFileSet file="/etc/postgres-reg.ini" section="TuningWizard" key="InstallationDirectory" value=""/>
        <iniFileSet file="/etc/postgres-reg.ini" section="TuningWizard" key="Version" value=""/>
        <iniFileSet file="/etc/postgres-reg.ini" section="TuningWizard" key="Branding" value=""/>
        <iniFileSet file="/etc/postgres-reg.ini" section="TuningWizard" key="Username" value=""/>
      </actionList>
      <ruleList>
        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
      </ruleList>
    </actionGroup>
    
    <!-- LIN : Remove Menu shortcuts -->
    <runProgram
      program="${installdir}/installer/TuningWizard/removeshortcuts.sh"
      workingDirectory="${installdir}/installer/TuningWizard"
      programArguments="&quot;${installdir}&quot; &quot;${branding}&quot;"
      abortOnError="0"
      showMessageOnError="0">
      <ruleList>
        <compareText logic="contains" text="${platform_name}" value="linux"/>
      </ruleList>
    </runProgram>
    
    <!-- MAC : Remove Menu shortcuts -->
    <deleteFile path="/Applications/${branding}/Tuning Wizard.app">
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="osx"/>
      </ruleList>
    </deleteFile>
  </preUninstallationActionList>
  
  <!-- finalPage actions -->
  <finalPageActionList>
    <launchBrowser url="http://www.enterprisedb.com/installer/tuning.do"
                   progressText="${msg(Installer.Installation.Finished.Visit.Us)}"/>
  </finalPageActionList>
  
  <!-- Components -->
  <componentList>
    <component>
      <name>TuningWizard</name>
      <description>TuningWizard</description>
      <canBeEdited>0</canBeEdited>
      <selected>1</selected>
      <show>1</show>
      <folderList>
      
        <!-- LIN: Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfilesbinlinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux/TuningWizard/TuningWizard</origin>
            </distributionFile>
            <distributionDirectory>
              <origin>staging/linux/TuningWizard/lib</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Installation Files</description>
          <destination>${installdir}</destination>
          <name>installfileslinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/linux/installer</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Launch And Menu Scripts</description>
          <destination>${installdir}</destination>
          <name>menuandlaunchfileslinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/linux/scripts</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        
        <!-- LIN-X64: Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfilesbinlinux-x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux-x64/TuningWizard/TuningWizard</origin>
            </distributionFile>
            <distributionDirectory>
              <origin>staging/linux-x64/TuningWizard/lib</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Installation Files</description>
          <destination>${installdir}</destination>
          <name>installfileslinux-x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/linux-x64/installer</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Launch And Menu Scripts</description>
          <destination>${installdir}</destination>
          <name>menuandlaunchfileslinux-x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/linux-x64/scripts</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        
        <!-- MAC: Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfilesbinosx</name>
          <platforms>osx</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/osx/TuningWizard/TuningWizard.app</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Installation Files</description>
          <destination>${installdir}</destination>
          <name>installfilesosx</name>
          <platforms>osx</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/osx/installer</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Launch And Menu Scripts</description>
          <destination>${installdir}</destination>
          <name>menuandlaunchfilesosx</name>
          <platforms>osx</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/osx/scripts</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        
        <!-- WIN: Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfilesbinwindows</name>
          <platforms>windows</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/windows/TuningWizard/TuningWizard.exe</origin>
            </distributionDirectory>
            <distributionFile>
              <origin>resources/TuningWizard.ico</origin>
            </distributionFile>
          </distributionFileList>
        </folder>
      </folderList>
      
      <!-- WIN: Start Menu -->
      <startMenuShortcutList>
        <startMenuShortcut>
        
          <!-- Launch TuningWizard -->
          <comment>EnterpriseDB Tuning Wizard</comment>
          <name>Tuning Wizard</name>
          <runInTerminal>0</runInTerminal>
          <windowsExec>"${installdir}\TuningWizard.exe"</windowsExec>
          <windowsExecArgs/>
          <windowsIcon>${installdir}/TuningWizard.ico</windowsIcon>
        </startMenuShortcut>
      </startMenuShortcutList>
    </component>
    <component>
      <name>userValidation</name>
      <description>User Validation Scripts</description>
      <canBeEdited>0</canBeEdited>
      <selected>0</selected>
      <show>0</show>
      <folderList>
        <!-- LIN: Program files -->
        <folder>
          <description>Scripts</description>
          <destination>${system_temp_directory}/tuningwizard</destination>
          <name>scriptslinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionFile origin="staging/linux/UserValidation/validateUserClient.o"/>
            <distributionFile origin="staging/linux/UserValidation/sysinfo.sh"/>
            <distributionDirectory origin="staging/linux/UserValidation/lib"/>
          </distributionFileList>
        </folder>
        <!-- LIN-X64: Program files -->
        <folder>
          <description>Scripts</description>
          <destination>${system_temp_directory}/tuningwizard</destination>
          <name>scriptslinux-x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionFile origin="staging/linux-x64/UserValidation/validateUserClient.o"/>
            <distributionFile origin="staging/linux-x64/UserValidation/sysinfo.sh"/>
            <distributionDirectory origin="staging/linux-x64/UserValidation/lib"/>
          </distributionFileList>
        </folder>
        
        <!-- MAC: Program files -->
        <folder>
          <description>Scripts</description>
          <destination>${system_temp_directory}/tuningwizard</destination>
          <name>scriptsosx</name>
          <platforms>osx</platforms>
          <distributionFileList>
            <distributionFile origin="staging/osx/UserValidation/validateUserClient.o"/>
            <distributionFile origin="staging/osx/UserValidation/sysinfo.sh"/>
          </distributionFileList>
        </folder>

        <!-- WIN: Program files -->
        <folder>
          <description>Scripts</description>
          <destination>${system_temp_directory}/tuningwizard</destination>
          <name>scriptswindows</name>
          <platforms>windows</platforms>
          <distributionFileList>
            <distributionFile origin="staging/windows/UserValidation/dbserver_guid.exe"/>
            <distributionFile origin="staging/windows/UserValidation/validateUserClient.exe"/>
          </distributionFileList>
        </folder>
      </folderList>
    </component>
  </componentList>
  <parameterList>
    <parameterGroup
      name="registration"
      title="${msg(registration.title.value)}"
      explanation="${msg(registration.explanation.value)}">
      <parameterList>
        <choiceParameter
          name="alreadyRegistered"
          default="1"
          width="30"
          allowEmptyValue="0"
          displayType="radiobuttons">
          <optionList>
            <option
              text="${msg(registration.existingemail.yes)}"
              value="1"/>
            <option
              text="${msg(registration.existingemail.no)}"
              value="0"/>
          </optionList>
        </choiceParameter>
      </parameterList>
      <!-- Open registration page, if not already registered user -->
      <postShowPageActionList>
        <launchBrowser url="https://www.enterprisedb.com/create-account.do"
                       abortOnError="1">
          <ruleList>
              <isFalse value="${alreadyRegistered}"/>
          </ruleList>
        </launchBrowser>
      </postShowPageActionList>
      <!-- Check if upgradation is done on older version of TuningWizard,
           which does not have this authentication process -->
      <ruleList>
         <compareText logic="equals" text="${iExistingEmail}" value=""/>
      </ruleList>
    </parameterGroup>
    <parameterGroup
      name="userAuthenticationPage"
      title="${msg(existingemail.authentication.title.value)}">
      <parameterList>
        <labelParameter
          name="existingemail_authentication_lbl"
          explanation="${msg(existingemail.authentication.explanation.value)}"/>
        <stringParameter
          name="existingEmail"
          cliOptionName="existing-user"
          width="30"
          ask="1"
          description="${msg(userAuth.email.value)}"
          allowEmptyValue="1"
          cliOptionShow="1">
          <validationActionList>
            <throwError text="${msg(error.invalid.email.value)}">
              <ruleList>
                <regExMatch logic="does_not_match" text="${existingEmail}">
                  <pattern>^[a-zA-Z][\w\.-]*[a-zA-Z0-9]@[a-zA-Z0-9][\w\.-]*[a-zA-Z0-9]\.[a-zA-Z][a-zA-Z\.]*[a-zA-Z]$</pattern>
                </regExMatch>
              </ruleList>
            </throwError>
          </validationActionList>
        </stringParameter>
        <passwordParameter
          name="existingPassword"
          width="30"
          cliOptionName="existing-password"
          ask="1"
          description="${msg(userAuth.password.value)}"
          allowEmptyValue="0"
          askForConfirmation="0"
          cliOptionShow="1">
          <validationActionList>
            <throwError text="${msg(error.invalid.password.value)}">
              <ruleEvaluationLogic>or</ruleEvaluationLogic>
              <ruleList>
                <stringTest text="${existingPassword}" type="empty"/>
                <regExMatch logic="matches" pattern="\s+" text="${existingPassword}"/>
              </ruleList>
            </throwError>
          </validationActionList>
        </passwordParameter>
      </parameterList>
      <!-- Validate entered email & password -->
      <postShowPageActionList>
        <logMessage text="Sending parameter:&quot;${uuid_val}&quot; &quot;TuningWizard&quot; &quot;false&quot; &quot;false&quot; &quot;${language}&quot; &quot;${os}&quot; &quot;${number_of_processors}&quot; &quot;${processor_arch}&quot; &quot;${processor_type}&quot; &quot;${total_mem_in_gb}&quot; &quot;${shared_memory_in_mb}&quot; &quot;${existingEmail}&quot; &quot;${existingPassword}&quot;"/>
        <setInstallerVariableFromScriptOutput
          customErrorMessage="${msg(validatinguser.ws.error)}"
          exec="${system_temp_directory}/tuningwizard/validateUserClient.o"
          execArgs="&quot;${uuid_val}&quot; &quot;TuningWizard&quot; &quot;false&quot; &quot;false&quot; &quot;${language}&quot; &quot;${os}&quot; &quot;${number_of_processors}&quot; &quot;${processor_arch}&quot; &quot;${processor_type}&quot; &quot;${total_mem_in_gb}&quot; &quot;${shared_memory_in_mb}&quot; &quot;${existingEmail}&quot; &quot;${existingPassword}&quot;"
          name="ws_existinguser_result"
          abortOnError="0"
          workingDirectory="${system_temp_directory}/tuningwizard">
          <ruleList>
            <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
          </ruleList>
        </setInstallerVariableFromScriptOutput>
        <setInstallerVariableFromScriptOutput
          customErrorMessage="${msg(validatinguser.ws.error)}"
          exec="${system_temp_directory}\tuningwizard/validateUserClient.exe"
          execArgs="&quot;TuningWizard&quot; &quot;false&quot; &quot;false&quot; &quot;${existingEmail}&quot; &quot;${existingPassword}&quot; &quot;${uuid_val}&quot;"
          name="ws_existinguser_result"
          abortOnError="0"
          workingDirectory="${system_temp_directory}\tuningwizard">
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
          </ruleList>
        </setInstallerVariableFromScriptOutput>
        <throwError abortOnError="0" text="${msg(ws.email.not.authenticated)}">
          <ruleList>
            <compareText logic="equals" text="${ws_existinguser_result}" value="1"/>
          </ruleList>
        </throwError>
        <throwError abortOnError="0" text="${msg(ws.email.not.validated)}">
          <ruleList>
            <compareText logic="equals" text="${ws_existinguser_result}" value="2"/>
          </ruleList>
        </throwError>
        <throwError abortOnError="0" text="${msg(ws.email.already.exists)}">
          <ruleList>
            <compareText logic="equals" text="${ws_existinguser_result}" value="3"/>
          </ruleList>
        </throwError>
        <throwError abortOnError="0" text="${msg(ws.exception.from.server)}">
          <ruleList>
            <compareText logic="equals" text="${ws_existinguser_result}" value="4"/>
          </ruleList>
        </throwError>
        <throwError abortOnError="0" text="${msg(ws.internet.not.connected)}">
          <ruleList>
            <compareText logic="equals" text="${ws_existinguser_result}" value=""/>
          </ruleList>
        </throwError>

        <setInstallerVariable name="stay_on_this_page" value="true"/>
        <setInstallerVariable name="stay_on_this_page" value="false">
          <ruleList>
            <compareText logic="equals" text="${ws_existinguser_result}" value="0"/>
          </ruleList>
        </setInstallerVariable>
         <setInstallerVariable name="stay_on_this_page" value="false">
          <ruleList>
            <compareText logic="equals" text="${ws_existinguser_result}" value="00"/>
            <isTrue value="${ws_existinguser_result}"/>
          </ruleList>
        </setInstallerVariable>

        <setInstallerVariable name="next_page" value="userAuthenticationPage">
          <ruleList>
            <isTrue value="${stay_on_this_page}"/>
          </ruleList>
        </setInstallerVariable>
      </postShowPageActionList>
      <!-- Check if upgradation is done on older version of TuningWizard,
           which does not have this authentication process -->
      <ruleList>
         <compareText logic="equals" text="${iExistingEmail}" value=""/>
      </ruleList>
    </parameterGroup>
    <stringParameter name="originalplatform" ask="0" cliOptionShow="0"/>
    <stringParameter name="branding" cliOptionName="branding" ask="0" cliOptionShow="0"/>
    <!-- Install Directory -->
    <parameterGroup
      name="installationDirectory">
      <parameterList>
        <directoryParameter>
          <name>installdir</name>
          <description>Installer.Parameter.installdir.description</description>
          <explanation>Installer.Parameter.installdir.explanation</explanation>
          <value>${default_installdir}</value>
          <default/>
          <allowEmptyValue>0</allowEmptyValue>
          <ask>yes</ask>
          <cliOptionName>prefix</cliOptionName>
          <mustBeWritable>yes</mustBeWritable>
          <mustExist>0</mustExist>
          <width>40</width>
          <ruleList>
            <compareText text="${TuningWizardVersion}" logic="equals" value=""/>
          </ruleList>
          
          <!-- Validating whether installdir is empty -->
          <validationActionList>
            <actionGroup>
              <actionList>
                <setInstallerVariable name="installdir" value="${default_installdir}" />
                <throwError text="${msg(tuningwizard.installdir.empty)}"/>
              </actionList>
              <ruleList>
                <compareText text="${installdir}" logic="equals" value=""/>
              </ruleList>
            </actionGroup>
          </validationActionList>
          
          <!-- Validating whether installdir contains whitespaces (Linux | Mac) -->
          <validationActionList>
            <actionGroup>
              <actionList>
                <setInstallerVariable name="installdir" value="${default_installdir}" />
                <throwError text="${msg(tuningwizard.installdir.error)}"/>
              </actionList>
              <ruleList>
                <regExMatch text="${installdir}" logic="does_not_match">
                  <pattern>^/([0-9a-zA-Z_/\.\-]*)$</pattern>
                </regExMatch>
                <compareText text="${platform_name}" logic="does_not_equal" value="windows"/>
              </ruleList>
            </actionGroup>
            
            <!-- Validating whether installdir is valid (Windows) -->
            <actionGroup>
              <actionList>
                 <setInstallerVariable name="installdir" value="${default_installdir}" />
                 <showWarning text="${msg(tuningwizard.installdir.error)}"/>
                 <setInstallerVariable name="next_page" value="installdir"/>
               </actionList>
               <ruleList>
                <regExMatch text="${installdir}" logic="does_not_match">
                   <pattern>^([a-zA-Z]:)\\([0-9a-zA-Z_\\\s\.\-\(\)]*)$</pattern>
                </regExMatch>
                <compareText text="${platform_name}" logic="equals" value="windows"/>
              </ruleList>
            </actionGroup>
          </validationActionList>
        </directoryParameter>
      </parameterList>
   </parameterGroup> 
    <!-- Explain that we're using an existing installation directory -->
    <labelParameter>
      <name>upgrade</name>
      <title>${msg(upgrade.existing.installation.title)}</title>
      <description>${msg(upgrade.existing.installation.description)}</description>
      <ruleList>
        <compareText text="${TuningWizardVersion}" logic="does_not_equal" value=""/>
      </ruleList>
    </labelParameter>
  </parameterList>
</project>
