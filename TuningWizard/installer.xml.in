<project>
  <!-- Package details -->
  <shortName>tuningwizard</shortName>
  <fullName>TuningWizard</fullName>
  <version>PG_VERSION_TUNINGWIZARD-PG_BUILDNUM_TUNINGWIZARD</version>

  <!-- These options are used on Windows -->
  <startMenuGroupName>${branding}</startMenuGroupName>

  <!-- Product Specific Options -->
  <productDisplayName>EnterpriseDB ${product_fullname} ${productVersion}</productDisplayName>
  <productComments>EnterpriseDB ${product_fullname} ${productVersion}</productComments>
  <productUrlHelpLink>http://www.enterprisedb.com</productUrlHelpLink>
  <productUrlInfoAbout>http://www.enterprisedb.com</productUrlInfoAbout>

  <!-- The options are used for RPM registration -->
  <description>${product_fullname} ${productVersion} by EnterpriseDB</description>
  <summary>${msg(install.summary)}</summary>
  <vendor>EnterpriseDB</vendor>
  <release>1</release>

  <!-- Installer Size -->
  <width>550</width>
  <height>400</height>

  <!-- Misc package options -->
  <installerFilename>${product_shortname}-${product_version}-${platform_name}.${platform_exec_suffix}</installerFilename>
  <enableRollback>0</enableRollback>
  <requireInstallationByRootUser>1</requireInstallationByRootUser>
  <saveRelativePaths>1</saveRelativePaths>
  <outputDirectory>../output</outputDirectory>
  <uninstallerDirectory>${installdir}</uninstallerDirectory>
  <uninstallerName>uninstall-${product_shortname}</uninstallerName>
  <unattendedModeUI>minimal</unattendedModeUI>
  <compressionAlgorithm>lzma</compressionAlgorithm>
  <installationLogFile>${system_temp_directory}/install-${product_shortname}.log</installationLogFile>
  <uninstallationLogFile>${system_temp_directory}/uninstall-${product_shortname}.log</uninstallationLogFile>
  <allowWindowResize>1</allowWindowResize>

  <!-- Images -->
  <disableSplashScreen>1</disableSplashScreen>
  <leftImage>../resources/edb-side.png</leftImage>

  <!-- i18n files for the UI -->
  <allowedLanguages>en</allowedLanguages>
  <customLanguageFileList>
    <language code="en" encoding="iso8859-1" file="i18n/en.lng"/>
  </customLanguageFileList>
  <preShowHelpActionList>
    <!-- MAC : Set the default installation directory -->
    <setInstallerVariable name="default_installdir" persist="1" value="/Library/PostgreSQL/EnterpriseDB-TuningWizard">
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="osx"/>
      </ruleList>
    </setInstallerVariable>

    <!-- LIN/LIN-X64 : Set the default installation directory -->
    <setInstallerVariable name="default_installdir" persist="1" value="${platform_install_prefix}/PostgreSQL/EnterpriseDB-TuningWizard">
      <ruleList>
        <compareText logic="contains" text="${platform_name}" value="linux"/>
      </ruleList>
    </setInstallerVariable>

    <!-- WIN : Set the default installation directory -->
    <setInstallerVariable name="default_installdir" persist="1" value="${platform_install_prefix}\PostgreSQL\EnterpriseDB-TuningWizard">
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
      </ruleList>
    </setInstallerVariable>
  </preShowHelpActionList>
  <!-- Prebuild Actons-->
  <preBuildActionList>
    <setInstallerVariable name="originalplatform" value="${platform_name}"/>
    <setInstallerVariable name="originalplatform" value="linux-x32">
      <ruleList>
        <compareText text="${platform_name}" value="linux"/>
      </ruleList>
    </setInstallerVariable>
  </preBuildActionList>

  <!-- Initialisation actions -->
  <initializationActionList>
    <setInstallerVariable name="productVersion" persist="1" value="PG_VERSION_TUNINGWIZARD" />

    <!-- Abort Installation as trying to  run a 32-bit installer on 64-bit machine -->
    <throwError customErrorMessage="${msg(platform.not.match)}" text="Unknown Error">
      <ruleList>
        <platformTest type="linux-x64"/>
        <compareText text="${originalplatform}" value="linux-x32"/>
      </ruleList>
    </throwError>

    <!-- Set the TuningWizard version(if exists) -->
    <setInstallerVariable name="TuningWizardVersion" value="" persist="0"/>

    <!-- MAC : Set the default installation directory -->
    <setInstallerVariable name="default_installdir" persist="1" value="/Library/PostgreSQL/EnterpriseDB-TuningWizard">
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="osx"/>
      </ruleList>
    </setInstallerVariable>

    <!-- LIN/LIN-X64 : Set the default installation directory -->
    <setInstallerVariable name="default_installdir" persist="1" value="${platform_install_prefix}/PostgreSQL/EnterpriseDB-TuningWizard">
      <ruleList>
        <compareText logic="contains" text="${platform_name}" value="linux"/>
      </ruleList>
    </setInstallerVariable>

    <!-- WIN : Set the default installation directory -->
    <setInstallerVariable name="default_installdir" persist="1" value="${platform_install_prefix}\PostgreSQL\EnterpriseDB-TuningWizard">
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
      </ruleList>
    </setInstallerVariable>

    <!-- Registration Pre-Installation Action List -->
    <include file="staging/registration_initialization.xml"/>

  </initializationActionList>

  <!-- Preinstallation actions -->
  <preInstallationActionList>

    <createDirectory path="${system_temp_directory}/tuningwizard"/>

    <!-- LIN & MAC: Check Previous Installation of TuningWizard -->
    <actionGroup>
      <actionList>
        <!-- Creates the ini file if not exits -->
        <touchFile path="/etc/postgres-reg.ini"/>

        <iniFileGet file="/etc/postgres-reg.ini"
          section="TuningWizard" key="Branding" variable="iBranding"/>
        <iniFileGet file="/etc/postgres-reg.ini"
          section="TuningWizard" key="Version" variable="TuningWizardVersion"/>
        <!-- Set the Installation Directory in case of re-install/upgrade -->
        <actionGroup>
          <actionList>
            <iniFileGet file="/etc/postgres-reg.ini" section="TuningWizard" key="InstallationDirectory" variable="installdir"/>
          </actionList>
          <ruleList>
            <compareText logic="does_not_equal" text="${TuningWizardVersion}" value=""/>
          </ruleList>
        </actionGroup>
      </actionList>
      <ruleList>
        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
      </ruleList>
    </actionGroup>

    <!-- WIN: Check Previous Installation of TuningWizard -->
    <actionGroup>
      <actionList>
        <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\TuningWizard" name="Version" variable="TuningWizardVersion"/>
        <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\TuningWizard" name="Branding" variable="iBranding"/>

        <!-- Set the Installation Directory in case of re-install/upgrade-->
        <actionGroup>
          <actionList>
            <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\TuningWizard" name="InstallationDirectory" variable="installdir"/>
          </actionList>
          <ruleList>
            <compareText logic="does_not_equal" text="${TuningWizardVersion}" value=""/>
          </ruleList>
        </actionGroup>
      </actionList>
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
      </ruleList>
    </actionGroup>

    <!-- If there appears to be an existing installation, with no Branding value. -->
    <!-- force the default value. Otherwise, set the branding to whatever we read, -->
    <!-- or, set the default -->

    <!-- Existing, old install (version, but no branding) -->
    <setInstallerVariable name="branding" persist="0" value="PostgreSQL">
      <ruleList>
        <compareText logic="does_not_equal" text="${TuningWizardVersion}" value=""/>
        <compareText logic="equals" text="${iBranding}" value=""/>
      </ruleList>
    </setInstallerVariable>

    <!-- Existing install, with branding -->
    <setInstallerVariable name="branding" persist="0" value="${iBranding}">
      <ruleList>
        <compareText logic="does_not_equal" text="${iBranding}" value=""/>
      </ruleList>
    </setInstallerVariable>

    <!-- New install, nothing set on the command line -->
    <setInstallerVariable name="branding" persist="0" value="Postgres Plus Add-ons">
      <ruleList>
        <compareText logic="equals" text="${branding}" value=""/>
      </ruleList>
    </setInstallerVariable>

    <logMessage text="Using branding: ${branding}"/>

    <!-- Setting the installation type as upgrade if previous installation found -->
    <actionGroup>
      <actionList>
        <setInstallerVariable name="installationType" value="upgrade"/>
      </actionList>
      <ruleList>
        <compareText logic="does_not_equal" text="${TuningWizardVersion}" value=""/>
      </ruleList>
    </actionGroup>

    <actionGroup>
      <actionList>
        <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{7299052b-02a4-4627-81f2-1818da5d550d}" name="DisplayVersion" variable="VC_REDIST_2005_VERSION"/>
        <actionGroup>
          <actionList>
            <createDirectory path="${system_temp_directory}\tuningwizard"/>
            <unpackFile component="vcredist"
                        destination="${system_temp_directory}\vcredist_x86.exe"
                        folder="vcredistwindows"
                        origin="vcredist_x86.exe"/>
            <runProgram program="${system_temp_directory}\vcredist_x86.exe"
                        programArguments="/q"
                        workingDirectory="${windir}"
                        abortOnError="0"
                        showMessageOnError="0"/>
          </actionList>
          <ruleList>
            <compareText logic="equals" text="${VC_REDIST_2005_VERSION}" value=""/>
          </ruleList>
        </actionGroup>
      </actionList>
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
      </ruleList>
    </actionGroup>

    <!-- Registration Pre-Installation Action List -->
    <include file="staging/registration_preinstallation.xml"/>

  </preInstallationActionList>

  <!-- Post installation actions -->
  <postInstallationActionList>

    <!-- Write the TuningWizard Version to INI File -->
    <actionGroup>
      <actionList>
        <iniFileSet file="/etc/postgres-reg.ini" section="TuningWizard" key="Description" value="${msg(install.summary)}"/>
        <iniFileSet file="/etc/postgres-reg.ini" section="TuningWizard" key="InstallationDirectory" value="${installdir}"/>
        <iniFileSet file="/etc/postgres-reg.ini" section="TuningWizard" key="Version" value="${product_version}"/>
        <iniFileSet file="/etc/postgres-reg.ini" section="TuningWizard" key="Branding" value="${branding}"/>
      </actionList>
      <ruleList>
        <compareText text="${platform_name}" logic="does_not_equal" value="windows"/>
      </ruleList>
    </actionGroup>

    <actionGroup>
      <actionList>
        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\TuningWizard" name="Description" value="${msg(install.summary)}"/>
        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\TuningWizard" name="InstallationDirectory" value="${installdir}"/>
        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\TuningWizard" name="Version" value="${product_version}"/>
        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\TuningWizard" name="Branding" value="${branding}"/>
      </actionList>
      <ruleList>
        <compareText text="${platform_name}" logic="equals" value="windows"/>
      </ruleList>
    </actionGroup>

    <!-- LIN & MAC: Setting the installation directory in the launch script -->
    <actionGroup>
      <actionList>
        <substitute files="${installdir}/scripts/launchTuningWizard.sh">
          <substitutionList>
            <substitution pattern="@@INSTALLDIR@@" value="${installdir}"/>
          </substitutionList>
        </substitute>
        <substitute files="${installdir}/scripts/ctlTuningWizard.sh">
          <substitutionList>
            <substitution pattern="@@INSTALLDIR@@" value="${installdir}"/>
          </substitutionList>
        </substitute>
        <substitute files="${installdir}/scripts/runTuningWizard.sh">
          <substitutionList>
            <substitution pattern="@@INSTALLDIR@@" value="${installdir}"/>
          </substitutionList>
        </substitute>
      </actionList>
      <ruleList>
        <compareText text="${platform_name}" logic="contains" value="linux"/>
      </ruleList>
    </actionGroup>

    <!-- LIN & MAC: Create Menu Shortcuts -->
    <runProgram
      program="${installdir}/installer/TuningWizard/createshortcuts.sh"
      programArguments="&quot;${installdir}&quot; &quot;${branding}&quot;"
      progressText="${msg(progress.text.creating.shortcuts)}"
      abortOnError="0"
      workingDirectory="${installdir}/installer/TuningWizard"
      showMessageOnError="1">
      <ruleList>
        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
      </ruleList>
    </runProgram>

    <!-- Registration Code -->
    <include file="staging/registration_postinstallation.xml"/>

  </postInstallationActionList>

  <!-- preUninstallation actions -->
  <preUninstallationActionList>

    <!-- Unsetting the TuningWizard values in the ini file -->
    <actionGroup>
      <actionList>
        <iniFileSet file="/etc/postgres-reg.ini" section="TuningWizard" key="Description" value=""/>
        <iniFileSet file="/etc/postgres-reg.ini" section="TuningWizard" key="InstallationDirectory" value=""/>
        <iniFileSet file="/etc/postgres-reg.ini" section="TuningWizard" key="Version" value=""/>
        <iniFileSet file="/etc/postgres-reg.ini" section="TuningWizard" key="Branding" value=""/>
      </actionList>
      <ruleList>
        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
      </ruleList>
    </actionGroup>

    <!-- LIN : Remove Menu shortcuts -->
    <runProgram
      program="${installdir}/installer/TuningWizard/removeshortcuts.sh"
      workingDirectory="${installdir}/installer/TuningWizard"
      programArguments="&quot;${installdir}&quot; &quot;${branding}&quot;"
      abortOnError="0"
      showMessageOnError="0">
      <ruleList>
        <compareText logic="contains" text="${platform_name}" value="linux"/>
      </ruleList>
    </runProgram>

    <!-- MAC : Remove Menu shortcuts -->
    <deleteFile path="/Applications/${branding}/Tuning Wizard.app">
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="osx"/>
      </ruleList>
    </deleteFile>

    <!-- Registration Code -->
    <include file="staging/registration_preuninstallation.xml"/>
  </preUninstallationActionList>

  <!-- finalPage actions -->
  <finalPageActionList>
    <launchBrowser url="http://www.enterprisedb.com/installer/tuning.do"
                   progressText="${msg(Installer.Installation.Finished.Visit.Us)}">
        <ruleList>
            <compareText logic="does_not_equal" text="${installer_ui}" value="text"/>
        </ruleList>
    </launchBrowser>
  </finalPageActionList>

  <!-- Components -->
  <componentList>
    <component>
      <name>TuningWizard</name>
      <description>TuningWizard</description>
      <canBeEdited>0</canBeEdited>
      <selected>1</selected>
      <show>1</show>
      <folderList>

        <!-- LIN: Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfilesbinlinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux/TuningWizard/TuningWizard</origin>
            </distributionFile>
            <distributionDirectory>
              <origin>staging/linux/TuningWizard/lib</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Installation Files</description>
          <destination>${installdir}</destination>
          <name>installfileslinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/linux/installer</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Launch And Menu Scripts</description>
          <destination>${installdir}</destination>
          <name>menuandlaunchfileslinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/linux/scripts</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>

        <!-- LIN-X64: Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfilesbinlinux-x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux-x64/TuningWizard/TuningWizard</origin>
            </distributionFile>
            <distributionDirectory>
              <origin>staging/linux-x64/TuningWizard/lib</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Installation Files</description>
          <destination>${installdir}</destination>
          <name>installfileslinux-x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/linux-x64/installer</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Launch And Menu Scripts</description>
          <destination>${installdir}</destination>
          <name>menuandlaunchfileslinux-x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/linux-x64/scripts</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>

        <!-- MAC: Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfilesbinosx</name>
          <platforms>osx</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/osx/TuningWizard/TuningWizard.app</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Installation Files</description>
          <destination>${installdir}</destination>
          <name>installfilesosx</name>
          <platforms>osx</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/osx/installer</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Launch And Menu Scripts</description>
          <destination>${installdir}</destination>
          <name>menuandlaunchfilesosx</name>
          <platforms>osx</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/osx/scripts</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>

        <!-- WIN: Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfilesbinwindows</name>
          <platforms>windows</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/windows/TuningWizard/TuningWizard.exe</origin>
            </distributionDirectory>
            <distributionFile>
              <origin>resources/TuningWizard.ico</origin>
            </distributionFile>
          </distributionFileList>
        </folder>
      </folderList>

      <!-- WIN: Start Menu -->
      <startMenuShortcutList>
        <startMenuShortcut>

          <!-- Launch TuningWizard -->
          <comment>EnterpriseDB Tuning Wizard</comment>
          <name>Tuning Wizard</name>
          <runInTerminal>0</runInTerminal>
          <windowsExec>"${installdir}\TuningWizard.exe"</windowsExec>
          <windowsExecArgs/>
          <windowsIcon>${installdir}/TuningWizard.ico</windowsIcon>
        </startMenuShortcut>
      </startMenuShortcutList>
    </component>
    <component>
        <name>vcredist</name>
        <description>Visual Studio Redistribution</description>
        <canBeEdited>0</canBeEdited>
        <selected>0</selected>
        <show>0</show>
        <folderList>
            <folder>
                <name>vcredistwindows</name>
                <platforms>windows</platforms>
                <distributionFileList>
                    <distributionFile origin="staging/windows/vcredist_x86.exe"/>
                </distributionFileList>
            </folder>
        </folderList>
    </component>
    <include file="staging/registration_component.xml"/>
  </componentList>

  <parameterList>
    <!-- Registration Parameters -->
    <include file="staging/registration_already_registered_parameter.xml"/>
    <include file="staging/registration_authentication_parameter.xml"/>

    <stringParameter name="originalplatform" ask="0" cliOptionShow="0"/>
    <stringParameter name="branding" cliOptionName="branding" ask="0" cliOptionShow="0"/>
    <!-- Install Directory -->
    <parameterGroup
      name="installationDirectory"
      description="Installer.Parameter.installdir.description"
      explanation="Installer.Parameter.installdir.explanation"
      title="${msg(tw.installation.dir)}">
      <parameterList>
        <directoryParameter>
          <name>installdir</name>
          <value>${default_installdir}</value>
          <default/>
          <allowEmptyValue>0</allowEmptyValue>
          <ask>yes</ask>
          <cliOptionName>prefix</cliOptionName>
          <mustBeWritable>yes</mustBeWritable>
          <mustExist>0</mustExist>
          <width>40</width>

          <!-- Validating whether installdir is empty -->
          <validationActionList>
            <actionGroup>
              <actionList>
                <setInstallerVariable name="installdir" value="${default_installdir}" />
                <throwError text="${msg(tuningwizard.installdir.empty)}"/>
              </actionList>
              <ruleList>
                <compareText text="${installdir}" logic="equals" value=""/>
              </ruleList>
            </actionGroup>
          </validationActionList>

          <!-- Validating whether installdir contains whitespaces (Linux | Mac) -->
          <validationActionList>
            <actionGroup>
              <actionList>
                <setInstallerVariable name="installdir" value="${default_installdir}" />
                <throwError text="${msg(tuningwizard.installdir.error)}"/>
              </actionList>
              <ruleList>
                <regExMatch text="${installdir}" logic="does_not_match">
                  <pattern>^/([0-9a-zA-Z_/\.\-]*)$</pattern>
                </regExMatch>
                <compareText text="${platform_name}" logic="does_not_equal" value="windows"/>
              </ruleList>
            </actionGroup>

            <!-- Validating whether installdir is valid (Windows) -->
            <actionGroup>
              <actionList>
                 <setInstallerVariable name="installdir" value="${default_installdir}" />
                 <showWarning text="${msg(tuningwizard.installdir.error)}"/>
                 <setInstallerVariable name="next_page" value="installdir"/>
               </actionList>
               <ruleList>
                <regExMatch text="${installdir}" logic="does_not_match">
                   <pattern>^([a-zA-Z]:)\\([0-9a-zA-Z_\\\s\.\-\(\)]*)$</pattern>
                </regExMatch>
                <compareText text="${platform_name}" logic="equals" value="windows"/>
              </ruleList>
            </actionGroup>
          </validationActionList>
        </directoryParameter>
      </parameterList>
      <ruleList>
        <compareText text="${TuningWizardVersion}" logic="equals" value=""/>
      </ruleList>
    </parameterGroup>

    <!-- Explain that we're using an existing installation directory -->
    <labelParameter>
      <name>upgrade</name>
      <title>${msg(upgrade.existing.installation.title)}</title>
      <description>${msg(upgrade.existing.installation.description)}</description>
      <ruleList>
        <compareText text="${TuningWizardVersion}" logic="does_not_equal" value=""/>
      </ruleList>
    </labelParameter>
  </parameterList>
</project>
