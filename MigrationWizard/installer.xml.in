<project>
    <!-- Package details -->
    <shortName>migrationwizard</shortName>
    <fullName>MigrationWizard</fullName>
    <version>PG_VERSION_MIGRATIONWIZARD-PG_BUILDNUM_MIGRATIONWIZARD</version>
	
    <!-- These options are used on Windows -->
    <startMenuGroupName>${branding}</startMenuGroupName>
	
    <!-- Product Specific Options -->
    <productDisplayName>EnterpriseDB ${product_fullname} ${productVersion}</productDisplayName>
    <productComments>EnterpriseDB ${product_fullname} ${productVersion}</productComments>
    <productUrlHelpLink>http://www.enterprisedb.com</productUrlHelpLink>
    <productUrlInfoAbout>http://www.enterprisedb.com</productUrlInfoAbout>
	
    <!-- The options are used for RPM registration -->
    <description>${product_fullname} ${productVersion} by EnterpriseDB</description>
    <summary>${msg(install.summary)}</summary>
    <vendor>EnterpriseDB</vendor>
    <release>1</release>

    <!-- Installer Size -->
    <width>550</width>
    <height>400</height>

    <!-- Misc package options -->
    <installerFilename>${product_shortname}-${product_version}-${platform_name}.${platform_exec_suffix}</installerFilename>
    <enableRollback>0</enableRollback>
    <requireInstallationByRootUser>1</requireInstallationByRootUser>
    <saveRelativePaths>1</saveRelativePaths>
    <outputDirectory>../output</outputDirectory>
    <uninstallerDirectory>${installdir}</uninstallerDirectory>
    <uninstallerName>uninstall-${product_shortname}</uninstallerName>
    <unattendedModeUI>minimal</unattendedModeUI>
    <compressionAlgorithm>lzma</compressionAlgorithm>
    <installationLogFile>${system_temp_directory}/install-${product_shortname}.log</installationLogFile>

    <!-- Images -->
    <disableSplashScreen>1</disableSplashScreen>
    <leftImage>../resources/edb-side.png</leftImage>

    <!-- i18n files for the UI -->
    <allowedLanguages>en</allowedLanguages>
    <customLanguageFileList>
        <language>
            <code>en</code>
            <encoding>utf-8</encoding>
            <file>i18n/en.lng</file>
        </language>
    </customLanguageFileList>

    <preShowHelpActionList>
        <!-- MAC : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>/Library/PostgreSQL/EnterpriseDB-MigrationWizard</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
		
        <!-- LIN : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${platform_install_prefix}/PostgreSQL/EnterpriseDB-MigrationWizard</value>
            <ruleList>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
		
        <!-- WIN : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${platform_install_prefix}\PostgreSQL\EnterpriseDB-MigrationWizard</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
    </preShowHelpActionList>
	
    <!-- Prebuild Actons-->
    <preBuildActionList>
      <setInstallerVariable name="originalplatform" value="${platform_name}"/>
      <setInstallerVariable name="originalplatform" value="linux-x32">
          <ruleList>
              <compareText text="${platform_name}" value="linux"/>
          </ruleList>
      </setInstallerVariable>
    </preBuildActionList>
	
    <!-- Initialisation actions -->
    <initializationActionList>
	<setInstallerVariable name="productVersion" persist="1" value="PG_VERSION_MIGRATIONWIZARD" />
	
	<!-- Abort Installation as trying to  run a 32-bit installer on 64-bit machine -->
        <throwError>
          <customErrorMessage>${msg(platform.not.match)}</customErrorMessage>
          <text>Unknown Error</text>
          <ruleList>
            <platformTest type="linux-x64"/>
            <compareText text="${originalplatform}" value="linux-x32"/>
          </ruleList>
        </throwError>
		
        <!-- Set the MigrationWizard version(if exists) -->
        <setInstallerVariable name="MigrationWizardVersion" value="">
            <persist>0</persist>
        </setInstallerVariable>

        <!-- Set Proxy values from environement variables if any -->
        <setInstallerVariable name="proxyHost" value="${env(PROXY_HOST)}" />
        <setInstallerVariable name="proxyPort" value="${env(PROXY_PORT)}" />
	
        <!-- Check for AS84 installed jre -->
        <registryGet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\AS\8.4\jre</key>
          <name>Location</name>
          <variable>jrehome</variable>
        </registryGet>
 
        <iniFileGet>
          <file>/etc/ppas-8.4.ini</file>
          <section>jre</section>
          <key>InstallationDirectory</key>
          <variable>jrehome</variable>
          <ruleList>
             <compareText text="${platform_name}" logic="does_not_equal" value="windows" />
             <fileExists path="/etc/ppas-8.4.ini" />
          </ruleList>
        </iniFileGet>

        <!-- Check if the valid jrehome switch is supplied -->
        <throwError>
          <customErrorMessage>${msg(jre.invalid.error)}</customErrorMessage>
          <text>Unknown Error</text>
          <ruleList>
             <compareText text="${jrehome}" logic="does_not_equal" value="" />
             <compareText text="${platform_name}" logic="does_not_equal" value="windows" />
             <fileTest path="${jrehome}/bin/java" condition="not_exists" />
          </ruleList>
        </throwError>
        <throwError>
          <customErrorMessage>${msg(jre.invalid.error.windows)}</customErrorMessage>
          <text>Unknown Error</text>
          <ruleList>
             <compareText text="${jrehome}" logic="does_not_equal" value="" />
             <compareText text="${platform_name}" logic="equals" value="windows" />
             <fileTest path="${jrehome}\bin\java.exe" condition="not_exists" />
          </ruleList>
        </throwError>

        <!-- Set the java_executable variable if valid jrehome switch is supplied -->
        <setInstallerVariable name="java_executable" value="${jrehome}/bin/java" >
          <ruleList>
             <compareText text="${jrehome}" logic="does_not_equal" value="" />
             <compareText text="${platform_name}" logic="does_not_equal" value="windows" />
             <fileExists path="${jrehome}/bin/java" />
          </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="java_executable" value="${jrehome}\bin\java.exe" >
          <ruleList>
             <compareText text="${jrehome}" logic="does_not_equal" value="" />
             <compareText text="${platform_name}" logic="equals" value="windows" />
             <fileExists path="${jrehome}\bin\java.exe" />
          </ruleList>
        </setInstallerVariable>
    
        <!-- Detecting Java, Abort if not found -->
        <autodetectJava>
            <promptUser>0</promptUser>
            <validVersionList>
                <validVersion>
		    <vendor>sun</vendor>
                    <maxVersion/>
                    <minVersion>1.5.0</minVersion>
                    <requireJDK>0</requireJDK>
                </validVersion>
            </validVersionList>
            <abortOnError>1</abortOnError>
            <showMessageOnError>1</showMessageOnError>
            <customErrorMessage>${msg(java.error)}</customErrorMessage>
            <ruleList>
               <compareText text="${jrehome}" logic="equals" value="" />
            </ruleList>
        </autodetectJava>
		
	    <!-- MAC : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>/Library/PostgreSQL/EnterpriseDB-MigrationWizard</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
		
        <!-- LIN : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${platform_install_prefix}/PostgreSQL/EnterpriseDB-MigrationWizard</value>
            <ruleList>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
		
        <!-- WIN : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${platform_install_prefix}\PostgreSQL\EnterpriseDB-MigrationWizard</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
    </initializationActionList>
	
    <!-- Preinstallation actions -->
    <preInstallationActionList>
	<setInstallerVariable name="iExistingEmail" value=""/>
        <!-- Creates the ini file if not exits -->
        <touchFile path="/etc/postgres-reg.ini">
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </touchFile>
		
        <!-- LIN & MAC: Check Previous Installation of MigrationWizard -->
        <actionGroup>
            <actionList>
                <iniFileGet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>MigrationWizard</section>
                    <key>Branding</key>
                    <variable>iBranding</variable>
                </iniFileGet>
                <iniFileGet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>MigrationWizard</section>
                    <key>Version</key>
                    <variable>MigrationWizardVersion</variable>
                </iniFileGet>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
		
        <!--    LIN & MAC: Set the Installation Directory in case of re-install/upgrade -->
        <actionGroup>
            <actionList>
                <iniFileGet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>MigrationWizard</section>
                    <key>InstallationDirectory</key>
                    <variable>installdir</variable>
                </iniFileGet>
                <iniFileGet file="/etc/postgres-reg.ini" section="MigrationWizard" key="Username" variable="iExistingEmail"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${MigrationWizardVersion}</text>
                    <value/>
                </compareText>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
		
        <!-- WIN: Check Previous Installation of MigrationWizard -->
        <actionGroup>
            <actionList>
                <registryGet>
                    <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\MigrationWizard</key>
                    <name>Branding</name>
                    <variable>iBranding</variable>
                </registryGet>
                <registryGet>
                    <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\MigrationWizard</key>
                    <name>Version</name>
                    <variable>MigrationWizardVersion</variable>
                </registryGet>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
		
        <!-- WIN: Set the Installation Directory in case of re-install/upgrade -->
        <actionGroup>
            <actionList>
                <registryGet>
                    <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\MigrationWizard</key>
                    <name>Location</name>
                    <variable>installdir</variable>
                </registryGet>
                <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\MigrationWizard" name="Username" variable="iExistingEmail"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${MigrationWizardVersion}</text>
                    <value/>
                </compareText>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
		
        <!-- If there appears to be an existing installation, with no Branding value. --> 
	<!-- force the default value. Otherwise, set the branding to whatever we read, -->
	<!-- or, set the default -->
	
	<!-- Existing, old install (version, but no branding) -->
	<setInstallerVariable>
		<name>branding</name>
		<persist>0</persist>
		<value>PostgreSQL</value>
		<ruleList>
			<compareText>
				<logic>does_not_equal</logic>
				<text>${MigrationWizardVersion}</text>
				<value></value>
			</compareText>
			<compareText>
				<logic>equals</logic>
				<text>${iBranding}</text>
				<value></value>
			</compareText>
		</ruleList>
	</setInstallerVariable>
	
	<!-- Existing install, with branding -->
	<setInstallerVariable>
		<name>branding</name>
		<persist>0</persist>
		<value>${iBranding}</value>
		<ruleList>
			<compareText>
				<logic>does_not_equal</logic>
				<text>${iBranding}</text>
				<value></value>
			</compareText>
		</ruleList>
	</setInstallerVariable>
	
	<!-- New install, nothing set on the command line -->
	<setInstallerVariable>
		<name>branding</name>
		<persist>0</persist>
		<value>Postgres Plus Add-ons</value>
		<ruleList>
			<compareText>
				<logic>equals</logic>
				<text>${branding}</text>
				<value></value>
			</compareText>
		</ruleList>
	</setInstallerVariable>
	
        <logMessage>
            <text>Using branding: ${branding}</text>
        </logMessage>        
		
        <!-- Setting the installation type as upgrade if previous installation found -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="installationType" value="upgrade"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${MigrationWizardVersion}</text>
                    <value/>
                </compareText>
            </ruleList>
        </actionGroup>

        <!-- LIN/LIN-X64/MAC: Unpack existing-enterprisedb-mail authentication scripts -->
        <actionGroup>
            <actionList>
                <createDirectory path="${system_temp_directory}/migrationwizard"/>
                <!-- Lin: Unpack scripts and required libraries -->
                <actionGroup>
                    <actionList>
                        <unpackFile
                            component="userValidation"
                            destination="${system_temp_directory}/migrationwizard/sysinfo.sh"
                            folder="scriptslinux"
                            origin="sysinfo.sh"/>
                        <unpackFile
                            component="userValidation"
                            destination="${system_temp_directory}/migrationwizard/validateUserClient.o"
                            folder="scriptslinux"
                            origin="validateUserClient.o"/>
                        <unpackDirectory
                            component="userValidation"
                            destination="${system_temp_directory}/migrationwizard/"
                            folder="scriptslinux"
                            origin="lib"/>
                    </actionList>
                    <ruleList>
                        <compareText logic="equals" text="${platform_name}" value="linux"/>
                    </ruleList>
                </actionGroup>
                <!-- Lin-x64: Unpack scripts and required libraries -->
                <actionGroup>
                    <actionList>
                        <unpackFile
                            component="userValidation"
                            destination="${system_temp_directory}/migrationwizard/sysinfo.sh"
                            folder="scriptslinux-x64"
                            origin="sysinfo.sh"/>
                        <unpackFile
                            component="userValidation"
                            destination="${system_temp_directory}/migrationwizard/validateUserClient.o"
                            folder="scriptslinux-x64"
                            origin="validateUserClient.o"/>
                        <unpackDirectory
                            component="userValidation"
                            destination="${system_temp_directory}/migrationwizard/"
                            folder="scriptslinux-x64"
                            origin="lib"/>
                    </actionList>
                    <ruleList>
                        <compareText logic="equals" text="${platform_name}" value="linux-x64"/>
                    </ruleList>
                </actionGroup>
                <!-- MAC: Unpack scripts and required libraries -->
                <actionGroup>
                    <actionList>
                        <unpackFile
                            component="userValidation"
                            destination="${system_temp_directory}/migrationwizard/sysinfo.sh"
                            folder="scriptsosx"
                            origin="sysinfo.sh"/>
                        <unpackFile
                            component="userValidation"
                            destination="${system_temp_directory}/migrationwizard/validateUserClient.o"
                            folder="scriptsosx"
                            origin="validateUserClient.o"/>
                    </actionList>
                    <ruleList>
                        <compareText logic="equals" text="${platform_name}" value="osx"/>
                    </ruleList>
                </actionGroup>
        
                <!-- Use script to generate the required information, while validating email -->
                <setEnvironmentVariable name="LD_LIBRARY_PATH" value="${system_temp_directory}/migrationwizard/lib"/>
                <!-- Generate UUID -->
                <setInstallerVariableFromScriptOutput name="uuid_val" showMessageOnError="0" exec="uuidgen" abortOnError="0"/>
                <!-- User predefined value, if uuidgen does not exist -->
                <setInstallerVariable name="uuid_val" value="16a874e6-241e-44ae-b27e-74aecded209a">
                    <ruleList>
                        <compareText value="" logic="equals" text="${uuid_val}"/>
                    </ruleList>
                </setInstallerVariable>
                <!-- run sysinfo.sh -->
                <runProgram program="${system_temp_directory}/migrationwizard/sysinfo.sh"
                                        workingDirectory="${system_temp_directory}/migrationwizard"
                                        showMessageOnError="0"
                                        abortOnError="0"/>
                <propertiesFileGet
                    file="${system_temp_directory}/migrationwizard/sysinfo.properties"
                    key="PROCESSOR_ARCH"
                    variable="processor_arch"/>
                <propertiesFileGet
                    file="${system_temp_directory}/migrationwizard/sysinfo.properties"
                    key="TOTAL_MEM_IN_GB"
                    variable="total_mem_in_gb"/>
                <propertiesFileGet
                    file="${system_temp_directory}/migrationwizard/sysinfo.properties"
                    key="OS"
                    variable="os"/>
                <propertiesFileGet
                    file="${system_temp_directory}/migrationwizard/sysinfo.properties"
                    key="NUMBER_OF_PROCESSORS"
                    variable="number_of_processors"/>
                <propertiesFileGet
                    file="${system_temp_directory}/migrationwizard/sysinfo.properties"
                    key="PROCESSOR_TYPE"
                    variable="processor_type"/>
                <propertiesFileGet
                    file="${system_temp_directory}/migrationwizard/sysinfo.properties"
                    key="LANGUAGE"
                    variable="language"/>
                <propertiesFileGet
                    file="${system_temp_directory}/migrationwizard/sysinfo.properties"
                    key="SHARED_MEMORY_IN_MB"
                    variable="shared_memory_in_mb"/>
        
                <stringModify text="${processor_arch}" variable="processor_arch" logic="trim"/>
                <stringModify text="${total_mem_in_gb}" variable="total_mem_in_gb" logic="trim"/>
                <stringModify text="${os}" variable="os" logic="trim"/>
                <stringModify text="${number_of_processors}" variable="number_of_processors" logic="trim"/>
                <stringModify text="${processor_type}" variable="processor_type" logic="trim"/>
                <stringModify text="${language}" variable="language" logic="trim"/>
                <stringModify text="${shared_memory_in_mb}" variable="shared_memory_in_mb" logic="trim"/>
        
                <!-- The sysinfo.sh script can not find the shared memory/total memory info -->
                <!-- Because, bc (The arbitrary precision calculator) could not be found on the system -->
                <setInstallerVariable name="shared_memory_in_mb" value="0">
                    <ruleEvaluationLogic>or</ruleEvaluationLogic>
                    <ruleList>
                        <stringTest text="${shared_memory_in_mb}" type="empty"/>
                        <stringTest text="${shared_memory_in_mb}" type="not_digit"/>
                    </ruleList>
                </setInstallerVariable>
                <setInstallerVariable name="total_mem_in_gb" value="0">
                    <ruleEvaluationLogic>or</ruleEvaluationLogic>
                    <ruleList>
                        <stringTest text="${total_mem_in_gb}" type="empty"/>
                        <stringTest text="${total_mem_in_gb}" type="not_digit"/>
                    </ruleList>
                </setInstallerVariable>
            </actionList>
            <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>
        <actionGroup>
            <actionList>
                <createDirectory path="${system_temp_directory}\migrationwizard"/>
                <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{7299052b-02a4-4627-81f2-1818da5d550d}" name="DisplayVersion" variable="VC_REDIST_2005_VERSION"/>
                <actionGroup>
                    <actionList>
                        <unpackFile component="vcredist"
                                    destination="${system_temp_directory}\vcredist_x86.exe"
                                    folder="vcredistwindows"
                                    origin="vcredist_x86.exe"/>
                        <runProgram program="${system_temp_directory}\vcredist_x86.exe"
                                    programArguments="/q"
                                    workingDirectory="${windir}"
                                    abortOnError="0"
                                    showMessageOnError="0"/>
                    </actionList>
                    <ruleList>
                        <compareText logic="equals" text="${VC_REDIST_2005_VERSION}" value=""/>
                    </ruleList>
                </actionGroup>
                <unpackFile
                    component="userValidation"
                    destination="${system_temp_directory}\migrationwizard\validateUserClient.exe"
                    folder="scriptswindows"
                    origin="validateUserClient.exe"/>
                <unpackFile
                    component="userValidation"
                    destination="${system_temp_directory}\migrationwizard\dbserver_guid.exe"
                    folder="scriptswindows"
                    origin="dbserver_guid.exe"/>
                <setInstallerVariableFromScriptOutput
                    name="uuid_val"
                    showMessageOnError="0"
                    exec="${system_temp_directory}\migrationwizard\dbserver_guid.exe"
                    abortOnError="0"/>
                <setInstallerVariableFromRegEx
                    name="uuid_val"
                    text="${uuid_val}"
                    pattern="^dbser_guid=([^\S]*)$"
                    substitution="\1"
                    abortOnError="0"
                    showMessageOnError="0">
                    <ruleList>
                        <compareText logic="does_not_equal" text="${uuid_val}" value=""/>
                    </ruleList>
                </setInstallerVariableFromRegEx>
                <setInstallerVariable name="uuid_val" value="a4469d63-448f-40e7-932c-c3a046bf2847">
                    <ruleEvaluationLogic>or</ruleEvaluationLogic>
                    <ruleList>
                        <compareText text="${uuid_val}" logic="equals" value=""/>
                        <regExMatch text="${uuid_val}" logic="does_not_match" pattern="^([A-Fa-f0-9\-]*)$"/>
                    </ruleList>
                </setInstallerVariable>
            </actionList>
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>
        <actionGroup>
            <actionList>
                <throwError text="${msg(emailpassword.not.provided)}" abortOnError="1">
                    <ruleEvaluationLogic>or</ruleEvaluationLogic>
                    <ruleList>
                        <compareText logic="equals" text="${existingEmail}" value=""/>
                        <compareText logic="equals" text="${existingPassword}" value=""/>
                    </ruleList>
                </throwError>
                <logMessage text="Sending parameter:&quot;${uuid_val}&quot; &quot;MigrationWizard&quot; &quot;false&quot; &quot;true&quot; &quot;${language}&quot; &quot;${os}&quot; &quot;${number_of_processors}&quot; &quot;${processor_arch}&quot; &quot;${processor_type}&quot; &quot;${total_mem_in_gb}&quot; &quot;${shared_memory_in_mb}&quot; &quot;${existingEmail}&quot; &quot;${existingPassword.password}&quot; &quot;${proxyHost}&quot; &quot;${proxyPort}&quot;">
                    <ruleList>
                        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                    </ruleList>
                </logMessage>
                <setInstallerVariableFromScriptOutput
                    customErrorMessage="${msg(validatinguser.ws.error)}"
                    exec="${system_temp_directory}/migrationwizard/validateUserClient.o"
                    execArgs="&quot;${uuid_val}&quot; &quot;MigrationWizard&quot; &quot;false&quot; &quot;true&quot; &quot;${language}&quot; &quot;${os}&quot; &quot;${number_of_processors}&quot; &quot;${processor_arch}&quot; &quot;${processor_type}&quot; &quot;${total_mem_in_gb}&quot; &quot;${shared_memory_in_mb}&quot; &quot;${existingEmail}&quot; &quot;${existingPassword.password}&quot; &quot;${proxyHost}&quot; &quot;${proxyPort}&quot;"
                    name="ws_existinguser_result"
                    abortOnError="0"
                    workingDirectory="${system_temp_directory}/migrationwizard">
                    <ruleList>
                        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                    </ruleList>
                </setInstallerVariableFromScriptOutput>
                <logMessage text="Sending parameter: &quot;MigrationWizard&quot; &quot;false&quot; &quot;true&quot; &quot;${existingEmail}&quot; &quot;${existingPassword.password}&quot; &quot;${uuid_val}&quot;">
                    <ruleList>
                        <compareText logic="equals" text="${platform_name}" value="windows"/>
                    </ruleList>
                </logMessage>
                <setInstallerVariableFromScriptOutput
                    customErrorMessage="${msg(validatinguser.ws.error)}"
                    exec="${system_temp_directory}\migrationwizard\validateUserClient.exe"
                    execArgs="&quot;MigrationWizard&quot; &quot;false&quot; &quot;true&quot; &quot;${existingEmail}&quot; &quot;${existingPassword.password}&quot; &quot;${uuid_val}&quot; &quot;${proxyHost}&quot; &quot;${proxyPort}&quot;"
                    name="ws_existinguser_result"
                    abortOnError="0"
                    workingDirectory="${system_temp_directory}\migrationwizard">
                    <ruleList>
                        <compareText logic="equals" text="${platform_name}" value="windows"/>
                    </ruleList>
                </setInstallerVariableFromScriptOutput>
                <stringModify text="${ws_existinguser_result}" variable="ws_existinguser_result" logic="trim"/>
                <throwError abortOnError="1" text="${msg(ws.email.not.authenticated)}">
                    <ruleList>
                        <compareText logic="equals" text="${ws_existinguser_result}" value="1"/>
                    </ruleList>
                </throwError>
                <throwError abortOnError="1" text="${msg(ws.email.not.validated)}">
                    <ruleList>
                        <compareText logic="equals" text="${ws_existinguser_result}" value="2"/>
                    </ruleList>
                </throwError>
                <throwError abortOnError="1" text="${msg(ws.email.already.exists)}">
                    <ruleList>
                        <compareText logic="equals" text="${ws_existinguser_result}" value="3"/>
                    </ruleList>
                </throwError>
                <throwError abortOnError="1" text="${msg(ws.exception.from.server)}">
                    <ruleList>
                        <compareText logic="equals" text="${ws_existinguser_result}" value="4"/>
                    </ruleList>
                </throwError>
                <throwError abortOnError="1" text="${msg(ws.internet.not.connected)}">
                    <ruleList>
                        <compareText logic="equals" text="${ws_existinguser_result}" value=""/>
                    </ruleList>
                </throwError>
            </actionList>
            <ruleList>
                <compareText logic="equals" text="${installer_ui}" value="unattended"/>
                <compareText logic="equals" text="${iExistingEmail}" value=""/>
            </ruleList>
        </actionGroup>
        <!-- Ignore new existingEmail value, if already been validated -->
        <setInstallerVariable name="${existingEmail}" value="${iExistingEmail}">
            <ruleList>
                <compareText logic="does_not_equal" text="${iExistingEmail}" value=""/>
            </ruleList>
        </setInstallerVariable>
    </preInstallationActionList>
	
    <!-- Post installation actions -->
    <postInstallationActionList>

        <!-- Make sure, we register the same existingEmail registered earlier -->
        <setInstallerVariable name="existingEmail" value="${iExistingEmail}">
            <ruleList>
                <stringTest text="${iExistingEmail}" type="not_empty"/>
            </ruleList>
        </setInstallerVariable>

        <!-- LIN & MAC: Write the MigrationWizard Version to INI File -->
        <actionGroup>
            <actionList>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>MigrationWizard</section>
                    <key>Description</key>
                    <value>${msg(install.summary)}</value>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>MigrationWizard</section>
                    <key>InstallationDirectory</key>
                    <value>${installdir}</value>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>MigrationWizard</section>
                    <key>Version</key>
                    <value>${product_version}</value>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>MigrationWizard</section>
                    <key>Branding</key>
                    <value>${branding}</value>
                </iniFileSet>
                <iniFileSet
                    file="/etc/postgres-reg.ini"
                    section="MigrationWizard"
                    key="Username"
                    value="${existingEmail}">
                    <ruleList>
                        <compareText logic="does_not_equal" text="${isRegistered}" value="3"/>
                    </ruleList>
                </iniFileSet>
            </actionList>
            <ruleList>
                <compareText>
                    <text>${platform_name}</text>
                    <logic>does_not_equal</logic>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
		
        <!-- LIN & MAC: Setting the installation directory in the launch script -->
        <actionGroup>
            <actionList>
                <substitute>
                    <files>${installdir}/scripts/launchMigrationWizard.sh</files>
                    <substitutionList>
                        <substitution>
                            <pattern>@@INSTALLDIR@@</pattern>
                            <value>${installdir}</value>
                        </substitution>
                        <substitution>
                            <pattern>@@JAVA@@</pattern>
                            <value>${java_executable}</value>
                        </substitution>
                    </substitutionList>
                </substitute>
            </actionList>
            <ruleList>
                <compareText>
                    <text>${platform_name}</text>
                    <logic>does_not_equal</logic>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
		
        <!-- WIN: Setting the installation directory in the launch script -->
        <actionGroup>
            <actionList>
                <substitute>
                    <files>${installdir}\scripts\launchMigrationWizard.bat</files>
                    <substitutionList>
                        <substitution>
                            <pattern>@@INSTALLDIR@@</pattern>
                            <value>${installdir}</value>
                        </substitution>
                        <substitution>
                            <pattern>@@JAVA@@</pattern>
                            <value>${java_executable}</value>
                        </substitution>
                    </substitutionList>
                </substitute>
            </actionList>
            <ruleList>
                <compareText>
                    <text>${platform_name}</text>
                    <logic>contains</logic>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
		
        <!-- LIN & MAC: Create Menu Shortcuts -->
        <actionGroup>
            <actionList>
                <runProgram>
                    <program>${installdir}/installer/MigrationWizard/createshortcuts.sh</program>
                    <programArguments>"${installdir}" "${branding}"</programArguments>
                    <progressText>${msg(progress.text.creating.shortcuts)}</progressText>
                    <abortOnError>1</abortOnError>
                    <showMessageOnError>1</showMessageOnError>
                </runProgram>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
        <registrySet>
            <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\MigrationWizard</key>
            <name>Branding</name>
            <value>${branding}</value>
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </registrySet>
        <registrySet>
            <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\MigrationWizard</key>
            <name>Username</name>
            <value>${existingEmail}</value>
            <ruleList>
                <compareText logic="does_not_equal" text="${isRegistered}" value="3"/>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </registrySet>
    </postInstallationActionList>
	
	<!-- final page actions -->
    <finalPageActionList>
        <launchBrowser>
            <url>http://www.enterprisedb.com/products/postgres_plus_as/overview.do</url>
            <progressText>${msg(Installer.Installation.Finished.Visit.Us)}</progressText>
        </launchBrowser>
    </finalPageActionList>
	
    <!-- preUninstallation actions -->
    <preUninstallationActionList>
	
        <!-- LIN & MAC: Unsetting the MigrationWizard values in the ini file -->
        <actionGroup>
            <actionList>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>MigrationWizard</section>
                    <key>Description</key>
                    <value/>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>MigrationWizard</section>
                    <key>InstallationDirectory</key>
                    <value/>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>MigrationWizard</section>
                    <key>Version</key>
                    <value/>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>MigrationWizard</section>
                    <key>Branding</key>
                    <value/>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>MigrationWizard</section>
                    <key>Username</key>
                    <value/>
                </iniFileSet>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
		
        <!-- LIN : Remove Menu shortcuts -->
        <actionGroup>
            <actionList>
                <runProgram>
                    <program>${installdir}/installer/MigrationWizard/removeshortcuts.sh</program>
                    <programArguments>"${installdir}" "${branding}"</programArguments>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </actionGroup>
		
        <!-- MAC : Remove Menu shortcuts -->
        <actionGroup>
            <actionList>
                <deleteFile>
                    <path>/Applications/${branding}/Migration Wizard.app</path>
                </deleteFile>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </actionGroup>
    </preUninstallationActionList>
	
    <!-- Components -->
    <componentList>
        <component>
            <name>MigrationWizard</name>
            <description>MigrationWizard</description>
            <canBeEdited>0</canBeEdited>
            <selected>1</selected>
            <show>1</show>
            <folderList>
			
                <!-- LIN: Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfilesbinlinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/linux/MigrationWizard/MigrationWizard.jar</origin>
                        </distributionFile>
                        <distributionDirectory>
                            <origin>staging/linux/MigrationWizard/lib</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installation Files</description>
                    <destination>${installdir}</destination>
                    <name>installfileslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Launch And Menu Scripts</description>
                    <destination>${installdir}</destination>
                    <name>menuandlaunchfileslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
				
                <!-- LIN-X64: Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfilesbinlinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/linux-x64/MigrationWizard/MigrationWizard.jar</origin>
                        </distributionFile>
                        <distributionDirectory>
                            <origin>staging/linux-x64/MigrationWizard/lib</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installation Files</description>
                    <destination>${installdir}</destination>
                    <name>installfileslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-x64/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Launch And Menu Scripts</description>
                    <destination>${installdir}</destination>
                    <name>menuandlaunchfileslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-x64/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
				
                <!-- WIN: Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfileswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/windows/MigrationWizard/MigrationWizard.jar</origin>
                        </distributionFile>
                        <distributionDirectory>
                            <origin>staging/windows/MigrationWizard/lib</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installation Files</description>
                    <destination>${installdir}</destination>
                    <name>installfileswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/windows/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Launch And Menu Scripts</description>
                    <destination>${installdir}</destination>
                    <name>menuandlaunchfileswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/windows/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
				
                <!-- MAC: Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfilesbinosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/osx/MigrationWizard/MigrationWizard.jar</origin>
                        </distributionFile>
                        <distributionDirectory>
                            <origin>staging/osx/MigrationWizard/lib</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installation Files</description>
                    <destination>${installdir}</destination>
                    <name>installfilesosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/osx/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Launch And Menu Scripts</description>
                    <destination>${installdir}</destination>
                    <name>menuandlaunchfilesosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/osx/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
            </folderList>
			
            <!-- WIN: Start Menu -->
            <startMenuShortcutList>
			
                <!-- Launch MigrationWizard -->
                <startMenuShortcut>
                    <comment>EnterpriseDB MySQL Migration Wizard</comment>
                    <name>Migration Wizard</name>
                    <runInTerminal>0</runInTerminal>
                    <windowsExec>wscript</windowsExec>
                    <windowsExecArgs>//NoLogo "${installdir}\scripts\launchMigrationWizard.vbs" "" "${java_executable}" "-jar MigrationWizard.jar" "${installdir}""</windowsExecArgs>
                    <windowsIcon>${installdir}\scripts\images\application.ico</windowsIcon>
                </startMenuShortcut>
            </startMenuShortcutList>
        </component>
        <component>
            <name>vcredist</name>
            <description>Visual Studio Redistribution</description>
            <canBeEdited>0</canBeEdited>
            <selected>0</selected>
            <show>0</show>
            <folderList>
                <folder>
                    <name>vcredistwindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/windows/MigrationWizard/vcredist_x86.exe"/>
                    </distributionFileList>
                </folder>
            </folderList>
        </component>
        <component>
            <name>userValidation</name>
            <description>User Validation Scripts</description>
            <canBeEdited>0</canBeEdited>
            <selected>0</selected>
            <show>0</show>
            <folderList>
                <!-- LIN: Program files -->
                <folder>
                    <description>Scripts</description>
                    <destination>${system_temp_directory}/migrationwizard</destination>
                    <name>scriptslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/linux/UserValidation/validateUserClient.o"/>
                        <distributionFile origin="staging/linux/UserValidation/sysinfo.sh"/>
                        <distributionDirectory origin="staging/linux/UserValidation/lib"/>
                    </distributionFileList>
                </folder>
                <!-- LIN-X64: Program files -->
                <folder>
                    <description>Scripts</description>
                    <destination>${system_temp_directory}/migrationwizard</destination>
                    <name>scriptslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/linux-x64/UserValidation/validateUserClient.o"/>
                        <distributionFile origin="staging/linux-x64/UserValidation/sysinfo.sh"/>
                        <distributionDirectory origin="staging/linux-x64/UserValidation/lib"/>
                    </distributionFileList>
                </folder>
                
                <!-- MAC: Program files -->
                <folder>
                    <description>Scripts</description>
                    <destination>${system_temp_directory}/migrationwizard</destination>
                    <name>scriptsosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/osx/UserValidation/validateUserClient.o"/>
                        <distributionFile origin="staging/osx/UserValidation/sysinfo.sh"/>
                    </distributionFileList>
                </folder>
        
                <!-- WIN: Program files -->
                <folder>
                    <description>Scripts</description>
                    <destination>${system_temp_directory}/migrationwizard</destination>
                    <name>scriptswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/windows/MigrationWizard/dbserver_guid.exe"/>
                        <distributionFile origin="staging/windows/MigrationWizard/validateUserClient.exe"/>
                    </distributionFileList>
                </folder>
            </folderList>
        </component>
    </componentList>
	
    <parameterList>
	<stringParameter name="originalplatform" ask="0" cliOptionShow="0"/>
	<stringParameter name="branding" cliOptionName="branding" ask="0" cliOptionShow="0"/>
        <stringParameter name="jrehome" cliOptionName="jrehome" default="" ask="0" cliOptionShow="0"/>
        <parameterGroup
            name="registration"
            title="${msg(registration.title.value)}"
            explanation="${msg(registration.explanation.value)}">
            <parameterList>
                <choiceParameter
                    name="isRegistered"
                    default="2"
                    width="30"
                    allowEmptyValue="0"
                    cliOptionShow="0"
                    displayType="radiobuttons">
                    <optionList>
                        <option
                            text="${msg(registration.existingemail.no)}"
                            value="2"/>
                        <option
                            text="${msg(registration.existingemail.yes)}"
                            value="1"/>
                    </optionList>
                </choiceParameter>
            </parameterList>
            <!-- Open registration page, if not already registered user and want to register -->
            <postShowPageActionList>
                <launchBrowser url="http://www.enterprisedb.com/create-promo-account.do?type=migration"
                               abortOnError="1">
                    <ruleList>
                            <compareText logic="equals" text="${isRegistered}" value="2"/>
                    </ruleList>
                </launchBrowser>
            </postShowPageActionList>
            <!-- Check if upgradation is done on older version of MigrationWizard,
                     which does not have this authentication process -->
            <ruleList>
                 <compareText logic="equals" text="${iExistingEmail}" value=""/>
            </ruleList>
        </parameterGroup>
        <parameterGroup
            name="userAuthenticationPage"
            title="${msg(existingemail.authentication.title.value)}">
            <parameterList>
                <labelParameter
                    name="existingemail_authentication_lbl"
                    explanation="${msg(existingemail.authentication.explanation.value)}"/>
                <stringParameter
                    name="existingEmail"
                    cliOptionName="existing-user"
                    width="30"
                    ask="1"
                    description="${msg(userAuth.email.value)}"
                    allowEmptyValue="1"
                    cliOptionShow="1">
                    <validationActionList>
                        <throwError text="${msg(error.invalid.email.value)}">
                            <ruleList>
                                <regExMatch logic="does_not_match" text="${existingEmail}">
                                    <pattern>^[a-zA-Z][\w\.-]*[a-zA-Z0-9]@[a-zA-Z0-9][\w\.-]*[a-zA-Z0-9]\.[a-zA-Z][a-zA-Z\.]*[a-zA-Z]$</pattern>
                                </regExMatch>
                            </ruleList>
                        </throwError>
                    </validationActionList>
                </stringParameter>
                <passwordParameter
                    name="existingPassword"
                    width="30"
                    cliOptionName="existing-password"
                    ask="1"
                    description="${msg(userAuth.password.value)}"
                    allowEmptyValue="1"
                    askForConfirmation="0"
                    cliOptionShow="1">
                    <validationActionList>
                        <throwError text="${msg(error.invalid.password.value)}">
                            <ruleEvaluationLogic>or</ruleEvaluationLogic>
                            <ruleList>
                                <stringTest text="${existingPassword}" type="empty"/>
                                <regExMatch logic="matches" pattern="\s+" text="${existingPassword}"/>
                            </ruleList>
                        </throwError>
                    </validationActionList>
                </passwordParameter>
            </parameterList>
            <!-- Validate entered email & password -->
            <postShowPageActionList>
                <logMessage text="Sending parameter:&quot;${uuid_val}&quot; &quot;MigrationWizard&quot; &quot;false&quot; &quot;true&quot; &quot;${language}&quot; &quot;${os}&quot; &quot;${number_of_processors}&quot; &quot;${processor_arch}&quot; &quot;${processor_type}&quot; &quot;${total_mem_in_gb}&quot; &quot;${shared_memory_in_mb}&quot; &quot;${existingEmail}&quot; &quot;${existingPassword.password}&quot; &quot;${proxyHost}&quot; &quot;${proxyPort}&quot;">
                    <ruleList>
                        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                    </ruleList>
                </logMessage>
                <setInstallerVariableFromScriptOutput
                    customErrorMessage="${msg(validatinguser.ws.error)}"
                    exec="${system_temp_directory}/migrationwizard/validateUserClient.o"
                    execArgs="&quot;${uuid_val}&quot; &quot;MigrationWizard&quot; &quot;false&quot; &quot;true&quot; &quot;${language}&quot; &quot;${os}&quot; &quot;${number_of_processors}&quot; &quot;${processor_arch}&quot; &quot;${processor_type}&quot; &quot;${total_mem_in_gb}&quot; &quot;${shared_memory_in_mb}&quot; &quot;${existingEmail}&quot; &quot;${existingPassword.password}&quot; &quot;${proxyHost}&quot; &quot;${proxyPort}&quot;"
                    name="ws_existinguser_result"
                    abortOnError="0"
                    workingDirectory="${system_temp_directory}/migrationwizard">
                    <ruleList>
                        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                    </ruleList>
                </setInstallerVariableFromScriptOutput>
                <logMessage text="Sending parameter:&quot;MigrationWizard&quot; &quot;false&quot; &quot;true&quot; &quot;${existingEmail}&quot; &quot;${existingPassword.password}&quot; &quot;${uuid_val}&quot;">
                    <ruleList>
                        <compareText logic="equals" text="${platform_name}" value="windows"/>
                    </ruleList>
                </logMessage>
                <setInstallerVariableFromScriptOutput
                    customErrorMessage="${msg(validatinguser.ws.error)}"
                    exec="${system_temp_directory}\migrationwizard\validateUserClient.exe"
                    execArgs="&quot;MigrationWizard&quot; &quot;false&quot; &quot;true&quot; &quot;${existingEmail}&quot; &quot;${existingPassword.password}&quot; &quot;${uuid_val}&quot; &quot;${proxyHost}&quot; &quot;${proxyPort}&quot;"
                    name="ws_existinguser_result"
                    abortOnError="0"
                    workingDirectory="${system_temp_directory}\migrationwizard">
                    <ruleList>
                        <compareText logic="equals" text="${platform_name}" value="windows"/>
                    </ruleList>
                </setInstallerVariableFromScriptOutput>
                <throwError abortOnError="0" text="${msg(ws.email.not.authenticated)}">
                    <ruleList>
                        <compareText logic="equals" text="${ws_existinguser_result}" value="1"/>
                    </ruleList>
                </throwError>
                <throwError abortOnError="0" text="${msg(ws.email.not.validated)}">
                    <ruleList>
                        <compareText logic="equals" text="${ws_existinguser_result}" value="2"/>
                    </ruleList>
                </throwError>
                <throwError abortOnError="0" text="${msg(ws.email.already.exists)}">
                    <ruleList>
                        <compareText logic="equals" text="${ws_existinguser_result}" value="3"/>
                    </ruleList>
                </throwError>
                <throwError abortOnError="0" text="${msg(ws.exception.from.server)}">
                    <ruleList>
                        <compareText logic="equals" text="${ws_existinguser_result}" value="4"/>
                    </ruleList>
                </throwError>
                <throwError abortOnError="0" text="${msg(ws.internet.not.connected)}">
                    <ruleList>
                        <compareText logic="equals" text="${ws_existinguser_result}" value=""/>
                    </ruleList>
                </throwError>
        
                <setInstallerVariable name="stay_on_this_page" value="true"/>
                <setInstallerVariable name="stay_on_this_page" value="false">
                    <ruleList>
                        <compareText logic="equals" text="${ws_existinguser_result}" value="0"/>
                    </ruleList>
                </setInstallerVariable>
                 <setInstallerVariable name="stay_on_this_page" value="false">
                    <ruleList>
                        <compareText logic="equals" text="${ws_existinguser_result}" value="00"/>
                        <isTrue value="${ws_existinguser_result}"/>
                    </ruleList>
                </setInstallerVariable>
        
                <setInstallerVariable name="next_page" value="userAuthenticationPage">
                    <ruleList>
                        <isTrue value="${stay_on_this_page}"/>
                    </ruleList>
                </setInstallerVariable>
            </postShowPageActionList>
            <!-- Check if upgradation is done on older version of MigrationWizard,
                     which does not have this authentication process -->
            <ruleList>
                 <compareText logic="does_not_equal" text="${isRegistered}" value="3"/>
                 <compareText logic="equals" text="${iExistingEmail}" value=""/>
            </ruleList>
        </parameterGroup>
        <parameterGroup
            name="installationDirectory"
            description="Installer.Parameter.installdir.description"
            explanation="Installer.Parameter.installdir.explanation"
            title="${msg(mw.installation.dir)}">
            <parameterList>
                <!-- Install Directory -->
                <directoryParameter>
                    <name>installdir</name>
                    <value>${default_installdir}</value>
                    <default/>
                    <allowEmptyValue>0</allowEmptyValue>
                    <ask>yes</ask>
                    <cliOptionName>prefix</cliOptionName>
                    <mustBeWritable>yes</mustBeWritable>
                    <mustExist>0</mustExist>
                    <width>40</width>
        			
                    <!-- Validating whether installdir is empty -->
        	    <validationActionList>
                        <actionGroup>
                            <actionList>
                                <setInstallerVariable name="installdir" value="${default_installdir}" />
                                <throwError>
                                    <text>${msg(migrationwizard.installdir.empty)}</text>
                                </throwError>
                            </actionList>
                            <ruleList>
                                <compareText>
                                    <text>${installdir}</text>
                                    <logic>equals</logic>
                                    <value />
                                </compareText>
                            </ruleList>
                        </actionGroup>
                    </validationActionList>
        			
                    <!-- Validating whether installdir contains whitespaces (Linux) -->
                    <validationActionList>
                        <actionGroup>
                            <actionList>
                                <setInstallerVariable name="installdir" value="${default_installdir}" />
                                <throwError>
                                    <text>${msg(migrationwizard.installdir.error)}</text>
                                </throwError>
                            </actionList>
                            <ruleList>
                                <regExMatch>
                                    <text>${installdir}</text>
                                    <logic>does_not_match</logic>
                                    <pattern>^/([0-9a-zA-Z_/\.\-]*)$</pattern>
                                </regExMatch>
                                <compareText>
                                    <text>${platform_name}</text>
                                    <logic>does_not_equal</logic>
                                    <value>windows</value>
                                </compareText>
                            </ruleList>
                        </actionGroup>
        				
                        <!-- Validating whether installdir is valid (Windows) -->
                        <actionGroup>
                            <actionList>
                                 <setInstallerVariable name="installdir" value="${default_installdir}" />
                                 <showWarning>
                                     <text>${msg(migrationwizard.installdir.error)}</text>
                                 </showWarning>
                                 <setInstallerVariable name="next_page" value="installdir"/>
                           </actionList>
                           <ruleList>
                                <regExMatch>
                                     <text>${installdir}</text>
                                     <logic>does_not_match</logic>
                                     <pattern>^([a-zA-Z]:)\\([0-9a-zA-Z_\\\s\.\-\(\)]*)$</pattern>
                                </regExMatch>
                                <compareText>
                                     <text>${platform_name}</text>
                                     <logic>equals</logic>
                                     <value>windows</value>
                                </compareText>
                           </ruleList>
                        </actionGroup>
                    </validationActionList>
                </directoryParameter>
            </parameterList>
            <ruleList>
                <compareText text="${MigrationWizardVersion}" logic="equals" value=""/>
            </ruleList>
        </parameterGroup>
		
	    <!-- Explain that we're using an existing installation directory -->
        <labelParameter>
            <name>upgrade</name>
            <title>${msg(upgrade.existing.installation.title)}</title>
            <description>${msg(upgrade.existing.installation.description)}</description>
            <ruleList>
		 <compareText>
                    <text>${MigrationWizardVersion}</text>
                    <logic>does_not_equal</logic>
                    <value/>
                </compareText>
            </ruleList>
        </labelParameter>
    </parameterList>
</project>
