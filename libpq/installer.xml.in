<project>
    <!-- Package details -->
    <shortName>libpq64</shortName>
    <fullName>libpq64</fullName>
    <version>PG_VERSION_LIBPQ-PG_BUILDNUM_LIBPQ</version>
	
    <!-- Product Specific Options -->
    <productComments>libpq for win64, packaged by EnterpriseDB</productComments>
    <productDisplayName>${product_fullname} ${product_version}</productDisplayName>
    <requireInstallationByRootUser>1</requireInstallationByRootUser>
	
    <!-- The options are used for RPM registration -->
    <description>libpq for PostgreSQL</description>
    <summary>libpq for PostgreSQL, packaged by EnterpriseDB</summary>
    <vendor>EnterpriseDB</vendor>

    <!-- Installer Size -->
    <width>550</width>
    <height>400</height>

    <!-- Misc options -->
    <installerFilename>${product_shortname}-PG_VERSION_LIBPQ-PG_BUILDNUM_LIBPQ-${platform_name}.${platform_exec_suffix}</installerFilename>
    <wrapLicenseFileText>0</wrapLicenseFileText>
    <compressionAlgorithm>lzma</compressionAlgorithm>
    <unattendedModeUI>minimal</unattendedModeUI>
    <enableRollback>0</enableRollback>
    <saveRelativePaths>1</saveRelativePaths>
    <uninstallerName>uninstall-${product_shortname}</uninstallerName>
    <outputDirectory>../output</outputDirectory>
    <installationLogFile>${system_temp_directory}/install-${product_shortname}.log</installationLogFile>
    <startMenuGroupName></startMenuGroupName>

    <!-- Make the installer behave like a native 64bit installer -->
    <windows64bitMode>1</windows64bitMode>

    <!-- Images -->
    <disableSplashScreen>1</disableSplashScreen>
    <leftImage>../resources/pg-side.png</leftImage>

    <!-- i18n files for the UI -->
    <allowedLanguages>en</allowedLanguages>
    <customLanguageFileList>
        <language>
            <code>en</code>
            <encoding>iso8859-1</encoding>
            <file>i18n/en.lng</file>
        </language>
    </customLanguageFileList>
  
    <preShowHelpActionList>
        <!-- WIN : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${platform_install_prefix}\PostgreSQL\libpq64</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
    </preShowHelpActionList>
  
    <initializationActionList>

        <setInstallerVariable name="originalplatform" value="${platform_name}"/>
        <setInstallerVariable name="originalplatform" value="windows-x64">
          <ruleList>
              <platformTest type="windows-x64"/>
          </ruleList>
        </setInstallerVariable>   
        <!-- Abort Installation as trying to  run a 64-bit installer on 32-bit machine -->
        <throwError>
          <customErrorMessage>${msg(platform.not.match)}</customErrorMessage>
          <text>Unknown Error</text>
          <ruleList>
            <platformTest type="windows"/>
            <compareText text="${originalplatform}" value="windows-x64" logic="does_not_equal" />
          </ruleList>
        </throwError>

	<setInstallerVariable name="project.parameter(install_runtimes).ask" value="0"/>  
	
        <!-- WIN : Set the default values for unattended mode -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="installdir" value="${env(ProgramFiles)}\PostgreSQL\libpq64"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${installer_ui}</text>
                    <value>unattended</value>
                </compareText>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
        <!-- WIN : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${env(ProgramFiles)}\PostgreSQL\libpq64</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
    </initializationActionList>
	
    <preInstallationActionList>

        <setInstallerVariable name="libpqVersion" value="" />
        <setInstallerVariable name="iLocation" value="" />
        <setInstallerVariable name="IsOldInstall" value="0" />

        <!-- For Old installation till 8.4.2 -->
        <registryGet>
            <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\libpq64</key>
            <name>Version</name>
            <variable>libpqVersion</variable>
            <wowMode>32</wowMode>
        </registryGet>
        <setInstallerVariable name="IsOldInstall" value="1">
            <ruleList>
                <compareText text="${libpqVersion}" value="" logic="does_not_equal" />
            </ruleList> 
        </setInstallerVariable>
        <registryGet>
            <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\libpq64</key>
            <name>Location</name>
            <variable>iLocation</variable>
            <wowMode>32</wowMode>
            <ruleList>
                <isTrue value="${IsOldInstall}" />
            </ruleList> 
        </registryGet>

        <!-- WIN : Check Previous Installation of libpq-->
        <actionGroup>
            <actionList>
                <registryGet>
                    <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\libpq64</key>
                    <name>Version</name>
                    <variable>libpqVersion</variable>
                </registryGet>
            </actionList>
            <ruleList>
                <isFalse value="${IsOldInstall}" />
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>

        <!-- WIN: Set the installation directory in case of re-install/upgrade -->
        <actionGroup>
            <actionList>
                <registryGet>
                    <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\libpq64</key>
                    <name>Location</name>
                    <variable>iLocation</variable>
                </registryGet> 
            </actionList>
            <ruleList>
                <isFalse value="${IsOldInstall}" />
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${libpqVersion}</text>
                    <value/>
                </compareText>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>

        <!-- Delete the old registry entry -->
        <registryDelete key="HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\EnterpriseDB\libpq64" >
            <ruleList>
                <isTrue value="${IsOldInstall}" />
            </ruleList>
        </registryDelete> 
		
        <setInstallerVariable name="installdir" value="${iLocation}" >
            <ruleList>
                <compareText text="${iLocation}" logic="does_not_equal" value="" />
            </ruleList>
        </setInstallerVariable>   

        <actionGroup>
            <actionList>
			
			    <!-- Temp directory for preflight scripts -->
                <createDirectory path="${system_temp_directory}/postgresql_installer"/>
		
                <!-- We need to get the VC++ runtimes installed on Windows, before we do anything with binaries -->
                <unpackFile>
                    <component>default</component>
                    <destination>${system_temp_directory}\postgresql_installer\vcredist_x64.exe</destination>
                    <folder>programfileswindows</folder>
                    <origin>installer/vcredist_x64.exe</origin>
                    <customErrorMessage>${msg(error.installing.runtimes)}</customErrorMessage>
                </unpackFile>
                <unpackFile>
                    <component>default</component>
                    <destination>${system_temp_directory}/postgresql_installer/installruntimes.vbs</destination>
                    <folder>programfileswindows</folder>
                    <origin>installer/installruntimes.vbs</origin>
                    <customErrorMessage>${msg(error.installing.runtimes)}</customErrorMessage>
                </unpackFile>
                <runProgram>
                    <program>cscript</program>
                    <programArguments>//NoLogo "${system_temp_directory}\postgresql_installer\installruntimes.vbs" "${system_temp_directory}\postgresql_installer\vcredist_x64.exe"</programArguments>
                    <abortOnError>1</abortOnError>
                    <showMessageOnError>1</showMessageOnError>
                    <customErrorMessage>${msg(error.installing.runtimes)}</customErrorMessage>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>1</text>
                            <value>${install_runtimes}</value>
                        </compareText>
                    </ruleList>
                </runProgram>
                <throwError>
                    <text>${msg(script.command.line.error)}</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>127</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                    </ruleList>
                </throwError>
			
		    	<deleteFile>
                    <path>${system_temp_directory}/postgresql_installer</path>
                </deleteFile>
			
			</actionList>
        </actionGroup>
    </preInstallationActionList>

    <!-- Components -->
    <componentList>
        <component>
            <name>default</name>
            <description>Default Component</description>
            <canBeEdited>1</canBeEdited>
            <selected>1</selected>
            <show>1</show>
            <folderList>
                <!-- WIN - Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfileswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/windows-x64/libpq/include</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/windows-x64/libpq/installer</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/windows-x64/libpq/lib</origin>
                        </distributionDirectory>
                        <distributionFile>
                            <origin>staging/windows-x64/libpq/libpq.dll</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/windows-x64/libpq/libeay32.dll</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/windows-x64/libpq/ssleay32.dll</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
            </folderList>
        </component>
    </componentList>
	
    <!-- Install Directory -->
    <parameterList>
        <!-- Whether to install runtimes -->
        <booleanParameter>
           <name>install_runtimes</name>
           <description>${msg(install.runtimes.description)}</description>
           <explanation/>
           <value/>
           <default>1</default>
           <ask>yes</ask>
           <cliOptionName>install_runtimes</cliOptionName>
           <cliOptionShow>1</cliOptionShow>
           <ruleList>
               <compareText>
                   <logic>equals</logic>
                   <text>${platform_name}</text>
                   <value>windows</value>
               </compareText>
           </ruleList>
        </booleanParameter> 
		
        <directoryParameter>
            <name>installdir</name>
            <description>Installer.Parameter.installdir.description</description>
            <explanation>Installer.Parameter.installdir.explanation</explanation>
            <value>${default_installdir}</value>
            <default/>
            <allowEmptyValue>0</allowEmptyValue>
            <ask>yes</ask>
            <cliOptionName>prefix</cliOptionName>
            <mustBeWritable>yes</mustBeWritable>
            <mustExist>0</mustExist>
            <width>40</width>
            <ruleList>
                <compareText>
                    <text>${libpqVersion}</text>
                    <logic>equals</logic>
                    <value/>
                </compareText>
            </ruleList>
			
	        <!-- Validating whether installdir is empty -->
            <validationActionList>
                <actionGroup>
                    <actionList>
                        <setInstallerVariable name="installdir" value="${default_installdir}" />
                        <throwError>
                            <text>${msg(libpq.installdir.empty)}</text>
                        </throwError>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <text>${installdir}</text>
                            <logic>equals</logic>
                            <value />
                        </compareText>
                    </ruleList>
                </actionGroup>
            </validationActionList>
			
            <postShowPageActionList>
                <!-- Validating whether installdir is valid (Windows) -->
                <actionGroup>
                   <actionList>
                     <setInstallerVariable name="installdir" value="${default_installdir}" />
                     <showWarning>
                        <text>${msg(libpq.installdir.error)}</text>
                     </showWarning>
                     <setInstallerVariable name="next_page" value="installdir"/>
                   </actionList>
                   <ruleList>
                       <regExMatch>
                         <text>${installdir}</text>
                         <logic>does_not_match</logic>
                         <pattern>^([a-zA-Z]:)\\([0-9a-zA-Z_\\\s\.\-\(\)]*)$</pattern>
                       </regExMatch>
                       <compareText>
                         <text>${platform_name}</text>
                         <logic>equals</logic>
                         <value>windows</value>
                       </compareText>
                   </ruleList>
                 </actionGroup>
            </postShowPageActionList>
        </directoryParameter>
		
	    <!-- Explain that we're using an existing installation directory -->
        <labelParameter>
            <name>upgrade</name>
            <title>${msg(upgrade.existing.installation.title)}</title>
            <description>${msg(upgrade.existing.installation.description)}</description>
            <ruleList>
		        <compareText>
                    <text>${libpqVersion}</text>
                    <logic>does_not_equal</logic>
                    <value/>
                </compareText>
            </ruleList>
        </labelParameter>
    </parameterList>
</project>
