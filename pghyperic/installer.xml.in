<project>
    <!-- Package details -->
    <shortName>pghyperic</shortName>
    <fullName>pghyperic</fullName>
    <version>PG_VERSION_PGHYPERIC</version>
    <!-- These options are used on Windows -->
    <startMenuGroupName>${branding}</startMenuGroupName>
    <!-- Product Specific Options -->
    <productComments>PostgreSQL Monitoring Tool, packaged by EnterpriseDB</productComments>
    <productDisplayName>${product_fullname} ${productVersion}</productDisplayName>
    <requireInstallationByRootUser>${admin_rights}</requireInstallationByRootUser>
    <!-- The options are used for RPM registration -->
    <description>PostgreSQL Monitoring Tool</description>
    <summary>PostgreSQL Monitoring Tool, packaged by EnterpriseDB</summary>
    <vendor>EnterpriseDB</vendor>

    <!-- Installer Size -->
    <width>550</width>
    <height>400</height>

    <!-- Misc options -->
    <installerFilename>${product_shortname}-${product_version}-${platform_name}.${platform_exec_suffix}</installerFilename>
    <wrapLicenseFileText>0</wrapLicenseFileText>
    <compressionAlgorithm>lzma</compressionAlgorithm>
    <unattendedModeUI>minimal</unattendedModeUI>
    <enableRollback>0</enableRollback>
    <saveRelativePaths>1</saveRelativePaths>
    <uninstallerName>uninstall-${product_shortname}</uninstallerName>
    <outputDirectory>../output</outputDirectory>
    <installationLogFile>${system_temp_directory}/install-${product_shortname}.log</installationLogFile>

    <!-- Images -->
    <disableSplashScreen>1</disableSplashScreen>
    <leftImage>../resources/pg-side.png</leftImage>

    <!-- i18n files for the UI -->
    <allowedLanguages>en</allowedLanguages>
    <customLanguageFileList>
        <language>
            <code>en</code>
            <encoding>iso8859-1</encoding>
            <file>i18n/en.lng</file>
        </language>
    </customLanguageFileList>
    <preShowHelpActionList>
        <!-- Get a default port number - ideally 7080 -->
        <getFreePort>
            <variable>defaultpphqport</variable>
            <initialPort>7080</initialPort>
            <finalPort>65535</finalPort>
        </getFreePort>

    	<!-- MAC : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>/Library/pghyperic</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
        <!-- LIN : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${platform_install_prefix}/pghyperic</value>
            <ruleList>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
        <!-- WIN : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${platform_install_prefix}\pghyperic</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
    </preShowHelpActionList>
  
    <!-- Prebuild Actons-->
    <preBuildActionList>
      <setInstallerVariable name="originalplatform" value="${platform_name}"/>
      <setInstallerVariable name="originalplatform" value="linux-x32">
          <ruleList>
              <compareText text="${platform_name}" value="linux"/>
          </ruleList>
      </setInstallerVariable>
      <setInstallerVariable name="project.parameter(install_runtimes).ask" value="0">
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
      </setInstallerVariable>
    </preBuildActionList>
    <initializationActionList>
        <setInstallerVariable name="productVersion" persist="1" value="PG_VERSION_PGHYPERIC" />
	<setInstallerVariable name="hq_db_exist" value="0"/>
	<setInstallerVariable name="project.parameter(install_runtimes).ask" value="0"/>
	<setInstallerVariable name="project.parameter(extract_mode).ask" value="0" />
	<!-- Abort Installation as trying to  run a 32-bit installer on 64-bit machine -->
        <throwError>
          <customErrorMessage>${msg(platform.not.match)}</customErrorMessage>
          <text>Unknown Error</text>
          <ruleList>
            <platformTest type="linux-x64"/>
            <compareText text="${originalplatform}" value="linux-x32"/>
          </ruleList>
        </throwError>
        <!-- Get a default port number - ideally 7080 -->
        <getFreePort>
            <variable>defaultpphqport</variable>
            <initialPort>7080</initialPort>
            <finalPort>65535</finalPort>
        </getFreePort>

        <!-- LIN : Set the default values for unattended mode -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="installdir" value="${platform_install_prefix}/pghyperic"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${installer_ui}</text>
                    <value>unattended</value>
                </compareText>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </actionGroup>
        <!-- WIN : Set the default values for unattended mode -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="installdir" value="${platform_install_prefix}\pghyperic"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${installer_ui}</text>
                    <value>unattended</value>
                </compareText>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
        <!-- MAC : Set the default values for unattended mode -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="installdir" value="/Library/pghyperic"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${installer_ui}</text>
                    <value>unattended</value>
                </compareText>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </actionGroup>
	<!-- MAC : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>/Library/pghyperic</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
        <!-- LIN : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${platform_install_prefix}/pghyperic</value>
            <ruleList>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
        <!-- WIN : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${platform_install_prefix}\pghyperic</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
    </initializationActionList>
    <preInstallationActionList>
        <!-- Creates the ini file if not exits -->
        <touchFile path="/etc/postgres-reg.ini">
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </touchFile>
        <!-- LIN & MAC : Get the branding & check Previous Installation of pghyperic-->
        <actionGroup>
            <actionList>
                <iniFileGet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>pghyperic</section>
                    <key>Branding</key>
                    <variable>iBranding</variable>
                </iniFileGet>
                <iniFileGet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>pghyperic</section>
                    <key>Version</key>
                    <variable>pghypericVersion</variable>
                </iniFileGet>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>

        <!-- WIN : Check Previous Installation of pghyperic-->
        <actionGroup>
            <actionList>
                <!-- Get the branding -->
                <registryGet>
                    <name>Branding</name>
                    <key>HKEY_LOCAL_MACHINE\SOFTWARE\pghyperic</key>
                    <variable>iBranding</variable>
                </registryGet> 
                <registryGet>
                    <key>HKEY_LOCAL_MACHINE\SOFTWARE\pghyperic</key>
                    <name>Version</name>
                    <variable>pghypericVersion</variable>
                </registryGet>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>

	<!-- If there appears to be an existing installation, with no Branding value. --> 
	<!-- force the default value. Otherwise, set the branding to whatever we read, -->
	<!-- or, set the default -->
	
	<!-- Existing, old install (version, but no branding) -->
	<setInstallerVariable>
		<name>branding</name>
		<persist>0</persist>
		<value>pghyperic</value>
		<ruleList>
			<compareText>
				<logic>does_not_equal</logic>
				<text>${pghypericVersion}</text>
				<value></value>
			</compareText>
			<compareText>
				<logic>equals</logic>
				<text>${iBranding}</text>
				<value></value>
			</compareText>
		</ruleList>
	</setInstallerVariable>
	
	<!-- Existing install, with branding -->
	<setInstallerVariable>
		<name>branding</name>
		<persist>0</persist>
		<value>${iBranding}</value>
		<ruleList>
			<compareText>
				<logic>does_not_equal</logic>
				<text>${iBranding}</text>
				<value></value>
			</compareText>
		</ruleList>
	</setInstallerVariable>
	
	<!-- New install, nothing set on the command line -->
	<setInstallerVariable>
		<name>branding</name>
		<persist>0</persist>
		<value>pghyperic</value>
		<ruleList>
			<compareText>
				<logic>equals</logic>
				<text>${branding}</text>
				<value></value>
			</compareText>
		</ruleList>
	</setInstallerVariable>
	
        <logMessage>
            <text>Using branding: ${branding}</text>
        </logMessage>
        <!-- Set the installation directory in case of re-install/upgrade -->
        <actionGroup>
            <actionList>
                <iniFileGet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>pghyperic</section>
                    <key>InstallationDirectory</key>
                    <variable>installdir</variable>
                </iniFileGet>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${pghypericVersion}</text>
                    <value/>
                </compareText>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
   
        <!-- WIN: Set the installation directory in case of re-install/upgrade -->
        <actionGroup>
            <actionList>
                <registryGet>
                    <key>HKEY_LOCAL_MACHINE\SOFTWARE\pghyperic</key>
                    <name>Location</name>
                    <variable>installdir</variable>
                </registryGet> 
            </actionList>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${pghypericVersion}</text>
                    <value/>
                </compareText>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>

        <actionGroup>
            <actionList>
                <!-- We will also need to get the VC++ runtimes installed on Windows, before we do anything with binaries -->
                <unpackFile>
                    <component>default</component>
                    <destination>${system_temp_directory}\vcredist_x86.exe</destination>
                    <folder>installfileswindows</folder>
                    <origin>instscripts/vcredist_x86.exe</origin>
                </unpackFile>
                <unpackFile>
                    <component>default</component>
                    <destination>${system_temp_directory}/installruntimes.vbs</destination>
                    <folder>installfileswindows</folder>
                    <origin>instscripts/installruntimes.vbs</origin>
                </unpackFile>
                <runProgram>
                    <program>cscript</program>
                    <programArguments>//NoLogo "${system_temp_directory}\installruntimes.vbs" "${system_temp_directory}\vcredist_x86.exe"</programArguments>
                    <abortOnError>1</abortOnError>
                    <showMessageOnError>1</showMessageOnError>
                    <customErrorMessage>${msg(error.installing.runtimes)}</customErrorMessage>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>1</text>
                            <value>${install_runtimes}</value>
                        </compareText>
                    </ruleList>
                </runProgram>
                <throwError>
                    <text>${msg(script.command.line.error)}</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>127</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                    </ruleList>
                </throwError>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </actionGroup>
    </preInstallationActionList>
    <postInstallationActionList>
	<substitute>
	    <files>
		${installdir}/installer/pghyperic/hqdb.sql
		${installdir}/server-PG_VERSION_PGHYPERIC/conf/hq-server.conf
		${installdir}/server-PG_VERSION_PGHYPERIC/data/hq-server-install.conf	
		${installdir}/server-PG_VERSION_PGHYPERIC/hq-engine/server/default/deploy/hq.ear/META-INF/hibernate.cfg.xml
		${installdir}/server-PG_VERSION_PGHYPERIC/hq-engine/server/default/deploy/hq-ds.xml
		${installdir}/server-PG_VERSION_PGHYPERIC/tmp/hibernate/hibernate.properties.xml
		${installdir}/server-PG_VERSION_PGHYPERIC/tmp/hibernate/hibernate.properties
		${installdir}/agent-PG_VERSION_PGHYPERIC/conf/agent.properties
	    </files>
	    <substitutionList>
		<substitution>
		    <pattern>@@PPHQUSER@@</pattern>
		    <value>${pphquser}</value>
		</substitution>
		<substitution>
		    <pattern>@@PPHQPASSWORD@@</pattern>
		    <value>${pphqpassword}</value>
		</substitution>
		<substitution>
		    <pattern>@@PPHQPORT@@</pattern>
		    <value>${pphqport}</value>
		</substitution>
		<!-- For consistency postgres user is same as pphq console user -->
		<substitution>
		    <pattern>@@PGUSER@@</pattern>
		    <value>${pphquser}</value>
		</substitution>
		<!-- For consistency postgres password is same as pphq console password -->
		<substitution>
		    <pattern>@@PGPASSWORD@@</pattern>
		    <value>${pphqpassword}</value>
		</substitution>
		<substitution>
		    <pattern>@@PGPORT@@</pattern>
		    <value>${pgport}</value>
		</substitution>
		<substitution>
		    <pattern>@@PGHOST@@</pattern>
		    <value>${pghost}</value>
		</substitution>
		<substitution>
		    <pattern>@@SMTPHOST@@</pattern>
		    <value>${smtphost}</value>
		</substitution>
		<substitution>
		    <pattern>@@INSTALLDIR@@</pattern>
		    <value>${installdir}</value>
		</substitution>
	    </substitutionList>
	    <ruleList>
		<compareText>
		    <logic>does_not_equal</logic>
		    <text>${platform_name}</text>
		    <value>windows</value>
		</compareText>
	    </ruleList>
	</substitute>

	<substitute>
	    <files>
		${installdir}/installer/pghyperic/hqdb.sql
		${installdir}/server-PG_VERSION_PGHYPERIC/conf/hq-server.conf
		${installdir}/server-PG_VERSION_PGHYPERIC/data/hq-server-install.conf	
		${installdir}/server-PG_VERSION_PGHYPERIC/hq-engine/server/default/deploy/hq.ear/META-INF/hibernate.cfg.xml
		${installdir}/server-PG_VERSION_PGHYPERIC/hq-engine/server/default/deploy/hq-ds.xml
		${installdir}/server-PG_VERSION_PGHYPERIC/tmp/hibernate/hibernate.properties.xml
		${installdir}/server-PG_VERSION_PGHYPERIC/tmp/hibernate/hibernate.properties
		${installdir}/agent-PG_VERSION_PGHYPERIC/conf/agent.properties
	    </files>
	    <substitutionList>
		<substitution>
		    <pattern>@@PPHQUSER@@</pattern>
		    <value>${pphquser}</value>
		</substitution>
		<substitution>
		    <pattern>@@PPHQPASSWORD@@</pattern>
		    <value>${pphqpassword}</value>
		</substitution>
		<substitution>
		    <pattern>@@PPHQPORT@@</pattern>
		    <value>${pphqport}</value>
		</substitution>
		<substitution>
		    <pattern>@@PGUSER@@</pattern>
		    <value>${pphquser}</value>
		</substitution>
		<substitution>
		    <pattern>@@PGPASSWORD@@</pattern>
		    <value>${pphqpassword}</value>
		</substitution>
		<substitution>
		    <pattern>@@PGPORT@@</pattern>
		    <value>${pgport}</value>
		</substitution>
		<substitution>
		    <pattern>@@PGHOST@@</pattern>
		    <value>${pghost}</value>
		</substitution>
		<substitution>
		    <pattern>@@SMTPHOST@@</pattern>
		    <value>${smtphost}</value>
		</substitution>
		<substitution>
		    <pattern>@@INSTALLDIR@@</pattern>
		    <value>${installdir}</value>
		</substitution>
	    </substitutionList>
	    <ruleList>
		<compareText>
		    <logic>equals</logic>
		    <text>${platform_name}</text>
		    <value>windows</value>
		</compareText>
	    </ruleList>
	</substitute>


	<!-- Check for existing HQ database -->
	<setInstallerVariableFromScriptOutput>
	  <exec>${system_temp_directory}/instscripts/psql</exec>
	  <execArgs>-t -A -c "SELECT has_database_privilege('HQ', 'CREATE')"</execArgs>
	  <name>hq_db_exist</name>
	  <showMessageOnError>0</showMessageOnError>
	  <abortOnError>0</abortOnError>
	  <ruleList>
	    <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
	  </ruleList>
	</setInstallerVariableFromScriptOutput>
	<setInstallerVariableFromScriptOutput>
	  <exec>${system_temp_directory}\instscripts\psql</exec>
          <execArgs>-t -A -c "SELECT has_database_privilege('HQ', 'CREATE')"</execArgs>
          <name>hq_db_exist</name>
	  <showMessageOnError>0</showMessageOnError>
	  <abortOnError>0</abortOnError>
	  <ruleList>
	    <compareText logic="equals" text="${platform_name}" value="windows"/>
	  </ruleList>
	</setInstallerVariableFromScriptOutput>
	<stringModify text="${hq_db_exist}" variable="hq_db_exist" logic="trim"/>

	<!-- create HQ database and related objects for hypericif they do not exist -->
	<runProgram>
	  <program>${system_temp_directory}/instscripts/psql</program>
	  <programArguments>-f "${installdir}/installer/pghyperic/hqdb.sql"</programArguments>
	  <progressText>${msg(progress.text.creating.hqdbschema)}</progressText>
	  <abortOnError>0</abortOnError>
	  <showMessageOnError>0</showMessageOnError>
	  <ruleList>
	    <compareText logic="equals" text="${hq_db_exist}" value=""/>
	    <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
	  </ruleList>
	</runProgram>
	<runProgram>
	  <program>${system_temp_directory}\instscripts\psql.exe</program>
	  <programArguments>-f "${installdir}\installer\pghyperic\hqdb.sql"</programArguments>
	  <progressText>${msg(progress.text.creating.hqdbschema)}</progressText>
	  <abortOnError>0</abortOnError>
	  <showMessageOnError>0</showMessageOnError>
	  <ruleList>
	    <compareText logic="equals" text="${hq_db_exist}" value=""/>
	    <compareText logic="equals" text="${platform_name}" value="windows"/>
	  </ruleList>
	</runProgram>

	<!-- Inform user about configuring HQ Database -->
	<showInfo text="${msg(configure.hqdbschema)}">
	  <ruleList>
	    <compareText logic="equals" text="${hq_db_exist}" value=""/>
	  </ruleList>
	</showInfo>


        <actionGroup>
            <actionList>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>pghyperic</section>
                    <key>Description</key>
                    <value>${msg(install.summary)}</value>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>pghyperic</section>
                    <key>InstallationDirectory</key>
                    <value>${installdir}</value>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>pghyperic</section>
                    <key>Version</key>
                    <value>${product_version}</value>
                </iniFileSet>
                <runProgram>
                    <program>${installdir}/installer/pghyperic/createshortcuts.sh</program>
                    <programArguments>"${product_version}" "${branding}" "${installdir}"</programArguments>
                    <progressText>${msg(progress.text.creating.shortcuts)}</progressText>
                    <workingDirectory>${installdir}/installer/pghyperic</workingDirectory>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
        <!-- Branding info -->
        <logMessage>
            <text>Write the branding to the ini file...</text>
        </logMessage>
        <iniFileSet>
            <file>/etc/postgres-reg.ini</file>
            <section>pghyperic</section>
            <key>Branding</key>
            <value>${branding}</value>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </iniFileSet>
        <registrySet>
            <key>HKEY_LOCAL_MACHINE\SOFTWARE\pghyperic</key>
            <name>Branding</name>
            <value>${branding}</value>
        </registrySet>


	<!-- Initialise the hyperic server if this is an installation -->
        <actionGroup>
	    <actionList>
		<runProgram>
		    <program>${installdir}/server-PG_VERSION_PGHYPERIC/bin/hq-server.sh</program>
		    <programArguments> > ${system_temp_directory}/hyperic-server.log 2> ${system_temp_directory}/hyperic-server-error.log start</programArguments>
		    <progressText>${msg(progress.text.initialising.server)}</progressText>
		    <abortOnError>0</abortOnError>
		    <showMessageOnError>0</showMessageOnError>
		    <ruleList>
			<compareText>
			    <logic>does_not_equal</logic>
			    <text>${platform_name}</text>
			    <value>windows</value>
			</compareText>
		    </ruleList>
		</runProgram>
		<wait>10000</wait>
		<runProgram>
                    <program>${installdir}\server-PG_VERSION_PGHYPERIC\bin\hq-server.exe</program>
                    <programArguments>start</programArguments>
		    <!--
		    <program>cscript</program>
		    <program>${installdir}\server-PG_VERSION_PGHYPERIC\bin\hq-server.exe</programArguments>
		    <programArguments>start</programArguments>
		    -->
		    <progressText>${msg(progress.text.initialising.server)}</progressText>
		    <abortOnError>0</abortOnError>
		    <showMessageOnError>0</showMessageOnError>
		    <ruleList>
			<compareText>
			    <logic>equals</logic>
			    <text>${platform_name}</text>
			    <value>windows</value>
			</compareText>
		    </ruleList>
		</runProgram>

		<setInstallerVariable>
		    <name>didError</name>
		    <value>1</value>
		    <ruleList>
			<compareText>
			    <logic>does_not_equal</logic>
			    <text>0</text>
			    <value>${program_exit_code}</value>
			</compareText>
		    </ruleList>
		</setInstallerVariable>

		<throwError>
		    <text>${msg(script.command.line.error)}</text>
		    <ruleList>
			<compareText>
			    <logic>equals</logic>
			    <text>127</text>
			    <value>${program_exit_code}</value>
			</compareText>
		    </ruleList>
		</throwError>
		<throwError>
		    <text>${msg(error.could.not.initialise.server)}</text>
		    <ruleList>
			<compareText>
			    <logic>equals</logic>
			    <text>1</text>
			    <value>${program_exit_code}</value>
			</compareText>
		    </ruleList>
		</throwError>
		<showWarning>
		    <text>${msg(warning.during.server.initialisation)}</text>
		    <ruleList>
			<compareText>
			    <logic>equals</logic>
			    <text>2</text>
			    <value>${program_exit_code}</value>
			</compareText>
		    </ruleList>
		</showWarning>
	    </actionList>
	    <!-- Only appropriate for installs -->
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${pghypericVersion}</text>
                    <value/>
                </compareText>
            </ruleList>
	</actionGroup>

	<!-- Initialise the hyperic agent if this is an installation -->
        <actionGroup>
	    <actionList>
		<runProgram>
		    <program>${installdir}/agent-PG_VERSION_PGHYPERIC/bin/hq-agent.sh</program>
		    <programArguments> > ${system_temp_directory}/hyperic-agent-start.log 2> ${system_temp_directory}/hyperic-agent-start-error.log start</programArguments>
		    <progressText>${msg(progress.text.initialising.agent)}</progressText>
		    <abortOnError>0</abortOnError>
		    <showMessageOnError>0</showMessageOnError>
		    <ruleList>
			<compareText>
			    <logic>does_not_equal</logic>
			    <text>${platform_name}</text>
			    <value>windows</value>
			</compareText>
		    </ruleList>
		</runProgram>
		<wait>5000</wait>
		<runProgram>
                    <program>${installdir}\agent-PG_VERSION_PGHYPERIC\bin\hq-agent.bat</program>
                    <programArguments>start</programArguments>
		    <!--
		    <program>cscript</program>
		    <program>${installdir}\server-PG_VERSION_PGHYPERIC\bin\hq-server.exe</programArguments>
		    <programArguments>start</programArguments>
		    -->
		    <progressText>${msg(progress.text.initialising.agent)}</progressText>
		    <abortOnError>0</abortOnError>
		    <showMessageOnError>0</showMessageOnError>
		    <ruleList>
			<compareText>
			    <logic>equals</logic>
			    <text>${platform_name}</text>
			    <value>windows</value>
			</compareText>
		    </ruleList>
		</runProgram>

		<setInstallerVariable>
		    <name>didError</name>
		    <value>1</value>
		    <ruleList>
			<compareText>
			    <logic>does_not_equal</logic>
			    <text>0</text>
			    <value>${program_exit_code}</value>
			</compareText>
		    </ruleList>
		</setInstallerVariable>

		<throwError>
		    <text>${msg(script.command.line.error)}</text>
		    <ruleList>
			<compareText>
			    <logic>equals</logic>
			    <text>127</text>
			    <value>${program_exit_code}</value>
			</compareText>
		    </ruleList>
		</throwError>
		<throwError>
		    <text>${msg(error.could.not.initialise.agent)}</text>
		    <ruleList>
			<compareText>
			    <logic>equals</logic>
			    <text>1</text>
			    <value>${program_exit_code}</value>
			</compareText>
		    </ruleList>
		</throwError>
		<showWarning>
		    <text>${msg(warning.during.agent.initialisation)}</text>
		    <ruleList>
			<compareText>
			    <logic>equals</logic>
			    <text>2</text>
			    <value>${program_exit_code}</value>
			</compareText>
		    </ruleList>
		</showWarning>
	    </actionList>
	    <!-- Only appropriate for installs -->
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${pghypericVersion}</text>
                    <value/>
                </compareText>
            </ruleList>
	</actionGroup>

	<!-- Shortcuts in case when platform is not windows -->
	<runProgram>
	    <program>${installdir}/installer/pghyperic/createshortcuts.sh</program>
	    <programArguments>"${product_version}" "${branding}" "${installdir}" </programArguments>
	    <progressText>${msg(progress.text.creating.shortcuts)}</progressText>
	    <abortOnError>0</abortOnError>
	    <showMessageOnError>0</showMessageOnError>
	    <ruleList>
		<compareText>
		    <logic>does_not_equal</logic>
		    <text>${platform_name}</text>
		    <value>windows</value>
		</compareText>
	    </ruleList>
	</runProgram>


    </postInstallationActionList>

    <!-- preUninstallation actions -->
    <preUninstallationActionList>
        <actionGroup>
            <actionList>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>pghyperic</section>
                    <key>Description</key>
                    <value/>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>pghyperic</section>
                    <key>InstallationDirectory</key>
                    <value/>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>pghyperic</section>
                    <key>Version</key>
                    <value/>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>pghyperic</section>
                    <key>Branding</key>
                    <value/>
                </iniFileSet>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
        <!-- LIN : Remove Menu shortcuts -->
        <actionGroup>
            <actionList>
                <runProgram>
                    <program>${installdir}/installer/pghyperic/removeshortcuts.sh</program>
                    <programArguments>"${installdir}" "${product_version}" "${branding}"</programArguments>
                    <workingDirectory>${installdir}/installer/pghyperic</workingDirectory>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </actionGroup>
        <actionGroup>
            <actionList>
                <deleteFile>
                    <path>/Applications/${branding}</path>
                </deleteFile>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </actionGroup>

    </preUninstallationActionList>
  
    <!-- finalPage actions -->
    <finalPageActionList>
      <launchBrowser url="http://127.0.0.1:${pphqport}/"
                     progressText="${msg(Installer.Installation.Finished.Visit.Us)}"/>
    </finalPageActionList>


    <!-- Components -->
    <componentList>
        <component>
            <name>default</name>
            <description>Default Component</description>
            <canBeEdited>1</canBeEdited>
            <selected>1</selected>
            <show>1</show>
            <folderList>
                <!-- LIN- Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfileslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux/server-PG_VERSION_PGHYPERIC</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux/agent-PG_VERSION_PGHYPERIC</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Scripts</description>
                    <destination>${installdir}</destination>
                    <name>installscriptslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Menu Scripts</description>
                    <destination>${installdir}</destination>
                    <name>menuscriptslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Files</description>
                    <destination>${installdir}</destination>
                    <name>installfileslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux/instscripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <!-- LIN-X64 - Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfileslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-x64/server-PG_VERSION_PGHYPERIC</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux-x64/agent-PG_VERSION_PGHYPERIC</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Scripts</description>
                    <destination>${installdir}</destination>
                    <name>installscriptslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-x64/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Menu Scripts</description>
                    <destination>${installdir}</destination>
                    <name>menuscriptslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-x64/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Files</description>
                    <destination>${installdir}</destination>
                    <name>installfileslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-x64/instscripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <!-- MAC Program Files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfilesosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/osx/server-PG_VERSION_PGHYPERIC</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/osx/agent-PG_VERSION_PGHYPERIC</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Scripts</description>
                    <destination>${installdir}</destination>
                    <name>installscriptsosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/osx/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Menu Scripts</description>
                    <destination>${installdir}</destination>
                    <name>menuscriptsosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/osx/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Binary Files</description>
                    <destination>${installdir}</destination>
                    <name>binfilesosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/osx/bin</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Library Files</description>
                    <destination>${installdir}</destination>
                    <name>libfilesosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/osx/lib</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
 
                <!-- WIN - Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfileswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/windows/server-PG_VERSION_PGHYPERIC</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/windows/agent-PG_VERSION_PGHYPERIC</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
	       <folder>
                    <description>Installer Scripts</description>
                    <destination>${installdir}</destination>
                    <name>installscriptswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/windows/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>

                <folder>
                    <description>Menu Scripts</description>
                    <destination>${installdir}</destination>
                    <name>menuscriptswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/windows/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Files</description>
                    <destination>${installdir}</destination>
                    <name>installfileswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/windows/instscripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
            </folderList>
            <!-- WIN: Start Menu -->
            <startMenuShortcutList>
		<!-- Launch pghyperic -->
                <startMenuLinkShortcut>
                    <comment>PostgreSQL Hyperic Monitoring Home Page</comment>
                    <name>PostgreSQL Hyperic Monitoring Home Page</name>
                    <runInTerminal>0</runInTerminal>
                    <url>http://127.0.0.1:${pphqport}/</url>
                    <windowsIcon>${installdir}\scripts\images\pghyperic-launch.ico</windowsIcon>
                </startMenuLinkShortcut>  
                <!-- Start server -->
                <startMenuShortcut>
                    <name>Start Server</name>
                    <runInTerminal>0</runInTerminal>
                    <windowsExec>${installdir}\server-PG_VERSION_PGHYPERIC\bin\hq-server.exe</windowsExec>
                    <windowsExecArgs>start</windowsExecArgs>
                    <windowsIcon>${installdir}\scripts\images\pghyperic-start.ico</windowsIcon>
                </startMenuShortcut>
                <!-- Stop server -->
                <startMenuShortcut>
                    <name>Stop Server</name>
                    <runInTerminal>0</runInTerminal>
                    <windowsExec>${installdir}\server-PG_VERSION_PGHYPERIC\bin\hq-server.exe</windowsExec>
                    <windowsExecArgs>stop</windowsExecArgs>
                    <windowsIcon>${installdir}\scripts\images\pghyperic-stop.ico</windowsIcon>
		</startMenuShortcut>
                <!-- Start agent -->
                <startMenuShortcut>
                    <name>Start Agent</name>
                    <runInTerminal>0</runInTerminal>
                    <windowsExec>${installdir}\agent-PG_VERSION_PGHYPERIC\bin\hq-agent.bat</windowsExec>
                    <windowsExecArgs>start</windowsExecArgs>
                    <windowsIcon>${installdir}\scripts\images\pghyperic-agent-start.ico</windowsIcon>
                </startMenuShortcut>
                <!-- Stop server -->
                <startMenuShortcut>
                    <name>Stop Agent</name>
                    <runInTerminal>0</runInTerminal>
                    <windowsExec>${installdir}\agent-PG_VERSION_PGHYPERIC\bin\hq-agent.bat</windowsExec>
                    <windowsExecArgs>stop</windowsExecArgs>
                    <windowsIcon>${installdir}\scripts\images\pghyperic-agent-stop.ico</windowsIcon>
		</startMenuShortcut>
            </startMenuShortcutList>

        </component>
    </componentList>
    <parameterList>
        <booleanParameter name="extract_mode" cliOptionName="extract-only" default="0" ask="1" cliOptionShow="1"/>
	<stringParameter name="originalplatform" ask="0" cliOptionShow="0"/>
        <stringParameter name="branding" cliOptionName="branding" ask="0" cliOptionShow="0"/>
        <booleanParameter name="admin_rights" cliOptionName="require-admin" default="0" ask="0" cliOptionShow="0"/>
        <!-- Whether to install runtimes -->
        <booleanParameter>
           <name>install_runtimes</name>
           <description>${msg(install.runtimes.description)}</description>
           <explanation/>
           <value/>
           <default>1</default>
           <ask>yes</ask>
           <cliOptionName>install_runtimes</cliOptionName>
           <cliOptionShow>1</cliOptionShow>
           <ruleList>
               <compareText>
                   <logic>equals</logic>
                   <text>${platform_name}</text>
                   <value>windows</value>
               </compareText>
               <isFalse value="${extract_mode}"/>
           </ruleList>
        </booleanParameter>
 
	<parameterGroup>
	    <name>smtp_server_details</name>
	    <title>${msg(smtp.server.title)}</title>
	    <explanation>${msg(smtp.server.details)}</explanation>
	    <value/>
	    <default/>
	    <parameterList>
		<!-- smtp Host -->
		<stringParameter>
		    <name>smtphost</name>
		    <description>SMTP HostName</description>
		    <explanation/>
		    <value/>
		    <default>localhost</default>
		    <cliOptionName>smtphost</cliOptionName>
		    <allowEmptyValue>1</allowEmptyValue>
		    <width>40</width>
		</stringParameter>
	    </parameterList>
	    <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${pghypericVersion}</text>
                    <value/>
                </compareText>
            </ruleList>
	    <!-- Checking the validity of smtp host Details -->
            <validationActionList>
                <actionGroup>
                    <actionList>
                        <throwError>
                            <text>${msg(smtp.server.blank.error)}</text>
                        </throwError>
                    </actionList>
                    <ruleEvaluationLogic>or</ruleEvaluationLogic>
                    <ruleList>
                        <compareText>
                            <text>${smtphost}</text>
                            <logic>equals</logic>
                            <value/>
                        </compareText>
                    </ruleList>
                </actionGroup>
	        <!-- Validate the smtp Server Details -->
		<!-- This detail is not even validated in hyperic's own installer-->
            </validationActionList>
        </parameterGroup>


        <parameterGroup>
            <name>pgdetails</name>
            <title>${msg(pgplus.details.title)}</title>
            <explanation>${msg(pgplus.details.explanation)}</explanation>
            <value/>
            <default/>
            <parameterList>
                <!-- Postgres Host -->
                <stringParameter>
                    <name>pghost</name>
                    <description>HostName</description>
                    <explanation/>
                    <value/>
                    <default>localhost</default>
		    <cliOptionName>pghost</cliOptionName>
                    <allowEmptyValue>1</allowEmptyValue>
                    <width>40</width>
                </stringParameter>
                <!-- Postgres User -->
                <stringParameter>
                    <name>pguser</name>
                    <description>User Name</description>
                    <explanation/>
                    <value/>
                    <default>postgres</default>
		    <cliOptionName>pguser</cliOptionName>
                    <allowEmptyValue>1</allowEmptyValue>
                    <width>40</width>
                </stringParameter>
	        <!-- Postgres User Password -->
                <passwordParameter>
                    <name>pgpassword</name>
                    <title>Password</title>
                    <description>Password</description>
                    <explanation/>
                    <value/>
                    <default>postgres</default>
		    <cliOptionName>pgpassword</cliOptionName>
                    <allowEmptyValue>1</allowEmptyValue>
                    <askForConfirmation>0</askForConfirmation>
                    <descriptionRetype/>
                    <width>40</width>
                </passwordParameter>
	        <!-- Postgres Port(Default 5432) -->
                <stringParameter>
                    <name>pgport</name>
                    <description>Port</description>
                    <explanation/>
                    <value/>
                    <default>5432</default>
		    <cliOptionName>pgport</cliOptionName>
                    <allowEmptyValue>1</allowEmptyValue>
                    <width>40</width>
                </stringParameter>
		
                <!-- Postgres Home Directory -->
		<!--
                <directoryParameter>
                    <name>pghome</name>
                    <description>PostgreSQL Home Directory</description>
                    <explanation/>
                    <value/>
                    <default>${defaultpghome}</default>
                    <allowEmptyValue>1</allowEmptyValue>
                    <mustBeWritable>0</mustBeWritable>
                    <mustExist>0</mustExist>
                    <ask>1</ask>
                    <width>40</width>
                </directoryParameter>
                <stringParameter>
                    <name>defaultpghome</name>
                    <description/>
                    <explanation/>
                    <value/>
                    <default/>
                    <ask>0</ask>
                    <allowEmptyValue>1</allowEmptyValue>
                    <width>40</width>
                </stringParameter>
		-->
                <stringParameter>
                    <name>pgdatabase</name>
                    <description>Database name</description>
                    <explanation/>
                    <value/>
                    <default>postgres</default>
                    <ask>1</ask>
		    <cliOptionName>pgdatabase</cliOptionName>
                    <allowEmptyValue>1</allowEmptyValue>
                    <width>40</width>
                </stringParameter>
            </parameterList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${pghypericVersion}</text>
                    <value/>
                </compareText>
            </ruleList>
            <!-- Checking the validity of PostgreSQL Server Details -->
            <validationActionList>
                <actionGroup>
                    <actionList>
                        <throwError>
                            <text>${msg(pgplus.blank.error)}</text>
                        </throwError>
                    </actionList>
                    <ruleEvaluationLogic>or</ruleEvaluationLogic>
                    <ruleList>
                        <compareText>
                            <text>${pghost}</text>
                            <logic>equals</logic>
                            <value/>
                        </compareText>
                        <compareText>
                            <text>${pgport}</text>
                            <logic>equals</logic>
                            <value/>
                        </compareText>
                        <compareText>
                            <text>${pguser}</text>
                            <logic>equals</logic>
                            <value/>
                        </compareText>
                        <compareText>
                            <text>${pgpassword}</text>
                            <logic>equals</logic>
                            <value/>
                        </compareText>
                        <compareText>
                            <text>${pghome}</text>
                            <logic>equals</logic>
                            <value/>
                        </compareText>
                    </ruleList>
                </actionGroup>
	        <!-- Validate the PostgreSQL Server Details -->
                <actionGroup>
                    <actionList>
			<!-- Extract file -->
			<unpackDirectory>
			    <origin>instscripts</origin>
			    <destination>${system_temp_directory}</destination>
			    <component>default</component>
			    <folder>installfileslinux</folder>
			    <ruleList>
				<compareText>
				    <logic>equals</logic>
				    <text>${platform_name}</text>
				    <value>linux</value>
				</compareText>
			    </ruleList>
			</unpackDirectory>
			<unpackDirectory>
			    <origin>instscripts</origin>
			    <destination>${system_temp_directory}</destination>
			    <component>default</component>
			    <folder>installfileslinux-x64</folder>
			    <ruleList>
				 <compareText>
				     <logic>equals</logic>
				     <text>${platform_name}</text>
				     <value>linux-x64</value>
				 </compareText>
			    </ruleList>
			</unpackDirectory>
			<unpackDirectory>
			     <origin>instscripts</origin>
			     <destination>${system_temp_directory}</destination>
			     <component>default</component>
			     <folder>installfileswindows</folder>
			     <ruleList>
				  <compareText>
				     <logic>equals</logic>
				     <text>${platform_name}</text>
				     <value>windows</value>
				  </compareText>
			    </ruleList>
			</unpackDirectory>
		        <!-- MAC: Unpack psql and its shared libraries -->
			<unpackFile>
			  <component>pghyperic</component>
			  <destination>${system_temp_directory}/${product_fullname}/bin/psql</destination>
			  <folder>binfilesosx</folder>
			  <origin>bin/psql</origin>
			  <ruleList>
			    <compareText logic="equals" text="${platform_name}" value="osx"/>
			  </ruleList>
			</unpackFile>
			<unpackDirectory>
			  <component>pghyperic</component>
			  <destination>${system_temp_directory}/${product_fullname}/lib</destination>
			  <folder>libfilesosx</folder>
			  <origin>lib</origin>
			  <ruleList>
			    <compareText logic="equals" text="${platform_name}" value="osx"/>
			  </ruleList>
			</unpackDirectory>
                        <setEnvironmentVariable name="PGHOST" value="${pghost}" />
                        <setEnvironmentVariable name="PGUSER" value="${pguser}" />
                        <setEnvironmentVariable name="PGPASSWORD" value="${pgpassword}" />
                        <setEnvironmentVariable name="PGPORT" value="${pgport}" />
                        <setEnvironmentVariable name="PGDATABASE" value="${pgdatabase}"/>
	                <setEnvironmentVariable name="LD_LIBRARY_PATH" value="${system_temp_directory}/instscripts"/>
                        <setInstallerVariableFromScriptOutput>
			  <exec>${system_temp_directory}/instscripts/psql</exec>
			  <execArgs>-l ${pgdatabase}</execArgs>
			  <name>connection</name>
			  <workingDirectory>${system_temp_directory}/instscripts</workingDirectory>
			  <ruleList>
			    <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
			  </ruleList>
			</setInstallerVariableFromScriptOutput>
			<setInstallerVariableFromScriptOutput>
			  <exec>${system_temp_directory}\instscripts\psql.exe</exec>
			  <execArgs>-l ${pgdatabase}</execArgs>
			  <name>connection</name>
			  <workingDirectory>${system_temp_directory}\instscripts</workingDirectory>
			  <ruleList>
			    <compareText logic="equals" text="${platform_name}" value="windows"/>
			  </ruleList>
			</setInstallerVariableFromScriptOutput>
			<stringModify text="${connection}" variable="connection" logic="trim"/> 
                    </actionList>
                 </actionGroup> 
            </validationActionList>
        </parameterGroup>

	<parameterGroup>
            <name>pphqmonitoringconsoledetails</name>
            <title>${msg(pphq.monitoring.console.details.title)}</title>
            <explanation>${msg(pphq.monitoring.console.details.explanation)}</explanation>
            <value/>
            <default/>
            <parameterList>
                <!-- PPHQ User -->
                <stringParameter>
                    <name>pphquser</name>
                    <description>User Name</description>
                    <explanation/>
                    <value/>
                    <default>hqadmin</default>
		    <cliOptionName>pphquser</cliOptionName>
                    <allowEmptyValue>1</allowEmptyValue>
                    <width>40</width>
                </stringParameter>
	        <!-- PPHQ User Password -->
                <passwordParameter>
                    <name>pphqpassword</name>
                    <title>Password</title>
                    <description>Password</description>
                    <explanation/>
                    <value/>
                    <default>hqadmin</default>
		    <cliOptionName>pphqpassword</cliOptionName>
                    <allowEmptyValue>1</allowEmptyValue>
                    <askForConfirmation>0</askForConfirmation>
                    <descriptionRetype/>
                    <width>40</width>
                </passwordParameter>
	        <!-- PPHQ Port(Default 7080) -->
                <stringParameter>
                    <name>pphqport</name>
                    <description>Port</description>
                    <explanation/>
                    <value/>
                    <default>${defaultpphqport}</default>
		    <cliOptionName>pphqport</cliOptionName>
                    <allowEmptyValue>1</allowEmptyValue>
                    <width>40</width>
                </stringParameter>
            </parameterList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${pghypericVersion}</text>
                    <value/>
                </compareText>
            </ruleList>
            <!-- Checking the validity of PPHQ Monitoring Console Details -->
            <validationActionList>
                <actionGroup>
                    <actionList>
                        <throwError>
                            <text>${msg(pphq.monitoring.console.blank.error)}</text>
                        </throwError>
                    </actionList>
                    <ruleEvaluationLogic>or</ruleEvaluationLogic>
                    <ruleList>
                        <compareText>
                            <text>${pphqport}</text>
                            <logic>equals</logic>
                            <value/>
                        </compareText>
                        <compareText>
                            <text>${pphquser}</text>
                            <logic>equals</logic>
                            <value/>
                        </compareText>
                        <compareText>
                            <text>${pphqpassword}</text>
                            <logic>equals</logic>
                            <value/>
                        </compareText>
                    </ruleList>
                </actionGroup>
	    </validationActionList>
        </parameterGroup>

	<!-- Install Directory -->
        <directoryParameter>
            <name>installdir</name>
            <description>Installer.Parameter.installdir.description</description>
            <explanation>Installer.Parameter.installdir.explanation</explanation>
            <value>${default_installdir}</value>
            <default/>
            <allowEmptyValue>0</allowEmptyValue>
            <ask>yes</ask>
            <cliOptionName>prefix</cliOptionName>
            <mustBeWritable>yes</mustBeWritable>
            <mustExist>0</mustExist>
            <width>40</width>
            <ruleList>
                <compareText>
                    <text>${pghypericVersion}</text>
                    <logic>equals</logic>
                    <value/>
                </compareText>
            </ruleList>
	    <!-- Validating whether installdir is empty -->
            <validationActionList>
                <actionGroup>
                    <actionList>
                        <setInstallerVariable name="installdir" value="${default_installdir}" />
                        <throwError>
                            <text>${msg(pghyperic.installdir.empty)}</text>
                        </throwError>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <text>${installdir}</text>
                            <logic>equals</logic>
                            <value />
                        </compareText>
                    </ruleList>
                </actionGroup>
            </validationActionList>
            <!-- Validating whether installdir contains whitespaces (Linux) -->
            <postShowPageActionList>
                <actionGroup>
                    <actionList>  
                        <showWarning>
                            <text>${msg(pghyperic.installdir.error)}</text>
                        </showWarning>
                        <setInstallerVariable name="next_page" value="installdir"/>
                    </actionList>
                    <ruleList>
                       <regExMatch>
                           <text>${installdir}</text>
                           <logic>does_not_match</logic>
                           <pattern>^/([0-9a-zA-Z_/\.\-]*)$</pattern>
                       </regExMatch>
                       <compareText>
                           <logic>does_not_equal</logic>
                           <text>${platform_name}</text>
                           <value>windows</value>
                       </compareText>
                    </ruleList>
	        </actionGroup>
                <!-- Validating whether installdir is valid (Windows) -->
                <actionGroup>
                   <actionList>
                     <setInstallerVariable name="installdir" value="${default_installdir}" />
                     <showWarning>
                        <text>${msg(pghyperic.installdir.error)}</text>
                     </showWarning>
                     <setInstallerVariable name="next_page" value="installdir"/>
                   </actionList>
                   <ruleList>
                       <regExMatch>
                         <text>${installdir}</text>
                         <logic>does_not_match</logic>
                         <pattern>^([a-zA-Z]:)\\([0-9a-zA-Z_\\\s\.\-\(\)]*)$</pattern>
                       </regExMatch>
                       <compareText>
                         <text>${platform_name}</text>
                         <logic>equals</logic>
                         <value>windows</value>
                       </compareText>
                   </ruleList>
                 </actionGroup>
            </postShowPageActionList>
        </directoryParameter>
	<!-- Explain that we're using an existing installation directory -->
        <labelParameter>
            <name>upgrade</name>
            <title>${msg(upgrade.existing.installation.title)}</title>
            <description>${msg(upgrade.existing.installation.description)}</description>
            <ruleList>
		<compareText>
                    <text>${pghypericVersion}</text>
                    <logic>does_not_equal</logic>
                    <value/>
                </compareText>
            </ruleList>
        </labelParameter>
    </parameterList>
</project>
