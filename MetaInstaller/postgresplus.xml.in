<project>
  <shortName>postgresplus</shortName>
  <fullName>Postgres Plus</fullName>
  <version>PG_VERSION_METAINSTALLER</version>
  <productDisplayName>${product_fullname} ${product_version}</productDisplayName>
  <leftImage>../resources/edb-side.png</leftImage>
  <!--<logoImage>resources/enterprisedb.gif</logoImage>-->
  <splashImage>../resources/splash_screen.png</splashImage>
  <installationLogFile>${system_temp_directory}/install-${product_shortname}.log</installationLogFile>
  <outputDirectory>../output</outputDirectory>
  <vendor>EnterpriseDB</vendor>


  <platformOptionsList>
    <platformOptions>
      <platform>linux</platform>
      <requireInstallationByRootUser>1</requireInstallationByRootUser>
    </platformOptions>
    <platformOptions>
      <platform>osx</platform>
      <requireInstallationByRootUser>1</requireInstallationByRootUser>
    </platformOptions>
  </platformOptionsList>

  <!-- i18n files for the UI -->
  <allowedLanguages>en</allowedLanguages>
  <customLanguageFileList>
    <language>
      <code>en</code>
      <file>i18n/en.lng</file>
    </language>
  </customLanguageFileList>

  <!-- Languages allowed? -->
  <!-- <allowLanguageSelection>1</allowLanguageSelection> -->
  <allowedLanguages>en</allowedLanguages>
  <enableRollback>0</enableRollback>
  <height>400</height>
  <width>600</width>
  <saveRelativePaths>1</saveRelativePaths>
  <startMenuGroupName></startMenuGroupName>

  <!-- Prebuild Actons-->
  <preBuildActionList>
    <setInstallerVariable name="originalplatform" value="${platform_name}"/>
    <setInstallerVariable name="originalplatform" value="linux-x32">
      <ruleList>
        <compareText text="${platform_name}" value="linux"/>
      </ruleList>
    </setInstallerVariable>
  </preBuildActionList>

  <preShowHelpActionList>
    <!-- Set the default installation directory -->
    <setInstallerVariable>
      <name>default_installdir</name>
      <persist>1</persist>
      <value>/Library/PostgreSQL/${product_version}</value>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </setInstallerVariable>

    <setInstallerVariable>
      <name>default_installdir</name>
      <persist>1</persist>
      <value>${platform_install_prefix}/PostgreSQL/${product_version}</value>
      <ruleList>
        <compareText>
          <logic>contains</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </setInstallerVariable>

    <setInstallerVariable>
      <name>default_installdir</name>
      <persist>1</persist>
      <value>${platform_install_prefix}/PostgreSQL/${product_version}</value>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </setInstallerVariable>

    <!-- Get a default port number - ideally 5432 -->
    <getFreePort>
      <variable>defaultport</variable>
      <initialPort>5432</initialPort>
      <finalPort>65535</finalPort>
    </getFreePort>
    <!-- Set the default password, to be used only in unnattended mode -->
    <setInstallerVariable>
      <name>defaultpassword</name>
      <value>postgres</value>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${installer_ui}</text>
          <value>unattended</value>
        </compareText>
      </ruleList>

    </setInstallerVariable>
    <setInstallerVariable>
      <name>defaultpassword</name>
      <value></value>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${installer_ui}</text>
          <value>unattended</value>
        </compareText>
      </ruleList>
    </setInstallerVariable>

  </preShowHelpActionList>

  <initializationActionList>
    <!-- Abort Installation as trying to  run a 32-bit installer on 64-bit machine -->
    <throwError>
      <customErrorMessage>${msg(platform.not.match)}</customErrorMessage>
      <text>Unknown Error</text>
      <ruleList>
        <platformTest type="linux-x64"/>
        <compareText text="${originalplatform}" value="linux-x32">
          <logic>equals</logic>
        </compareText>
      </ruleList>
    </throwError>

    <!-- Set the pghost varaible to localhost -->
    <setInstallerVariable name="pghost" value="localhost">
      <persist>0</persist>
    </setInstallerVariable>

    <!-- Set the default values for pgAgent -->
    <setInstallerVariable name="defaultpghost" value="localhost"/>
    <setInstallerVariable name="defaultpguser" value="postgres"/>
    <!--<setInstallerVariable name="defaultpgport" value="5432"/>-->
    <setInstallerVariable name="defaultpgdbname" value="postgres"/>

    <!-- Set the default system password, to be used only in unnattended mode -->
    <setInstallerVariable name="defaultsyspassword" value=""/>
    <setInstallerVariable name="schema" value="install">
      <ruleList>
        <compareText logic="equals" text="${installer_ui}" value="unattended"/>
      </ruleList>
    </setInstallerVariable>
    <setInstallerVariable name="showAuthenticateScreen" value="0">
      <ruleList>
        <compareText logic="equals" text="${installer_ui}" value="unattended"/>
      </ruleList>
    </setInstallerVariable>

    <setInstallerVariable name="defaultsyspassword" value="postgres">
      <ruleList>
        <compareText logic="equals" text="${installer_ui}" value="unattended"/>
      </ruleList>
    </setInstallerVariable>


    <!-- Abort Installation as trying to  run a 32-bit installer on 64-bit machine -->
    <throwError>
      <customErrorMessage>${msg(platform.not.match)}</customErrorMessage>
      <text>Unknown Error</text>
      <ruleList>
        <platformTest type="linux-x64"/>
        <compareText text="${originalplatform}" value="linux-x32">
          <logic>equals</logic>
        </compareText>
      </ruleList>
    </throwError>

    <setInstallerVariable>
      <name>noComponentSelected</name>
      <persist>1</persist>
      <value>true</value>
    </setInstallerVariable>

    <!-- Track if any errors occurred so we can hide the Run Stackbuilder option -->
    <setInstallerVariable>
      <name>didError</name>
      <value>0</value>
    </setInstallerVariable>

    <setInstallerVariable>
      <name>supername</name>
      <persist>1</persist>
      <value>postgres</value>
    </setInstallerVariable>

    <setInstallerVariable>
      <name>dbserver_guid</name>
      <persist>1</persist>
      <value></value>
    </setInstallerVariable>
    <setInstallerVariable>
      <name>processor_arch</name>
      <persist>1</persist>
      <value></value>
    </setInstallerVariable>
    <setInstallerVariable>
      <name>total_mem_in_gb</name>
      <persist>1</persist>
      <value></value>
    </setInstallerVariable>
    <setInstallerVariable>
      <name>os</name>
      <persist>1</persist>
      <value></value>
    </setInstallerVariable>
    <setInstallerVariable>
      <name>number_of_processors</name>
      <persist>1</persist>
      <value></value>
    </setInstallerVariable>
    <setInstallerVariable>
      <name>processor_type</name>
      <persist>1</persist>
      <value></value>
    </setInstallerVariable>
    <setInstallerVariable>
      <name>language</name>
      <persist>1</persist>
      <value></value>
    </setInstallerVariable>
    <setInstallerVariable>
      <name>shared_memory_in_mb</name>
      <persist>1</persist>
      <value></value>
    </setInstallerVariable>

    <!-- Set the default password, to be used only in unnattended mode -->
    <setInstallerVariable>
      <name>defaultpassword</name>
      <persist>0</persist>
      <value>postgres</value>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${installer_ui}</text>
          <value>unattended</value>
        </compareText>
      </ruleList>
    </setInstallerVariable>

    <setInstallerVariable>
      <name>defaultpassword</name>
      <persist>0</persist>
      <value></value>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${installer_ui}</text>
          <value>unattended</value>
        </compareText>
      </ruleList>
    </setInstallerVariable>

    <!--Web Service DynaTune Variables -->
    <setInstallerVariable>
      <name>work_mem_var</name>
      <persist>1</persist>
      <value></value>
    </setInstallerVariable>
    <setInstallerVariable>
      <name>max_connections_var</name>
      <persist>1</persist>
      <value></value>
    </setInstallerVariable>
    <setInstallerVariable>
      <name>maintenance_work_mem_var</name>
      <persist>1</persist>
      <value></value>
    </setInstallerVariable>
    <setInstallerVariable>
      <name>shared_buffers_var</name>
      <persist>1</persist>
      <value></value>
    </setInstallerVariable>
    <setInstallerVariable>
      <name>max_fsm_relations_var</name>
      <persist>1</persist>
      <value></value>
    </setInstallerVariable>
    <setInstallerVariable>
      <name>max_fsm_pages_var</name>
      <persist>1</persist>
      <value></value>
    </setInstallerVariable>
    <setInstallerVariable>
      <name>wal_buffers_var</name>
      <persist>1</persist>
      <value></value>
    </setInstallerVariable>
    <setInstallerVariable>
      <name>effective_cache_size_var</name>
      <persist>1</persist>
      <value></value>
    </setInstallerVariable>
    <setInstallerVariable>
      <name>random_page_cost_var</name>
      <persist>1</persist>
      <value></value>
    </setInstallerVariable>
    <setInstallerVariable>
      <name>checkpoint_segments_var</name>
      <persist>1</persist>
      <value></value>
    </setInstallerVariable>
    <setInstallerVariable>
      <name>autovacuum_vacuum_threshold_var</name>
      <persist>1</persist>
      <value></value>
    </setInstallerVariable>
    <setInstallerVariable>
      <name>autovacuum_vacuum_scale_factor_var</name>
      <persist>1</persist>
      <value></value>
    </setInstallerVariable>
    <setInstallerVariable>
      <name>autovacuum_analyze_threshold_var</name>
      <persist>1</persist>
      <value></value>
    </setInstallerVariable>
    <setInstallerVariable>
      <name>autovacuum_analyze_scale_factor_var</name>
      <persist>1</persist>
      <value></value>
    </setInstallerVariable>
    <setInstallerVariable>
      <name>autovacuum_naptime_var</name>
      <persist>1</persist>
      <value></value>
    </setInstallerVariable>
    <setInstallerVariable>
      <name>stats_row_level_var</name>
      <persist>1</persist>
      <value></value>
    </setInstallerVariable>
    <setInstallerVariable>
      <name>autovacuum_var</name>
      <persist>1</persist>
      <value></value>
    </setInstallerVariable>

    <!-- Get a default port number - ideally 5432 -->
    <getFreePort>
      <finalPort>65535</finalPort>
      <initialPort>5432</initialPort>
      <variable>defaultport</variable>
    </getFreePort>

    <!-- Get a default port number - ideally 8080 -->
    <getFreePort>
      <finalPort>65535</finalPort>
      <initialPort>8080</initialPort>
      <variable>defaultwebport</variable>
    </getFreePort>

    <!-- Upgrading? -->
    <setInstallerVariable>
      <name>IsUpgrade</name>
      <persist>0</persist>
      <value>0</value>
    </setInstallerVariable>

    <!-- Set the uninstaller name -->
    <setInstallerVariable>
      <name>uninstallerName</name>
      <persist>1</persist>
      <value>uninstall-postgresplus</value>
    </setInstallerVariable>

    <!-- Catalog version -->
    <setInstallerVariable>
      <name>CatalogVersion</name>
      <persist>0</persist>
      <value>PG_CATALOG_VERSION</value>
      <!--<value>200711281</value>-->
    </setInstallerVariable>
    <actionGroup>
      <actionList>
        <!-- Set the ini filename -->
        <setInstallerVariable>
          <name>PostgreSqlIni</name>
          <persist>1</persist>
          <value>/etc/postgres-reg.ini</value>
        </setInstallerVariable>
        <logMessage>
          <text>Using ini file: ${PostgreSqlIni}</text>
        </logMessage>
      </actionList>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </actionGroup>
  </initializationActionList>

  <!-- Test code Preinstallation actions -->
  <preInstallationActionList>
    <!-- Hide Npgsql in Linux and Mac -->
    <actionGroup>
      <actionList>
        <setInstallerVariable>
          <name>component(npgsql).canBeEdited</name>
          <persist>0</persist>
          <value>0</value>
        </setInstallerVariable>
        <componentSelection>
          <deselect>npgsql</deselect>
          <select></select>
        </componentSelection>
        <setInstallerVariable>
          <name>component(npgsql).show</name>
          <persist>0</persist>
          <value>0</value>
        </setInstallerVariable>
      </actionList>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </actionGroup>

    <actionGroup>
      <actionList>
        <setInstallerVariable>
          <name>component(pgmemcache).canBeEdited</name>
          <persist>0</persist>
          <value>0</value>
        </setInstallerVariable>
        <componentSelection>
          <deselect>pgmemcache</deselect>
          <select></select>
        </componentSelection>
        <setInstallerVariable>
          <name>component(pgmemcache).show</name>
          <persist>0</persist>
          <value>0</value>
        </setInstallerVariable>
      </actionList>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </actionGroup>

    <actionGroup>
      <actionList>
        <!-- Check for unixodbc -->

        <setInstallerVariableFromScriptOutput>
          <customErrorMessage>${msg(unixodbc.not.exists)}</customErrorMessage>
          <exec>which</exec>
          <execArgs>odbcinst</execArgs>
          <name>unixodbccheck</name>
          <workingDirectory>.</workingDirectory>
          <abortOnError>0</abortOnError>
          <ruleList>
            <compareText>
              <logic>contains</logic>
              <text>${platform_name}</text>
              <value>linux</value>
            </compareText>
          </ruleList>
        </setInstallerVariableFromScriptOutput>
        <setInstallerVariable>
          <name>component(psqlOdbc).canBeEdited</name>
          <persist>0</persist>
          <value>0</value>
          <ruleList>
            <compareText>
              <logic>contains</logic>
              <text>${platform_name}</text>
              <value>linux</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${unixodbccheck}</text>
              <value></value>
            </compareText>
          </ruleList>
        </setInstallerVariable>
        <componentSelection>
          <deselect>psqlOdbc</deselect>
          <select></select>
          <ruleList>
            <compareText>
              <logic>contains</logic>
              <text>${platform_name}</text>
              <value>linux</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${unixodbccheck}</text>
              <value></value>
            </compareText>
          </ruleList>
        </componentSelection>
        <logMessage>
          <text>unixOdbc found at: ${unixodbccheck}</text>
          <ruleList>
            <compareText>
              <logic>contains</logic>
              <text>${platform_name}</text>
              <value>linux</value>
            </compareText>
          </ruleList>
        </logMessage>
      </actionList>
    </actionGroup>

    <iniFileGet>
      <file>${PostgreSqlIni}</file>
      <key>InstallationDirectory</key>
      <section>PostgreSQL/${product_version}</section>
      <variable>iBaseDirectory</variable>
      <ruleList>
        <fileTest>
          <condition>readable</condition>
          <path>${PostgreSqlIni}</path>
        </fileTest>
      </ruleList>
    </iniFileGet>
    <setInstallerVariable>
      <name>iBaseDirectory</name>
      <persist>0</persist>
      <value></value>
      <ruleList>
        <fileTest>
          <condition>not_readable</condition>
          <path>${PostgreSqlIni}</path>
        </fileTest>
      </ruleList>
    </setInstallerVariable>
    <actionGroup>
      <actionList>
        <registryGet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\PostgreSQL\Installations\postgresql-${product_version}</key>
          <name>Base Directory</name>
          <variable>iBaseDirectory</variable>
        </registryGet>
      </actionList>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </actionGroup>
    <setInstallerVariable>
      <name>IsUpgrade</name>
      <persist>1</persist>
      <value>1</value>
      <ruleList>
        <stringTest>
          <text>${iBaseDirectory}</text>
          <type>not_empty</type>
        </stringTest>
      </ruleList>
    </setInstallerVariable>
    <createDirectory path="${system_temp_directory}/postgresplus"/>

    <!-- Creates the ini file if not exists -->
    <touchFile path="/etc/postgres-reg.ini">
      <ruleList>
        <compareText>
          <logic>contains</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </touchFile>

    <actionGroup>
      <actionList>
        <unpackDirectory>
          <component>dbserver</component>
          <destination>${system_temp_directory}\postgresplus\</destination>
          <folder>programfileswindows</folder>
          <origin>pgcontrol</origin>
        </unpackDirectory>

        <!-- We will also need to get the VC++ runtimes installed on Windows, before we do anything with binaries -->
        <unpackFile>
          <component>dbserver</component>
          <destination>${system_temp_directory}\postgresplus\vcredist_x86.exe</destination>
          <folder>programfileswindows</folder>
          <origin>vcredist_x86.exe</origin>
          <customErrorMessage>${msg(error.installing.runtimes)}</customErrorMessage>
        </unpackFile>
        <unpackFile>
          <component>dbserver</component>
          <destination>${system_temp_directory}\postgresplus\installruntimes.vbs</destination>
          <folder>programfileswindows</folder>
          <origin>installruntimes.vbs</origin>
          <customErrorMessage>${msg(error.installing.runtimes)}</customErrorMessage>
        </unpackFile>
        <runProgram>
          <program>cscript</program>
          <programArguments>//NoLogo "${system_temp_directory}\postgresplus\installruntimes.vbs" "${system_temp_directory}\postgresplus\vcredist_x86.exe"</programArguments>
          <abortOnError>1</abortOnError>
          <showMessageOnError>1</showMessageOnError>
          <customErrorMessage>${msg(error.installing.runtimes)}</customErrorMessage>
        </runProgram>
        <throwError>
          <text>${msg(script.command.line.error)}</text>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>127</text>
              <value>${program_exit_code}</value>
            </compareText>
          </ruleList>
        </throwError>
      </actionList>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </actionGroup>


    <!-- Preinstall script -->
    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/preinstall.sh</destination>
      <folder>programfilesmacosx</folder>
      <origin>preinstall.sh</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </unpackFile>
    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/validateUserClient.o</destination>
      <folder>programfileslinux</folder>
      <origin>validateUserClient.o</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </unpackFile>
    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/validateUserClient.o</destination>
      <folder>programfileslinux-x64</folder>
      <origin>validateUserClient.o</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux-x64</value>
        </compareText>
      </ruleList>
    </unpackFile>
    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/runvalidateUserClient.sh</destination>
      <folder>programfileslinux</folder>
      <origin>runvalidateUserClient.sh</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </unpackFile>
    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/runvalidateUserClient.sh</destination>
      <folder>programfileslinux-x64</folder>
      <origin>runvalidateUserClient.sh</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux-x64</value>
        </compareText>
      </ruleList>
    </unpackFile>

    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/dynaTuneClient.o</destination>
      <folder>programfileslinux</folder>
      <origin>dynaTuneClient.o</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </unpackFile>
    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/dynaTuneClient.o</destination>
      <folder>programfileslinux-x64</folder>
      <origin>dynaTuneClient.o</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux-x64</value>
        </compareText>
      </ruleList>
    </unpackFile>

    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/rundynaTuneClient.sh</destination>
      <folder>programfileslinux</folder>
      <origin>rundynaTuneClient.sh</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </unpackFile>
    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/rundynaTuneClient.sh</destination>
      <folder>programfileslinux-x64</folder>
      <origin>rundynaTuneClient.sh</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux-x64</value>
        </compareText>
      </ruleList>
    </unpackFile>

    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/isUserValidated.o</destination>
      <folder>programfileslinux</folder>
      <origin>isUserValidated.o</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </unpackFile>
    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/isUserValidated.o</destination>
      <folder>programfileslinux-x64</folder>
      <origin>isUserValidated.o</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux-x64</value>
        </compareText>
      </ruleList>
    </unpackFile>
    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/runisUserValidated.sh</destination>
      <folder>programfileslinux</folder>
      <origin>runisUserValidated.sh</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </unpackFile>
    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/runisUserValidated.sh</destination>
      <folder>programfileslinux-x64</folder>
      <origin>runisUserValidated.sh</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux-x64</value>
        </compareText>
      </ruleList>
    </unpackFile>

    <unpackDirectory>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/</destination>
      <folder>programfileslinux</folder>
      <origin>lib</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </unpackDirectory>
    <unpackDirectory>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/</destination>
      <folder>programfileslinux-x64</folder>
      <origin>lib</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux-x64</value>
        </compareText>
      </ruleList>
    </unpackDirectory>

    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/modifyPostgresql.o</destination>
      <folder>programfileslinux</folder>
      <origin>modifyPostgresql.o</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </unpackFile>
    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/modifyPostgresql.o</destination>
      <folder>programfileslinux-x64</folder>
      <origin>modifyPostgresql.o</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux-x64</value>
        </compareText>
      </ruleList>
    </unpackFile>

    <!-- generate uuid script -->
    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/generate_uuid.sh</destination>
      <folder>programfileslinux</folder>
      <origin>generate_uuid.sh</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </unpackFile>
    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/generate_uuid.sh</destination>
      <folder>programfileslinux-x64</folder>
      <origin>generate_uuid.sh</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux-x64</value>
        </compareText>
      </ruleList>
    </unpackFile>

    <!-- run generate_uuid.sh -->
    <actionGroup>
      <actionList>
        <runProgram>
          <abortOnError>0</abortOnError>
          <program>${system_temp_directory}/postgresplus/generate_uuid.sh</program>
          <programArguments></programArguments>
          <showMessageOnError>0</showMessageOnError>
        </runProgram>
      </actionList>
      <ruleList>
        <compareText>
          <logic>contains</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </actionGroup>

    <!-- generate sysinfo script -->
    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/sysinfo.sh</destination>
      <folder>programfileslinux</folder>
      <origin>sysinfo.sh</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </unpackFile>
    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/sysinfo.sh</destination>
      <folder>programfileslinux-x64</folder>
      <origin>sysinfo.sh</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux-x64</value>
        </compareText>
      </ruleList>
    </unpackFile>

    <!-- run sysinfo.sh -->
    <actionGroup>
      <actionList>
        <runProgram>
          <abortOnError>0</abortOnError>
          <program>${system_temp_directory}/postgresplus/sysinfo.sh</program>
          <programArguments></programArguments>
          <showMessageOnError>0</showMessageOnError>
        </runProgram>
      </actionList>
      <ruleList>
        <compareText>
          <logic>contains</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </actionGroup>

    <!-- Getlocales script -->
    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/getlocales.sh</destination>
      <folder>programfileslinux</folder>
      <origin>getlocales.sh</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </unpackFile>

    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/getlocales.sh</destination>
      <folder>programfileslinux-x64</folder>
      <origin>getlocales.sh</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux-x64</value>
        </compareText>
      </ruleList>
    </unpackFile>


    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/getlocales.sh</destination>
      <folder>programfilesmacosx</folder>
      <origin>getlocales.sh</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </unpackFile>
    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/validateUserClient.o</destination>
      <folder>programfilesmacosx</folder>
      <origin>validateUserClient.o</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </unpackFile>
    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/dynaTuneClient.o</destination>
      <folder>programfilesmacosx</folder>
      <origin>dynaTuneClient.o</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </unpackFile>
    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/modifyPostgresql.o</destination>
      <folder>programfilesmacosx</folder>
      <origin>modifyPostgresql.o</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </unpackFile>
    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/isUserValidated.o</destination>
      <folder>programfilesmacosx</folder>
      <origin>isUserValidated.o</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </unpackFile>

    <!-- generate uuid script -->
    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/generate_uuid.sh</destination>
      <folder>programfilesmacosx</folder>
      <origin>generate_uuid.sh</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </unpackFile>

    <!-- run generate_uuid.sh -->
    <actionGroup>
      <actionList>
        <runProgram>
          <abortOnError>0</abortOnError>
          <program>${system_temp_directory}/postgresplus/generate_uuid.sh</program>
          <programArguments></programArguments>
          <showMessageOnError>0</showMessageOnError>
        </runProgram>
      </actionList>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </actionGroup>

    <!-- generate sysinfo script -->
    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/sysinfo.sh</destination>
      <folder>programfilesmacosx</folder>
      <origin>sysinfo.sh</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </unpackFile>

    <!-- run sysinfo.sh -->
    <actionGroup>
      <actionList>
        <runProgram>
          <abortOnError>0</abortOnError>
          <program>${system_temp_directory}/postgresplus/sysinfo.sh</program>
          <programArguments></programArguments>
          <showMessageOnError>0</showMessageOnError>
        </runProgram>
      </actionList>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </actionGroup>

    <!--Unpack Windows scripts-->
    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/getlocales.exe</destination>
      <folder>programfileswindows</folder>
      <origin>getlocales.exe</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </unpackFile>
    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/createuser.exe</destination>
      <folder>programfileswindows</folder>
      <origin>createuser.exe</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </unpackFile>
    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/validateuser.exe</destination>
      <folder>programfileswindows</folder>
      <origin>validateuser.exe</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </unpackFile>
    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/validateUserClient.exe</destination>
      <folder>programfileswindows</folder>
      <origin>validateUserClient.exe</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </unpackFile>
    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/getDynaTune.exe</destination>
      <folder>programfileswindows</folder>
      <origin>getDynaTune.exe</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </unpackFile>
    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/modifyPostgresql.exe</destination>
      <folder>programfileswindows</folder>
      <origin>modifyPostgresql.exe</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </unpackFile>
    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/isUserValidated.exe</destination>
      <folder>programfileswindows</folder>
      <origin>isUserValidated.exe</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </unpackFile>

    <!-- generate uuid script -->
    <unpackFile>
      <component>dbserver</component>
      <destination>${system_temp_directory}\postgresplus\dbserver_guid.exe</destination>
      <folder>programfileswindows</folder>
      <origin>dbserver_guid.exe</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </unpackFile>

    <setInstallerVariableFromScriptOutput>
      <customErrorMessage>${msg(ws.exception.from.server)}</customErrorMessage>
      <exec>${system_temp_directory}\postgresplus\dbserver_guid.exe</exec>
      <execArgs></execArgs>
      <name>dbserver_guid_result</name>
      <workingDirectory>${system_temp_directory}\postgresplus</workingDirectory>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </setInstallerVariableFromScriptOutput>

    <writeFile>
      <path>${system_temp_directory}/postgresplus/a.properties</path>
      <text>${dbserver_guid_result}</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </writeFile>


    <!-- pg_controldata (used to check existing clusters) -->

    <!-- Starts here -->
    <unpackDirectory>
      <component>dbserver</component>
      <destination>${system_temp_directory}/postgresplus/</destination>
      <folder>programfilesmacosx</folder>
      <origin>pgcontrol</origin>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </unpackDirectory>

    <actionGroup>
      <actionList>
        <unpackDirectory>
          <component>dbserver</component>
          <destination>${system_temp_directory}/postgresplus/</destination>
          <folder>programfileslinux</folder>
          <origin>pgcontrol</origin>
        </unpackDirectory>
        <unpackFile>
          <component>dbserver</component>
          <destination>${system_temp_directory}/postgresplus/runpgcontroldata.sh</destination>
          <folder>programfileslinux</folder>
          <origin>runpgcontroldata.sh</origin>
        </unpackFile>
      </actionList>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </actionGroup>

    <actionGroup>
      <actionList>
        <unpackDirectory>
          <component>dbserver</component>
          <destination>${system_temp_directory}/postgresplus/</destination>
          <folder>programfileslinux-x64</folder>
          <origin>pgcontrol</origin>
        </unpackDirectory>
        <unpackFile>
          <component>dbserver</component>
          <destination>${system_temp_directory}/postgresplus/runpgcontroldata.sh</destination>
          <folder>programfileslinux-x64</folder>
          <origin>runpgcontroldata.sh</origin>
        </unpackFile>
      </actionList>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux-x64</value>
        </compareText>
      </ruleList>
    </actionGroup>

    <!-- Ends here -->

    <actionGroup>
      <actionList>
        <!-- Get the existing data directory. -->
        <iniFileGet>
          <file>${PostgreSqlIni}</file>
          <key>DataDirectory</key>
          <section>PostgreSQL/${product_version}</section>
          <variable>iDataDirectory</variable>
          <ruleList>
            <fileTest>
              <condition>readable</condition>
              <path>${PostgreSqlIni}</path>
            </fileTest>
          </ruleList>
        </iniFileGet>
        <setInstallerVariable>
          <name>iDataDirectory</name>
          <persist>0</persist>
          <value></value>
          <ruleList>
            <fileTest>
              <condition>not_readable</condition>
              <path>${PostgreSqlIni}</path>
            </fileTest>
          </ruleList>
        </setInstallerVariable>

        <!-- Get the base installation path. Any previous package could have set this. -->
        <iniFileGet>
          <file>${PostgreSqlIni}</file>
          <key>InstallationDirectory</key>
          <section>PostgreSQL/${product_version}</section>
          <variable>iBaseDirectory</variable>
          <ruleList>
            <fileTest>
              <condition>readable</condition>
              <path>${PostgreSqlIni}</path>
            </fileTest>
          </ruleList>
        </iniFileGet>
        <setInstallerVariable>
          <name>iBaseDirectory</name>
          <persist>0</persist>
          <value></value>
          <ruleList>
            <fileTest>
              <condition>not_readable</condition>
              <path>${PostgreSqlIni}</path>
            </fileTest>
          </ruleList>
        </setInstallerVariable>
      </actionList>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </actionGroup>

    <!-- WIN: Get existing directories -->
    <actionGroup>
      <actionList>
        <!-- Get the existing data directory. -->
        <registryGet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\PostgreSQL\Installations\postgresql-${product_version}</key>
          <name>Data Directory</name>
          <variable>iDataDirectory</variable>
        </registryGet>

        <!-- Get the existing installation directory. -->
        <registryGet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\PostgreSQL\Installations\postgresql-${product_version}</key>
          <name>Base Directory</name>
          <variable>iBaseDirectory</variable>
        </registryGet>
      </actionList>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </actionGroup>

    <!-- Debugging -->
    <logMessage>
      <text>Existing base directory: ${iBaseDirectory}</text>
    </logMessage>
    <logMessage>
      <text>Existing data directory: ${iDataDirectory}</text>
    </logMessage>

    <!-- If we have an existing data directory location and it's not empty, check it looks sane -->
    <actionGroup>
      <!-- Starts here -->
      <actionList>

        <!-- Do we have a pg_control file? -->
        <throwError>
          <text>${msg(error.data.directory.registered.broken)}</text>
          <ruleList>
            <fileTest>
              <path>${iDataDirectory}/global/pg_control</path>
              <condition>not_exists</condition>
            </fileTest>
          </ruleList>
        </throwError>

        <!-- Do we have a valid catalog version? -->
        <runProgram>
          <program>${system_temp_directory}/postgresplus/pgcontrol/pg_controldata</program>
          <programArguments>"${iDataDirectory}"</programArguments>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>osx</value>
            </compareText>
          </ruleList>
        </runProgram>

        <runProgram>
          <program>${system_temp_directory}/postgresplus/runpgcontroldata.sh</program>
          <programArguments>${system_temp_directory}/postgresplus/pgcontrol "${iDataDirectory}"</programArguments>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
          <ruleList>
            <compareText>
              <logic>contains</logic>
              <text>${platform_name}</text>
              <value>linux</value>
            </compareText>
          </ruleList>
        </runProgram>

        <runProgram>
          <program>${system_temp_directory}\postgresplus\pgcontrol\pg_controldata.exe</program>
          <programArguments>"${iDataDirectory}"</programArguments>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </runProgram>

        <setInstallerVariableFromRegEx>
          <name>CurrentCatalogVersion</name>
          <text>${program_stdout}</text>
          <pattern>^.*Catalog version number:\s+([\d]+).*$</pattern>
          <substitution>\1</substitution>
        </setInstallerVariableFromRegEx>

        <logMessage>
          <text>Existing cluster catalog version: ${CurrentCatalogVersion}, installer catalog version: ${CatalogVersion}</text>
        </logMessage>

        <throwError>
          <text>${msg(error.data.directory.incompatible)}</text>
          <ruleList>
            <compareText>
              <value>${CurrentCatalogVersion}</value>
              <logic>does_not_equal</logic>
              <text>${CatalogVersion}</text>
            </compareText>
          </ruleList>
        </throwError>

      </actionList>
      <!-- Ends here -->
      <ruleList>
        <stringTest>
          <text>${iDataDirectory}</text>
          <type>not_empty</type>
        </stringTest>
        <fileExists>
          <path>${iDataDirectory}</path>
        </fileExists>
        <fileTest>
          <condition>is_not_empty</condition>
          <path>${iDataDirectory}</path>
        </fileTest>
      </ruleList>
    </actionGroup>

    <!-- So, is this an upgrade of an existing cluster? 
         At this point, if we have an existing data directory it either looks valid, or is empty -->
    <actionGroup>
      <actionList>
        <setInstallerVariable>
          <name>IsUpgrade</name>
          <persist>0</persist>
          <value>1</value>
        </setInstallerVariable>
        <setInstallerVariable>
          <name>datadir</name>
          <persist>0</persist>
          <value>${iDataDirectory}</value>
        </setInstallerVariable>
        <logMessage>
          <text>Switching to upgrade mode with cluster: ${datadir}</text>
        </logMessage>
      </actionList>
      <ruleList>
        <stringTest>
          <text>${iDataDirectory}</text>
          <type>not_empty</type>
        </stringTest>
        <fileTest>
          <condition>is_not_empty</condition>
          <path>${iDataDirectory}</path>
        </fileTest>
      </ruleList>
    </actionGroup>

    <!-- MAC: Preinstall script. -->
    <actionGroup>
      <actionList>
        <runProgram>
          <abortOnError>0</abortOnError>
          <program>${system_temp_directory}/postgresplus/preinstall.sh</program>
          <programArguments></programArguments>
          <showMessageOnError>0</showMessageOnError>
        </runProgram>
        <logMessage>
          <text>Checking for Preinstall libraries</text>
        </logMessage>
        <!-- Check the output from the preinstall script -->
        <throwError>
          <text>${msg(error.shared.memory.manual)}</text>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>1</text>
              <value>${program_exit_code}</value>
            </compareText>
          </ruleList>
        </throwError>
        <throwError>
          <text>${msg(error.shared.memory.updated)}</text>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>2</text>
              <value>${program_exit_code}</value>
            </compareText>
          </ruleList>
        </throwError>
        <throwError>
          <text>${msg(error.shared.memory.shmall.manual)}</text>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>3</text>
              <value>${program_exit_code}</value>
            </compareText>
          </ruleList>
        </throwError>
        <throwError>
          <text>${msg(error.shared.memory.shmall.updated)}</text>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>4</text>
              <value>${program_exit_code}</value>
            </compareText>
          </ruleList>
        </throwError>
      </actionList>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(dbserver).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </actionGroup>

    <!-- Get the locales available -->
    <actionGroup>
      <actionList>
        <addChoiceOptions>
          <name>locale</name>
          <optionList>
            <option>
              <description></description>
              <image></image>
              <text>[${msg(default.locale)}]</text>
              <value>DEFAULT</value>
            </option>
          </optionList>
        </addChoiceOptions>
        <runProgram>
          <program>${system_temp_directory}/postgresplus/getlocales.sh</program>
          <programArguments></programArguments>
          <ruleList>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </runProgram>
        <runProgram>
          <program>${system_temp_directory}\postgresplus\getlocales.exe</program>
          <programArguments></programArguments>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </runProgram>
        <throwError>
          <text>${msg(script.command.line.error)}</text>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>127</text>
              <value>${program_exit_code}</value>
            </compareText>
          </ruleList>
        </throwError>
        <addChoiceOptionsFromText>
          <name>locale</name>
          <text>${program_stdout}</text>
        </addChoiceOptionsFromText>
      </actionList>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${IsUpgrade}</text>
          <value>1</value>
        </compareText>
      </ruleList>
    </actionGroup>

    <throwError>
      <text>${msg(locale.error)}</text>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${IsUpgrade}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <text>${locale}</text>
          <value/>
          <logic>does_not_equal</logic>
        </compareText>
        <compareText>
          <text>${program_stdout}</text>
          <value>${locale}</value>
          <logic>does_not_contain</logic>
        </compareText>
      </ruleList>
    </throwError>

    <!-- Set the default locale if needed. -->
    <actionGroup>
      <actionList>
        <setInstallerVariable>
          <name>locale</name>
          <persist>0</persist>
          <value>DEFAULT</value>
        </setInstallerVariable>
      </actionList>
      <ruleList>
        <stringTest>
          <text>${locale}</text>
          <type>empty</type>
        </stringTest>
      </ruleList>
    </actionGroup>

    <!-- Convert the locale value to something the choiceParameter will like -->
    <setInstallerVariableFromRegEx>
      <name>locale</name>
      <pattern>_</pattern>
      <substitution>xxUSxx</substitution>
      <text>${locale}</text>
    </setInstallerVariableFromRegEx>
    <setInstallerVariableFromRegEx>
      <name>locale</name>
      <pattern>\.</pattern>
      <substitution>xxDOTxx</substitution>
      <text>${locale}</text>
    </setInstallerVariableFromRegEx>
    <setInstallerVariableFromRegEx>
      <name>locale</name>
      <pattern>-</pattern>
      <substitution>xxDASHxx</substitution>
      <text>${locale}</text>
    </setInstallerVariableFromRegEx>
    <setInstallerVariableFromRegEx>
      <name>locale</name>
      <pattern>@</pattern>
      <substitution>xxATxx</substitution>
      <text>${locale}</text>
    </setInstallerVariableFromRegEx>
    <setInstallerVariableFromRegEx>
      <name>locale</name>
      <pattern>\s</pattern>
      <substitution>xxSPxx</substitution>
      <text>${locale}</text>
    </setInstallerVariableFromRegEx>
    <setInstallerVariableFromRegEx>
      <name>locale</name>
      <pattern>\(</pattern>
      <substitution>xxOBxx</substitution>
      <text>${locale}</text>
    </setInstallerVariableFromRegEx>
    <setInstallerVariableFromRegEx>
      <name>locale</name>
      <pattern>\)</pattern>
      <substitution>xxCBxx</substitution>
      <text>${locale}</text>
    </setInstallerVariableFromRegEx>
    <setInstallerVariableFromRegEx>
      <name>locale</name>
      <pattern>,</pattern>
      <substitution>xxCOMMAxx</substitution>
      <text>${locale}</text>
    </setInstallerVariableFromRegEx>

    <!-- MAC: Set the default installation directory -->
    <setInstallerVariable>
      <name>default_installdir</name>
      <persist>1</persist>
      <value>/Library/PostgresPlus/${product_version}</value>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </setInstallerVariable>
    <setInstallerVariable>
      <name>default_installdir</name>
      <persist>1</persist>
      <value>/opt/PostgresPlus/${product_version}</value>
      <ruleList>
        <compareText>
          <logic>contains</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </setInstallerVariable>
    <setInstallerVariable>
      <name>default_installdir</name>
      <persist>1</persist>
      <value>C:/Program Files/PostgresPlus/${product_version}</value>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </setInstallerVariable>

    <!-- Check whether pgAgent was installed previously -->
    <iniFileGet>
        <file>/etc/postgresplus-reg.ini</file>
        <key>pgagent</key>
        <section>PostgreSQL/${product_version}</section>
        <variable>pgagent_installed</variable>
        <ruleList>
            <compareText>
               <logic>does_not_equal</logic>
               <text>${platform_name}</text>
               <value>windows</value>
            </compareText>
            <fileExists>
               <path>/etc/postgresplus-reg.ini</path>
            </fileExists>
        </ruleList>
    </iniFileGet>
    <registryGet>
        <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgAgent</key>
        <name>Version</name>
        <variable>pgagent_installed</variable>
    </registryGet>

    <!-- Set schema to upgrade if pgagent is installed -unattended mode -->
    <setInstallerVariable name="schema" value="upgrade">
        <ruleList>
            <compareText>
               <logic>does_not_equal</logic>
               <text>${pgagent_installed}</text>
               <value/>
            </compareText>
            <compareText>
               <logic>equals</logic>
               <text>${installer_ui}</text>
               <value>unattended</value>
            </compareText>
        </ruleList>
    </setInstallerVariable>

  </preInstallationActionList>
  <postInstallationActionList>
    <setInstallerVariable name="monitor_server" value="">
      <ruleList>
        <isFalse value="${updateNotification"/>
      </ruleList>
    </setInstallerVariable>
    <setInstallerVariable name="monitor_server" value="--monitor-server PG_MAJOR_VERSION">
      <ruleList>
        <isTrue value="${updateNotification}"/>
      </ruleList>
    </setInstallerVariable>
    <actionGroup>
      <actionList>
        <deleteFile>
          <path>${system_temp_directory}/postgresplus/a.properties</path>
        </deleteFile>
        <deleteFile>
          <path>${system_temp_directory}/postgresplus/sysinfo.properties</path>
          <ruleList>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </deleteFile>
        <iniFileSet>
          <file>/etc/postgresplus-reg.ini</file>
          <key>databaseServer</key>
          <section>PostgreSQL/${product_version}</section>
          <value>true</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(dbserver).selected}</text>
              <value>1</value>
            </compareText>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </iniFileSet>
        <registrySet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PostgresPlus\Uninstallations\postgresplus-${product_version}</key>
          <name>databaseServer</name>
          <type>REG_SZ</type>
          <value>true</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(dbserver).selected}</text>
              <value>1</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </registrySet>
        <iniFileSet>
          <file>/etc/postgresplus-reg.ini</file>
          <key>slony</key>
          <section>PostgreSQL/${product_version}</section>
          <value>true</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(slony).selected}</text>
              <value>1</value>
            </compareText>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </iniFileSet>
        <registrySet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PostgresPlus\Uninstallations\postgresplus-${product_version}</key>
          <name>slony</name>
          <type>REG_SZ</type>
          <value>true</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(slony).selected}</text>
              <value>1</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </registrySet>
        <iniFileSet>
          <file>/etc/postgresplus-reg.ini</file>
          <key>pgJdbc</key>
          <section>PostgreSQL/${product_version}</section>
          <value>true</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(pgJdbc).selected}</text>
              <value>1</value>
            </compareText>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </iniFileSet>
        <registrySet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PostgresPlus\Uninstallations\postgresplus-${product_version}</key>
          <name>pgJdbc</name>
          <type>REG_SZ</type>
          <value>true</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(pgJdbc).selected}</text>
              <value>1</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </registrySet>
        <iniFileSet>
          <file>/etc/postgresplus-reg.ini</file>
          <key>postgis</key>
          <section>PostgreSQL/${product_version}</section>
          <value>true</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(postgis).selected}</text>
              <value>1</value>
            </compareText>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </iniFileSet>
        <registrySet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PostgresPlus\Uninstallations\postgresplus-${product_version}</key>
          <name>postgis</name>
          <type>REG_SZ</type>
          <value>true</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(postgis).selected}</text>
              <value>1</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </registrySet>
        <iniFileSet>
          <file>/etc/postgresplus-reg.ini</file>
          <key>psqlOdbc</key>
          <section>PostgreSQL/${product_version}</section>
          <value>true</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(psqlOdbc).selected}</text>
              <value>1</value>
            </compareText>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </iniFileSet>
        <registrySet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PostgresPlus\Uninstallations\postgresplus-${product_version}</key>
          <name>psqlOdbc</name>
          <type>REG_SZ</type>
          <value>true</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(psqlOdbc).selected}</text>
              <value>1</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </registrySet>

        <!-- pgbouncer , pgmemcache and pgagent enteries -->

        <iniFileSet>
          <file>/etc/postgresplus-reg.ini</file>
          <key>pgbouncer</key>
          <section>PostgreSQL/${product_version}</section>
          <value>true</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(pgbouncer).selected}</text>
              <value>1</value>
            </compareText>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </iniFileSet>
        <registrySet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PostgresPlus\Uninstallations\postgresplus-${product_version}</key>
          <name>pgbouncer</name>
          <type>REG_SZ</type>
          <value>true</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(pgbouncer).selected}</text>
              <value>1</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </registrySet>
        <iniFileSet>
          <file>/etc/postgresplus-reg.ini</file>
          <key>pgmemcache</key>
          <section>PostgreSQL/${product_version}</section>
          <value>true</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(pgmemcache).selected}</text>
              <value>1</value>
            </compareText>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </iniFileSet>

        <iniFileSet>
          <file>/etc/postgresplus-reg.ini</file>
          <key>pgagent</key>
          <section>PostgreSQL/${product_version}</section>
          <value>true</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(pgagent).selected}</text>
              <value>1</value>
            </compareText>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </iniFileSet>
        <registrySet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PostgresPlus\Uninstallations\postgresplus-${product_version}</key>
          <name>pgagent</name>
          <type>REG_SZ</type>
          <value>true</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(pgagent).selected}</text>
              <value>1</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </registrySet>

        <!-- Npgsql registry entry-->
        <registrySet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PostgresPlus\Uninstallations\postgresplus-${product_version}</key>
          <name>npgsql</name>
          <type>REG_SZ</type>
          <value>true</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(npgsql).selected}</text>
              <value>1</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </registrySet>
        <registrySet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PostgresPlus\Installations\postgresplus-${product_version}</key>
          <name>Base Directory</name>
          <type>REG_SZ</type>
          <value>${installdir}</value>
        </registrySet>
        <registrySet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PostgresPlus\Installations\postgresplus-${product_version}</key>
          <name>Version</name>
          <type>REG_SZ</type>
          <value>${product_version}</value>
        </registrySet>

        <iniFileSet>
          <file>/etc/postgresplus-reg.ini</file>
          <key>pg_migrator</key>
          <section>PostgreSQL/${product_version}</section>
          <value>true</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(pgmigrator).selected}</text>
              <value>1</value>
            </compareText>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </iniFileSet>
        <registrySet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PostgresPlus\Uninstallations\postgresplus-${product_version}</key>
          <name>pg_migrator</name>
          <type>REG_SZ</type>
          <value>true</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(pgmigrator).selected}</text>
              <value>1</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </registrySet>
      </actionList>
    </actionGroup>
    <setInstallerVariable>
      <name>didError</name>
      <persist>0</persist>
      <value>0</value>
    </setInstallerVariable>

    <!-- Run linux programs -->

    <logMessage>
      <text>Installing Database Server in ${installdir} having data directory ${datadir} using Port:${serverport} and Locale:${locale}</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(dbserver).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>contains</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${IsUpgrade}</text>
          <value>0</value>
        </compareText>
      </ruleList>
    </logMessage>
    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}/postgresplus/postgresql-PG_PACKAGE_VERSION-linux.bin</program>
      <programArguments>--mode unattended --installdir ${installdir} --datadir ${datadir} --superpassword ${superpassword} --serverport ${serverport} --locale ${locale} --branding "Postgres Plus Standard Server ${product_version}"</programArguments>
      <progressText>Installing Database Server ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(dbserver).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${IsUpgrade}</text>
          <value>0</value>
        </compareText>
      </ruleList>
    </runProgram>

    <!-- linux-x64-->

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}/postgresplus/postgresql-PG_PACKAGE_VERSION-linux-x64.bin</program>
      <programArguments>--mode unattended --installdir ${installdir} --datadir ${datadir} --superpassword ${superpassword} --serverport ${serverport} --locale ${locale} --branding "Postgres Plus Standard Server ${product_version}"</programArguments>
      <progressText>Installing Database Server ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(dbserver).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux-x64</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${IsUpgrade}</text>
          <value>0</value>
        </compareText>
      </ruleList>
    </runProgram>

    <setInstallerVariable>
      <name>didError</name>
      <value>1</value>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>0</text>
          <value>${program_exit_code}</value>
        </compareText>
      </ruleList>
    </setInstallerVariable>

    <!--Run in upgrade mode -->

    <logMessage>
      <text>Upgrading Database Server in ${installdir}</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(dbserver).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>contains</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${IsUpgrade}</text>
          <value>1</value>
        </compareText>
      </ruleList>
    </logMessage>
    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}/postgresplus/postgresql-PG_PACKAGE_VERSION-linux.bin</program>
      <programArguments>--mode unattended --prefix "${installdir}" --superpassword ${superpassword} --branding "Postgres Plus Standard Server ${product_version}"</programArguments>
      <progressText>Installing Database Server ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(dbserver).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${IsUpgrade}</text>
          <value>1</value>
        </compareText>
      </ruleList>
    </runProgram>

    <!-- linux-x64-->

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}/postgresplus/postgresql-PG_PACKAGE_VERSION-linux-x64.bin</program>
      <programArguments>--mode unattended --prefix "${installdir}" --superpassword ${superpassword} --branding "Postgres Plus Standard Server ${product_version}"</programArguments>
      <progressText>Installing Database Server ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(dbserver).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux-x64</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${IsUpgrade}</text>
          <value>1</value>
        </compareText>
      </ruleList>
    </runProgram>

    <setInstallerVariable>
      <name>didError</name>
      <value>1</value>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>0</text>
          <value>${program_exit_code}</value>
        </compareText>
      </ruleList>
    </setInstallerVariable>
    <logMessage>
      <text>Installing Slony in ${installdir}</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(slony).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>contains</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </logMessage>

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}/postgresplus/slony-pgPG_CURRENT_VERSION-PG_VERSION_SLONY-PG_BUILDNUM_SLONY-linux.bin</program>
      <programArguments>--mode unattended --installdir ${installdir} --branding "Postgres Plus Standard Server ${product_version}"</programArguments>
      <progressText>Installing Slony ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(slony).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </runProgram>

    <!-- linux-x64-->

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}/postgresplus/slony-pgPG_CURRENT_VERSION-PG_VERSION_SLONY-PG_BUILDNUM_SLONY-linux-x64.bin</program>
      <programArguments>--mode unattended --installdir ${installdir} --branding "Postgres Plus Standard Server ${product_version}"</programArguments>
      <progressText>Installing Slony ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(slony).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux-x64</value>
        </compareText>
      </ruleList>
    </runProgram>
    
    <actionGroup>
      <actionList>
        <logMessage text="Installing StackBuilderPlus in ${installdir}/StackBuilderPlus"/>
        <!-- Linux -->
        <runProgram abortOnError="0"
                    progressText="Installing StackBuilderPlus ... "
                    showMessageOnError="1"
                    program="${system_temp_directory}/postgresplus/stackbuilderplus-pg_PG_VERSION_STR-PG_VERSION_SBP-PG_BUILDNUM_SBP-linux.bin"
                    programArguments="--mode unattended --installdir ${installdir}/StackBuilderPlus --branding &quot;Postgres Plus Standard Server ${product_version}&quot; ${monitor_server}">
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="linux"/>
          </ruleList>
        </runProgram>
        <!-- Linux-x64 -->
        <runProgram abortOnError="0"
                    progressText="Installing StackBuilderPlus ... "
                    showMessageOnError="1"
                    program="${system_temp_directory}/postgresplus/stackbuilderplus-pg_PG_VERSION_STR-PG_VERSION_SBP-PG_BUILDNUM_SBP-linux-x64.bin"
                    programArguments="--mode unattended --installdir ${installdir}/StackBuilderPlus --branding &quot;Postgres Plus Standard Server ${product_version}&quot; ${monitor_server}">
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="linux-x64"/>
          </ruleList>
        </runProgram>
      </actionList>
      <ruleList>
        <isTrue value="${component(stackbuilderplus).selected}"/>
        <compareText logic="contains" text="${platform_name}" value="linux"/>
      </ruleList>
    </actionGroup>

    <logMessage>
      <text>Installing pgJDBC in ${installdir}/pgJDBC</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgJdbc).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>contains</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </logMessage>

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}/postgresplus/pgjdbc-PG_VERSION_PGJDBC-PG_BUILDNUM_PGJDBC-linux.bin</program>
      <programArguments>--mode unattended --installdir ${installdir}/pgJDBC --branding "Postgres Plus Standard Server ${product_version}"</programArguments>
      <progressText>Installing pgJDBC ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgJdbc).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </runProgram>

    <!-- linux-x64-->

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}/postgresplus/pgjdbc-PG_VERSION_PGJDBC-PG_BUILDNUM_PGJDBC-linux-x64.bin</program>
      <programArguments>--mode unattended --installdir ${installdir}/pgJDBC --branding "Postgres Plus Standard Server ${product_version}"</programArguments>
      <progressText>Installing pgJDBC ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgJdbc).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux-x64</value>
        </compareText>
      </ruleList>
    </runProgram>

    <logMessage>
      <text>Installing pg_migrator in ${installdir}</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgmigrator).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>contains</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </logMessage>

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}/postgresplus/pgmigrator-PG_VERSION_PGMIGRATOR-PG_BUILDNUM_PGMIGRATOR-linux.bin</program>
      <programArguments>--mode unattended --installdir ${installdir} --branding "Postgres Plus Standard Server ${product_version}"</programArguments>
      <progressText>Installing pg_migrator ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgmigrator).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </runProgram>

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}/postgresplus/pgmigrator-PG_VERSION_PGMIGRATOR-PG_BUILDNUM_PGMIGRATOR-linux-x64.bin</program>
      <programArguments>--mode unattended --installdir ${installdir} --branding "Postgres Plus Standard Server ${product_version}"</programArguments>
      <progressText>Installing pg_migrator ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgmigrator).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux-x64</value>
        </compareText>
      </ruleList>
    </runProgram>

    <logMessage>
      <text>Installing psqlODBC in ${installdir}/psqlODBC</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(psqlOdbc).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>contains</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </logMessage>

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}/postgresplus/psqlodbc-PG_VERSION_PSQLODBC-PG_BUILDNUM_PSQLODBC-linux.bin</program>
      <programArguments>--mode unattended --installdir ${installdir}/psqlODBC --branding "Postgres Plus Standard Server ${product_version}"</programArguments>
      <progressText>Installing psqlODBC ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(psqlOdbc).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </runProgram>

    <!-- linux-x64 -->

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}/postgresplus/psqlodbc-PG_VERSION_PSQLODBC-PG_BUILDNUM_PSQLODBC-linux-x64.bin</program>
      <programArguments>--mode unattended --installdir ${installdir}/psqlODBC --branding "Postgres Plus Standard Server ${product_version}"</programArguments>
      <progressText>Installing psqlODBC ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(psqlOdbc).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux-x64</value>
        </compareText>
      </ruleList>
    </runProgram>

    <logMessage>
      <text>Installing PostGIS in ${installdir}</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(postgis).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>contains</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </logMessage>

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}/postgresplus/postgis-pgPG_CURRENT_VERSION-PG_VERSION_POSTGIS-PG_BUILDNUM_POSTGIS-linux.bin</program>
      <programArguments>--mode unattended --installdir ${installdir} --pgpassword ${superpassword} --pgport ${serverport} --branding "Postgres Plus Standard Server ${product_version}"</programArguments>
      <progressText>Installing PostGIS ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(postgis).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </runProgram>

    <!-- linux-x64 -->

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}/postgresplus/postgis-pgPG_CURRENT_VERSION-PG_VERSION_POSTGIS-PG_BUILDNUM_POSTGIS-linux-x64.bin</program>
      <programArguments>--mode unattended --installdir ${installdir} --pgpassword ${superpassword} --pgport ${serverport} --branding "Postgres Plus Standard Server ${product_version}"</programArguments>
      <progressText>Installing PostGIS ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(postgis).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux-x64</value>
        </compareText>
      </ruleList>
    </runProgram>

    <logMessage>
      <text>Installing pgbouncer in ${installdir}/pgbouncer</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgbouncer).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>contains</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </logMessage>

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}/postgresplus/pgbouncer-PG_VERSION_PGBOUNCER-PG_BUILDNUM_PGBOUNCER-linux.bin</program>
      <programArguments>--mode unattended --installdir ${installdir}/pgbouncer</programArguments>
      <progressText>Installing pgbouncer ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgbouncer).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </runProgram>

    <!-- linux-x64 -->

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}/postgresplus/pgbouncer-PG_VERSION_PGBOUNCER-PG_BUILDNUM_PGBOUNCER-linux-x64.bin</program>
      <programArguments>--mode unattended --installdir ${installdir}/pgbouncer</programArguments>
      <progressText>Installing pgbouncer ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgbouncer).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux-x64</value>
        </compareText>
      </ruleList>
    </runProgram>

    <logMessage>
      <text>Installing pgmemcache in ${installdir}</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgmemcache).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>contains</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </logMessage>

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}/postgresplus/pgmemcache-pgPG_CURRENT_VERSION-PG_VERSION_PGMEMCACHE-PG_BUILDNUM_PGMEMCACHE-linux.bin</program>
      <programArguments>--mode unattended --installdir ${installdir}</programArguments>
      <progressText>Installing pgmemcache ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgmemcache).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </runProgram>

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}/postgresplus/pgmemcache-pgPG_CURRENT_VERSION-PG_VERSION_PGMEMCACHE-PG_BUILDNUM_PGMEMCACHE-linux-x64.bin</program>
      <programArguments>--mode unattended --installdir ${installdir}</programArguments>
      <progressText>Installing pgmemcache ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgmemcache).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux-x64</value>
        </compareText>
      </ruleList>
    </runProgram>

    <!-- pgAgent -->

    <logMessage>
      <text>Installing pgAgent in ${installdir}/pgAgent</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgagent).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>contains</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </logMessage>

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}/postgresplus/pgagent-PG_VERSION_PGAGENT-PG_BUILDNUM_PGAGENT-linux.bin</program>
      <programArguments>--mode unattended --prefix ${installdir}/pgAgent --pghost ${defaultpghost} --pguser ${supername} --pgpassword ${superpassword} --pgport ${serverport} --systemuser ${supername} --schema ${schema} --autostart no</programArguments>
      <progressText>Installing pgAgent ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgagent).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </runProgram>

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}/postgresplus/pgagent-PG_VERSION_PGAGENT-PG_BUILDNUM_PGAGENT-linux-x64.bin</program>
      <programArguments>--mode unattended --installdir ${installdir}/pgAgent --pghost ${defaultpghost} --pguser ${supername} --pgpassword ${superpassword} --pgport ${serverport} --systemuser ${supername} --schema ${schema} --autostart no</programArguments>
      <progressText>Installing pgAgent ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgagent).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>linux-x64</value>
        </compareText>
      </ruleList>
    </runProgram>

    <!-- Run Windows Programs -->
    <logMessage>
      <text>Installing Database Server in ${installdir} having data directory ${datadir} using Port:${serverport} and Locale:${locale}</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(dbserver).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${IsUpgrade}</text>
          <value>0</value>
        </compareText>
      </ruleList>
    </logMessage>

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}\postgresplus\postgresql-PG_PACKAGE_VERSION-windows.exe</program>
      <programArguments>--mode unattended --prefix "${installdir}" --datadir "${datadir}" --superpassword ${superpassword} --serverport ${serverport} --locale ${locale} --branding "Postgres Plus Standard Server ${product_version}" --install_runtimes 0</programArguments>
      <progressText>Installing Database Server ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(dbserver).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${IsUpgrade}</text>
          <value>0</value>
        </compareText>
      </ruleList>
    </runProgram>

    <setInstallerVariable>
      <name>didError</name>
      <value>1</value>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>0</text>
          <value>${program_exit_code}</value>
        </compareText>
      </ruleList>
    </setInstallerVariable>
    <!--Run in upgrade mode -->
    <logMessage>
      <text>Upgrading Database Server in ${installdir}</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(dbserver).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${IsUpgrade}</text>
          <value>1</value>
        </compareText>
      </ruleList>
    </logMessage>
    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}\postgresplus\postgresql-PG_PACKAGE_VERSION-windows.exe</program>
      <programArguments>--mode unattended --prefix "${installdir}" --superpassword ${superpassword} --branding "Postgres Plus Standard Server ${product_version}"</programArguments>
      <progressText>Installing Database Server ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(dbserver).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${IsUpgrade}</text>
          <value>1</value>
        </compareText>
      </ruleList>
    </runProgram>

    <setInstallerVariable>
      <name>didError</name>
      <value>1</value>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>0</text>
          <value>${program_exit_code}</value>
        </compareText>
      </ruleList>
    </setInstallerVariable>

    <logMessage>
      <text>Installing Slony in ${installdir}</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(slony).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </logMessage>

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}\postgresplus\slony-pgPG_CURRENT_VERSION-PG_VERSION_SLONY-PG_BUILDNUM_SLONY-windows.exe</program>
      <programArguments>--mode unattended --prefix "${installdir}" --branding "Postgres Plus Standard Server ${product_version}"</programArguments>
      <progressText>Installing Slony ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(slony).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </runProgram>

    <actionGroup>
      <actionList>
        <logMessage text="Installing StackBuilderPlus in ${installdir}\StackBuilderPlus"/>
        <runProgram abortOnError="0"
                    progressText="Installing StackBuilderPlus ... "
                    showMessageOnError="0"
                    program="${system_temp_directory}\postgresplus\stackbuilderplus-pg_PG_VERSION_STR-PG_VERSION_SBP-PG_BUILDNUM_SBP-windows.exe"
                    programArguments="--mode unattended --prefix &quot;${installdir}\StackBuilderPlus&quot; --branding &quot;Postgres Plus Standard Server ${product_version}&quot; ${monitor_server}"/>
      </actionList>
      <ruleList>
        <isTrue value="${component(stackbuilderplus).selected}"/>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
      </ruleList>
   </actionGroup>

    <logMessage>
      <text>Installing pgJDBC in ${installdir}\pgJDBC</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgJdbc).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </logMessage>

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}\postgresplus\pgjdbc-PG_VERSION_PGJDBC-PG_BUILDNUM_PGJDBC-windows.exe</program>
      <programArguments>--mode unattended --prefix "${installdir}\pgJDBC" --branding "Postgres Plus Standard Server ${product_version}"</programArguments>
      <progressText>Installing pgJDBC ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgJdbc).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </runProgram>

    <logMessage>
      <text>Installing pg_migrator in ${installdir}</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgmigrator).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </logMessage>

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}\postgresplus\pgmigrator-PG_VERSION_PGMIGRATOR-PG_BUILDNUM_PGMIGRATOR-windows.exe</program>
      <programArguments>--mode unattended --prefix "${installdir}" --branding "Postgres Plus Standard Server ${product_version}"</programArguments>
      <progressText>Installing pg_migrator ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgmigrator).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </runProgram>

    <logMessage>
      <text>Installing psqlODBC in ${installdir}\psqlODBC</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(psqlOdbc).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </logMessage>

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}\postgresplus\psqlodbc-PG_VERSION_PSQLODBC-PG_BUILDNUM_PSQLODBC-windows.exe</program>
      <programArguments>--mode unattended --prefix "${installdir}\psqlODBC" --branding "Postgres Plus Standard Server ${product_version}"</programArguments>
      <progressText>Installing psqlODBC ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(psqlOdbc).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </runProgram>

    <!--NpgSQL -->

    <logMessage>
      <text>Installing Npgsql in ${installdir}\Npgsql</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(npgsql).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </logMessage>

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}\postgresplus\npgsql-PG_VERSION_NPGSQL-PG_BUILDNUM_NPGSQL-windows.exe</program>
      <programArguments>--mode unattended --prefix "${installdir}\Npgsql" --branding "Postgres Plus Standard Server ${product_version}"</programArguments>
      <progressText>Installing NpgSQL ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(npgsql).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </runProgram>

    <logMessage>
      <text>Installing PostGIS in ${installdir}</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(postgis).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </logMessage>

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}\postgresplus\postgis-pgPG_CURRENT_VERSION-PG_VERSION_POSTGIS-PG_BUILDNUM_POSTGIS-windows.exe</program>
      <programArguments>--mode unattended --prefix "${installdir}" --pgpassword ${superpassword} --pgport ${serverport} --branding "Postgres Plus Standard Server ${product_version}"</programArguments>
      <progressText>Installing PostGIS ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(postgis).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </runProgram>

    <logMessage>
      <text>Installing pgbouncer in ${installdir}\pgbouncer</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgbouncer).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </logMessage>

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}\postgresplus\pgbouncer-PG_VERSION_PGBOUNCER-PG_BUILDNUM_PGBOUNCER-windows.exe</program>
      <programArguments>--mode unattended --prefix "${installdir}\pgbouncer"</programArguments>
      <progressText>Installing pgbouncer ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgbouncer).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </runProgram>

    <!-- pgAgent -->

    <logMessage>
      <text>Installing pgAgent in ${installdir}\pgAgent</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgagent).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </logMessage>

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}\postgresplus\pgagent-PG_VERSION_PGAGENT-PG_BUILDNUM_PGAGENT-windows.exe</program>
      <programArguments>--mode unattended --prefix "${installdir}\pgAgent" --pghost ${defaultpghost} --pguser ${supername} --pgpassword ${superpassword} --pgport ${serverport} --systemuser ${supername} --systempassword ${superpassword} --schema ${schema}</programArguments>
      <progressText>Installing pgAgent ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgagent).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </runProgram>

    <!-- Run mac programs -->
    <logMessage>
      <text>Installing Database Server in ${installdir} having data directory ${datadir} using Port:${serverport} and Locale:${locale}</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(dbserver).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${IsUpgrade}</text>
          <value>0</value>
        </compareText>
      </ruleList>
    </logMessage>
    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}/postgresplus/postgresql-PG_PACKAGE_VERSION-osx.app/Contents/MacOS/installbuilder.sh</program>
      <programArguments>--mode unattended --installdir ${installdir} --datadir ${datadir} --superpassword ${superpassword} --serverport ${serverport} --locale ${locale} --branding "Postgres Plus Standard Server ${product_version}"</programArguments>
      <progressText>Installing Database Server ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(dbserver).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${IsUpgrade}</text>
          <value>0</value>
        </compareText>
      </ruleList>
    </runProgram>

    <setInstallerVariable>
      <name>didError</name>
      <value>1</value>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>0</text>
          <value>${program_exit_code}</value>
        </compareText>
      </ruleList>
    </setInstallerVariable>

    <!-- Run in upgrade mode-->
    <logMessage>
      <text>Installing Database Server in ${installdir}</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(dbserver).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${IsUpgrade}</text>
          <value>1</value>
        </compareText>
      </ruleList>
    </logMessage>
    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}/postgresplus/postgresql-PG_PACKAGE_VERSION-osx.app/Contents/MacOS/installbuilder.sh</program>
      <programArguments>--mode unattended --prefix "${installdir}" --superpassword ${superpassword} --branding "Postgres Plus Standard Server ${product_version}"</programArguments>
      <progressText>Installing Database Server ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(dbserver).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${IsUpgrade}</text>
          <value>1</value>
        </compareText>
      </ruleList>
    </runProgram>

    <setInstallerVariable>
      <name>didError</name>
      <value>1</value>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>0</text>
          <value>${program_exit_code}</value>
        </compareText>
      </ruleList>
    </setInstallerVariable>

    <logMessage>
      <text>Installing Slony in ${installdir}</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(slony).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>

      </ruleList>
    </logMessage>

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}/postgresplus/slony-pgPG_CURRENT_VERSION-PG_VERSION_SLONY-PG_BUILDNUM_SLONY-osx.app/Contents/MacOS/installbuilder.sh</program>
      <programArguments>--mode unattended --installdir ${installdir} --branding "Postgres Plus Standard Server ${product_version}"</programArguments>
      <progressText>Installing Slony ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(slony).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </runProgram>

    <actionGroup>
      <actionList>
        <logMessage text="Installing StackBuilderPlus in ${installdir}\StackBuilderPlus"/>
        <runProgram abortOnError="0"
                    progressText="Installing StackBuilderPlus ... "
                    showMessageOnError="0"
                    program="${system_temp_directory}\postgresplus\stackbuilderplus-pg_PG_VERSION_STR-PG_VERSION_SBP-PG_BUILDNUM_SBP-osx.app/Contents/MacOS/installbuilder.sh"
                    programArguments="--mode unattended --prefix &quot;${installdir}\StackBuilderPlus&quot; --branding &quot;Postgres Plus Standard Server ${product_version}&quot; ${monitor_server}"/>
      </actionList>
      <ruleList>
        <isTrue value="${component(stackbuilderplus).selected}"/>
        <compareText logic="equals" text="${platform_name}" value="osx"/>
      </ruleList>
   </actionGroup>

    <logMessage>
      <text>Installing pgJDBC in ${installdir}/pgJDBC</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgJdbc).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </logMessage>

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}/postgresplus/pgjdbc-PG_VERSION_PGJDBC-PG_BUILDNUM_PGJDBC-osx.app/Contents/MacOS/installbuilder.sh</program>
      <programArguments>--mode unattended --installdir ${installdir}/pgJDBC --branding "Postgres Plus Standard Server ${product_version}"</programArguments>
      <progressText>Installing pgJDBC ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgJdbc).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </runProgram>

    <logMessage>
      <text>Installing pg_migrator in ${installdir}</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgmigrator).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </logMessage>

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}/postgresplus/pgmigrator-PG_VERSION_PGMIGRATOR-PG_BUILDNUM_PGMIGRATOR-osx.app/Contents/MacOS/installbuilder.sh</program>
      <programArguments>--mode unattended --installdir ${installdir} --branding "Postgres Plus Standard Server ${product_version}"</programArguments>
      <progressText>Installing pg_migrator... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgmigrator).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </runProgram>


    <logMessage>
      <text>Installing psqlODBC in ${installdir}/psqlODBC</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(psqlOdbc).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </logMessage>

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}/postgresplus/psqlodbc-PG_VERSION_PSQLODBC-PG_BUILDNUM_PSQLODBC-osx.app/Contents/MacOS/installbuilder.sh</program>
      <programArguments>--mode unattended --installdir ${installdir}/psqlODBC --branding "Postgres Plus Standard Server ${product_version}"</programArguments>
      <progressText>Installing psqlODBC ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(psqlOdbc).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </runProgram>

    <logMessage>
      <text>Installing PostGIS in ${installdir}</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(postgis).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </logMessage>

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}/postgresplus/postgis-pgPG_CURRENT_VERSION-PG_VERSION_POSTGIS-PG_BUILDNUM_POSTGIS-osx.app/Contents/MacOS/installbuilder.sh</program>
      <programArguments>--mode unattended --installdir ${installdir} --pgpassword ${superpassword} --pgport ${serverport} --branding "Postgres Plus Standard Server ${product_version}"</programArguments>
      <progressText>Installing PostGIS ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(postgis).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </runProgram>

    <logMessage>
      <text>Installing pgbouncer in ${installdir}/pgbouncer</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgbouncer).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </logMessage>

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}/postgresplus/pgbouncer-PG_VERSION_PGBOUNCER-PG_BUILDNUM_PGBOUNCER-osx.app/Contents/MacOS/installbuilder.sh</program>
      <programArguments>--mode unattended --installdir ${installdir}/pgbouncer</programArguments>
      <progressText>Installing pgbouncer ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgbouncer).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </runProgram>

    <logMessage>
      <text>Installing pgmemcache in ${installdir}</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgmemcache).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </logMessage>

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}/postgresplus/pgmemcache-pgPG_CURRENT_VERSION-PG_VERSION_PGMEMCACHE-PG_BUILDNUM_PGMEMCACHE-osx.app/Contents/MacOS/installbuilder.sh</program>
      <programArguments>--mode unattended --installdir ${installdir}</programArguments>
      <progressText>Installing pgmemcache ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgmemcache).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </runProgram>

    <!-- pgAgent -->

    <logMessage>
      <text>Installing pgAgent in ${installdir}/pgAgent</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgagent).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </logMessage>

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>${system_temp_directory}/postgresplus/pgagent-PG_VERSION_PGAGENT-PG_BUILDNUM_PGAGENT-osx.app/Contents/MacOS/installbuilder.sh</program>
      <programArguments>--mode unattended --installdir ${installdir}/pgAgent --pghost ${defaultpghost} --pguser ${supername} --pgpassword ${superpassword} --pgport ${serverport} --systemuser ${supername} --schema ${schema} --autostart no</programArguments>
      <progressText>Installing pgAgent ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgagent).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </runProgram>

    <!-- Message for manual installation of pgagent schema -->

    <!-- Inform user about configuring pgagent schema manually -->
    <showInfo text="${msg(info.pgagent.schema.manual.upgrade)}">
      <ruleList>
        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
        <compareText logic="does_not_equal" text="${pgagent_schema_exist}" value=""/>
        <compareText logic="equals" text="${upgrade_schema}" value="no"/>
        <compareText logic="does_not_equal" text="${pgagent_installer_schema_version}" value="${pgagent_current_schema_version}"/>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgagent).selected}</text>
          <value>1</value>
        </compareText>
      </ruleList>
    </showInfo>
    <showInfo text="${msg(info.pgagent.schema.manual.upgrade.windows)}">
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
        <compareText logic="does_not_equal" text="${pgagent_schema_exist}" value=""/>
        <compareText logic="equals" text="${upgrade_schema}" value="no"/>
        <compareText logic="does_not_equal" text="${pgagent_installer_schema_version}" value="${pgagent_current_schema_version}"/>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgagent).selected}</text>
          <value>1</value>
        </compareText>
      </ruleList>
    </showInfo>

    <!--Modify Postgresql.conf -->

    <logMessage>
      <text>Modifying postgresql.conf</text>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${dbInstallTune}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${IsUpgrade}</text>
          <value>1</value>
        </compareText>
      </ruleList>
    </logMessage>

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>/etc/init.d/postgresql-${product_version}</program>
      <programArguments>stop</programArguments>
      <progressText>${msg(progress.text.stoping.server)}</progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>contains</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${dbInstallTune}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${IsUpgrade}</text>
          <value>1</value>
        </compareText>
      </ruleList>
    </runProgram>

    <!--stop Mac service -->
    <runProgram>
      <abortOnError>0</abortOnError>
      <program>launchctl</program>
      <programArguments>stop com.edb.launchd.postgresql-${product_version}</programArguments>
      <progressText>${msg(progress.text.stoping.server)}</progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${dbInstallTune}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${IsUpgrade}</text>
          <value>1</value>
        </compareText>
      </ruleList>
    </runProgram>
    <setInstallerVariableFromScriptOutput>
      <customErrorMessage>${msg(pgplus.modify.error)}</customErrorMessage>
      <exec>${system_temp_directory}/postgresplus/modifyPostgresql.o</exec>
      <execArgs>"${installdir}/data/postgresql.conf" "${autovacuum_var}" "${autovacuum_naptime_var}" "${autovacuum_vacuum_threshold_var}" "${autovacuum_analyze_threshold_var}" "${autovacuum_vacuum_scale_factor_var}" "${autovacuum_analyze_scale_factor_var}" "${checkpoint_segments_var}" "${effective_cache_size_var}" "${maintenance_work_mem_var}" "${max_fsm_pages_var}" "${max_fsm_relations_var}" "${random_page_cost_var}" "${shared_buffers_var}" "${wal_buffers_var}" "${work_mem_var}" "${max_connections_var}" "${stats_row_level_var}"</execArgs>
      <name>postgresql_conf_updated_result</name>
      <workingDirectory>${system_temp_directory}/postgresplus</workingDirectory>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${dbInstallTune}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${IsUpgrade}</text>
          <value>1</value>
        </compareText>
      </ruleList>
    </setInstallerVariableFromScriptOutput>
    <runProgram>
      <abortOnError>0</abortOnError>
      <program>/etc/init.d/postgresql-${product_version}</program>
      <programArguments>start</programArguments>
      <progressText>${msg(progress.text.starting.server)}</progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>contains</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${dbInstallTune}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${IsUpgrade}</text>
          <value>1</value>
        </compareText>
      </ruleList>
    </runProgram>

    <!--start Mac service -->
    <runProgram>
      <abortOnError>0</abortOnError>
      <program>launchctl</program>
      <programArguments>start com.edb.launchd.postgresql-${product_version}</programArguments>
      <progressText>${msg(progress.text.starting.server)}</progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${dbInstallTune}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${IsUpgrade}</text>
          <value>1</value>
        </compareText>
      </ruleList>
    </runProgram>

    <!--Modify Postgresql.conf Windows  WINDOWS: Stop the server -->

    <logMessage>
      <text>Modifying postgresql.conf</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${dbInstallTune}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${IsUpgrade}</text>
          <value>1</value>
        </compareText>
      </ruleList>
    </logMessage>

    <stopWindowsService>
      <abortOnError>0</abortOnError>
      <displayName></displayName>
      <serviceName>postgresql-${product_version}</serviceName>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${dbInstallTune}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${IsUpgrade}</text>
          <value>1</value>
        </compareText>
      </ruleList>
    </stopWindowsService>
    <setInstallerVariableFromScriptOutput>
      <customErrorMessage>${msg(pgplus.modify.error)}</customErrorMessage>
      <exec>${system_temp_directory}\postgresplus\modifyPostgresql.exe</exec>
      <execArgs>"${installdir}/data/postgresql.conf" "${autovacuum_var}" "${autovacuum_naptime_var}" "${autovacuum_vacuum_threshold_var}" "${autovacuum_analyze_threshold_var}" "${autovacuum_vacuum_scale_factor_var}" "${autovacuum_analyze_scale_factor_var}" "${checkpoint_segments_var}" "${effective_cache_size_var}" "${maintenance_work_mem_var}" "${max_fsm_pages_var}" "${max_fsm_relations_var}" "${random_page_cost_var}" "${shared_buffers_var}" "${wal_buffers_var}" "${work_mem_var}" "${max_connections_var}" "${stats_row_level_var}"</execArgs>
      <name>postgresql_conf_updated_result</name>
      <workingDirectory>${system_temp_directory}\postgresplus</workingDirectory>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${dbInstallTune}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${IsUpgrade}</text>
          <value>1</value>
        </compareText>
      </ruleList>
    </setInstallerVariableFromScriptOutput>
    <startWindowsService>
      <abortOnError>0</abortOnError>
      <delay>15000</delay>
      <displayName></displayName>
      <serviceName>postgresql-${product_version}</serviceName>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${dbInstallTune}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${IsUpgrade}</text>
          <value>1</value>
        </compareText>
      </ruleList>
    </startWindowsService>

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>/etc/init.d/pgagent</program>
      <programArguments>start &amp;</programArguments>
      <progressText>Starting pgAgent ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgagent).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>contains</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </runProgram>

    <runProgram>
      <abortOnError>0</abortOnError>
      <program>launchctl</program>
      <programArguments>start com.edb.launchd.pgagent</programArguments>
      <progressText>Starting pgAgent ... </progressText>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(pgagent).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </runProgram>

    <deleteFile>
      <path>${system_temp_directory}/postgresplus/dynaTune.properties</path>
    </deleteFile>
    <deleteFile>
      <path>${system_temp_directory}/postgresplus</path>
    </deleteFile>

  </postInstallationActionList>

  <!-- Final page actions -->
  <finalPageActionList>

    <runProgram>
      <!-- MAC: Run stackbuilder -->
      <program>open</program>
      <programArguments>"/Applications/Postgres Plus Standard Server ${product_version}/Application Stack Builder.app"</programArguments>
      <progressText>${msg(progress.text.run.stackbuilder)}</progressText>
      <abortOnError>0</abortOnError>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${didError}</text>
          <value>1</value>
        </compareText>
      </ruleList>
    </runProgram>

    <runProgram>
      <!-- Linux: Run stackbuilder -->
      <program>${installdir}/scripts/launchstackbuilder.sh</program>
      <progressText>${msg(progress.text.run.stackbuilder)}</progressText>
      <abortOnError>0</abortOnError>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>contains</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${didError}</text>
          <value>1</value>
        </compareText>
      </ruleList>
    </runProgram>

    <runProgram>
      <!-- Windows: Run stackbuilder -->
      <program>${installdir}/bin/stackbuilder.exe</program>
      <progressText>${msg(progress.text.run.stackbuilder)}</progressText>
      <abortOnError>0</abortOnError>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${didError}</text>
          <value>1</value>
        </compareText>
      </ruleList>
    </runProgram>

  </finalPageActionList>

  <!-- Preuninstallation actions -->
  <preUninstallationActionList>
    <actionGroup>
      <actionList>
        <iniFileGet file="/etc/postgresplus-reg.ini"
                    key="databaseServer"
                    section="PostgreSQL/${product_version}"
                    variable="uninstall_dbserver"/>
        <iniFileGet file="/etc/postgresplus-reg.ini"
                    key="slony"
                    section="PostgreSQL/${product_version}"
                    variable="uninstall_slony"/>
        <iniFileGet file="/etc/postgresplus-reg.ini"
                    key="pgJdbc"
                    section="PostgreSQL/${product_version}"
                    variable="uninstall_pgjdbc"/>
        <iniFileGet file="/etc/postgresplus-reg.ini"
                    key="pg_migrator"
                    section="PostgreSQL/${product_version}"
                    variable="uninstall_pgmigrator"/>
        <iniFileGet file="/etc/postgresplus-reg.ini"
                    key="postgis"
                    section="PostgreSQL/${product_version}"
                    variable="uninstall_postgis"/>
        <iniFileGet file="/etc/postgresplus-reg.ini"
                    key="psqlOdbc"
                    section="PostgreSQL/${product_version}"
                    variable="uninstall_psqlOdbc"/>
        <iniFileGet file="/etc/postgresplus-reg.ini"
                    key="pgbouncer"
                    section="PostgreSQL/${product_version}"
                    variable="uninstall_pgbouncer"/>
        <iniFileGet file="/etc/postgresplus-reg.ini"
                    key="pgmemcache"
                    section="PostgreSQL/${product_version}"
                    variable="uninstall_pgmemcache"/>
        <iniFileGet file="/etc/postgresplus-reg.ini"
                    key="pgagent"
                    section="PostgreSQL/${product_version}"
                    variable="uninstall_pgagent"/>

        <!-- uninstall Slony1 -->
        <runProgram abortOnError="0"
                    program="${installdir}/Slony/uninstall-slony"
                    programArguments="--mode unattended">
          <ruleList>
            <isTrue value="${uninstall_slony}"/>
            <!-- It is possible that user may have uninstalled slony1 manually -->
            <fileTest path="${installdir}/Slony/uninstall-slony" condition="exists"/>
          </ruleList>
        </runProgram>

        <!-- uninstall jdbc -->
        <runProgram abortOnError="0"
                    program="${installdir}/pgJDBC/uninstall-pgjdbc"
                    programArguments="--mode unattended">
          <ruleList>
            <isTrue value="${uninstall_pgjdbc}"/>
            <!-- It is possible that user may have uninstalled pgJDBC manually -->
            <fileTest path="${installdir}/pgJDBC/uninstall-pgjdbc" condition="exists"/>
          </ruleList>
        </runProgram>

        <!-- uninstall PostGIS -->
        <runProgram abortOnError="0"
                    program="${installdir}/PostGIS/uninstall-postgis"
                    programArguments="--mode unattended">
          <ruleList>
            <isTrue value="${uninstall_postgis}"/>
            <!-- It is possible that user may have uninstalled PostGIS manually -->
            <fileTest path="${installdir}/PostGIS/uninstall-postgis" condition="exists"/>
          </ruleList>
        </runProgram>

        <!-- uninstall psqlODBC -->
        <runProgram abortOnError="0"
                    program="${installdir}/psqlODBC/uninstall-psqlodbc"
                    programArguments="--mode unattended">
          <ruleList>
            <isTrue value="${uninstall_psqlOdbc}"/>
            <!-- It is possible that user may have uninstalled psqlODBC manually -->
            <fileTest path="${installdir}/psqlODBC/uninstall-psqlodbc" condition="exists"/>
          </ruleList>
        </runProgram>

        <!-- uninstall NpgSql -->
        <runProgram abortOnError="0"
                    program="${installdir}/Npgsql/uninstall-npgsql"
                    programArguments="--mode unattended">
          <ruleList>
            <isTrue value="${uninstall_npgsql}"/>
            <!-- It is possible that user may have uninstalled NpgSql manually -->
            <fileTest path="${installdir}/Npgsql/uninstall-npgsql" condition="exists"/>
          </ruleList>
        </runProgram>

        <!-- uninstall pgmemcache -->
        <runProgram abortOnError="0"
                    program="${installdir}/uninstall-pgmemcache"
                    programArguments="--mode unattended">
          <ruleList>
            <isTrue value="${uninstall_pgmemcache}"/>
            <!-- It is possible that user may have uninstalled pgmemcache manually -->
            <fileTest path="${installdir}/uninstall-pgmemcache" condition="exists"/>
          </ruleList>
        </runProgram>

        <!-- uninstall pgBouncer -->
        <runProgram abortOnError="0"
                    program="${installdir}/pgbouncer/uninstall-pgbouncer"
                    programArguments="--mode unattended">
          <ruleList>
            <isTrue value="${uninstall_pgbouncer}"/>
            <!-- It is possible that user may have uninstalled NpgSql manually -->
            <fileTest path="${installdir}/pgbouncer/uninstall-pgbouncer" condition="exists"/>
          </ruleList>
        </runProgram>

        <!-- uninstall pgAgent -->
        <runProgram abortOnError="0"
                    program="${installdir}/pgagent/uninstall-pgagent"
                    programArguments="--mode unattended">
          <ruleList>
            <isTrue value="${uninstall_pgagent}"/>
            <!-- It is possible that user may have uninstalled pgAgent manually -->
            <fileTest path="${installdir}/pgagent/uninstall-pgagent" condition="exists"/>
          </ruleList>
        </runProgram>

        <!-- uninstall pg_migrator -->
        <runProgram abortOnError="0"
                    program="${installdir}/uninstall-pgmigrator"
                    programArguments="--mode unattended">
          <ruleList>
            <isTrue value="${uninstall_pgmigrator}"/>
            <!-- It is possible that user may have uninstalled pg_migrator manually -->
            <fileTest path="${installdir}/uninstall-pgmigrator" condition="exists"/>
          </ruleList>
        </runProgram>

        <!-- uninstall dbserver/PostgreSQL -->
        <runProgram abortOnError="0"
                    program="${installdir}/uninstall-postgresql"
                    programArguments="--mode unattended">
          <ruleList>
            <isTrue value="${uninstall_dbserver}"/>
            <!-- It is possible that user may have uninstalled PostgreSQL server manually -->
            <fileTest path="${installdir}/uninstall-postgresql" condition="exists"/>
          </ruleList>
        </runProgram>

      </actionList>
      <ruleList>
        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
      </ruleList>
    </actionGroup>

    <!-- WIN: Get existing directories -->
    <actionGroup>
      <actionList>
        <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PostgresPlus\Uninstallations\postgresplus-${product_version}"
                     name="databaseServer"
                     variable="uninstall_dbserver"/>
        <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PostgresPlus\Uninstallations\postgresplus-${product_version}"
                     name="slony"
                     variable="uninstall_slony"/>
        <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PostgresPlus\Uninstallations\postgresplus-${product_version}"
                     name="pgJdbc"
                     variable="uninstall_pgjdbc"/>
        <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PostgresPlus\Uninstallations\postgresplus-${product_version}"
                     name="pg_migrator"
                     variable="uninstall_pgmigrator"/>
        <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PostgresPlus\Uninstallations\postgresplus-${product_version}"
                     name="postgis"
                     variable="uninstall_postgis"/>
        <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PostgresPlus\Uninstallations\postgresplus-${product_version}"
                     name="psqlOdbc"
                     variable="uninstall_psqlOdbc"/>
        <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PostgresPlus\Uninstallations\postgresplus-${product_version}"
                     name="npgsql"
                     variable="uninstall_npgsql"/>
        <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PostgresPlus\Uninstallations\postgresplus-${product_version}"
                     name="pgmemcache"
                     variable="uninstall_pgmemcache"/>
        <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PostgresPlus\Uninstallations\postgresplus-${product_version}"
                     name="pgbouncer"
                     variable="uninstall_pgbouncer"/>
        <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PostgresPlus\Uninstallations\postgresplus-${product_version}"
                     name="pgagent"
                     variable="uninstall_pgagent"/>

        <!-- uninstall Slony1 -->
        <runProgram abortOnError="0"
                    program="${installdir}\Slony\uninstall-slony.exe"
                    programArguments="--mode unattended">
          <ruleList>
            <isTrue value="${uninstall_slony}"/>
            <!-- It is possible that user may have uninstalled only slony1 manually -->
            <fileTest path="${installdir}\Slony\uninstall-slony.exe" condition="exists"/>
          </ruleList>
        </runProgram>

        <!-- uninstall jdbc -->
        <runProgram abortOnError="0"
                    program="${installdir}\pgJDBC\uninstall-pgjdbc.exe"
                    programArguments="--mode unattended">
          <ruleList>
            <isTrue value="${uninstall_pgjdbc}"/>
            <!-- It is possible that user may have uninstalled only pgJDBC manually -->
            <fileTest path="${installdir}\pgJDBC\uninstall-pgjdbc.exe" condition="exists"/>
          </ruleList>
        </runProgram>

        <!-- uninstall PostGIS -->
        <runProgram abortOnError="0"
                    program="${installdir}\PostGIS\uninstall-postgis.exe"
                    programArguments="--mode unattended">
          <ruleList>
            <isTrue value="${uninstall_postgis}"/>
            <!-- It is possible that user may have uninstalled only PostGIS manually -->
            <fileTest path="${installdir}\PostGIS\uninstall-postgis.exe" condition="exists"/>
          </ruleList>
        </runProgram>

        <!-- uninstall psqlODBC -->
        <runProgram abortOnError="0"
                    program="${installdir}\psqlODBC\uninstall-psqlodbc.exe"
                    programArguments="--mode unattended">
          <ruleList>
            <isTrue value="${uninstall_psqlOdbc}"/>
            <!-- It is possible that user may have uninstalled only psqlODBC manually -->
            <fileTest path="${installdir}\psqlODBC\uninstall-psqlodbc.exe" condition="exists"/>
          </ruleList>
        </runProgram>

        <!-- uninstall NpgSql -->
        <runProgram abortOnError="0"
                    program="${installdir}\Npgsql\uninstall-npgsql.exe"
                    programArguments="--mode unattended">
          <ruleList>
            <isTrue value="${uninstall_npgsql}"/>
            <!-- It is possible that user may have uninstalled only NpgSql manually -->
            <fileTest path="${installdir}\Npgsql\uninstall-npgsql.exe" condition="exists"/>
          </ruleList>
        </runProgram>

        <!-- uninstall pgmemcache -->
        <runProgram abortOnError="0"
                    program="${installdir}\uninstall-pgmemcache.exe"
                    programArguments="--mode unattended">
          <ruleList>
            <isTrue value="${uninstall_pgmemcache}"/>
            <!-- It is possible that user may have uninstalled pgmemcache manually -->
            <fileTest path="${installdir}\uninstall-pgmemcache.exe" condition="exists"/>
          </ruleList>
        </runProgram>

        <!-- uninstall pgBouncer -->
        <runProgram abortOnError="0"
                    program="${installdir}\pgbouncer\uninstall-pgbouncer.exe"
                    programArguments="--mode unattended">
          <ruleList>
            <isTrue value="${uninstall_pgbouncer}"/>
            <!-- It is possible that user may have uninstalled only NpgSql manually -->
            <fileTest path="${installdir}\pgbouncer\uninstall-pgbouncer.exe" condition="exists"/>
          </ruleList>
        </runProgram>

        <!-- uninstall pgAgent -->
        <runProgram abortOnError="0"
                    program="${installdir}\pgagent\uninstall-pgagent.exe"
                    programArguments="--mode unattended">
          <ruleList>
            <isTrue value="${uninstall_pgagent}"/>
            <!-- It is possible that user may have uninstalled only pgAgent manually -->
            <fileTest path="${installdir}\pgagent\uninstall-pgagent.exe" condition="exists"/>
          </ruleList>
        </runProgram>

        <!-- uninstall pg_migrator -->
        <runProgram abortOnError="0"
                    program="${installdir}\uninstall-pgmigrator.exe"
                    programArguments="--mode unattended">
          <ruleList>
            <isTrue value="${uninstall_pgmigrator}"/>
            <!-- It is possible that user may have uninstalled only pg_migrator manually -->
            <fileTest path="${installdir}\uninstall-pgmigrator.exe" condition="exists"/>
          </ruleList>
        </runProgram>

        <!-- uninstall dbserver/PostgreSQL -->
        <runProgram abortOnError="0"
                    program="${installdir}\uninstall-postgresql.exe"
                    programArguments="--mode unattended">
          <ruleList>
            <isTrue value="${uninstall_dbserver}"/>
            <!-- It is possible that user may have uninstalled only PostgreSQL server manually -->
            <fileTest path="${installdir}\uninstall-postgresql.exe" condition="exists"/>
          </ruleList>
        </runProgram>

      </actionList>
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
      </ruleList>
    </actionGroup>

  </preUninstallationActionList>

  <!-- Postuninstallation actions -->
  <postUninstallationActionList>
    <actionGroup>
      <actionList>
          <deleteFile path="/etc/postgresplus-reg.ini"/>
      </actionList>
      <ruleList>
        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
      </ruleList>
    </actionGroup>

    <actionGroup>
      <actionList>
          
        <!-- WINDOWS: Unregister the event message DLL -->
        <registryDelete key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PostgresPlus\Uninstallations\postgresplus-${product_version}"/>
        <registryDelete key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\PostgresPlus\Installations\postgresplus-${product_version}"/>
    
        <deleteFile path="${installdir}\Slony">
          <ruleList>
            <isTrue value="${uninstall_slony}"/>
          </ruleList>
        </deleteFile>
    
        <deleteFile path="${installdir}\PostGIS">
          <ruleList>
            <isTrue value="${uninstall_postgis}"/>
          </ruleList>
        </deleteFile>
    
        <deleteFile path="${installdir}\pgJDBC">
          <ruleList>
            <isTrue value="${uninstall_pgjdbc}"/>
          </ruleList>
        </deleteFile>
    
        <deleteFile path="${installdir}\psqlODBC">
          <ruleList>
            <isTrue value="${uninstall_psqlOdbc}"/>
          </ruleList>
        </deleteFile>
    
        <deleteFile path="${installdir}\Npgsql">
          <ruleList>
            <isTrue value="${uninstall_npgsql}"/>
          </ruleList>
        </deleteFile>
    
        <deleteFile path="${installdir}\pgbouncer">
          <ruleList>
            <isTrue value="${uninstall_pgbouncer}"/>
          </ruleList>
        </deleteFile>
    
        <deleteFile path="${installdir}\pgAgent">
          <ruleList>
            <isTrue value="${uninstall_pgagent}"/>
          </ruleList>
        </deleteFile>
    
        <showWarning text="${msg(uninstall.restart.message)}">
          <ruleList>
            <fileExists path="${installdir}\bin"/>
            <fileTest path="${installdir}\bin" condition="is_not_empty"/>
          </ruleList>
        </showWarning>
    
        <deleteFile path="${installdir}\logs">
          <ruleList>
            <isTrue value="${uninstall_dbserver}"/>
          </ruleList>
        </deleteFile>
    
        <deleteFile path="${installdir}\man">
          <ruleList>
            <isTrue value="${uninstall_dbserver}"/>
          </ruleList>
        </deleteFile>
      </actionList>
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
      </ruleList>
    </actionGroup>

  </postUninstallationActionList>

  <!-- Component Selection Screen -->

  <allowComponentSelection>1</allowComponentSelection>

  <!-- Components -->

  <componentList>

    <component>
      <name>dbserver</name>
      <description>Database Server</description>
      <detailedDescription>The PostgreSQL database server.</detailedDescription>
      <canBeEdited>1</canBeEdited>
      <selected>1</selected>
      <show>1</show>
      <folderList>
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfiles</name>
          <platforms>all</platforms>
        </folder>
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>programfileslinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux/postgresql-PG_PACKAGE_VERSION-linux.bin</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux/scripts/getlocales.sh</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux/scripts/generate_uuid.sh</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux/scripts/sysinfo.sh</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux/scripts/validateUserClient.o</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux/scripts/isUserValidated.o</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux/scripts/dynaTuneClient.o</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux/scripts/runvalidateUserClient.sh</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux/scripts/runisUserValidated.sh</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux/scripts/rundynaTuneClient.sh</origin>
            </distributionFile>
            <distributionDirectory>
              <origin>staging/linux/scripts/lib</origin>
            </distributionDirectory>

            <!-- starts here -->
            <distributionDirectory>
              <origin>staging/linux/scripts/pgcontrol</origin>
            </distributionDirectory>
            <distributionFile>
              <origin>staging/linux/scripts/runpgcontroldata.sh</origin>
            </distributionFile>

            <!-- ends here -->

            <distributionFile>
              <origin>staging/linux/scripts/modifyPostgresql.o</origin>
            </distributionFile>
          </distributionFileList>
        </folder>

        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>dbserverlinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux/scripts/generate_uuid.sh</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux/scripts/sysinfo.sh</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux/scripts/validateUserClient.o</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux/scripts/isUserValidated.o</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux/scripts/dynaTuneClient.o</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux/scripts/runvalidateUserClient.sh</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux/scripts/runisUserValidated.sh</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux/scripts/rundynaTuneClient.sh</origin>
            </distributionFile>
            <distributionDirectory>
              <origin>staging/linux/scripts/lib</origin>
            </distributionDirectory>

            <!-- starts here -->
            <distributionDirectory>
              <origin>staging/linux/scripts/pgcontrol</origin>
            </distributionDirectory>
            <distributionFile>
              <origin>staging/linux/scripts/runpgcontroldata.sh</origin>
            </distributionFile>

            <!-- ends here -->

            <distributionFile>
              <origin>staging/linux/scripts/modifyPostgresql.o</origin>
            </distributionFile>
          </distributionFileList>
        </folder>

        <!-- linux-x64 -->

        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>programfileslinux-x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux-x64/postgresql-PG_PACKAGE_VERSION-linux-x64.bin</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux-x64/scripts/getlocales.sh</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux-x64/scripts/generate_uuid.sh</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux-x64/scripts/sysinfo.sh</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux-x64/scripts/validateUserClient.o</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux-x64/scripts/isUserValidated.o</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux-x64/scripts/dynaTuneClient.o</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux-x64/scripts/runvalidateUserClient.sh</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux-x64/scripts/runisUserValidated.sh</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux-x64/scripts/rundynaTuneClient.sh</origin>
            </distributionFile>
            <distributionDirectory>
              <origin>staging/linux-x64/scripts/lib</origin>
            </distributionDirectory>

            <!-- starts here -->
            <distributionDirectory>
              <origin>staging/linux-x64/scripts/pgcontrol</origin>
            </distributionDirectory>
            <distributionFile>
              <origin>staging/linux-x64/scripts/runpgcontroldata.sh</origin>
            </distributionFile>

            <!-- ends here -->

            <distributionFile>
              <origin>staging/linux-x64/scripts/modifyPostgresql.o</origin>
            </distributionFile>
          </distributionFileList>
        </folder>

        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>dbserverlinux-x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux-x64/scripts/generate_uuid.sh</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux-x64/scripts/sysinfo.sh</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux-x64/scripts/validateUserClient.o</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux-x64/scripts/isUserValidated.o</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux-x64/scripts/dynaTuneClient.o</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux-x64/scripts/runvalidateUserClient.sh</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux-x64/scripts/runisUserValidated.sh</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux-x64/scripts/rundynaTuneClient.sh</origin>
            </distributionFile>
            <distributionDirectory>
              <origin>staging/linux-x64/scripts/lib</origin>
            </distributionDirectory>

            <!-- starts here -->
            <distributionDirectory>
              <origin>staging/linux-x64/scripts/pgcontrol</origin>
            </distributionDirectory>
            <distributionFile>
              <origin>staging/linux-x64/scripts/runpgcontroldata.sh</origin>
            </distributionFile>

            <!-- ends here -->

            <distributionFile>
              <origin>staging/linux-x64/scripts/modifyPostgresql.o</origin>
            </distributionFile>
          </distributionFileList>
        </folder>

        <!-- Windows -->
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>programfileswindows</name>
          <platforms>windows</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/windows/postgresql-PG_PACKAGE_VERSION-windows.exe</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/windows/scripts/getlocales.exe</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/windows/scripts/createuser.exe</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/windows/scripts/validateuser.exe</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/windows/scripts/dbserver_guid.exe</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/windows/scripts/validateUserClient.exe</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/windows/scripts/isUserValidated.exe</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/windows/scripts/getDynaTune.exe</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/windows/scripts/modifyPostgresql.exe</origin>
            </distributionFile>

            <!-- starts here -->
            <distributionDirectory>
              <origin>staging/windows/scripts/pgcontrol</origin>
            </distributionDirectory>

            <distributionFile>
              <origin>staging/windows/scripts/vcredist_x86.exe</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/windows/scripts/installruntimes.vbs</origin>
            </distributionFile>

            <!-- ends here -->

          </distributionFileList>
        </folder>
        <folder>
          <description>DEB</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>postgresplus</name>
          <platforms>all</platforms>
        </folder>
        <folder>
          <description>DEB</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>apache</name>
          <platforms>all</platforms>
        </folder>

        <!-- MAC: Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>programfilesmacosx</name>
          <platforms>osx</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/osx/postgresql-PG_PACKAGE_VERSION-osx.app</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/osx/scripts/getlocales.sh</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/osx/scripts/preinstall.sh</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/osx/scripts/generate_uuid.sh</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/osx/scripts/sysinfo.sh</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/osx/scripts/validateUserClient.o</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/osx/scripts/isUserValidated.o</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/osx/scripts/dynaTuneClient.o</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/osx/scripts/modifyPostgresql.o</origin>
            </distributionFile>

            <!-- starts here -->
            <distributionDirectory>
              <origin>staging/osx/scripts/pgcontrol</origin>
            </distributionDirectory>


            <!-- ends here -->
          </distributionFileList>
        </folder>
      </folderList>
      <componentSelectionValidationActionList>
        <setInstallerVariable>
          <name>noComponentSelected</name>
          <persist>1</persist>
          <value>false</value>
        </setInstallerVariable>
      </componentSelectionValidationActionList>
    </component>
    <component>
      <name>stackbuilderplus</name>
      <description>Stack-Builder Plus</description>
      <detailedDescription>An advanced application stack builder for PostgreSQL server.</detailedDescription>
      <canBeEdited>0</canBeEdited>
      <selected>1</selected>
      <show>1</show>
      <folderList>
        <!-- linux -->
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>stackbuilderpluslinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux/stackbuilderplus-pg_PG_VERSION_STR-PG_VERSION_SBP-PG_BUILDNUM_SBP-linux.bin</origin>
            </distributionFile>
          </distributionFileList>
        </folder>

        <!-- linux-x64 -->
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>stackbuilderpluslinux-x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux-x64/stackbuilderplus-pg_PG_VERSION_STR-PG_VERSION_SBP-PG_BUILDNUM_SBP-linux-x64.bin</origin>
            </distributionFile>
          </distributionFileList>
        </folder>

        <!-- MAC: Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>stackbuilderplusosx</name>
          <platforms>osx</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/osx/stackbuilderplus-pg_PG_VERSION_STR-PG_VERSION_SBP-PG_BUILDNUM_SBP-osx.app</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>

        <!-- Windows -->
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>stackbuilderpluswindows</name>
          <platforms>windows</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/windows/stackbuilderplus-pg_PG_VERSION_STR-PG_VERSION_SBP-PG_BUILDNUM_SBP-windows.exe</origin>
            </distributionFile>
          </distributionFileList>
        </folder>
      </folderList>
      <componentSelectionValidationActionList>
        <setInstallerVariable name="noComponentSelected" persist="1" value="false"/>
      </componentSelectionValidationActionList>
    </component>
    <component>
      <name>slony</name>
      <description>Slony</description>
      <detailedDescription>A single master to multiple slaves replication engine.</detailedDescription>
      <canBeEdited>1</canBeEdited>
      <selected>1</selected>
      <show>1</show>
      <folderList>
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>programfileslinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux/slony-pgPG_CURRENT_VERSION-PG_VERSION_SLONY-PG_BUILDNUM_SLONY-linux.bin</origin>
            </distributionFile>
          </distributionFileList>
        </folder>

        <!-- linux-x64 -->

        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>programfileslinux-x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux-x64/slony-pgPG_CURRENT_VERSION-PG_VERSION_SLONY-PG_BUILDNUM_SLONY-linux-x64.bin</origin>
            </distributionFile>
          </distributionFileList>
        </folder>

        <!-- MAC: Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>slonyosx</name>
          <platforms>osx</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/osx/slony-pgPG_CURRENT_VERSION-PG_VERSION_SLONY-PG_BUILDNUM_SLONY-osx.app</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>

        <!-- Windows -->
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>slonywindows</name>
          <platforms>windows</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/windows/slony-pgPG_CURRENT_VERSION-PG_VERSION_SLONY-PG_BUILDNUM_SLONY-windows.exe</origin>
            </distributionFile>
          </distributionFileList>
        </folder>
      </folderList>
      <componentSelectionValidationActionList>
        <throwError>
          <text>${msg(dbserver.required.pgerror)}</text>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(dbserver).selected}</text>
              <value>0</value>
            </compareText>
            <fileTest>
              <path>${installdir}/bin/psql</path>
              <condition>not_exists</condition>
            </fileTest>
            <compareText>
              <text>${platform_name}</text>
              <logic>does_not_equal</logic>
              <value>windows</value>
            </compareText>
          </ruleList>
        </throwError>

        <throwError>
          <text>${msg(dbserver.required.pgerror)}</text>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(dbserver).selected}</text>
              <value>0</value>
            </compareText>
            <fileTest>
              <path>${installdir}\bin\psql.exe</path>
              <condition>not_exists</condition>
            </fileTest>
            <compareText>
              <text>${platform_name}</text>
              <logic>equals</logic>
              <value>windows</value>
            </compareText>
          </ruleList>
        </throwError>

        <setInstallerVariable>
          <name>noComponentSelected</name>
          <persist>1</persist>
          <value>false</value>
        </setInstallerVariable>

      </componentSelectionValidationActionList>
    </component>
    <component>
      <name>pgJdbc</name>
      <description>pgJDBC</description>
      <detailedDescription>The PostgreSQL JDBC driver.</detailedDescription>
      <canBeEdited>1</canBeEdited>
      <selected>1</selected>
      <show>1</show>
      <folderList>
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>programfileslinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux/pgjdbc-PG_VERSION_PGJDBC-PG_BUILDNUM_PGJDBC-linux.bin</origin>
            </distributionFile>
          </distributionFileList>
        </folder>

        <!-- linux-x64-->

        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>programfileslinux-x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux-x64/pgjdbc-PG_VERSION_PGJDBC-PG_BUILDNUM_PGJDBC-linux-x64.bin</origin>
            </distributionFile>
          </distributionFileList>
        </folder>

        <!-- MAC: Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>pgjdbcosx</name>
          <platforms>osx</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/osx/pgjdbc-PG_VERSION_PGJDBC-PG_BUILDNUM_PGJDBC-osx.app</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>

        <!-- Windows -->
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>pgjdbcwindows</name>
          <platforms>windows</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/windows/pgjdbc-PG_VERSION_PGJDBC-PG_BUILDNUM_PGJDBC-windows.exe</origin>
            </distributionFile>
          </distributionFileList>
        </folder>
      </folderList>
      <componentSelectionValidationActionList>
        <throwError>
          <text>${msg(dbserver.required.pgerror)}</text>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(dbserver).selected}</text>
              <value>0</value>
            </compareText>
            <fileTest>
              <path>${installdir}/bin/psql</path>
              <condition>not_exists</condition>
            </fileTest>
            <compareText>
              <text>${platform_name}</text>
              <logic>does_not_equal</logic>
              <value>windows</value>
            </compareText>
          </ruleList>
        </throwError>
        <throwError>
          <text>${msg(dbserver.required.pgerror)}</text>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(dbserver).selected}</text>
              <value>0</value>
            </compareText>
            <fileTest>
              <path>${installdir}\bin\psql.exe</path>
              <condition>not_exists</condition>
            </fileTest>
            <compareText>
              <text>${platform_name}</text>
              <logic>equals</logic>
              <value>windows</value>
            </compareText>
          </ruleList>
        </throwError>
        <setInstallerVariable>
          <name>noComponentSelected</name>
          <persist>1</persist>
          <value>false</value>
        </setInstallerVariable>
      </componentSelectionValidationActionList>
    </component>
    <component>
      <name>postgis</name>
      <description>PostGIS</description>
      <canBeEdited>1</canBeEdited>
      <detailedDescription>Spatial datatypes and functions for PostgreSQL.</detailedDescription>
      <selected>1</selected>
      <show>1</show>
      <folderList>
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>programfileslinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux/postgis-pgPG_CURRENT_VERSION-PG_VERSION_POSTGIS-PG_BUILDNUM_POSTGIS-linux.bin</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux/scripts/check-connection.sh</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux/scripts/check-db.sh</origin>
            </distributionFile>
          </distributionFileList>
        </folder>
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>postgislinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux/scripts/check-connection.sh</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux/scripts/check-db.sh</origin>
            </distributionFile>
          </distributionFileList>
        </folder>

        <!-- linux-x64-->

        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>programfileslinux-x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux-x64/postgis-pgPG_CURRENT_VERSION-PG_VERSION_POSTGIS-PG_BUILDNUM_POSTGIS-linux-x64.bin</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux-x64/scripts/check-connection.sh</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux-x64/scripts/check-db.sh</origin>
            </distributionFile>
          </distributionFileList>
        </folder>
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>postgislinux-x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux-x64/scripts/check-connection.sh</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux-x64/scripts/check-db.sh</origin>
            </distributionFile>
          </distributionFileList>
        </folder>

        <!-- MAC: Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>postgisosx</name>
          <platforms>osx</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/osx/postgis-pgPG_CURRENT_VERSION-PG_VERSION_POSTGIS-PG_BUILDNUM_POSTGIS-osx.app</origin>
            </distributionDirectory>
            <distributionFile>
              <origin>staging/osx/scripts/check-connection.sh</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/osx/scripts/check-db.sh</origin>
            </distributionFile>
          </distributionFileList>
        </folder>

        <!-- Windows -->
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>postgiswindows</name>
          <platforms>windows</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/windows/postgis-pgPG_CURRENT_VERSION-PG_VERSION_POSTGIS-PG_BUILDNUM_POSTGIS-windows.exe</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/windows/scripts/createuser.exe</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/windows/scripts/validateuser.exe</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/windows/scripts/check-connection.bat</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/windows/scripts/check-db.bat</origin>
            </distributionFile>
          </distributionFileList>
        </folder>
      </folderList>
      <componentSelectionValidationActionList>
        <throwError>
          <text>${msg(dbserver.required.pgerror)}</text>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(dbserver).selected}</text>
              <value>0</value>
            </compareText>
            <fileTest>
              <path>${installdir}/bin/psql</path>
              <condition>not_exists</condition>
            </fileTest>
            <compareText>
              <text>${platform_name}</text>
              <logic>does_not_equal</logic>
              <value>windows</value>
            </compareText>
          </ruleList>
        </throwError>
        <throwError>
          <text>${msg(dbserver.required.pgerror)}</text>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(dbserver).selected}</text>
              <value>0</value>
            </compareText>
            <fileTest>
              <path>${installdir}\bin\psql.exe</path>
              <condition>not_exists</condition>
            </fileTest>
            <compareText>
              <text>${platform_name}</text>
              <logic>equals</logic>
              <value>windows</value>
            </compareText>
          </ruleList>
        </throwError>
        <setInstallerVariable>
          <name>noComponentSelected</name>
          <persist>1</persist>
          <value>false</value>
        </setInstallerVariable>
      </componentSelectionValidationActionList>
    </component>
    <component>
      <name>psqlOdbc</name>
      <description>psqlODBC</description>
      <detailedDescription>The PostgreSQL ODBC driver.</detailedDescription>
      <canBeEdited>1</canBeEdited>
      <selected>1</selected>
      <show>1</show>
      <folderList>
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>programfileslinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux/psqlodbc-PG_VERSION_PSQLODBC-PG_BUILDNUM_PSQLODBC-linux.bin</origin>
            </distributionFile>
          </distributionFileList>
        </folder>

        <!-- linux-x64-->

        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>programfileslinux-x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux-x64/psqlodbc-PG_VERSION_PSQLODBC-PG_BUILDNUM_PSQLODBC-linux-x64.bin</origin>
            </distributionFile>
          </distributionFileList>
        </folder>

        <!-- MAC: Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>psqlodbcosx</name>
          <platforms>osx</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/osx/psqlodbc-PG_VERSION_PSQLODBC-PG_BUILDNUM_PSQLODBC-osx.app</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>

        <!-- Windows -->
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>psqlodbcwindows</name>
          <platforms>windows</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/windows/psqlodbc-PG_VERSION_PSQLODBC-PG_BUILDNUM_PSQLODBC-windows.exe</origin>
            </distributionFile>
          </distributionFileList>
        </folder>
      </folderList>
      <componentSelectionValidationActionList>
        <throwError>
          <text>${msg(dbserver.required.pgerror)}</text>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(dbserver).selected}</text>
              <value>0</value>
            </compareText>
            <fileTest>
              <path>${installdir}/bin/psql</path>
              <condition>not_exists</condition>
            </fileTest>
            <compareText>
              <text>${platform_name}</text>
              <logic>does_not_equal</logic>
              <value>windows</value>
            </compareText>
          </ruleList>
        </throwError>

        <throwError>
          <text>${msg(dbserver.required.pgerror)}</text>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(dbserver).selected}</text>
              <value>0</value>
            </compareText>
            <fileTest>
              <path>${installdir}\bin\psql.exe</path>
              <condition>not_exists</condition>
            </fileTest>
            <compareText>
              <text>${platform_name}</text>
              <logic>equals</logic>
              <value>windows</value>
            </compareText>
          </ruleList>
        </throwError>
        <setInstallerVariable>
          <name>noComponentSelected</name>
          <persist>1</persist>
          <value>false</value>
        </setInstallerVariable>
      </componentSelectionValidationActionList>
    </component>

    <!--NpgSQL -->
    <component>
      <name>npgsql</name>
      <description>NpgSQL</description>
      <detailedDescription>The PostgreSQL .NET data provider.</detailedDescription>
      <canBeEdited>1</canBeEdited>
      <selected>1</selected>
      <show>1</show>
      <folderList>
        <!-- Windows -->
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>npgsqlwindows</name>
          <platforms>windows</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/windows/npgsql-PG_VERSION_NPGSQL-PG_BUILDNUM_NPGSQL-windows.exe</origin>
            </distributionFile>
          </distributionFileList>
        </folder>
      </folderList>
      <componentSelectionValidationActionList>
        <throwError>
          <text>${msg(dbserver.required.pgerror)}</text>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(dbserver).selected}</text>
              <value>0</value>
            </compareText>
            <fileTest>
              <path>${installdir}/bin/psql</path>
              <condition>not_exists</condition>
            </fileTest>
            <compareText>
              <text>${platform_name}</text>
              <logic>does_not_equal</logic>
              <value>windows</value>
            </compareText>
          </ruleList>
        </throwError>

        <throwError>
          <text>${msg(dbserver.required.pgerror)}</text>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(dbserver).selected}</text>
              <value>0</value>
            </compareText>
            <fileTest>
              <path>${installdir}\bin\psql.exe</path>
              <condition>not_exists</condition>
            </fileTest>
            <compareText>
              <text>${platform_name}</text>
              <logic>equals</logic>
              <value>windows</value>
            </compareText>
          </ruleList>
        </throwError>
        <setInstallerVariable>
          <name>noComponentSelected</name>
          <persist>1</persist>
          <value>false</value>
        </setInstallerVariable>
      </componentSelectionValidationActionList>
    </component>
    <!-- pgbouncer -->
    <component>
      <name>pgbouncer</name>
      <description>pgBouncer</description>
      <detailedDescription>A connection pooler for PostgreSQL</detailedDescription>
      <canBeEdited>1</canBeEdited>
      <selected>1</selected>
      <show>1</show>
      <folderList>
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>pgbouncerlinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux/pgbouncer-PG_VERSION_PGBOUNCER-PG_BUILDNUM_PGBOUNCER-linux.bin</origin>
            </distributionFile>
          </distributionFileList>
        </folder>

        <!-- linux-x64-->

        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>pgbouncerlinux-x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux-x64/pgbouncer-PG_VERSION_PGBOUNCER-PG_BUILDNUM_PGBOUNCER-linux-x64.bin</origin>
            </distributionFile>
          </distributionFileList>
        </folder>

        <!-- MAC: Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>pgbouncerosx</name>
          <platforms>osx</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/osx/pgbouncer-PG_VERSION_PGBOUNCER-PG_BUILDNUM_PGBOUNCER-osx.app</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>

        <!-- Windows -->
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>pgbouncerwindows</name>
          <platforms>windows</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/windows/pgbouncer-PG_VERSION_PGBOUNCER-PG_BUILDNUM_PGBOUNCER-windows.exe</origin>
            </distributionFile>
          </distributionFileList>
        </folder>
      </folderList>
      <componentSelectionValidationActionList>
        <throwError>
          <text>${msg(dbserver.required.pgerror)}</text>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(dbserver).selected}</text>
              <value>0</value>
            </compareText>
            <fileTest>
              <path>${installdir}/bin/psql</path>
              <condition>not_exists</condition>
            </fileTest>
            <compareText>
              <text>${platform_name}</text>
              <logic>does_not_equal</logic>
              <value>windows</value>
            </compareText>
          </ruleList>
        </throwError>
        <throwError>
          <text>${msg(dbserver.required.pgerror)}</text>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(dbserver).selected}</text>
              <value>0</value>
            </compareText>
            <fileTest>
              <path>${installdir}\bin\psql.exe</path>
              <condition>not_exists</condition>
            </fileTest>
            <compareText>
              <text>${platform_name}</text>
              <logic>equals</logic>
              <value>windows</value>
            </compareText>
          </ruleList>
        </throwError>
        <setInstallerVariable>
          <name>noComponentSelected</name>
          <persist>1</persist>
          <value>false</value>
        </setInstallerVariable>
      </componentSelectionValidationActionList>
    </component>

    <!-- pgmemcache -->
    <component>
      <name>pgmemcache</name>
      <description>pgMemcache</description>
      <detailedDescription>A caching library for PostgreSQL</detailedDescription>
      <canBeEdited>1</canBeEdited>
      <selected>1</selected>
      <show>1</show>
      <folderList>
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>pgmemcachelinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux/pgmemcache-pgPG_CURRENT_VERSION-PG_VERSION_PGMEMCACHE-PG_BUILDNUM_PGMEMCACHE-linux.bin</origin>
            </distributionFile>
          </distributionFileList>
        </folder>

        <!-- linux-x64-->

        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>pgmemcachelinux-x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux-x64/pgmemcache-pgPG_CURRENT_VERSION-PG_VERSION_PGMEMCACHE-PG_BUILDNUM_PGMEMCACHE-linux-x64.bin</origin>
            </distributionFile>
          </distributionFileList>
        </folder>

        <!-- MAC: Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>pgmemcacheosx</name>
          <platforms>osx</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/osx/pgmemcache-pgPG_CURRENT_VERSION-PG_VERSION_PGMEMCACHE-PG_BUILDNUM_PGMEMCACHE-osx.app</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
      </folderList>
      <componentSelectionValidationActionList>
        <throwError>
          <text>${msg(dbserver.required.pgerror)}</text>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(dbserver).selected}</text>
              <value>0</value>
            </compareText>
            <fileTest>
              <path>${installdir}/bin/psql</path>
              <condition>not_exists</condition>
            </fileTest>
            <compareText>
              <text>${platform_name}</text>
              <logic>does_not_equal</logic>
              <value>windows</value>
            </compareText>
          </ruleList>
        </throwError>

        <throwError>
          <text>${msg(dbserver.required.pgerror)}</text>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(dbserver).selected}</text>
              <value>0</value>
            </compareText>
            <fileTest>
              <path>${installdir}\bin\psql.exe</path>
              <condition>not_exists</condition>
            </fileTest>
            <compareText>
              <text>${platform_name}</text>
              <logic>equals</logic>
              <value>windows</value>
            </compareText>
          </ruleList>
        </throwError>
        <setInstallerVariable>
          <name>noComponentSelected</name>
          <persist>1</persist>
          <value>false</value>
        </setInstallerVariable>
      </componentSelectionValidationActionList>
    </component>

    <!-- pgAgent -->
    <component>
      <name>pgagent</name>
      <description>pgAgent</description>
      <detailedDescription>A job scheduler for PostgreSQL</detailedDescription>
      <canBeEdited>1</canBeEdited>
      <selected>1</selected>
      <show>1</show>
      <folderList>
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>pgagentlinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux/pgagent-PG_VERSION_PGAGENT-PG_BUILDNUM_PGAGENT-linux.bin</origin>
            </distributionFile>
          </distributionFileList>
        </folder>

        <!-- linux-x64-->

        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>pgagentlinux-x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux-x64/pgagent-PG_VERSION_PGAGENT-PG_BUILDNUM_PGAGENT-linux-x64.bin</origin>
            </distributionFile>
          </distributionFileList>
        </folder>

        <!-- MAC: Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>pgagentosx</name>
          <platforms>osx</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/osx/pgagent-PG_VERSION_PGAGENT-PG_BUILDNUM_PGAGENT-osx.app</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>

        <!-- Windows -->
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>pgagentwindows</name>
          <platforms>windows</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/windows/pgagent-PG_VERSION_PGAGENT-PG_BUILDNUM_PGAGENT-windows.exe</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/windows/scripts/validateuser.exe</origin>
            </distributionFile>
          </distributionFileList>
        </folder>
      </folderList>
      <componentSelectionValidationActionList>
        <throwError>
          <text>${msg(dbserver.required.pgerror)}</text>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(dbserver).selected}</text>
              <value>0</value>
            </compareText>
            <fileTest>
              <path>${installdir}/bin/psql</path>
              <condition>not_exists</condition>
            </fileTest>
            <compareText>
              <text>${platform_name}</text>
              <logic>does_not_equal</logic>
              <value>windows</value>
            </compareText>
          </ruleList>
        </throwError>

        <throwError>
          <text>${msg(dbserver.required.pgerror)}</text>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(dbserver).selected}</text>
              <value>0</value>
            </compareText>
            <fileTest>
              <path>${installdir}\bin\psql.exe</path>
              <condition>not_exists</condition>
            </fileTest>
            <compareText>
              <text>${platform_name}</text>
              <logic>equals</logic>
              <value>windows</value>
            </compareText>
          </ruleList>
        </throwError>
        <setInstallerVariable>
          <name>noComponentSelected</name>
          <persist>1</persist>
          <value>false</value>
        </setInstallerVariable>
      </componentSelectionValidationActionList>
    </component>

    <!-- pg_migrator -->
    <component>
      <name>pgmigrator</name>
      <description>pg_migrator</description>
      <detailedDescription>Tool for migration from an old release of PostgreSQL to a new release</detailedDescription>
      <canBeEdited>1</canBeEdited>
      <selected>1</selected>
      <show>1</show>
      <folderList>
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>pgmigratorlinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux/pgmigrator-PG_VERSION_PGMIGRATOR-PG_BUILDNUM_PGMIGRATOR-linux.bin</origin>
            </distributionFile>
          </distributionFileList>
        </folder>

        <!-- linux-x64-->

        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>pgmigratorlinux-x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux-x64/pgmigrator-PG_VERSION_PGMIGRATOR-PG_BUILDNUM_PGMIGRATOR-linux-x64.bin</origin>
            </distributionFile>
          </distributionFileList>
        </folder>

        <!-- MAC: Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>pgmigratorosx</name>
          <platforms>osx</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/osx/pgmigrator-PG_VERSION_PGMIGRATOR-PG_BUILDNUM_PGMIGRATOR-osx.app</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>

        <!-- Windows -->
        <folder>
          <description>Program Files</description>
          <destination>${system_temp_directory}/postgresplus</destination>
          <name>pgmigratorwindows</name>
          <platforms>windows</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/windows/pgmigrator-PG_VERSION_PGMIGRATOR-PG_BUILDNUM_PGMIGRATOR-windows.exe</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/windows/scripts/validateuser.exe</origin>
            </distributionFile>
          </distributionFileList>
        </folder>
      </folderList>
      <componentSelectionValidationActionList>
        <throwError>
          <text>${msg(dbserver.required.pgerror)}</text>
          <ruleList>
            <isFalse value="${component(dbserver).selected}"/>
            <fileTest path="${installdir}/bin/psql" condition="not_exists"/>
            <compareText text="${platform_name}" logic="does_not_equal" value="windows"/>
          </ruleList>
        </throwError>

        <throwError>
          <text>${msg(dbserver.required.pgerror)}</text>
          <ruleList>
            <isFalse value="${component(dbserver).selected}"/>
            <fileTest path="${installdir}\bin\psql.exe" condition="not_exists"/>
            <compareText text="${platform_name}" logic="equals" value="windows"/>
          </ruleList>
        </throwError>
        <setInstallerVariable>
          <name>noComponentSelected</name>
          <persist>1</persist>
          <value>false</value>
        </setInstallerVariable>
      </componentSelectionValidationActionList>
    </component>

  </componentList>

  <parameterList>

    <stringParameter name="originalplatform" ask="0" cliOptionShow="0">
      <description></description>
      <explanation></explanation>
      <value></value>
      <default></default>
      <allowEmptyValue>1</allowEmptyValue>
      <width>30</width>
    </stringParameter>

    <!-- Installation directory. Only show if ${iBaseDirectory} is empty -->
    <directoryParameter>
      <name>installdir</name>
      <description>Installer.Parameter.installdir.description</description>
      <explanation>Installer.Parameter.installdir.explanation</explanation>
      <value>${default_installdir}</value>
      <default>${default_installdir}</default>
      <allowEmptyValue>0</allowEmptyValue>
      <ask>yes</ask>
      <cliOptionName>prefix</cliOptionName>
      <mustBeWritable>yes</mustBeWritable>
      <mustExist>0</mustExist>
      <width>30</width>

      <!-- Note that this validation occurs in a postShowPageActionList due     
           to some odd behaviour in InstallBuilder in the way <allowEmptyValue> 
           interacts with default values, on the advice of tech support         
           !WIN: Always check if the installation directory path looks valid 
      -->
      <postShowPageActionList>
        <actionGroup>
          <actionList>
            <showWarning>
              <text>${msg(error.install.directory.invalid)}</text>
            </showWarning>
            <setInstallerVariable name="next_page" value="installdir">
              <persist>1</persist>
            </setInstallerVariable>
          </actionList>
          <ruleList>
            <regExMatch>
              <logic>does_not_match</logic>
              <pattern>^/([0-9a-zA-Z_/\.\-]*)$</pattern>
              <text>${installdir}</text>
            </regExMatch>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </actionGroup>
        <actionGroup>
          <actionList>
            <showWarning>
              <text>${msg(error.install.directory.invalid.linux)}</text>
            </showWarning>
            <setInstallerVariable name="next_page" value="installdir">
              <persist>1</persist>
            </setInstallerVariable>
          </actionList>
          <ruleList>
            <regExMatch>
              <logic>matches</logic>
              <pattern>^/+(usr)?$</pattern>
              <text>${installdir}</text>
            </regExMatch>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </actionGroup>


        <!-- WIN: Always check if the installation directory path looks valid -->
        <actionGroup>
          <actionList>
            <showWarning>
              <text>${msg(error.install.directory.invalid)}</text>
            </showWarning>
            <setInstallerVariable name="next_page" value="installdir">
              <persist>1</persist>
            </setInstallerVariable>
          </actionList>
          <ruleList>
            <regExMatch>
              <logic>does_not_match</logic>
              <pattern>^([a-zA-Z]:)\\([0-9a-zA-Z_\\\s\.\-]*)$</pattern>
              <text>${installdir}</text>
            </regExMatch>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </actionGroup>
        <!-- Switch to upgrade mode -->
        <actionGroup>
          <actionList>
            <setInstallerVariable>
              <name>IsUpgrade</name>
              <value>1</value>
            </setInstallerVariable>
            <logMessage>
              <text>Switching to upgrade mode with cluster: ${datadir}</text>
            </logMessage>
          </actionList>

          <!-- We only check the data directory if it exists and isn't empty -->
          <ruleList>
            <fileExists>
              <path>${installdir}\data</path>
            </fileExists>
            <fileTest>
              <path>${installdir}\data</path>
              <condition>is_not_empty</condition>
            </fileTest>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </actionGroup>
        <!-- End of data directory check -->

      </postShowPageActionList>
      <ruleList>
        <stringTest>
          <text>${iBaseDirectory}</text>
          <type>empty</type>
        </stringTest>
      </ruleList>
    </directoryParameter>

    <!-- Explain that we're using an existing installation directory -->
    <labelParameter>
      <name>upgrade</name>
      <title>${msg(upgrade.existing.installation.title)}</title>
      <description>${msg(upgrade.existing.installation.description)}</description>
      <explanation></explanation>
      <image></image>
      <preShowPageActionList>
        <!-- Set the installation directory to the existing location-->
        <setInstallerVariable>
          <name>installdir</name>
          <persist>1</persist>
          <value>${iBaseDirectory}</value>
        </setInstallerVariable>
      </preShowPageActionList>
      <ruleList>
        <stringTest>
          <text>${iBaseDirectory}</text>
          <type>not_empty</type>
        </stringTest>
      </ruleList>
    </labelParameter>

    <!--Value Added Screen -->
    <parameterGroup>
      <name>valueAddedServices</name>
      <title>${msg(valueadded.title.value)}</title>
      <explanation></explanation>
      <value></value>
      <default></default>
      <parameterList>
        <booleanParameter>
          <name>dbInstallTune</name>
          <description>${msg(valueadded.dbInstallTuning.rb1.value)} </description>
          <explanation></explanation>
          <value></value>
          <default>0</default>
          <displayStyle>checkbox-left</displayStyle>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(dbserver).selected}</text>
              <value>1</value>
            </compareText>
          </ruleList>
        </booleanParameter>
        <labelParameter>
          <name>lblInstallTune</name>
          <description></description>
          <explanation>${msg(valueadded.dbInstallTuning.lbl.value)}</explanation>
          <image></image>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(dbserver).selected}</text>
              <value>1</value>
            </compareText>
          </ruleList>
        </labelParameter>
        <booleanParameter>
          <name>updateNotification</name>
          <description>${msg(valueadded.updateNotification.rb2.value)}</description>
          <explanation></explanation>
          <value></value>
          <default>0</default>
          <displayStyle>checkbox-left</displayStyle>
        </booleanParameter>
        <labelParameter>
          <name>lblUpdateNotification</name>
          <description></description>
          <explanation>${msg(valueadded.updateNotification.lbl.value)}</explanation>
          <image></image>
        </labelParameter>
      </parameterList>
      <postShowPageActionList>
        <actionGroup>
          <actionList>
            <setInstallerVariable>
              <name>dbInstallTune</name>
              <persist>1</persist>
              <value>0</value>
            </setInstallerVariable>
          </actionList>
          <ruleList>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${component(dbserver).selected}</text>
              <value>1</value>
            </compareText>
          </ruleList>
        </actionGroup>
        <actionGroup>
          <actionList>
            <propertiesFileGet>
              <file>${system_temp_directory}/postgresplus/a.properties</file>
              <key>dbser_guid</key>
              <variable>dbserver_guid</variable>
            </propertiesFileGet>
          </actionList>
        </actionGroup>
        <actionGroup>
          <actionList>
            <propertiesFileGet>
              <file>${system_temp_directory}/postgresplus/sysinfo.properties</file>
              <key>PROCESSOR_ARCH</key>
              <variable>processor_arch</variable>
            </propertiesFileGet>
            <propertiesFileGet>
              <file>${system_temp_directory}/postgresplus/sysinfo.properties</file>
              <key>TOTAL_MEM_IN_GB</key>
              <variable>total_mem_in_gb</variable>
            </propertiesFileGet>
            <propertiesFileGet>
              <file>${system_temp_directory}/postgresplus/sysinfo.properties</file>
              <key>OS</key>
              <variable>os</variable>
            </propertiesFileGet>
            <propertiesFileGet>
              <file>${system_temp_directory}/postgresplus/sysinfo.properties</file>
              <key>NUMBER_OF_PROCESSORS</key>
              <variable>number_of_processors</variable>
            </propertiesFileGet>
            <propertiesFileGet>
              <file>${system_temp_directory}/postgresplus/sysinfo.properties</file>
              <key>PROCESSOR_TYPE</key>
              <variable>processor_type</variable>
            </propertiesFileGet>
            <propertiesFileGet>
              <file>${system_temp_directory}/postgresplus/sysinfo.properties</file>
              <key>LANGUAGE</key>
              <variable>language</variable>
            </propertiesFileGet>
            <propertiesFileGet>
              <file>${system_temp_directory}/postgresplus/sysinfo.properties</file>
              <key>SHARED_MEMORY_IN_MB</key>
              <variable>shared_memory_in_mb</variable>
            </propertiesFileGet>
          </actionList>
          <ruleList>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </actionGroup>
        <actionGroup>
          <actionList>
            <setInstallerVariable>
              <name>dbInstallTuneBool</name>
              <persist>1</persist>
              <value>true</value>
            </setInstallerVariable>
          </actionList>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${dbInstallTune}</text>
              <value>1</value>
            </compareText>
          </ruleList>
        </actionGroup>
        <actionGroup>
          <actionList>
            <setInstallerVariable>
              <name>dbInstallTuneBool</name>
              <persist>1</persist>
              <value>false</value>
            </setInstallerVariable>
          </actionList>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${dbInstallTune}</text>
              <value>0</value>
            </compareText>
          </ruleList>
        </actionGroup>
        <actionGroup>
          <actionList>
            <setInstallerVariable>
              <name>updateNotificationBool</name>
              <persist>1</persist>
              <value>true</value>
            </setInstallerVariable>
          </actionList>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${updateNotification}</text>
              <value>1</value>
            </compareText>
          </ruleList>
        </actionGroup>
        <actionGroup>
          <actionList>
            <setInstallerVariable>
              <name>updateNotificationBool</name>
              <persist>1</persist>
              <value>false</value>
            </setInstallerVariable>
          </actionList>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${updateNotification}</text>
              <value>0</value>
            </compareText>
          </ruleList>
        </actionGroup>
        <setInstallerVariable>
          <name>showAuthenticateScreen</name>
          <persist>0</persist>
          <value>1</value>
          <ruleEvaluationLogic>or</ruleEvaluationLogic>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${dbInstallTune}</text>
              <value>1</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${updateNotification}</text>
              <value>1</value>
            </compareText>
          </ruleList>
        </setInstallerVariable>
        <setInstallerVariable>
          <name>showAuthenticateScreen</name>
          <persist>0</persist>
          <value>0</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${dbInstallTune}</text>
              <value>0</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${updateNotification}</text>
              <value>0</value>
            </compareText>
          </ruleList>
        </setInstallerVariable>
        <setInstallerVariable>
          <name>showNextPage</name>
          <persist>1</persist>
          <value>1</value>
          <ruleEvaluationLogic>or</ruleEvaluationLogic>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(dbserver).selected}</text>
              <value>1</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${component(postgis).selected}</text>
              <value>1</value>
            </compareText>
          </ruleList>
        </setInstallerVariable>
        <setInstallerVariable>
          <name>showNextPage</name>
          <persist>1</persist>
          <value>0</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(dbserver).selected}</text>
              <value>0</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${component(postgis).selected}</text>
              <value>0</value>
            </compareText>
          </ruleList>
        </setInstallerVariable>
        <setInstallerVariable>
          <name>showNextPage2</name>
          <persist>1</persist>
          <value>1</value>
          <ruleEvaluationLogic>or</ruleEvaluationLogic>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(dbserver).selected}</text>
              <value>1</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${component(postgis).selected}</text>
              <value>1</value>
            </compareText>
          </ruleList>
        </setInstallerVariable>
        <setInstallerVariable>
          <name>showNextPage2</name>
          <persist>1</persist>
          <value>0</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(dbserver).selected}</text>
              <value>0</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${component(postgis).selected}</text>
              <value>0</value>
            </compareText>
          </ruleList>
        </setInstallerVariable>

        <!-- authenticateUser variable is created to check whether we should call webservice to authenticate user or not-->

        <setInstallerVariable>
          <name>authenticateUser</name>
          <persist>1</persist>
          <value>1</value>
          <ruleEvaluationLogic>or</ruleEvaluationLogic>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${dbInstallTune}</text>
              <value>1</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${updateNotification}</text>
              <value>1</value>
            </compareText>
          </ruleList>
        </setInstallerVariable>
        <setInstallerVariable>
          <name>authenticateUser</name>
          <persist>1</persist>
          <value>0</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${dbInstallTune}</text>
              <value>0</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${updateNotification}</text>
              <value>0</value>
            </compareText>
          </ruleList>
        </setInstallerVariable>
      </postShowPageActionList>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${IsUpgrade}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${component(dbserver).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${noComponentSelected}</text>
          <value>false</value>
        </compareText>
      </ruleList>
    </parameterGroup>

    <!-- User Authentication -->

    <parameterGroup>
      <name>userAuthentication</name>
      <title>${msg(existingUser.title.value)}</title>
      <parameterList>
        <labelParameter>
          <name>lblcreateUserAccount</name>
          <explanation>${msg(existingUser.lbl.text.value)}</explanation>
        </labelParameter>
        <booleanParameter>
          <name>rbExistingUser</name>
          <ask>yes</ask>
          <default>0</default>
          <value>1</value>
          <description>${msg(userAuth.existing.user.lbl.value)}</description>
        </booleanParameter>
      </parameterList>
      <postShowPageActionList>
        <launchBrowser>
          <url>https://www.enterprisedb.com/create-account.do</url>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${rbExistingUser}</text>
              <value>0</value>
            </compareText>
          </ruleList>
        </launchBrowser>
      </postShowPageActionList>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${showAuthenticateScreen}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${IsUpgrade}</text>
          <value>1</value>
        </compareText>
      </ruleList>
    </parameterGroup>
    <parameterGroup>
      <name>userAuthenticationField</name>
      <title>${msg(userAuth.title.value)}</title>
      <explanation></explanation>
      <value></value>
      <default></default>
      <parameterList>
        <labelParameter>
          <name>lblemail</name>
          <description></description>
          <explanation>${msg(lbl.email.value)}</explanation>
          <image></image>
        </labelParameter>
        <stringParameter>
          <name>existingEmail</name>
          <description>${msg(userAuth.email.value)}</description>
          <explanation></explanation>
          <value></value>
          <default></default>
          <allowEmptyValue>1</allowEmptyValue>
          <width>30</width>
          <validationActionList>
            <throwError>
              <text>${msg(error.invalid.email.value)}</text>
              <ruleList>
                <regExMatch>
                  <logic>does_not_match</logic>
                  <pattern>^[a-zA-Z][\w\.-]*[a-zA-Z0-9]@[a-zA-Z0-9][\w\.-]*[a-zA-Z0-9]\.[a-zA-Z][a-zA-Z\.]*[a-zA-Z]$</pattern>
                  <text>${existingEmail}</text>
                </regExMatch>
              </ruleList>
            </throwError>
          </validationActionList>
        </stringParameter>
        <passwordParameter>
          <name>existingpassword</name>
          <description>${msg(userAuth.existing.password.value)}</description>
          <explanation></explanation>
          <value></value>
          <default>${defaultpassword}</default>
          <allowEmptyValue>0</allowEmptyValue>
          <ask>yes</ask>
          <askForConfirmation>0</askForConfirmation>
          <cliOptionName>existingpassword</cliOptionName>
          <descriptionRetype></descriptionRetype>
          <width>30</width>
          <validationActionList>
            <throwError>
              <text>${msg(error.invalid.password.value)}</text>
              <ruleEvaluationLogic>or</ruleEvaluationLogic>
              <ruleList>
                <stringTest>
                  <text>${existingpassword}</text>
                  <type>empty</type>
                </stringTest>
                <regExMatch>
                  <logic>matches</logic>
                  <pattern>\s+</pattern>
                  <text>${existingpassword}</text>
                </regExMatch>
              </ruleList>
            </throwError>
          </validationActionList>
        </passwordParameter>
      </parameterList>
      <postShowPageActionList>
        <actionGroup>
          <actionList>
            <setInstallerVariable name="features" value="DBServer">
              <ruleList>
                <isTrue value="${component(dbserver).selected}"/>
              </ruleList>
            </setInstallerVariable>
            <setInstallerVariable name="features" value="${features},StackBuilderPlus">
              <ruleList>
                <isTrue value="${component(stackbuilderplus).selected}"/>
              </ruleList>
            </setInstallerVariable>
            <setInstallerVariable name="features" value="${features},Slony">
              <ruleList>
                <isTrue value="${component(slony).selected}"/>
              </ruleList>
            </setInstallerVariable>
            <setInstallerVariable name="features" value="${features},pgJdbc">
              <ruleList>
                <isTrue value="${component(pgJdbc).selected}"/>
              </ruleList>
            </setInstallerVariable>
            <setInstallerVariable name="features" value="${features},postGIS">
              <ruleList>
                <isTrue value="${component(postgis).selected}"/>
              </ruleList>
            </setInstallerVariable>
            <setInstallerVariable name="features" value="${features},psqlODBC">
              <ruleList>
                <isTrue value="${component(psqlOdbc).selected}"/>
              </ruleList>
            </setInstallerVariable>
            <setInstallerVariable name="features" value="${features},Npgsql">
              <ruleList>
                <isTrue value="${component(npgsql).selected}"/>
              </ruleList>
            </setInstallerVariable>
            <setInstallerVariable name="features" value="${features},pgbouncer">
              <ruleList>
                <isTrue value="${component(pgbouncer).selected}"/>
              </ruleList>
            </setInstallerVariable>
            <setInstallerVariable name="features" value="${features},pgmemcache">
              <ruleList>
                <isTrue value="${component(pgmemcache).selected}"/>
              </ruleList>
            </setInstallerVariable>
            <setInstallerVariable name="features" value="${features},pgAgent">
              <ruleList>
                <isTrue value="${component(pgagent).selected}"/>
              </ruleList>
            </setInstallerVariable>
            <setInstallerVariable name="features" value="${features},pg_migrator">
              <ruleList>
                <isTrue value="${component(pgmigrator).selected}"/>
              </ruleList>
            </setInstallerVariable>
            <setInstallerVariableFromRegEx name="features" pattern="^," substitution="" text="${features}">
              <ruleList>
                  <regExMatch logic="matches" pattern="^,([0-9a-zA-Z_/\.\-]*)$" text="${features}"/>
              </ruleList>
            </setInstallerVariableFromRegEx>

            <logMessage>
              <text>Validating Existing User ...</text>
              <ruleList>
                <compareText>
                  <logic>does_not_equal</logic>
                  <text>${platform_name}</text>
                  <value>windows</value>
                </compareText>
                <compareText>
                  <logic>equals</logic>
                  <text>${authenticateUser}</text>
                  <value>1</value>
                </compareText>
              </ruleList>
            </logMessage>

            <logMessage>
              <text>Passing values:"${dbserver_guid}" "${features}" "${dbInstallTuneBool}" "${updateNotificationBool}" "${language}" "${os}" "${number_of_processors}" "${processor_arch}" "${processor_type}" "${total_mem_in_gb}" "${shared_memory_in_mb}" "${existingEmail}" "password"</text>
              <ruleList>
                <compareText>
                  <logic>does_not_equal</logic>
                  <text>${platform_name}</text>
                  <value>windows</value>
                </compareText>
                <compareText>
                  <logic>equals</logic>
                  <text>${authenticateUser}</text>
                  <value>1</value>
                </compareText>
              </ruleList>
            </logMessage>

            <setInstallerVariableFromScriptOutput>
              <customErrorMessage>${msg(pgplus.ws.error)}</customErrorMessage>
              <exec>${system_temp_directory}/postgresplus/validateUserClient.o</exec>
              <execArgs>"${dbserver_guid}" "${features}" "${dbInstallTuneBool}" "${updateNotificationBool}" "${language}" "${os}" "${number_of_processors}" "${processor_arch}" "${processor_type}" "${total_mem_in_gb}" "${shared_memory_in_mb}" "${existingEmail}" "${existingpassword}"</execArgs>
              <name>ws_existing_result</name>
              <workingDirectory>${system_temp_directory}/postgresplus</workingDirectory>
              <ruleList>
                <compareText>
                  <logic>equals</logic>
                  <text>${platform_name}</text>
                  <value>osx</value>
                </compareText>
                <compareText>
                  <logic>equals</logic>
                  <text>${authenticateUser}</text>
                  <value>1</value>
                </compareText>
              </ruleList>
            </setInstallerVariableFromScriptOutput>

            <setInstallerVariableFromScriptOutput>
              <customErrorMessage>${msg(pgplus.ws.error)}</customErrorMessage>
              <exec>${system_temp_directory}/postgresplus/runvalidateUserClient.sh</exec>
              <execArgs>"${system_temp_directory}/postgresplus" "${dbserver_guid}" "${features}" "${dbInstallTuneBool}" "${updateNotificationBool}" "${language}" "${os}" "${number_of_processors}" "${processor_arch}" "${processor_type}" "${total_mem_in_gb}" "${shared_memory_in_mb}" "${existingEmail}" "${existingpassword}"</execArgs>
              <name>ws_existing_result</name>
              <workingDirectory>${system_temp_directory}/postgresplus</workingDirectory>
              <ruleList>
                <compareText>
                  <logic>contains</logic>
                  <text>${platform_name}</text>
                  <value>linux</value>
                </compareText>
                <compareText>
                  <logic>equals</logic>
                  <text>${authenticateUser}</text>
                  <value>1</value>
                </compareText>
              </ruleList>
            </setInstallerVariableFromScriptOutput>

            <logMessage>
              <text>Validating Existing User ...</text>
              <ruleList>
                <compareText>
                  <logic>equals</logic>
                  <text>${platform_name}</text>
                  <value>windows</value>
                </compareText>
                <compareText>
                  <logic>equals</logic>
                  <text>${authenticateUser}</text>
                  <value>1</value>
                </compareText>
              </ruleList>
            </logMessage>

            <logMessage>
              <text>Passing values:"${features}" "${dbInstallTuneBool}" "${updateNotificationBool}" "${existingEmail}" "password" "${dbserver_guid}"</text>
              <ruleList>
                <compareText>
                  <logic>equals</logic>
                  <text>${platform_name}</text>
                  <value>windows</value>
                </compareText>
                <compareText>
                  <logic>equals</logic>
                  <text>${authenticateUser}</text>
                  <value>1</value>
                </compareText>
              </ruleList>
            </logMessage>

            <setInstallerVariableFromScriptOutput>
              <customErrorMessage>${msg(pgplus.ws.error)}</customErrorMessage>
              <exec>${system_temp_directory}\postgresplus\validateUserClient.exe</exec>
              <execArgs>"${features}" "${dbInstallTuneBool}" "${updateNotificationBool}" "${existingEmail}" "${existingpassword}" "${dbserver_guid}"</execArgs>
              <name>ws_existing_result</name>
              <workingDirectory>${system_temp_directory}\postgresplus</workingDirectory>
              <ruleList>
                <compareText>
                  <logic>equals</logic>
                  <text>${platform_name}</text>
                  <value>windows</value>
                </compareText>
                <compareText>
                  <logic>equals</logic>
                  <text>${authenticateUser}</text>
                  <value>1</value>
                </compareText>
              </ruleList>
            </setInstallerVariableFromScriptOutput>

            <logMessage>
              <text>Returned value=${ws_existing_result}</text>
              <ruleList>
                <compareText>
                  <logic>equals</logic>
                  <text>${authenticateUser}</text>
                  <value>1</value>
                </compareText>
              </ruleList>
            </logMessage>
            <throwError text="${msg(ws.email.not.authenticated)}">
              <abortOnError>0</abortOnError>
              <ruleList>
                <compareText>
                  <logic>equals</logic>
                  <text>${ws_existing_result}</text>
                  <value>1</value>
                </compareText>
              </ruleList>
            </throwError>
            <throwError>
              <abortOnError>0</abortOnError>
              <text>${msg(ws.email.not.valid)}</text>
              <ruleList>
                <compareText>
                  <logic>equals</logic>
                  <text>${ws_existing_result}</text>
                  <value>2</value>
                </compareText>
              </ruleList>
            </throwError>
            <throwError>
              <abortOnError>0</abortOnError>
              <text>${msg(ws.email.already.exists)}</text>
              <ruleList>
                <compareText>
                  <logic>equals</logic>
                  <text>${ws_existing_result}</text>
                  <value>3</value>
                </compareText>
              </ruleList>
            </throwError>
            <throwError>
              <abortOnError>0</abortOnError>
              <text>${msg(ws.exception.from.server)}</text>
              <ruleList>
                <compareText>
                  <logic>equals</logic>
                  <text>${ws_existing_result}</text>
                  <value>4</value>
                </compareText>
              </ruleList>
            </throwError>
            <throwError>
              <abortOnError>0</abortOnError>
              <text>${msg(ws.internet.not.connected)}</text>
              <ruleList>
                <compareText>
                  <logic>equals</logic>
                  <text>${ws_existing_result}</text>
                  <value></value>
                </compareText>
              </ruleList>
            </throwError>
            <setInstallerVariable name="next_page" value="userAuthenticationField">
              <persist>0</persist>
              <ruleEvaluationLogic>or</ruleEvaluationLogic>
              <ruleList>
                <compareText>
                  <logic>does_not_equal</logic>
                  <text>${ws_existing_result}</text>
                  <value>0</value>
                </compareText>
                <compareText>
                  <logic>does_not_equal</logic>
                  <text>${ws_existing_result}</text>
                  <value>00</value>
                </compareText>
              </ruleList>
            </setInstallerVariable>
          </actionList>
        </actionGroup>
      </postShowPageActionList>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${showAuthenticateScreen}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${IsUpgrade}</text>
          <value>1</value>
        </compareText>
      </ruleList>
    </parameterGroup>

    <!-- Server Utilization -->
    <parameterGroup>
      <name>server_utilization</name>
      <title>${msg(server_utilization.title.value)}</title>
      <explanation></explanation>
      <value></value>
      <default></default>
      <parameterList>
        <labelParameter>
          <name>lblServerUtilization_exp</name>
          <description></description>
          <explanation>${msg(server_utilization.explaination.lbl.value)}</explanation>
          <image></image>
        </labelParameter>
        <choiceParameter>
          <name>rbServerUtil</name>
          <description></description>
          <explanation></explanation>
          <value></value>
          <default>66</default>
          <allowEmptyValue>1</allowEmptyValue>
          <displayType>radiobuttons</displayType>
          <width>30</width>
          <optionList>
            <option>
              <description></description>
              <image></image>
              <text>${msg(server_utilization.development.title.value)}</text>
              <value>33</value>
            </option>
            <option>
              <description></description>
              <image></image>
              <text>${msg(server_utilization.mixed.title.value)}</text>
              <value>66</value>
            </option>
            <option>
              <description></description>
              <image></image>
              <text>${msg(server_utilization.dedicated.title.value)}</text>
              <value>100</value>
            </option>
          </optionList>
        </choiceParameter>
      </parameterList>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${dbInstallTune}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${ws_existing_result}</text>
          <value>0</value>
        </compareText>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${IsUpgrade}</text>
          <value>1</value>
        </compareText>
      </ruleList>
    </parameterGroup>

    <!-- Workload Profile -->
    <parameterGroup>
      <name>workload_profile</name>
      <title>${msg(workload_profile.title.value)}</title>
      <explanation></explanation>
      <value></value>
      <default></default>
      <parameterList>
        <labelParameter>
          <name>lblWorkload_exp</name>
          <description></description>
          <explanation>${msg(workload_profile.explaination.lbl.value)}</explanation>
          <image></image>
        </labelParameter>
        <choiceParameter>
          <name>rbWorkload</name>
          <description></description>
          <explanation></explanation>
          <value></value>
          <default>MIXED</default>
          <allowEmptyValue>1</allowEmptyValue>
          <displayType>radiobuttons</displayType>
          <width>30</width>
          <optionList>
            <option>
              <description></description>
              <image></image>
              <text>${msg(workload_profile.transaction.title.value)}</text>
              <value>OLTP</value>
            </option>
            <option>
              <description></description>
              <image></image>
              <text>${msg(workload_profile.general.title.value)}</text>
              <value>MIXED</value>
            </option>
            <option>
              <description></description>
              <image></image>
              <text>${msg(workload_profile.reporting.title.value)}</text>
              <value>REPORTING</value>
            </option>
          </optionList>
        </choiceParameter>
      </parameterList>
      <postShowPageActionList>
        <actionGroup>
          <actionList>
            <setInstallerVariableFromScriptOutput>
              <customErrorMessage>${msg(pgplus.ws.error)}</customErrorMessage>
              <exec>${system_temp_directory}/postgresplus/isUserValidated.o</exec>
              <execArgs>"${existingEmail}"</execArgs>
              <name>ws_validated_result</name>
              <workingDirectory>${system_temp_directory}/postgresplus</workingDirectory>
              <ruleList>
                <compareText>
                  <logic>equals</logic>
                  <text>${platform_name}</text>
                  <value>osx</value>
                </compareText>
              </ruleList>
            </setInstallerVariableFromScriptOutput>
            <setInstallerVariableFromScriptOutput>
              <customErrorMessage>${msg(pgplus.ws.error)}</customErrorMessage>
              <exec>${system_temp_directory}/postgresplus/runisUserValidated.sh</exec>
              <execArgs>"${system_temp_directory}/postgresplus" "${existingEmail}"</execArgs>
              <name>ws_validated_result</name>
              <workingDirectory>${system_temp_directory}/postgresplus</workingDirectory>
              <ruleList>
                <compareText>
                  <logic>contains</logic>
                  <text>${platform_name}</text>
                  <value>linux</value>
                </compareText>
              </ruleList>
            </setInstallerVariableFromScriptOutput>

            <!--Windows scripts -->
            <setInstallerVariableFromScriptOutput>
              <customErrorMessage>${msg(pgplus.ws.error)}</customErrorMessage>
              <exec>${system_temp_directory}\postgresplus\isUserValidated.exe</exec>
              <execArgs>"${existingEmail}"</execArgs>
              <name>ws_validated_result</name>
              <workingDirectory>${system_temp_directory}\postgresplus</workingDirectory>
              <ruleList>
                <compareText>
                  <logic>equals</logic>
                  <text>${platform_name}</text>
                  <value>windows</value>
                </compareText>
              </ruleList>
            </setInstallerVariableFromScriptOutput>
            <throwError>
              <abortOnError>0</abortOnError>
              <text>${msg(ws.email.not.valid.dynatune)}</text>
              <ruleList>
                <compareText>
                  <logic>equals</logic>
                  <text>${ws_validated_result}</text>
                  <value>false</value>
                </compareText>
              </ruleList>
            </throwError>
            <setInstallerVariable name="next_page" value="workload_profile">
              <persist>0</persist>
              <ruleList>
                <compareText>
                  <logic>equals</logic>
                  <text>${ws_validated_result}</text>
                  <value>false</value>
                </compareText>
              </ruleList>
            </setInstallerVariable>
            <setInstallerVariable name="next_page" value="datadir">
              <persist>0</persist>
              <ruleList>
                <compareText>
                  <logic>equals</logic>
                  <text>${ws_validated_result}</text>
                  <value>true</value>
                </compareText>
              </ruleList>
            </setInstallerVariable>

            <logMessage>
              <text>Calling DynaTune WebService ...</text>
              <ruleList>
                <compareText>
                  <logic>does_not_equal</logic>
                  <text>${platform_name}</text>
                  <value>windows</value>
                </compareText>
              </ruleList>
            </logMessage>

            <logMessage>
              <text>Passing values:"${dbserver_guid}" "${rbServerUtil}" "${rbWorkload}" "${total_mem_in_gb}" "${shared_memory_in_mb}"</text>
              <ruleList>
                <compareText>
                  <logic>does_not_equal</logic>
                  <text>${platform_name}</text>
                  <value>windows</value>
                </compareText>
              </ruleList>
            </logMessage>

            <setInstallerVariableFromScriptOutput>
              <customErrorMessage>${msg(pgplus.ws.error)}</customErrorMessage>
              <exec>${system_temp_directory}/postgresplus/dynaTuneClient.o</exec>
              <execArgs>"${dbserver_guid}" "${rbServerUtil}" "${rbWorkload}" "${total_mem_in_gb}" "${shared_memory_in_mb}"</execArgs>
              <name>ws_dynatune_result</name>
              <workingDirectory>${system_temp_directory}/postgresplus</workingDirectory>
              <ruleList>
                <compareText>
                  <logic>equals</logic>
                  <text>${platform_name}</text>
                  <value>osx</value>
                </compareText>
              </ruleList>
            </setInstallerVariableFromScriptOutput>

            <setInstallerVariableFromScriptOutput>
              <customErrorMessage>${msg(pgplus.ws.error)}</customErrorMessage>
              <exec>${system_temp_directory}/postgresplus/rundynaTuneClient.sh</exec>
              <execArgs>"${system_temp_directory}/postgresplus" "${dbserver_guid}" "${rbServerUtil}" "${rbWorkload}" "${total_mem_in_gb}" "${shared_memory_in_mb}"</execArgs>
              <name>ws_dynatune_result</name>
              <workingDirectory>${system_temp_directory}/postgresplus</workingDirectory>
              <ruleList>
                <compareText>
                  <logic>contains</logic>
                  <text>${platform_name}</text>
                  <value>linux</value>
                </compareText>
              </ruleList>
            </setInstallerVariableFromScriptOutput>

            <logMessage>
              <text>Calling DynaTune WebService ...</text>
              <ruleList>
                <compareText>
                  <logic>equals</logic>
                  <text>${platform_name}</text>
                  <value>windows</value>
                </compareText>
              </ruleList>
            </logMessage>

            <logMessage>
              <text>Passing values:"${dbserver_guid}" "${rbServerUtil}" "${rbWorkload}"</text>
              <ruleList>
                <compareText>
                  <logic>equals</logic>
                  <text>${platform_name}</text>
                  <value>windows</value>
                </compareText>
              </ruleList>
            </logMessage>

            <setInstallerVariableFromScriptOutput>
              <customErrorMessage>${msg(pgplus.ws.error)}</customErrorMessage>
              <exec>${system_temp_directory}\postgresplus\getDynaTune.exe</exec>
              <execArgs>"${dbserver_guid}" "${rbServerUtil}" "${rbWorkload}"</execArgs>
              <name>ws_dynatune_result</name>
              <workingDirectory>${system_temp_directory}\postgresplus</workingDirectory>
              <ruleList>
                <compareText>
                  <logic>equals</logic>
                  <text>${platform_name}</text>
                  <value>windows</value>
                </compareText>
              </ruleList>
            </setInstallerVariableFromScriptOutput>
            <throwError>
              <abortOnError>0</abortOnError>
              <text>${msg(ws.internet.not.connected)}</text>
              <ruleList>
                <compareText>
                  <logic>equals</logic>
                  <text>${ws_dynatune_result}</text>
                  <value></value>
                </compareText>
              </ruleList>
            </throwError>

            <logMessage>
              <text>writing returned values to ${system_temp_directory}/postgresplus/dynaTune.properties</text>
            </logMessage>

            <writeFile>
              <path>${system_temp_directory}/postgresplus/dynaTune.properties</path>
              <text>${ws_dynatune_result}</text>
            </writeFile>

            <!--Read properties from dynaTune.properties -->
            <propertiesFileGet>
              <file>${system_temp_directory}/postgresplus/dynaTune.properties</file>
              <key>max_connections</key>
              <variable>max_connections_var</variable>
            </propertiesFileGet>
            <propertiesFileGet>
              <file>${system_temp_directory}/postgresplus/dynaTune.properties</file>
              <key>work_mem</key>
              <variable>work_mem_var</variable>
            </propertiesFileGet>
            <propertiesFileGet>
              <file>${system_temp_directory}/postgresplus/dynaTune.properties</file>
              <key>maintenance_work_mem</key>
              <variable>maintenance_work_mem_var</variable>
            </propertiesFileGet>
            <propertiesFileGet>
              <file>${system_temp_directory}/postgresplus/dynaTune.properties</file>
              <key>shared_buffers</key>
              <variable>shared_buffers_var</variable>
            </propertiesFileGet>
            <propertiesFileGet>
              <file>${system_temp_directory}/postgresplus/dynaTune.properties</file>
              <key>max_fsm_relations</key>
              <variable>max_fsm_relations_var</variable>
            </propertiesFileGet>
            <propertiesFileGet>
              <file>${system_temp_directory}/postgresplus/dynaTune.properties</file>
              <key>max_fsm_pages</key>
              <variable>max_fsm_pages_var</variable>
            </propertiesFileGet>
            <propertiesFileGet>
              <file>${system_temp_directory}/postgresplus/dynaTune.properties</file>
              <key>wal_buffers</key>
              <variable>wal_buffers_var</variable>
            </propertiesFileGet>
            <propertiesFileGet>
              <file>${system_temp_directory}/postgresplus/dynaTune.properties</file>
              <key>effective_cache_size</key>
              <variable>effective_cache_size_var</variable>
            </propertiesFileGet>
            <propertiesFileGet>
              <file>${system_temp_directory}/postgresplus/dynaTune.properties</file>
              <key>random_page_cost</key>
              <variable>random_page_cost_var</variable>
            </propertiesFileGet>
            <propertiesFileGet>
              <file>${system_temp_directory}/postgresplus/dynaTune.properties</file>
              <key>checkpoint_segments</key>
              <variable>checkpoint_segments_var</variable>
            </propertiesFileGet>
            <propertiesFileGet>
              <file>${system_temp_directory}/postgresplus/dynaTune.properties</file>
              <key>autovacuum_vacuum_threshold</key>
              <variable>autovacuum_vacuum_threshold_var</variable>
            </propertiesFileGet>
            <propertiesFileGet>
              <file>${system_temp_directory}/postgresplus/dynaTune.properties</file>
              <key>autovacuum_vacuum_scale_factor</key>
              <variable>autovacuum_vacuum_scale_factor_var</variable>
            </propertiesFileGet>
            <propertiesFileGet>
              <file>${system_temp_directory}/postgresplus/dynaTune.properties</file>
              <key>autovacuum_analyze_threshold</key>
              <variable>autovacuum_analyze_threshold_var</variable>
            </propertiesFileGet>
            <propertiesFileGet>
              <file>${system_temp_directory}/postgresplus/dynaTune.properties</file>
              <key>autovacuum_analyze_scale_factor</key>
              <variable>autovacuum_analyze_scale_factor_var</variable>
            </propertiesFileGet>
            <propertiesFileGet>
              <file>${system_temp_directory}/postgresplus/dynaTune.properties</file>
              <key>autovacuum_naptime</key>
              <variable>autovacuum_naptime_var</variable>
            </propertiesFileGet>
            <propertiesFileGet>
              <file>${system_temp_directory}/postgresplus/dynaTune.properties</file>
              <key>stats_row_level</key>
              <variable>stats_row_level_var</variable>
            </propertiesFileGet>
            <propertiesFileGet>
              <file>${system_temp_directory}/postgresplus/dynaTune.properties</file>
              <key>autovacuum</key>
              <variable>autovacuum_var</variable>
            </propertiesFileGet>
          </actionList>
        </actionGroup>
      </postShowPageActionList>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${dbInstallTune}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${ws_existing_result}</text>
          <value>0</value>
        </compareText>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${IsUpgrade}</text>
          <value>1</value>
        </compareText>
      </ruleList>
    </parameterGroup>

    <!-- Data directory. Only show if not upgrading -->
    <directoryParameter>
      <name>datadir</name>
      <description>${msg(config.datadir.description)}</description>
      <explanation>${msg(config.datadir.explanation)}</explanation>
      <value></value>
      <default>${installdir}/data</default>
      <allowEmptyValue>0</allowEmptyValue>
      <ask>yes</ask>
      <cliOptionName>datadir</cliOptionName>
      <mustBeWritable>yes</mustBeWritable>
      <mustExist>0</mustExist>
      <width>30</width>

      <!-- Check the directory selected. If it's a valid data directory, change to upgrade mode 
           Note that this validation occurs in a postShowPageActionList due     
           to some odd behaviour in InstallBuilder in the way <allowEmptyValue> 
           interacts with default values, on the advice of tech support
      -->
      <postShowPageActionList>
        <!-- !WIN: Always check if the data directory path looks valid and is writeable -->
        <actionGroup>
          <!-- We need this because this isn't a validateActionList> -->
          <abortOnError>0</abortOnError>
          <actionList>
            <setInstallerVariable name="next_page" value="datadir">
              <persist>0</persist>
            </setInstallerVariable>
            <throwError>
              <text>${msg(error.data.directory.invalid)}</text>
            </throwError>
          </actionList>
          <ruleList>
            <regExMatch>
              <logic>does_not_match</logic>
              <pattern>^/([0-9a-zA-Z_/\.\-]*)$</pattern>
              <text>${datadir}</text>
            </regExMatch>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </actionGroup>

        <!-- WIN: Always check if the data directory path looks valid and is writeable -->
        <actionGroup>
          <!-- We need this because this isn't a validateActionList> -->
          <abortOnError>0</abortOnError>
          <actionList>
            <setInstallerVariable name="next_page" value="datadir">
              <persist>0</persist>
            </setInstallerVariable>
            <throwError>
              <text>${msg(error.data.directory.invalid)}</text>
            </throwError>
          </actionList>
          <ruleList>
            <regExMatch>
              <logic>does_not_match</logic>
              <pattern>^([a-zA-Z]:)\\([0-9a-zA-Z_\\\s\.\-]*)$</pattern>
              <text>${datadir}</text>
            </regExMatch>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </actionGroup>

        <!-- Build a regexp to test that the install dir is not a sub dir of the data dir 
             Remove trailing / from path -->
        <setInstallerVariableFromRegEx>
          <name>_re</name>
          <pattern>\/$</pattern>
          <substitution></substitution>
          <text>${datadir}</text>
          <ruleList>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </setInstallerVariableFromRegEx>
        <setInstallerVariableFromRegEx>
          <name>_re</name>
          <pattern>\\$</pattern>
          <substitution></substitution>
          <text>${datadir}</text>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </setInstallerVariableFromRegEx>

        <!-- Replace / with \/ or \ with \\ on windows -->
        <setInstallerVariableFromRegEx>
          <name>_re</name>
          <pattern>\/</pattern>
          <substitution>\/</substitution>
          <text>${_re}</text>
          <ruleList>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </setInstallerVariableFromRegEx>
        <setInstallerVariableFromRegEx>
          <name>_re</name>
          <pattern>\\</pattern>
          <substitution>\\\\</substitution>
          <text>${_re}</text>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </setInstallerVariableFromRegEx>

        <!-- build the regexp -->
        <setInstallerVariable>
          <name>_re</name>
          <persist>0</persist>
          <value>^${_re}\/([0-9a-zA-Z_/\.\-]*)</value>
          <ruleList>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </setInstallerVariable>
        <setInstallerVariable>
          <name>_re</name>
          <persist>0</persist>
          <value>^${_re}\\([0-9a-zA-Z_\\\s\.\-]*)</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </setInstallerVariable>

        <!-- Check the data directory does not match the installation directory -->
        <actionGroup>
          <!-- We need this because this isn't a validateActionList> -->
          <abortOnError>0</abortOnError>
          <actionList>
            <setInstallerVariable name="next_page" value="datadir">
              <persist>0</persist>
            </setInstallerVariable>
            <throwError>
              <text>${msg(error.data.directory.matches.install)}</text>
            </throwError>
          </actionList>
          <ruleEvaluationLogic>or</ruleEvaluationLogic>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${datadir}</text>
              <value>${installdir}</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${datadir}/</text>
              <value>${installdir}</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${datadir}\</text>
              <value>${installdir}</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${datadir}</text>
              <value>${installdir}/</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${datadir}</text>
              <value>${installdir}\</value>
            </compareText>
            <regExMatch>
              <logic>matches</logic>
              <pattern>${_re}</pattern>
              <text>${installdir}</text>
            </regExMatch>
          </ruleList>
        </actionGroup>

        <!-- Check an existing, non-empty data directory -->
        <actionGroup>
          <!-- We need this because this isn't a validateActionList> -->
          <abortOnError>0</abortOnError>

          <!-- Switch to upgrade mode -->
          <actionList>
            <!-- Do we have a pg_control file? -->
            <actionGroup>
              <actionList>
                <setInstallerVariable name="next_page" value="datadir">
                  <persist>0</persist>
                </setInstallerVariable>
                <throwError>
                  <text>${msg(error.data.directory.existing.broken)}</text>
                </throwError>
              </actionList>
              <ruleList>
                <fileTest>
                  <condition>not_exists</condition>
                  <path>${datadir}/global/pg_control</path>
                </fileTest>
              </ruleList>
            </actionGroup>

            <!-- starts here -->

            <!-- Do we have a valid catalog version? -->
            <runProgram>
              <program>${system_temp_directory}/postgresplus/pgcontrol/pg_controldata</program>
              <programArguments>"${datadir}"</programArguments>
              <abortOnError>0</abortOnError>
              <showMessageOnError>0</showMessageOnError>
              <ruleList>
                <compareText>
                  <logic>equals</logic>
                  <text>${platform_name}</text>
                  <value>osx</value>
                </compareText>
              </ruleList>
            </runProgram>

            <runProgram>
              <program>${system_temp_directory}/postgresplus/runpgcontroldata.sh</program>
              <programArguments>${system_temp_directory}/postgresplus/pgcontrol "${datadir}"</programArguments>
              <abortOnError>0</abortOnError>
              <showMessageOnError>0</showMessageOnError>
              <ruleList>
                <compareText>
                  <logic>contains</logic>
                  <text>${platform_name}</text>
                  <value>linux</value>
                </compareText>
              </ruleList>
            </runProgram>

            <runProgram>
              <program>${system_temp_directory}\postgresplus\pgcontrol\pg_controldata.exe</program>
              <programArguments>"${datadir}"</programArguments>
              <abortOnError>0</abortOnError>
              <showMessageOnError>0</showMessageOnError>
              <ruleList>
                <compareText>
                  <logic>equals</logic>
                  <text>${platform_name}</text>
                  <value>windows</value>
                </compareText>
              </ruleList>
            </runProgram>

            <setInstallerVariableFromRegEx>
              <name>CurrentCatalogVersion</name>
              <text>${program_stdout}</text>
              <pattern>^.*Catalog version number:\s+([\d]+).*$</pattern>
              <substitution>\1</substitution>
            </setInstallerVariableFromRegEx>

            <logMessage>
              <text>Existing cluster catalog version: ${CurrentCatalogVersion}, installer catalog version: ${CatalogVersion}</text>
            </logMessage>
            <actionGroup>
              <actionList>
                <setInstallerVariable name="next_page" value="datadir"/>
                <throwError>
                  <text>${msg(error.data.directory.incompatible)}</text>
                </throwError>
              </actionList>
              <ruleList>
                <compareText>
                  <value>${CurrentCatalogVersion}</value>
                  <logic>does_not_equal</logic>
                  <text>${CatalogVersion}</text>
                </compareText>
              </ruleList>
            </actionGroup>
          </actionList>

          <!-- Switch to upgrade mode -->
          <actionList>
            <setInstallerVariable>
              <name>IsUpgrade</name>
              <value>1</value>
            </setInstallerVariable>
            <!-- ends here -->
            <logMessage>
              <text>Switching to upgrade mode with cluster: ${datadir}</text>
            </logMessage>
          </actionList>
          <!-- We only check the data directory if it exists and isn't empty -->
          <ruleList>
            <fileExists>
              <path>${datadir}</path>
            </fileExists>
            <fileTest>
              <condition>is_not_empty</condition>
              <path>${datadir}</path>
            </fileTest>
          </ruleList>
        </actionGroup>

        <!-- End of data directory check -->
      </postShowPageActionList>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(dbserver).selected}</text>
          <value>1</value>
        </compareText>
        <compareValues>
          <logic>equals</logic>
          <value1>${IsUpgrade}</value1>
          <value2>0</value2>
        </compareValues>
      </ruleList>
    </directoryParameter>

    <!-- Explain that we're using an existing installation directory -->
    <labelParameter>
      <name>upgrade2</name>
      <title>${msg(upgrade.existing.datadir.title)}</title>
      <description>${msg(upgrade.existing.datadir.description)}</description>
      <explanation></explanation>
      <image></image>
      <preShowPageActionList>
        <!-- As we're upgrading, grab the port number from the existing config file -->
        <actionGroup>
          <actionList>
            <logMessage>
              <text>Reading port number from ${datadir}/postgresql.conf</text>
            </logMessage>
            <readFile>
              <name>serverconfig</name>
              <path>${datadir}/postgresql.conf</path>
            </readFile>
            <setInstallerVariableFromRegEx>
              <name>serverport</name>
              <pattern>^.*port\s*=\s*([\d]+)\s+.*$</pattern>
              <substitution>\1</substitution>
              <text>${serverconfig}</text>
            </setInstallerVariableFromRegEx>
          </actionList>
        </actionGroup>
      </preShowPageActionList>
      <ruleList>
        <compareValues>
          <logic>equals</logic>
          <value1>${IsUpgrade}</value1>
          <value2>1</value2>
        </compareValues>
      </ruleList>
    </labelParameter>

    <!-- Superuser password. Show this if not an upgrade, unless this is Windows -->
    <passwordParameter>
      <name>superpassword</name>
      <description>${msg(config.superpassword.description)}</description>
      <explanation>${_explanation}</explanation>
      <value></value>
      <default>${defaultpassword}</default>
      <allowEmptyValue>1</allowEmptyValue>
      <ask>yes</ask>
      <cliOptionName>superpassword</cliOptionName>
      <descriptionRetype>${msg(config.superpassword.confirm)}</descriptionRetype>
      <width>20</width>
      <preShowPageActionList>
        <setInstallerVariable>
          <name>_explanation</name>
          <persist>0</persist>
          <value>${msg(config.superpassword.explanation)}</value>
        </setInstallerVariable>

        <!-- On Windows, we need a different explanation -->
        <setInstallerVariable>
          <name>_explanation</name>
          <persist>0</persist>
          <value>${msg(config.superpassword.explanation.windows)}</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </setInstallerVariable>
        <!-- pgagent group -->
        <actionGroup>
          <actionList>
            <setInstallerVariableFromRegEx>
              <name>pgagent_installer_schema_version</name>
              <text>PG_VERSION_PGAGENT</text>
              <!-- PG_VERSION_PGAGENT -->
              <pattern>^([0-9]*).(.*)$</pattern>
              <substitution>\1</substitution>
            </setInstallerVariableFromRegEx>

            <setInstallerVariable name="pgagent_schema_exist" value="0"/>
            <setInstallerVariable name="pgagent_schema_version_function_exist" value="0"/>
            <setInstallerVariable name="pgagent_current_schema_version" value=""/>
            <setInstallerVariable name="schema" value="install"/>

          </actionList>
          <ruleList>
            <isTrue value="${component(pgagent).selected}"/>
          </ruleList>
        </actionGroup>
        <!-- Ends pgagent group -->
      </preShowPageActionList>
      <ruleEvaluationLogic>or</ruleEvaluationLogic>
      <ruleList>
        <isTrue value="${component(dbserver).selected}"/>
        <isTrue value="${component(postgis).selected}"/>
        <isTrue value="${component(pgagent).selected}"/>
      </ruleList>
      <validationActionList>
        <throwError>
          <text>${msg(config.superpassword.no.password)}</text>
          <ruleList>
            <stringTest>
              <text>${superpassword}</text>
              <type>empty</type>
            </stringTest>
          </ruleList>
        </throwError>

        <actionGroup>
          <actionList>
            <runProgram>
              <program>${system_temp_directory}\postgresplus\createuser.exe</program>
              <!-- The dot at the beginning of the arguments is the domain -->
              <programArguments>. "${supername}" "${superpassword}"</programArguments>
              <abortOnError>0</abortOnError>
              <showMessageOnError>0</showMessageOnError>
            </runProgram>
            <throwError>
              <text>${msg(script.command.line.error)}</text>
              <ruleList>
                <compareText>
                  <logic>equals</logic>
                  <text>127</text>
                  <value>${program_exit_code}</value>
                </compareText>
              </ruleList>
            </throwError>
            <throwError>
              <text>${msg(error.could.not.create.user)}</text>
              <ruleList>
                <compareText>
                  <logic>does_not_equal</logic>
                  <text>2203</text>
                  <value>${program_exit_code}</value>
                </compareText>
                <compareText>
                  <logic>does_not_equal</logic>
                  <text>2245</text>
                  <value>${program_exit_code}</value>
                </compareText>
                <compareText>
                  <logic>does_not_equal</logic>
                  <text>0</text>
                  <value>${program_exit_code}</value>
                </compareText>
              </ruleList>
            </throwError>
            <throwError>
              <text>${msg(config.superpassword.format.error.windows)}</text>
              <ruleEvaluationLogic>OR</ruleEvaluationLogic>
              <ruleList>
                <compareText>
                  <logic>equals</logic>
                  <text>2203</text>
                  <value>${program_exit_code}</value>
                </compareText>
                <compareText>
                  <logic>equals</logic>
                  <text>2245</text>
                  <value>${program_exit_code}</value>
                </compareText>
              </ruleList>
            </throwError>
          </actionList>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </actionGroup>

        <!-- On Windows we need to validate the password if the user account exists -->
        <actionGroup>
          <actionList>
            <runProgram>
              <abortOnError>0</abortOnError>
              <program>${system_temp_directory}\postgresplus\validateuser.exe</program>
              <programArguments>. "${supername}" "${superpassword}"</programArguments>
              <showMessageOnError>0</showMessageOnError>
            </runProgram>
            <throwError>
              <text>${msg(script.command.line.error)}</text>
              <ruleList>
                <compareText>
                  <logic>equals</logic>
                  <text>127</text>
                  <value>${program_exit_code}</value>
                </compareText>
              </ruleList>
            </throwError>
            <throwError>
              <text>${msg(config.superpassword.incorrect.windows)}</text>
              <ruleList>
                <compareText>
                  <logic>equals</logic>
                  <text>1</text>
                  <value>${program_exit_code}</value>
                </compareText>
              </ruleList>
            </throwError>
          </actionList>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </actionGroup>

        <!-- Starts here -->

        <actionGroup>
          <actionList>
            <!-- Unpacking the Script file to temporary directory -->
            <unpackFile>
              <component>postgis</component>
              <destination>${system_temp_directory}/postgresplus/check-connection.sh</destination>
              <folder>programfileslinux</folder>
              <origin>check-connection.sh</origin>
            </unpackFile>
            <unpackFile>
              <component>postgis</component>
              <destination>${system_temp_directory}/postgresplus/check-db.sh</destination>
              <folder>programfileslinux</folder>
              <origin>check-db.sh</origin>
            </unpackFile>
          </actionList>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>linux</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${component(postgis).selected}</text>
              <value>1</value>
            </compareText>
            <fileTest>
              <path>${installdir}/bin/psql</path>
              <condition>exists</condition>
            </fileTest>
            <compareText>
              <logic>equals</logic>
              <text>${IsUpgrade}</text>
              <value>1</value>
            </compareText>
          </ruleList>
        </actionGroup>

        <!-- linux-x64 -->

        <actionGroup>
          <actionList>
            <!-- Unpacking the Script file to temporary directory -->
            <unpackFile>
              <component>postgis</component>
              <destination>${system_temp_directory}/postgresplus/check-connection.sh</destination>
              <folder>programfileslinux-x64</folder>
              <origin>check-connection.sh</origin>
            </unpackFile>
            <unpackFile>
              <component>postgis</component>
              <destination>${system_temp_directory}/postgresplus/check-db.sh</destination>
              <folder>programfileslinux-x64</folder>
              <origin>check-db.sh</origin>
            </unpackFile>
          </actionList>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>linux-x64</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${component(postgis).selected}</text>
              <value>1</value>
            </compareText>
            <fileTest>
              <path>${installdir}/bin/psql</path>
              <condition>exists</condition>
            </fileTest>
            <compareText>
              <logic>equals</logic>
              <text>${IsUpgrade}</text>
              <value>1</value>
            </compareText>
          </ruleList>
        </actionGroup>

        <!-- For MAC -->
        <actionGroup>
          <actionList>
            <!-- Unpacking the Script file to temporary directory -->
            <unpackFile>
              <component>postgis</component>
              <destination>${system_temp_directory}/postgresplus/check-connection.sh</destination>
              <folder>postgisosx</folder>
              <origin>check-connection.sh</origin>
            </unpackFile>
            <unpackFile>
              <component>postgis</component>
              <destination>${system_temp_directory}/postgresplus/check-db.sh</destination>
              <folder>postgisosx</folder>
              <origin>check-db.sh</origin>
            </unpackFile>
          </actionList>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>osx</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${component(postgis).selected}</text>
              <value>1</value>
            </compareText>
            <fileTest>
              <path>${installdir}/bin/psql</path>
              <condition>exists</condition>
            </fileTest>
            <compareText>
              <logic>equals</logic>
              <text>${IsUpgrade}</text>
              <value>1</value>
            </compareText>
          </ruleList>
        </actionGroup>

        <!--For Windows -->
        <actionGroup>
          <actionList>
            <unpackFile>
              <component>postgis</component>
              <destination>${system_temp_directory}/postgresplus/check-connection.bat</destination>
              <folder>postgiswindows</folder>
              <origin>check-connection.bat</origin>
            </unpackFile>
            <unpackFile>
              <component>postgis</component>
              <destination>${system_temp_directory}/postgresplus/check-db.bat</destination>
              <folder>postgiswindows</folder>
              <origin>check-db.bat</origin>
            </unpackFile>
          </actionList>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${component(postgis).selected}</text>
              <value>1</value>
            </compareText>
            <fileTest>
              <path>${installdir}\bin\psql.exe</path>
              <condition>exists</condition>
            </fileTest>
            <compareText>
              <logic>equals</logic>
              <text>${IsUpgrade}</text>
              <value>1</value>
            </compareText>
          </ruleList>
        </actionGroup>

        <!-- LIN & MAC: validate the PostgreSQL Server Details -->
        <actionGroup>
          <actionList>
            <!-- Running the Script to validate the PostgreSQL Server Details -->
            <setInstallerVariableFromScriptOutput>
              <customErrorMessage>${program_stderr}</customErrorMessage>
              <exec>${system_temp_directory}/postgresplus/check-connection.sh</exec>
              <execArgs>${pghost} ${serverport} ${supername} "${superpassword}" "${installdir}"</execArgs>
              <name>connection</name>
              <workingDirectory>${system_temp_directory}/postgresplus</workingDirectory>
            </setInstallerVariableFromScriptOutput>
          </actionList>
          <ruleList>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${component(postgis).selected}</text>
              <value>1</value>
            </compareText>
            <fileTest>
              <path>${installdir}/bin/psql</path>
              <condition>exists</condition>
            </fileTest>
            <compareText>
              <logic>equals</logic>
              <text>${IsUpgrade}</text>
              <value>1</value>
            </compareText>
          </ruleList>
        </actionGroup>

        <!-- LIN & MAC: Check whether the database and user already exists -->
        <actionGroup>
          <actionList>

            <!-- LIN & MAC: Check whether the database already exists -->
            <setInstallerVariableFromScriptOutput>
              <abortOnError>0</abortOnError>
              <exec>${system_temp_directory}/postgresplus/check-db.sh</exec>
              <execArgs>${pghost} ${serverport} ${supername} "${superpassword}" "${installdir}" "template_postgis"</execArgs>
              <name>dbexist</name>
              <showMessageOnError>0</showMessageOnError>
              <workingDirectory>${system_temp_directory}/postgresplus</workingDirectory>
            </setInstallerVariableFromScriptOutput>
          </actionList>
          <ruleList>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${component(postgis).selected}</text>
              <value>1</value>
            </compareText>
            <fileTest>
              <path>${installdir}/bin/psql</path>
              <condition>exists</condition>
            </fileTest>
            <compareText>
              <logic>equals</logic>
              <text>${IsUpgrade}</text>
              <value>1</value>
            </compareText>
          </ruleList>
        </actionGroup>

        <!--For windows -->
        <actionGroup>
          <actionList>
            <!-- Windows: Check whether the database already exists -->
            <setInstallerVariableFromScriptOutput>
              <abortOnError>0</abortOnError>
              <exec>${system_temp_directory}\postgresplus\check-db.bat</exec>
              <execArgs>${pghost} ${serverport} ${supername} "${superpassword}" "${installdir}" "template_postgis"</execArgs>
              <name>dbexist</name>
              <showMessageOnError>0</showMessageOnError>
              <workingDirectory>${system_temp_directory}\postgresplus</workingDirectory>
            </setInstallerVariableFromScriptOutput>
          </actionList>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${component(postgis).selected}</text>
              <value>1</value>
            </compareText>
            <fileTest>
              <path>${installdir}\bin\psql.exe</path>
              <condition>exists</condition>
            </fileTest>
            <compareText>
              <logic>equals</logic>
              <text>${IsUpgrade}</text>
              <value>1</value>
            </compareText>
          </ruleList>
        </actionGroup>

        <!-- Inform the user about the existing database and user -->
        <actionGroup>
          <actionList>
            <showQuestion>
              <default>yes</default>
              <text>${msg(templatedb.found.info)}</text>
              <variable>response</variable>
            </showQuestion>
            <setInstallerVariable name="templatedbexists" value="yes">
              <persist>0</persist>
            </setInstallerVariable>
          </actionList>
          <ruleList>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${dbexist}</text>
              <value></value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${component(postgis).selected}</text>
              <value>1</value>
            </compareText>
            <fileTest>
              <path>${installdir}/bin/psql</path>
              <condition>exists</condition>
            </fileTest>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </actionGroup>
        <actionGroup>
          <actionList>
            <showQuestion>
              <default>yes</default>
              <text>${msg(templatedb.found.info)}</text>
              <variable>response</variable>
            </showQuestion>
            <setInstallerVariable name="templatedbexists" value="yes">
              <persist>0</persist>
            </setInstallerVariable>
          </actionList>
          <ruleList>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${dbexist}</text>
              <value></value>
            </compareText>
            <fileTest>
              <path>${installdir}\bin\psql.exe</path>
              <condition>exists</condition>
            </fileTest>
            <compareText>
              <logic>equals</logic>
              <text>${component(postgis).selected}</text>
              <value>1</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </actionGroup>

        <!-- Exit the installation if the user wants to quit -->
        <actionGroup>
          <actionList>
            <componentSelection>
              <deselect>postgis</deselect>
              <select></select>
            </componentSelection>
          </actionList>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${response}</text>
              <value>no</value>
            </compareText>
          </ruleList>
        </actionGroup>
        <!--Ends here -->

        <!-- pgAgent Checks starts here-->
        <actionGroup>
          <actionList>
            <actionGroup>
              <actionList>

                <setEnvironmentVariable name="PGHOST" value="localhost"/>
                <setEnvironmentVariable name="PGUSER" value="${supername}"/>
                <setEnvironmentVariable name="PGPASSWORD" value="${superpassword}"/>
                <setEnvironmentVariable name="PGPORT" value="${serverport}"/>
                <setEnvironmentVariable name="LD_LIBRARY_PATH" value="${installdir}/lib"/>

                <!-- Check if plpgsql exists -->
                <setInstallerVariableFromScriptOutput exec="${installdir}/bin/psql"
                                                      execArgs="-t -c &quot;SELECT lanname FROM pg_language WHERE lanname='plpgsql'&quot;"
                                                      name="plpgsql_exist"
                                                      showMessageOnError="0"
                                                      abortOnError="0"
                                                      workingDirectory="${installdir}/bin">
                  <ruleList>
                    <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                    <fileTest path="${installdir}/bin/psql" condition="exists"/>
                  </ruleList>
                </setInstallerVariableFromScriptOutput>

                <setInstallerVariableFromScriptOutput exec="${installdir}\bin\psql.exe"
                                                      execArgs="-t -c &quot;SELECT lanname FROM pg_language WHERE lanname='plpgsql'&quot;"
                                                      name="plpgsql_exist"
                                                      showMessageOnError="0"
                                                      abortOnError="0"
                                                      workingDirectory="${installdir}\bin">
                  <ruleList>
                    <compareText logic="equals" text="${platform_name}" value="windows"/>
                    <fileTest path="${installdir}\bin\psql.exe" condition="exists"/>
                  </ruleList>
                </setInstallerVariableFromScriptOutput>

                <!-- Check for existing pgagent schema -->
                <setInstallerVariableFromScriptOutput exec="${installdir}/bin/psql"
                                                      execArgs="-t -c &quot;SELECT has_schema_privilege('pgagent', 'USAGE')&quot;"
                                                      name="pgagent_schema_exist"
                                                      showMessageOnError="0"
                                                      abortOnError="0"
                                                      workingDirectory="${installdir}/bin">
                  <ruleList>
                    <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                    <fileTest path="${installdir}/bin/psql" condition="exists"/>
                  </ruleList>
                </setInstallerVariableFromScriptOutput>
                <setInstallerVariableFromScriptOutput exec="${installdir}\bin\psql.exe"
                                                      execArgs="-t -c &quot;SELECT has_schema_privilege('pgagent', 'USAGE')&quot;"
                                                      name="pgagent_schema_exist"
                                                      showMessageOnError="0"
                                                      abortOnError="0"
                                                      workingDirectory="${installdir}\bin">
                  <ruleList>
                    <compareText logic="equals" text="${platform_name}" value="windows"/>
                    <fileTest path="${installdir}\bin\psql.exe" condition="exists"/>
                  </ruleList>
                </setInstallerVariableFromScriptOutput>

                <!-- Check for pgagent_schema_version function exist -->
                <setInstallerVariableFromScriptOutput exec="${installdir}/bin/psql"
                                                      execArgs="-t -c &quot;SELECT COUNT(*) FROM pg_proc WHERE proname = 'pgagent_schema_version' AND pronamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'pgagent') AND prorettype = (SELECT oid FROM pg_type WHERE typname = 'int2') AND proargtypes = ''&quot;"
                                                      name="pgagent_schema_version_function_exist"
                                                      showMessageOnError="0"
                                                      abortOnError="0"
                                                      workingDirectory="${installdir}/bin">
                  <ruleList>
                    <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                    <fileTest path="${installdir}/bin/psql" condition="exists"/>
                    <compareText logic="does_not_equal" text="${pgagent_schema_exist}" value=""/>
                  </ruleList>
                </setInstallerVariableFromScriptOutput>
                <setInstallerVariableFromScriptOutput exec="${installdir}\bin\psql.exe"
                                                      execArgs="-t -c &quot;SELECT COUNT(*) FROM pg_proc WHERE proname = 'pgagent_schema_version' AND pronamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'pgagent') AND prorettype = (SELECT oid FROM pg_type WHERE typname = 'int2') AND proargtypes = ''&quot;"
                                                      name="pgagent_schema_version_function_exist"
                                                      showMessageOnError="0"
                                                      abortOnError="0"
                                                      workingDirectory="${installdir}\bin">
                  <ruleList>
                    <compareText logic="equals" text="${platform_name}" value="windows"/>
                    <fileTest path="${installdir}\bin\psql.exe" condition="exists"/>
                    <compareText logic="does_not_equal" text="${pgagent_schema_exist}" value=""/>
                  </ruleList>
                </setInstallerVariableFromScriptOutput>

                <!-- Check for the current version of the pgagent schema -->
                <setInstallerVariableFromScriptOutput exec="${installdir}/bin/psql"
                                                      execArgs="-t -c &quot;SELECT pgagent.pgagent_schema_version()&quot;"
                                                      name="pgagent_current_schema_version"
                                                      showMessageOnError="0"
                                                      abortOnError="0"
                                                      workingDirectory="${installdir}/bin">
                  <ruleList>
                    <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                    <fileTest path="${installdir}/bin/psql" condition="exists"/>
                    <compareText logic="does_not_equal" text="${pgagent_schema_exist}" value=""/>
                    <compareText logic="equals" text="${pgagent_schema_version_function_exist}" value="1"/>
                  </ruleList>
                </setInstallerVariableFromScriptOutput>
                <setInstallerVariableFromScriptOutput exec="${installdir}\bin\psql.exe"
                                                      execArgs="-t -c &quot;SELECT pgagent.pgagent_schema_version()&quot;"
                                                      name="pgagent_current_schema_version"
                                                      showMessageOnError="0"
                                                      abortOnError="0"
                                                      workingDirectory="${installdir}\bin">
                  <ruleList>
                    <compareText logic="equals" text="${platform_name}" value="windows"/>
                    <fileTest path="${installdir}\bin\psql.exe" condition="exists"/>
                    <compareText logic="does_not_equal" text="${pgagent_schema_exist}" value=""/>
                    <compareText logic="equals" text="${pgagent_schema_version_function_exist}" value="1"/>
                  </ruleList>
                </setInstallerVariableFromScriptOutput>

              </actionList>
            </actionGroup>

            <!-- For pgagent schema already exists -->
            <actionGroup>
              <actionList>

                <!-- 1. pgagent schema exist and pgagent_schema_version function does not exist -->
                <showQuestion text="${msg(pgagent.schema.older.exist)}" variable="upgrade_schema">
                  <ruleList>
                    <compareText logic="does_not_equal" text="${pgagent_schema_version_function_exist}" value="1"/>
                  </ruleList>
                </showQuestion>

                <setInstallerVariable name="schema" persist="0" value="upgrade">
                  <ruleList>
                    <compareText logic="equals" text="${upgrade_schema}" value="yes"/>
                    <compareText logic="does_not_equal" text="${pgagent_schema_version_function_exist}" value="1"/>
                  </ruleList>
                </setInstallerVariable>

                <setInstallerVariable name="schema" persist="0" value="none">
                  <ruleList>
                    <compareText logic="equals" text="${upgrade_schema}" value="no"/>
                    <compareText logic="does_not_equal" text="${pgagent_schema_version_function_exist}" value="1"/>
                  </ruleList>
                </setInstallerVariable>

                <!-- 2. pgagnet schema exist and pgagent_schema_version function exists,
                    but current_schema_version less than the installer_schema_version -->
                <showQuestion text="${msg(pgagent.schema.older.version.exist)}" variable="upgrade_schema">
                  <ruleList>
                    <compareText logic="equals" text="${pgagent_schema_version_function_exist}" value="1"/>
                    <compareValues logic="less" value1="${pgagent_current_schema_version}" value2="${pgagent_installer_schema_version}"/>
                  </ruleList>
                </showQuestion>

                <setInstallerVariable name="schema" persist="0" value="upgrade">
                  <ruleList>
                    <compareText logic="equals" text="${upgrade_schema}" value="yes"/>
                    <compareText logic="equals" text="${pgagent_schema_version_function_exist}" value="1"/>
                    <compareValues logic="less" value1="${pgagent_current_schema_version}" value2="${pgagent_installer_schema_version}"/>
                  </ruleList>
                </setInstallerVariable>

                <setInstallerVariable name="schema" persist="0" value="none">
                  <ruleList>
                    <compareText logic="equals" text="${upgrade_schema}" value="no"/>
                    <compareText logic="equals" text="${pgagent_schema_version_function_exist}" value="1"/>
                    <compareValues logic="less" value1="${pgagent_current_schema_version}" value2="${pgagent_installer_schema_version}"/>
                  </ruleList>
                </setInstallerVariable>

                <!-- 3. pgagnet schema exist and pgagent_schema_version function exists,
                    and current_schema_version matches the installer_schema_version -->
                <showInfo text="${msg(pgagent.schema.found)}">
                  <ruleList>
                    <compareText logic="equals" text="${pgagent_schema_version_function_exist}" value="1"/>
                    <compareValues logic="equals" value1="${pgagent_current_schema_version}" value2="${pgagent_installer_schema_version}"/>
                  </ruleList>
                </showInfo>

                <setInstallerVariable name="schema" persist="0" value="exists">
                  <ruleList>
                    <compareText logic="equals" text="${pgagent_schema_version_function_exist}" value="1"/>
                    <compareValues logic="equals" value1="${pgagent_current_schema_version}" value2="${pgagent_installer_schema_version}"/>
                  </ruleList>
                </setInstallerVariable>

                <!-- 4. pgagnet schema exist and pgagent_schema_version function exists,
                    but current_schema_version greater than the installer_schema_version -->
                <actionGroup>
                  <actionList>
                    <throwError text="${msg(pgagent.schema.newer.version.exist)}"/>
                    <setInstallerVariable name="next_page" value="sysuserdetails"/>
                  </actionList>
                  <ruleList>
                    <compareText logic="equals" text="${pgagent_schema_version_function_exist}" value="1"/>
                    <compareValues logic="greater" value1="${pgagent_current_schema_version}" value2="${pgagent_installer_schema_version}"/>
                  </ruleList>
                </actionGroup>

              </actionList>
              <ruleEvaluationLogic>or</ruleEvaluationLogic>
              <ruleList>
                <fileTest path="${installdir}/pgAgent/bin/pgagent" condition="exists"/>
                <fileTest path="${installdir}\pgAgent\bin\pgagent.exe" condition="exists"/>
              </ruleList>
            </actionGroup>
          </actionList>
          <ruleList>
            <isTrue value="${component(pgagent).selected}"/>
          </ruleList>
        </actionGroup>
        <!-- pgagent Checks ends here -->

      </validationActionList>
    </passwordParameter>

    <!-- Port number. Only show if there is no data directory -->
    <parameterGroup>
      <name>PortLocale</name>
      <title>${msg(portlocale.title.value)}</title>
      <explanation></explanation>
      <value></value>
      <default></default>
      <parameterList>
        <stringParameter>
          <name>serverport</name>
          <description>${msg(config.port.description)}</description>
          <explanation>${msg(config.port.explanation)}</explanation>
          <value></value>
          <default>${defaultport}</default>
          <allowEmptyValue>1</allowEmptyValue>
          <ask>yes</ask>
          <cliOptionName>serverport</cliOptionName>
          <width>30</width>
          <validationActionList>
            <throwError>
              <text>${msg(config.port.invalid)}</text>
              <ruleList>
                <stringTest>
                  <text>${serverport}</text>
                  <type>not_digit</type>
                </stringTest>
              </ruleList>
            </throwError>
            <throwError>
              <text>${msg(config.port.invalid)}</text>
              <ruleList>
                <stringTest>
                  <text>${serverport}</text>
                  <type>empty</type>
                </stringTest>
              </ruleList>
            </throwError>
            <throwError>
              <text>${msg(config.port.invalid)}</text>
              <ruleEvaluationLogic>or</ruleEvaluationLogic>
              <ruleList>
                <compareValues>
                  <logic>less</logic>
                  <value1>${serverport}</value1>
                  <value2>1024</value2>
                </compareValues>
                <compareValues>
                  <logic>greater</logic>
                  <value1>${serverport}</value1>
                  <value2>65535</value2>
                </compareValues>
              </ruleList>
            </throwError>
            <throwError>
              <text>${msg(config.port.in.use)}</text>
              <ruleList>
                <portTest>
                  <condition>cannot_bind</condition>
                  <port>${serverport}</port>
                </portTest>
                <compareText>
                  <logic>equals</logic>
                  <text>${component(dbserver).selected}</text>
                  <value>1</value>
                </compareText>
              </ruleList>
            </throwError>

            <!--Ends here -->
          </validationActionList>
        </stringParameter>

        <!-- Locale -->
        <choiceParameter>
          <name>locale</name>
          <description>${msg(config.locale.description)}</description>
          <explanation>${msg(config.locale.explanation)}</explanation>
          <value></value>
          <default></default>
          <allowEmptyValue>1</allowEmptyValue>
          <ask>yes</ask>
          <cliOptionName>locale</cliOptionName>
          <displayType>combobox</displayType>
          <width>30</width>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${component(dbserver).selected}</text>
              <value>1</value>
            </compareText>
            <compareValues>
              <logic>equals</logic>
              <value1>${IsUpgrade}</value1>
              <value2>0</value2>
            </compareValues>
          </ruleList>
          <validationActionList>
            <throwError>
              <text>${msg(config.locale.no.locale)}</text>
              <ruleList>
                <stringTest>
                  <text>${locale}</text>
                  <type>empty</type>
                </stringTest>
              </ruleList>
            </throwError>
          </validationActionList>
        </choiceParameter>
      </parameterList>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${component(dbserver).selected}</text>
          <value>1</value>
        </compareText>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${IsUpgrade}</text>
          <value>1</value>
        </compareText>
      </ruleList>
    </parameterGroup>
  </parameterList>
</project>
