<project>
    <!-- Package details -->
    <shortName>sqlprotect</shortName>
    <fullName>SQL/Protect</fullName>
    <version>PG_VERSION_SQLPROTECT-PG_BUILDNUM_SQLPROTECT</version>

    <!-- These options are used on Windows -->
    <startMenuGroupName/>

    <!-- Product Specific Options -->
    <productDisplayName>SQL/Protect ${productVersion}</productDisplayName>
    <productComments>${product_fullname} ${productVersion}, packaged by EnterpriseDB</productComments>
    <productUrlHelpLink>http://www.enterprisedb.com</productUrlHelpLink>
    <productUrlInfoAbout>http://www.enterprisedb.com</productUrlInfoAbout>

    <!-- The options are used for RPM registration -->
    <description>SQL/Protect for PostgreSQL &amp; Postgres Plus Standard Server</description>
    <summary>${msg(install.summary)}</summary>
    <vendor>EnterpriseDB</vendor>
    <release>1</release>
    <windowsSoftwareRegistryPrefix>${project.vendor}\sqlprotect-PG_PG_MAJOR_VERSION</windowsSoftwareRegistryPrefix>
    <replaceLockedFilesOnReboot>1</replaceLockedFilesOnReboot>

    <!-- set if it is a native windows 64 bit-->
    <windows64bitMode>@@WIN64MODE@@</windows64bitMode>

    <!-- Installer Size -->
    <width>550</width>
    <height>400</height>

    <!-- Misc package options -->
    <installerFilename>${product_shortname}-${product_version}-${platform_name}.${platform_exec_suffix}</installerFilename>
    <wrapLicenseFileText>1</wrapLicenseFileText>
    <enableRollback>0</enableRollback>
    <requireInstallationByRootUser>1</requireInstallationByRootUser>
    <saveRelativePaths>1</saveRelativePaths>
    <outputDirectory>../output</outputDirectory>
    <uninstallerDirectory>${installdir}</uninstallerDirectory>
    <uninstallerName>uninstall-${product_shortname}</uninstallerName>
    <unattendedModeUI>minimal</unattendedModeUI>
    <compressionAlgorithm>lzma</compressionAlgorithm>
    <installationLogFile>${system_temp_directory}/install-${product_shortname}.log</installationLogFile>
    <uninstallationLogFile>${system_temp_directory}/uninstall-${product_shortname}.log</uninstallationLogFile>
    <allowWindowResize>1</allowWindowResize>
    <licenseFile encoding="utf-8">resources/licence.txt</licenseFile>

    <!-- Images -->
    <disableSplashScreen>1</disableSplashScreen>
    <leftImage>../resources/edb-side.png</leftImage>

    <!-- i18n files for the UI -->
    <allowedLanguages>en</allowedLanguages>
    <customLanguageFileList>
        <language>
            <code>en</code>
            <encoding>iso8859-1</encoding>
            <file>i18n/en.lng</file>
        </language>
    </customLanguageFileList>
    <preShowHelpActionList>
        <!-- WIN: Set the pghome default value -->
        <setInstallerVariable name="default_installdir" value="${platform_install_prefix}\PostgreSQL\PG_MAJOR_VERSION">
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </setInstallerVariable>
        <!-- LIN: Set the pghome default value  -->
        <setInstallerVariable name="default_installdir" value="${platform_install_prefix}/PostgreSQL/PG_MAJOR_VERSION">
            <ruleList>
                <compareText logic="contains" text="${platform_name}" value="linux"/>
            </ruleList>
        </setInstallerVariable>
        <!-- MAC: Set the  pghome default value  -->
        <setInstallerVariable name="default_installdir" value="/Library/PostgreSQL/PG_VERSION_SQLPROTECT">
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="osx"/>
            </ruleList>
        </setInstallerVariable>
    </preShowHelpActionList>

  <!-- Custom functions -->
  <functionDefinitionList>
    <actionDefinition name="createTempDir">
       <actionList>
         <globalVariables names="random_number"/>
         <actionGroup>
           <actionList>
            <setInstallerVariable name="iteration" value="0"/>
            <!-- Create a random number to use unique filenames -->
             <while>
               <actionList>
                 <generateRandomValue length="10" variable="random_number"/>
                 <runProgram>
                   <program>sh</program>
                   <programArguments>-c &lt;&lt;EOF '
                                     umask 0077
                                     mkdir "${system_temp_directory}/${dirPrefix}_${random_number}"
                                     if [ $? -ne 0 ];
                                     then
                                        exit 100
                                     fi
                                     '
EOF
                   </programArguments>
                 </runProgram>
                 <break>
                   <ruleList>
                    <compareText logic="equals" text="0" value="${program_exit_code}"/>
                   </ruleList>
                 </break>
                <actionGroup>
                  <actionList>
                    <throwError text="${msg(cannot.create.tmp.dir)}" abortOnError="1">
                      <ruleList>
                        <compareValues value1="${iteration}" logic="equals" value2="9"/>
                      </ruleList>
                    </throwError>
                  </actionList>
                </actionGroup>
                 <mathExpression text="${iteration}+1" variable="iteration"/>
               </actionList>
               <conditionRuleList>
                 <compareValues value1="${iteration}" logic="less" value2="10"/>
               </conditionRuleList>
             </while>
             <setInstallerVariable name="random_number" value="${random_number}"/>
           </actionList>
           <ruleList>
             <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
           </ruleList>
         </actionGroup>
         <actionGroup>
           <actionList>
             <generateRandomValue length="10" variable="random_number"/>
             <createDirectory path="${system_temp_directory}/${dirPrefix}_${random_number}"/>
             <setInstallerVariable name="random_number" value="${random_number}"/>
           </actionList>
           <ruleList>
             <compareText logic="equals" text="${platform_name}" value="windows"/>
           </ruleList>
         </actionGroup>
       </actionList>
       <parameterList>
         <stringParameter name="dirPrefix" allowEmptyValue="0"/>
       </parameterList>
    </actionDefinition>
  </functionDefinitionList>
    <!-- Prebuild Actons-->
    <preBuildActionList>
        <setInstallerVariable name="project.installerFilename" value="${product_shortname}-${product_version}-${platform_name}-x64.${platform_exec_suffix}">
            <ruleList>
                <compareValues value1="@@WINDIR@@" value2="windows-x64" logic="equals"/>
            </ruleList>
        </setInstallerVariable>

        <setInstallerVariable name="originalplatform" value="${platform_name}"/>
        <setInstallerVariable name="originalplatform" value="linux-x32">
            <ruleList>
                <compareText text="${platform_name}" value="linux"/>
            </ruleList>
        </setInstallerVariable>
    </preBuildActionList>

    <!-- Initialisation actions -->
    <initializationActionList>
	<setInstallerVariable name="pgmajorversion" value="PG_MAJOR_VERSION"/>
        <setInstallerVariable name="productVersion" persist="1" value="PG_VERSION_SQLPROTECT"/>
        <!-- Abort Installation as trying to    run a 32-bit installer on 64-bit machine -->
        <throwError>
            <customErrorMessage>${msg(platform.not.match)}</customErrorMessage>
            <text>Unknown Error</text>
            <ruleList>
                <platformTest type="linux-x64"/>
                <compareText text="${originalplatform}" value="linux-x32"/>
            </ruleList>
        </throwError>

        <!-- WIN: Set the pghome default value -->
        <setInstallerVariable name="defaultpghome" value="${platform_install_prefix}\PostgreSQL\PG_MAJOR_VERSION">
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </setInstallerVariable>

        <!-- LIN: Set the pghome default value  -->
        <setInstallerVariable name="defaultpghome" value="${platform_install_prefix}/PostgreSQL/PG_MAJOR_VERSION">
            <ruleList>
                <compareText logic="contains" text="${platform_name}" value="linux"/>
            </ruleList>
        </setInstallerVariable>

        <!-- MAC: Set the  pghome default value  -->
        <setInstallerVariable name="defaultpghome" value="/Library/PostgreSQL/PG_VERSION_SQLPROTECT">
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="osx"/>
            </ruleList>
        </setInstallerVariable>

        <!-- Set the sqlprotect version(if exists) -->
        <setInstallerVariable name="sqlprotectVersion" value=""/>
        <setInstallerVariable name="pglibdir" value=""/>
        <setInstallerVariable name="installdir" value=""/>
        <setInstallerVariable name="default_installdir" value=""/>

        <!-- Custome Page for Registration -->
        <include file="staging/registration_plus_initialization.xml"/>

    </initializationActionList>
    <!-- Preinstallation actions -->
    <preInstallationActionList>
     <!-- Creating a temporary directory -->
     <createTempDir dirPrefix="${product_shortname}"/>

       <!-- Creates the ini file if not exits -->
       <touchFile path="/etc/postgres-reg.ini">
           <ruleList>
               <compareText>
                   <logic>does_not_equal</logic>
                   <text>${platform_name}</text>
                   <value>windows</value>
               </compareText>
           </ruleList>
       </touchFile>
       <!-- WIN: Get the branding & Check Previous Installation of sqlprotect -->
       <actionGroup>
           <actionList>
               <registryGet>
                   <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\sqlprotect-PG_PG_MAJOR_VERSION</key>
                   <name>Version</name>
                   <variable>sqlprotectVersion</variable>
               </registryGet>
           </actionList>
           <ruleList>
               <compareText>
                   <logic>equals</logic>
                   <text>${platform_name}</text>
                   <value>windows</value>
               </compareText>
           </ruleList>
       </actionGroup>
       <!-- LIN & MAC: Get the branding & Check Previous Installation of sqlprotect -->
       <actionGroup>
           <actionList>
               <iniFileGet>
                   <file>/etc/postgres-reg.ini</file>
                   <section>sqlprotect-PG_PG_MAJOR_VERSION</section>
                   <key>Version</key>
                   <variable>sqlprotectVersion</variable>
               </iniFileGet>
           </actionList>
           <ruleList>
               <compareText>
                   <logic>does_not_equal</logic>
                   <text>${platform_name}</text>
                   <value>windows</value>
               </compareText>
           </ruleList>
       </actionGroup>

       <!-- WIN: Set Installation Directory in case of re-install/upgrade -->
       <actionGroup>
           <actionList>
               <registryGet>
                   <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\sqlprotect-PG_PG_MAJOR_VERSION</key>
                   <name>Location</name>
                   <variable>installdir</variable>
               </registryGet>
           </actionList>
           <ruleList>
               <compareText>
                   <logic>does_not_equal</logic>
                   <text>${sqlprotectVersion}</text>
                   <value/>
               </compareText>
               <compareText>
                   <logic>equals</logic>
                   <text>${platform_name}</text>
                   <value>windows</value>
               </compareText>
           </ruleList>
       </actionGroup>

       <!-- LIN | MAC : Set Installation Directory in case of re-install/upgrade -->
       <actionGroup>
           <actionList>
               <iniFileGet>
                   <file>/etc/postgres-reg.ini</file>
                   <section>sqlprotect-PG_PG_MAJOR_VERSION</section>
                   <key>InstallationDirectory</key>
                   <variable>installdir</variable>
               </iniFileGet>
           </actionList>
           <ruleList>
               <compareText>
                   <logic>does_not_equal</logic>
                   <text>${sqlprotectVersion}</text>
                   <value/>
               </compareText>
               <compareText>
                   <logic>does_not_equal</logic>
                   <text>${platform_name}</text>
                   <value>windows</value>
               </compareText>
           </ruleList>
       </actionGroup>

        <!-- Get the installation directory from previous pg installation -->
        <!--    Postgres Installation would have set these values -->
        <registryGet>
            <key>HKEY_LOCAL_MACHINE\SOFTWARE\PostgreSQL\Installations\postgresql-PG_MAJOR_VERSION</key>
            <name>Base Directory</name>
            <variable>pginstalldir</variable>
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </registryGet>

        <!-- LIN & MAC: Set the installation Directory from registry. -->
        <!--    sqlprotect Installation would have set these values -->
        <iniFileGet>
            <file>/etc/postgres-reg.ini</file>
            <section>PostgreSQL/PG_MAJOR_VERSION</section>
            <key>InstallationDirectory</key>
            <variable>pginstalldir</variable>
            <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
            </ruleList>
        </iniFileGet>

        <!-- Set the default value of installdir as found in registry if it is found there -->
        <setInstallerVariable name="default_installdir" value="${pginstalldir}">
            <ruleList>
                <compareText logic="does_not_equal" text="${pginstalldir}" value=""/>
            </ruleList>
        </setInstallerVariable>

        <actionGroup>
            <actionList>
                <!-- WIN: Set the pghome default value -->
                <setInstallerVariable name="default_installdir" value="${platform_install_prefix}\PostgreSQL\PG_MAJOR_VERSION">
                    <ruleList>
                        <compareText logic="equals" text="${platform_name}" value="windows"/>
                    </ruleList>
                </setInstallerVariable>
                <!-- LIN: Set the pghome default value  -->
                <setInstallerVariable name="default_installdir" value="${platform_install_prefix}/PostgreSQL/PG_MAJOR_VERSION">
                    <ruleList>
                        <compareText logic="contains" text="${platform_name}" value="linux"/>
                    </ruleList>
                </setInstallerVariable>
                <!-- MAC: Set the  pghome default value  -->
                <setInstallerVariable name="default_installdir" value="/Library/PostgreSQL/PG_VERSION_SQLPROTECT">
                    <ruleList>
                        <compareText logic="equals" text="${platform_name}" value="osx"/>
                    </ruleList>
                </setInstallerVariable>
            </actionList>
            <ruleList>
                <compareText logic="equals" text="${default_installdir}" value=""/>
            </ruleList>
        </actionGroup>

        <setInstallerVariable name="installdir" value="${default_installdir}">
            <ruleList>
                 <stringTest text="${installdir}" type="empty"/>
            </ruleList>
        </setInstallerVariable>

        <!-- Unattended mode: Check valid PostgreSQL directory -->
        <actionGroup>
            <actionList>

                <!-- Check if 32 bit SQL/Protect installer is being tried out aginst PG x64 bit on windows or vice versa -->
                <actionGroup>
                    <actionList>
                        <registryGet wowMode="64" variable="pginstalldir"
                            key="HKEY_LOCAL_MACHINE\SOFTWARE\PostgreSQL\Installations\postgresql-x64-PG_MAJOR_VERSION"
                            name="Base Directory">
                            <ruleList>
                                <compareValues value1="@@WINDIR@@" value2="windows-x64" logic="does_not_equal"/>
                            </ruleList>
                        </registryGet>
                        <registryGet wowMode="32" variable="pginstalldir"
                            key="HKEY_LOCAL_MACHINE\SOFTWARE\PostgreSQL\Installations\postgresql-PG_MAJOR_VERSION"
                            name="Base Directory">
                            <ruleList>
                                <compareValues value1="@@WINDIR@@" value2="windows-x64" logic="equals"/>
                            </ruleList>
                        </registryGet>

                        <stringModify variable="dos_path_installdir" logic="toupper" text="${installdir.dos}"/>
                        <stringModify variable="dos_path_pginstalldir" logic="toupper" text="${pginstalldir.dos}"/>
                        <throwError text="${msg(sqlprotect.incompatible.pg64.error)}">
                            <ruleList>
                                <compareValues value1="@@WINDIR@@" value2="windows-x64" logic="does_not_equal"/>
                                <compareValues logic="equals" value1="${dos_path_installdir}" value2="${dos_path_pginstalldir}"/>
                            </ruleList>
                        </throwError>
                        <throwError text="${msg(sqlprotect.incompatible.pg32.error)}">
                            <ruleList>
                                <compareValues value1="@@WINDIR@@" value2="windows-x64" logic="equals"/>
                                <compareValues logic="equals" value1="${dos_path_installdir}" value2="${dos_path_pginstalldir}"/>
                            </ruleList>
                        </throwError>
                    </actionList>
                    <ruleList>
                        <platformTest type="windows-x64"/>
                    </ruleList>
                </actionGroup>

                <setInstallerVariable name="pg_version_str" value=""/>
                <setInstallerVariable name="pg_config_exec" value="${installdir}/bin/pg_config">
                    <ruleList>
                        <compareText text="${platform_name}" logic="does_not_equal" value="windows"/>
                    </ruleList>
                </setInstallerVariable>
                <setInstallerVariable name="pg_config_exec" value="${installdir}\bin\pg_config.exe">
                    <ruleList>
                        <compareText text="${platform_name}" logic="equals" value="windows"/>
                    </ruleList>
                </setInstallerVariable>

                <!-- LIN | MAC : show error if the installdir is not valid -->
                <throwError text="${msg(sqlprotect.installdir.pgerror)}">
                    <ruleList>
                        <ruleGroup>
                            <ruleEvaluationLogic>or</ruleEvaluationLogic>
                            <ruleList>
                                <fileTest path="${installdir}/bin/psql" condition="not_exists"/>
                                <fileTest path="${installdir}/bin/createdb" condition="not_exists"/>
                                <fileTest path="${installdir}/bin/createlang" condition="not_exists"/>
                                <fileTest path="${installdir}/bin/pg_config" condition="not_exists"/>
                            </ruleList>
                        </ruleGroup>
                        <compareText text="${platform_name}" logic="does_not_equal" value="windows"/>
                    </ruleList>
                </throwError>

                <!-- WIN : show error if the installdir is not valid -->
                <throwError text="${msg(sqlprotect.installdir.pgerror)}">
                    <ruleList>
                        <ruleGroup>
                            <ruleEvaluationLogic>or</ruleEvaluationLogic>
                            <ruleList>
                                <fileTest path="${installdir}\bin\psql.exe" condition="not_exists"/>
                                <fileTest path="${installdir}\bin\createdb.exe" condition="not_exists"/>
                                <fileTest path="${installdir}\bin\createlang.exe" condition="not_exists"/>
                                <fileTest path="${installdir}\bin\pg_config.exe" condition="not_exists"/>
                            </ruleList>
                        </ruleGroup>
                        <compareText text="${platform_name}" logic="equals" value="windows"/>
                    </ruleList>
                </throwError>

                <setInstallerVariableFromScriptOutput name="pg_version_str"
                      exec="${pg_config_exec}" execArgs="--version"
                      abortOnError="0" showMessageOnError="0"
                      workingDirectory="${installdir}/bin"/>
                <setInstallerVariableFromRegEx name="pg_version" text="${pg_version_str}">
                    <pattern>^PostgreSQL ([0-9].[0-9]).?[\w]*$</pattern>
                    <substitution>\1</substitution>
                    <ruleList>
                        <compareText logic="does_not_equal" text="${pg_version_str}" value=""/>
                    </ruleList>
                </setInstallerVariableFromRegEx>
                <throwError text="${msg(sqlprotect.incompatible.pg.error)}">
                    <ruleList>
                        <compareText logic="does_not_equal" text="${pg_version}" value="PG_MAJOR_VERSION"/>
                    </ruleList>
                </throwError>
                <setInstallerVariableFromScriptOutput name="pglibdir"
                      exec="${pg_config_exec}" execArgs="--pkglibdir"
                      abortOnError="0" showMessageOnError="0"
                      workingDirectory="${installdir}/bin">
                    <onErrorActionList>
                        <setInstallerVariable name="pglibdir" value="${installdir}/lib"/>
                    </onErrorActionList>
                </setInstallerVariableFromScriptOutput>
            </actionList>
            <ruleList>
                <compareText logic="equals" text="${installer_ui}" value="unattended"/>
            </ruleList>
        </actionGroup>

        <!-- Custome Page for Registration -->
        <include file="staging/registration_plus_preinstallation.xml"/>

    </preInstallationActionList>
    <readyToInstallActionList>
        <actionGroup>
            <actionList>
                <setInstallerVariable name="pg_config_exec" value="${installdir}/bin/pg_config">
                    <ruleList>
                        <compareText text="${platform_name}" logic="does_not_equal" value="windows"/>
                    </ruleList>
                </setInstallerVariable>
                <setInstallerVariable name="pg_config_exec" value="${installdir}\bin\pg_config.exe">
                    <ruleList>
                        <compareText text="${platform_name}" logic="equals" value="windows"/>
                    </ruleList>
                </setInstallerVariable>
                <setInstallerVariableFromScriptOutput name="pglibdir"
                      exec="${pg_config_exec}" execArgs="--pkglibdir"
                      abortOnError="0" showMessageOnError="0"
                      workingDirectory="${installdir}/bin">
                    <onErrorActionList>
                        <setInstallerVariable name="pglibdir" value="${installdir}/lib"/>
                    </onErrorActionList>
                </setInstallerVariableFromScriptOutput>
            </actionList>
            <ruleList>
                <stringTest text="${pglibdir}" type="empty"/>
            </ruleList>
        </actionGroup>
    </readyToInstallActionList>
    <!-- Post installation actions -->
    <postInstallationActionList>
        <actionGroup>
            <actionList>
                <!-- LIN & MAC: Write the sqlprotect Version to INI File -->
                <actionGroup>
                    <actionList>
                        <iniFileSet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>sqlprotect-PG_PG_MAJOR_VERSION</section>
                            <key>Description</key>
                            <value>${msg(install.summary)}</value>
                        </iniFileSet>
                        <iniFileSet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>sqlprotect-PG_PG_MAJOR_VERSION</section>
                            <key>InstallationDirectory</key>
                            <value>${installdir}</value>
                        </iniFileSet>
                        <iniFileSet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>sqlprotect-PG_PG_MAJOR_VERSION</section>
                            <key>Version</key>
                            <value>${product_version}</value>
                        </iniFileSet>
                        <changePermissions files="${pglibdir}/sqlprotect.so" permissions="755"/>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <text>${platform_name}</text>
                            <logic>does_not_equal</logic>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </actionGroup>
            </actionList>
        </actionGroup>

        <!-- Custome Page for Registration -->
        <include file="staging/registration_plus_postinstallation.xml"/>

      <deleteFile path="${system_temp_directory}/${product_shortname}_${random_number}" >
            <ruleList>
                <fileExists path="${system_temp_directory}/${product_shortname}_${random_number}" />
            </ruleList>
      </deleteFile>
    </postInstallationActionList>
    <!-- preUninstallation actions -->
    <preUninstallationActionList>
        <!-- LIN & MAC: Unsetting the sqlprotect values in the ini file -->
        <actionGroup>
            <actionList>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>sqlprotect-PG_PG_MAJOR_VERSION</section>
                    <key>Description</key>
                    <value/>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>sqlprotect-PG_PG_MAJOR_VERSION</section>
                    <key>InstallationDirectory</key>
                    <value/>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>sqlprotect-PG_PG_MAJOR_VERSION</section>
                    <key>Version</key>
                    <value/>
                </iniFileSet>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
        <registryDelete key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\sqlprotect-PG_PG_MAJOR_VERSION"/>

        <!-- Custome Page for Registration -->
        <include file="staging/registration_plus_preuninstallation.xml"/>
    </preUninstallationActionList>

    <!-- postUninstallation actions -->
    <postUninstallationActionList>
        <!-- Promt user about removing the sqlprotect from the shared_preload_libraries -->
        <showInfo text="${msg(sqlprotect.remove.shared_preload_libraries.info)}"/>
    </postUninstallationActionList>

    <!-- Components -->
    <componentList>
        <component>
            <name>sqlprotect</name>
            <description>sqlprotect</description>
            <canBeEdited>0</canBeEdited>
            <selected>1</selected>
            <show>0</show>
            <folderList>
                <!-- WIN: Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfileswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
					    <distributionDirectory>
                            <origin>staging/@@WINDIR@@/doc</origin>
                        </distributionDirectory>
		                <distributionDirectory>
                            <origin>staging/@@WINDIR@@/share</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Lib</description>
                    <destination>${pglibdir}</destination>
                    <name>libfileswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/@@WINDIR@@/lib/postgresql/sqlprotect.dll"/>
                    </distributionFileList>
                </folder>
                <!-- LIN: Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfilesliblinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
					    <distributionDirectory>
                            <origin>staging/linux/doc</origin>
                        </distributionDirectory>
						<distributionDirectory>
                            <origin>staging/linux/share</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Lib</description>
                    <destination>${pglibdir}</destination>
                    <name>libfileslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/linux/lib/postgresql/sqlprotect.so"/>
                    </distributionFileList>
                </folder>
                <!-- LIN-X64: Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfilesliblinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
					    <distributionDirectory>
                            <origin>staging/linux-x64/doc</origin>
                        </distributionDirectory>
						<distributionDirectory>
                            <origin>staging/linux-x64/share</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Lib</description>
                    <destination>${pglibdir}</destination>
                    <name>libfileslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/linux-x64/lib/postgresql/sqlprotect.so"/>
                    </distributionFileList>
                </folder>
                <!-- MAC: Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfileslibosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/osx/doc</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/osx/share</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Lib</description>
                    <destination>${pglibdir}</destination>
                    <name>libfilesosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/osx/lib/postgresql/sqlprotect.so"/>
                    </distributionFileList>
                </folder>
            </folderList>
        </component>

        <!-- Custome Page for Registration -->
        <include file="staging/registration_plus_component.xml"/>

    </componentList>
    <parameterList>

        <!-- Custome Page for Registration -->
        <include file="staging/registration_plus_already_registered_parameter.xml"/>
        <include file="staging/registration_plus_authentication_parameter.xml"/>

        <stringParameter name="originalplatform" ask="0" cliOptionShow="0"/>
        <stringParameter name="branding" cliOptionName="branding" ask="0" cliOptionShow="0"/>

        <!-- Install Directory -->
        <parameterGroup name="PostgresInstallationDetails" title="${msg(pg.server.title)}" description="Installer.Parameter.pg.installdir"
                        explanation="Installer.Parameter.installdir.pg.explanation">
            <parameterList>
                <directoryParameter name="installdir" value="${default_installdir}"
                            default="" allowEmptyValue="1" ask="1" mustExist="1"
                            cliOptionName="prefix" mustBeWritable="1"
                            width="40">
		    <preShowPageActionList>
                        <wow64FsRedirection action="enable" />
                    </preShowPageActionList>
		    <postShowPageActionList>
                        <wow64FsRedirection action="disable" />
                    </postShowPageActionList>
                    <!-- Validating whether installdir is empty -->
                    <validationActionList>
                        <actionGroup>
                            <actionList>
                                <setInstallerVariable name="installdir" value="${default_installdir}" />
                                <throwError text="${msg(sqlprotect.installdir.empty)}"/>
                            </actionList>
                            <ruleList>
                                <compareText text="${installdir}" logic="equals" value=""/>
                            </ruleList>
                        </actionGroup>

                        <throwError text="${msg(sqlprotect.installdir.error)}">
                            <ruleList>
                                <regExMatch text="${installdir}" logic="does_not_match">
                                    <pattern>^/([0-9a-zA-Z_/\.\-]*)$</pattern>
                                </regExMatch>
                                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                            </ruleList>
                        </throwError>

                        <!-- Validating whether installdir is valid (Windows) -->
                        <throwError text="${msg(sqlprotect.installdir.error)}">
                            <ruleList>
                                <regExMatch text="${installdir}" logic="does_not_match">
                                    <pattern>^([a-zA-Z]:)\\([0-9a-zA-Z_\\\s\.\-\(\)]*)$</pattern>
                                </regExMatch>
                                <compareText text="${platform_name}" logic="equals" value="windows"/>
                            </ruleList>
                        </throwError>

                        <!-- LIN | MAC : show error if the installdir is not valid -->
                        <throwError text="${msg(sqlprotect.installdir.pgerror)}">
                            <ruleList>
                                <ruleGroup>
                                    <ruleEvaluationLogic>or</ruleEvaluationLogic>
                                    <ruleList>
                                        <fileTest path="${installdir}/bin/psql" condition="not_exists"/>
                                        <fileTest path="${installdir}/bin/createdb" condition="not_exists"/>
                                        <fileTest path="${installdir}/bin/createlang" condition="not_exists"/>
                                        <fileTest path="${installdir}/bin/pg_config" condition="not_exists"/>
                                    </ruleList>
                                </ruleGroup>
                                <compareText text="${platform_name}" logic="does_not_equal" value="windows"/>
                            </ruleList>
                        </throwError>

                        <!-- WIN : show error if the installdir is not valid -->
                        <throwError text="${msg(sqlprotect.installdir.pgerror)}">
                            <ruleList>
                                <ruleGroup>
                                    <ruleEvaluationLogic>or</ruleEvaluationLogic>
                                    <ruleList>
                                        <fileTest path="${installdir}\bin\psql.exe" condition="not_exists"/>
                                        <fileTest path="${installdir}\bin\createdb.exe" condition="not_exists"/>
                                        <fileTest path="${installdir}\bin\createlang.exe" condition="not_exists"/>
                                        <fileTest path="${installdir}\bin\pg_config.exe" condition="not_exists"/>
                                    </ruleList>
                                </ruleGroup>
                                <compareText text="${platform_name}" logic="equals" value="windows"/>
                            </ruleList>
                        </throwError>
                        <setInstallerVariable name="pg_version_str" value=""/>
                        <setInstallerVariable name="pg_config_exec" value="${installdir}/bin/pg_config">
                            <ruleList>
                                <compareText text="${platform_name}" logic="does_not_equal" value="windows"/>
                            </ruleList>
                        </setInstallerVariable>
                        <setInstallerVariable name="pg_config_exec" value="${installdir}\bin\pg_config.exe">
                            <ruleList>
                                <compareText text="${platform_name}" logic="equals" value="windows"/>
                            </ruleList>
                        </setInstallerVariable>

                        <!-- Check if 32 bit SQL/Protect installer is being tried out aginst PG x64 bit on windows or vice versa -->
                        <actionGroup>
                            <actionList>
                                <registryGet wowMode="64" variable="pginstalldir"
                                    key="HKEY_LOCAL_MACHINE\SOFTWARE\PostgreSQL\Installations\postgresql-x64-PG_MAJOR_VERSION"
                                    name="Base Directory">
                                    <ruleList>
                                        <compareValues value1="@@WINDIR@@" value2="windows-x64" logic="does_not_equal"/>
                                    </ruleList>
                                </registryGet>
                                <registryGet wowMode="32" variable="pginstalldir"
                                    key="HKEY_LOCAL_MACHINE\SOFTWARE\PostgreSQL\Installations\postgresql-PG_MAJOR_VERSION"
                                    name="Base Directory">
                                    <ruleList>
                                        <compareValues value1="@@WINDIR@@" value2="windows-x64" logic="equals"/>
                                    </ruleList>
                                </registryGet>

                                <stringModify variable="dos_path_installdir" logic="toupper" text="${installdir.dos}"/>
                                <stringModify variable="dos_path_pginstalldir" logic="toupper" text="${pginstalldir.dos}"/>
                                <throwError text="${msg(sqlprotect.incompatible.pg64.error)}">
                                    <ruleList>
                                        <compareValues value1="@@WINDIR@@" value2="windows-x64" logic="does_not_equal"/>
                                        <compareValues logic="equals" value1="${dos_path_installdir}" value2="${dos_path_pginstalldir}"/>
                                    </ruleList>
                                </throwError>
                                <throwError text="${msg(sqlprotect.incompatible.pg32.error)}">
                                    <ruleList>
                                        <compareValues value1="@@WINDIR@@" value2="windows-x64" logic="equals"/>
                                        <compareValues logic="equals" value1="${dos_path_installdir}" value2="${dos_path_pginstalldir}"/>
                                    </ruleList>
                                </throwError>
                            </actionList>
                            <ruleList>
                                <platformTest type="windows-x64"/>
                            </ruleList>
                        </actionGroup>

                        <setInstallerVariableFromScriptOutput name="pg_version_str"
                              exec="${pg_config_exec}" execArgs="--version"
                              abortOnError="0" showMessageOnError="0"
                              workingDirectory="${installdir}/bin"/>
                        <setInstallerVariableFromRegEx name="pg_version" text="${pg_version_str}">
                            <pattern>^PostgreSQL ([0-9].[0-9]).?[\w]*$</pattern>
                            <substitution>\1</substitution>
                            <ruleList>
                                <compareText logic="does_not_equal" text="${pg_version_str}" value=""/>
                            </ruleList>
                        </setInstallerVariableFromRegEx>
                        <throwError text="${msg(sqlprotect.incompatible.pg.error)}">
                            <ruleList>
                                <compareText logic="does_not_equal" text="${pg_version}" value="PG_MAJOR_VERSION"/>
                            </ruleList>
                        </throwError>
                        <setInstallerVariableFromScriptOutput name="pglibdir"
                              exec="${pg_config_exec}" execArgs="--pkglibdir"
                              abortOnError="0" showMessageOnError="0"
                              workingDirectory="${installdir}/bin">
                            <onErrorActionList>
                                <setInstallerVariable name="pglibdir" value="${installdir}/lib"/>
                            </onErrorActionList>
                        </setInstallerVariableFromScriptOutput>
                    </validationActionList>
                </directoryParameter>
            </parameterList>
            <ruleList>
                <compareText text="${sqlprotectVersion}" logic="equals" value=""/>
            </ruleList>
        </parameterGroup>

        <!-- Explain that we're using an existing installation directory -->
        <labelParameter>
            <name>upgrade</name>
            <title>${msg(upgrade.existing.installation.title)}</title>
            <description>${msg(upgrade.existing.installation.description)}</description>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${sqlprotectVersion}</text>
                    <value/>
                </compareText>
            </ruleList>
        </labelParameter>
    </parameterList>
</project>
