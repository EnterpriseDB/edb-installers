<project>
    <!-- Package details -->
    <shortName>pgmigrator</shortName>
    <fullName>pgMigrator</fullName>
    <version>PG_VERSION_PGMIGRATOR-PG_BUILDNUM_PGMIGRATOR</version>
    <!-- These options are used on Windows -->
    <startMenuGroupName>${branding}</startMenuGroupName>
    <!-- Product Specific Options -->
    <productComments>pg_migrator, packaged by EnterpriseDB</productComments>
    <productDisplayName>${product_fullname} ${productVersion}</productDisplayName>
    <requireInstallationByRootUser>1</requireInstallationByRootUser>
    <!-- The options are used for RPM registration -->
    <description>Tool for migration from an old release of PostgreSQL to a new release.</description>
    <summary>Migration tool for an older release of PostgreSQL to a new release, packaged by EnterpriseDB</summary>
    <vendor>EnterpriseDB</vendor>

    <!-- Installer Size -->
    <width>550</width>
    <height>400</height>

    <!-- Misc options -->
    <installerFilename>${product_shortname}-${product_version}-${platform_name}.${platform_exec_suffix}</installerFilename>
    <wrapLicenseFileText>0</wrapLicenseFileText>
    <compressionAlgorithm>lzma</compressionAlgorithm>
    <unattendedModeUI>minimal</unattendedModeUI>
    <enableRollback>0</enableRollback>
    <saveRelativePaths>1</saveRelativePaths>
    <uninstallerName>uninstall-${product_shortname}</uninstallerName>
    <outputDirectory>../output</outputDirectory>
    <installationLogFile>${system_temp_directory}/install-${product_shortname}.log</installationLogFile>

    <!-- Images -->
    <disableSplashScreen>1</disableSplashScreen>
    <leftImage>../resources/pg-side.png</leftImage>

    <!-- i18n files for the UI -->
    <allowedLanguages>en</allowedLanguages>
    <customLanguageFileList>
        <language>
            <code>en</code>
            <encoding>iso8859-1</encoding>
            <file>i18n/en.lng</file>
        </language>
    </customLanguageFileList>
    <preShowHelpActionList>
        <!-- MAC : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>/Library/PostgreSQL/PG_MAJOR_VERSION</value>
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="osx"/>
            </ruleList>
        </setInstallerVariable>
        <!-- LIN : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${platform_install_prefix}/PostgreSQL/PG_MAJOR_VERSION</value>
            <ruleList>
                <compareText logic="contains" text="${platform_name}" value="linux"/>
            </ruleList>
        </setInstallerVariable>
        <!-- WIN : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${platform_install_prefix}\PostgreSQL\PG_MAJOR_VERSION</value>
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </setInstallerVariable>
    </preShowHelpActionList>
  
    <!-- Prebuild Actons-->
    <preBuildActionList>
      <setInstallerVariable name="originalplatform" value="${platform_name}"/>
      <setInstallerVariable name="originalplatform" value="linux-x32">
          <ruleList>
              <compareText text="${platform_name}" value="linux"/>
          </ruleList>
      </setInstallerVariable>
    </preBuildActionList>
    <initializationActionList>
        <setInstallerVariable name="productVersion" persist="1" value="PG_VERSION_PGMIGRATOR" />
    <!-- Abort Installation as trying to  run a 32-bit installer on 64-bit machine -->
        <throwError>
          <customErrorMessage>${msg(platform.not.match)}</customErrorMessage>
          <text>Unknown Error</text>
          <ruleList>
            <platformTest type="linux-x64"/>
            <compareText text="${originalplatform}" value="linux-x32"/>
          </ruleList>
        </throwError>
        <!-- LIN : Set the default values for unattended mode -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="installdir" value="${platform_install_prefix}/PostgreSQL/PG_MAJOR_VERSION"/>
            </actionList>
            <ruleList>
                <compareText logic="equals" text="${installer_ui}" value="unattended"/>
                <compareText logic="contains" text="${platform_name}" value="linux"/>
            </ruleList>
        </actionGroup>
        <!-- WIN : Set the default values for unattended mode -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="installdir" value="${platform_install_prefix}\PostgreSQL\PG_MAJOR_VERSION"/>
            </actionList>
            <ruleList>
                <compareText logic="equals" text="${installer_ui}" value="unattended"/>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>
        <!-- MAC : Set the default values for unattended mode -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="installdir" value="/Library/PostgreSQL/PG_MAJOR_VERSION"/>
            </actionList>
            <ruleList>
                <compareText logic="equals" text="${installer_ui}" value="unattended"/>
                <compareText logic="equals" text="${platform_name}" value="osx"/>
            </ruleList>
        </actionGroup>
        <!-- MAC : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>/Library/PostgreSQL/PG_MAJOR_VERSION</value>
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="osx"/>
            </ruleList>
        </setInstallerVariable>
        <!-- LIN : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${platform_install_prefix}/PostgreSQL/PG_MAJOR_VERSION</value>
            <ruleList>
                <compareText logic="contains" text="${platform_name}" value="linux"/>
            </ruleList>
        </setInstallerVariable>
        <!-- WIN : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${platform_install_prefix}\PostgreSQL\PG_MAJOR_VERSION</value>
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </setInstallerVariable>
    </initializationActionList>
    <preInstallationActionList>

        <!-- Creates the ini file if not exits -->
        <touchFile path="/etc/postgres-reg.ini">
            <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
            </ruleList>
        </touchFile>

        <!-- LIN & MAC : Get the branding & check Previous Installation of pgMigrator-->
        <actionGroup>
            <actionList>
                <iniFileGet file="/etc/postgres-reg.ini" section="pgMigrator-PG_MAJOR_VERSION" key="Branding" variable="iBranding"/>
                <iniFileGet file="/etc/postgres-reg.ini" section="pgMigrator-PG_MAJOR_VERSION" key="Version" variable="pgMigratorVersion"/>
            </actionList>
            <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>

        <!-- WIN : Check Previous Installation of pgMigrator-->
        <actionGroup>
            <actionList>
                <!-- Get the branding -->
                <registryGet name="Branding" key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgMigrator-PG_MAJOR_VERSION" variable="iBranding"/>
                <registryGet name="Version" key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgMigrator-PG_MAJOR_VERSION" variable="pgMigratorVersion"/>
            </actionList>
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>

        <!-- If there appears to be an existing installation, with no Branding value. --> 
        <!-- force the default value. Otherwise, set the branding to whatever we read, -->
        <!-- or, set the default -->
        
        <!-- Existing, old install (version, but no branding) -->
        <setInstallerVariable>
            <name>branding</name>
            <persist>0</persist>
            <value>PostgreSQL</value>
            <ruleList>
                <compareText logic="does_not_equal" text="${pgMigratorVersion}" value=""/>
                <compareText logic="equals" text="${iBranding}" value=""/>
            </ruleList>
        </setInstallerVariable>
        
        <!-- Existing install, with branding -->
        <setInstallerVariable>
            <name>branding</name>
            <persist>0</persist>
            <value>${iBranding}</value>
            <ruleList>
                <compareText logic="does_not_equal" text="${iBranding}" value=""/>
            </ruleList>
        </setInstallerVariable>
        
        <!-- New install, nothing set on the command line -->
        <setInstallerVariable>
            <name>branding</name>
            <persist>0</persist>
            <value>PostgreSQL</value>
            <ruleList>
                <compareText logic="equals" text="${branding}" value=""/>
            </ruleList>
        </setInstallerVariable>
        
        <logMessage text="Using branding: ${branding}"/>
        <!-- Set the installation directory in case of re-install/upgrade -->
        <actionGroup>
            <actionList>
                <iniFileGet file="/etc/postgres-reg.ini" section="pgMigrator-PG_MAJOR_VERSION" key="InstallationDirectory" variable="installdir"/>
            </actionList>
            <ruleList>
                <compareText logic="does_not_equal" text="${pgMigratorVersion}" value=""/>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>
   
        <!-- WIN: Set the installation directory in case of re-install/upgrade -->
        <actionGroup>
            <actionList>
                <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgMigrator-PG_MAJOR_VERSION" name="Location" variable="installdir"/>
            </actionList>
            <ruleList>
                <compareText logic="does_not_equal" text="${pgMigratorVersion}" value=""/>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>

        <!-- LIN | MAC : Exit the installation if the installdir is not valid (Unattended mode) -->
        <actionGroup>
            <actionList>
                <showWarning text="${msg(pg_migrator.installdir.pgerror)}"/>
                <exit exitCode="0"/>
            </actionList>
            <ruleList>
                <fileTest path="${installdir}/bin/pg_config" condition="not_exists"/>
                <compareText text="${platform_name}" logic="does_not_equal" value="windows"/>
                <compareText logic="equals" text="${installer_ui}" value="unattended"/>
            </ruleList>
        </actionGroup>
		
        <!-- WIN: Exit the installation if the installdir is not valid (Unattended mode) -->
        <actionGroup>
            <actionList>
                <showWarning text="${msg(pg_migrator.installdir.pgerror)}"/>
                <exit exitCode="0"/>
            </actionList>
            <ruleList>
                <fileTest path="${installdir}/bin/pg_config" condition="not_exists"/>
                <compareText text="${platform_name}" logic="equals" value="windows"/>
                <compareText logic="equals" text="${installer_ui}" value="unattended"/>
            </ruleList>
        </actionGroup>
		
        <!-- Exits the installation if the postgresql version is not compatible with pg_migrator version (Unattended mode) -->
        <actionGroup>
            <actionList>
                 <setInstallerVariableFromScriptOutput>
                    <name>pg_version_str</name>
                    <exec>${installdir}/bin/pg_config</exec>
                    <execArgs>--version</execArgs>
                    <workingDirectory>${installdir}/bin</workingDirectory>
                    <ruleList>
                        <compareText text="${platform_name}" logic="does_not_equal" value="windows"/>
                    </ruleList>
                </setInstallerVariableFromScriptOutput>
                <setInstallerVariableFromScriptOutput>
                    <name>pg_version_str</name>
                    <exec>${installdir}\bin\pg_config.exe</exec>
                    <execArgs>--version</execArgs>
                    <workingDirectory>${installdir}\bin</workingDirectory>
                    <ruleList>
                        <compareText text="${platform_name}" logic="equals" value="windows"/>
                    </ruleList>
                </setInstallerVariableFromScriptOutput>
                <setInstallerVariableFromRegEx>
                      <name>pg_version</name>
                      <text>${pg_version_str}</text>
                      <pattern>^PostgreSQL ([0-9].[0-9]).?[\w]*$</pattern>
                      <substitution>\1</substitution>
                      <ruleList>
                         <compareText logic="does_not_equal" text="${pg_version_str}" value=""/>
                      </ruleList>
                </setInstallerVariableFromRegEx>
                <showWarning text="${msg(pg_migrator.installdir.pg_version.mismatch)}">
                    <ruleList>
                      <compareText logic="does_not_equal" text="${pg_version}" value="PG_MAJOR_VERSION"/>
                   </ruleList>
                </showWarning>
                <exit exitCode="0">
                   <ruleList>
                      <compareText logic="does_not_equal" text="${pg_version}" value="PG_MAJOR_VERSION"/>
                   </ruleList>
                </exit>
            </actionList>
            <ruleList>
                <compareText logic="equals" text="${installer_ui}" value="unattended"/>
            </ruleList>
        </actionGroup>
    </preInstallationActionList>
    <postInstallationActionList>
        <actionGroup>
            <actionList>
                <iniFileSet file="/etc/postgres-reg.ini" section="pgMigrator-PG_MAJOR_VERSION" key="Description" value="${msg(install.summary)}"/>
                <iniFileSet file="/etc/postgres-reg.ini" section="pgMigrator-PG_MAJOR_VERSION" key="InstallationDirectory" value="${installdir}"/>
                <iniFileSet file="/etc/postgres-reg.ini" section="pgMigrator-PG_MAJOR_VERSION" key="Version" value="${product_version}"/>
            </actionList>
            <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>
        <!-- Branding info -->
        <logMessage>
            <text>Write the branding to the ini file...</text>
        </logMessage>
        <iniFileSet file="/etc/postgres-reg.ini" section="pgMigrator-PG_MAJOR_VERSION" key="Branding" value="${branding}">
            <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
            </ruleList>
        </iniFileSet>
        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgMigrator-PG_MAJOR_VERSION" name="Description" value="${msg(install.summary)}"/>
        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgMigrator-PG_MAJOR_VERSION" name="InstallationDirectory" value="${installdir}"/>
        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgMigrator-PG_MAJOR_VERSION" name="Version" value="${product_version}"/>
        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgMigrator-PG_MAJOR_VERSION" name="Branding" value="${branding}"/>
    </postInstallationActionList>

    <!-- preUninstallation actions -->
    <preUninstallationActionList>
        <actionGroup>
            <actionList>
                <iniFileSet file="/etc/postgres-reg.ini" section="pgMigrator-PG_MAJOR_VERSION" key="Description" value=""/>
                <iniFileSet file="/etc/postgres-reg.ini" section="pgMigrator-PG_MAJOR_VERSION" key="InstallationDirectory" value=""/>
                <iniFileSet file="/etc/postgres-reg.ini" section="pgMigrator-PG_MAJOR_VERSION" key="Version" value=""/>
                <iniFileSet file="/etc/postgres-reg.ini" section="pgMigrator-PG_MAJOR_VERSION" key="Branding" value=""/>
            </actionList>
            <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>
    </preUninstallationActionList>
    <!-- Components -->
    <componentList>
        <component>
            <name>default</name>
            <description>Default Component</description>
            <canBeEdited>0</canBeEdited>
            <selected>1</selected>
            <show>1</show>
            <folderList>
                <!-- LIN- Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/bin</destination>
                    <name>programfileslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/linux/bin/pg_migrator"/>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Library Files</description>
                    <destination>${installdir}/lib</destination>
                    <name>libfileslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/linux/lib/pg_migrator.so"/>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Doc Files</description>
                    <destination>${installdir}/doc</destination>
                    <name>docfileslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/linux/CHANGES.pg_migrator"/>
                        <distributionFile origin="staging/linux/DEVELOPERS.pg_migrator"/>
                        <distributionFile origin="staging/linux/IMPLEMENTATION.pg_migrator"/>
                        <distributionFile origin="staging/linux/IMPLEMENTATION_jp.pg_migrator"/>
                        <distributionFile origin="staging/linux/INSTALL.pg_migrator"/>
                        <distributionFile origin="staging/linux/INSTALL_jp.pg_migrator"/>
                        <distributionFile origin="staging/linux/LICENSE.pg_migrator"/>
                        <distributionFile origin="staging/linux/README.pg_migrator"/>
                    </distributionFileList>
                </folder>
                <!-- LIN-X64 - Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/bin</destination>
                    <name>programfileslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/linux-x64/bin/pg_migrator"/>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Library Files</description>
                    <destination>${installdir}/lib</destination>
                    <name>libfileslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/linux-x64/lib/pg_migrator.so"/>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Doc Files</description>
                    <destination>${installdir}/doc</destination>
                    <name>docfileslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/linux-x64/CHANGES.pg_migrator"/>
                        <distributionFile origin="staging/linux-x64/DEVELOPERS.pg_migrator"/>
                        <distributionFile origin="staging/linux-x64/IMPLEMENTATION.pg_migrator"/>
                        <distributionFile origin="staging/linux-x64/IMPLEMENTATION_jp.pg_migrator"/>
                        <distributionFile origin="staging/linux-x64/INSTALL.pg_migrator"/>
                        <distributionFile origin="staging/linux-x64/INSTALL_jp.pg_migrator"/>
                        <distributionFile origin="staging/linux-x64/LICENSE.pg_migrator"/>
                        <distributionFile origin="staging/linux-x64/README.pg_migrator"/>
                    </distributionFileList>
                </folder>
                <!-- MAC Program Files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/bin</destination>
                    <name>programfilesosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/osx/bin/pg_migrator"/>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Library Files</description>
                    <destination>${installdir}/lib</destination>
                    <name>libfilesosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/osx/lib/pg_migrator.so"/>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Doc Files</description>
                    <destination>${installdir}/doc</destination>
                    <name>docfilesosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/osx/CHANGES.pg_migrator"/>
                        <distributionFile origin="staging/osx/DEVELOPERS.pg_migrator"/>
                        <distributionFile origin="staging/osx/IMPLEMENTATION.pg_migrator"/>
                        <distributionFile origin="staging/osx/IMPLEMENTATION_jp.pg_migrator"/>
                        <distributionFile origin="staging/osx/INSTALL.pg_migrator"/>
                        <distributionFile origin="staging/osx/INSTALL_jp.pg_migrator"/>
                        <distributionFile origin="staging/osx/LICENSE.pg_migrator"/>
                        <distributionFile origin="staging/osx/README.pg_migrator"/>
                    </distributionFileList>
                </folder>
                <!-- WIN - Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/bin</destination>
                    <name>programfileswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/windows/bin/pg_migrator.exe"/>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Library Files</description>
                    <destination>${installdir}/lib</destination>
                    <name>libfileswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/windows/lib/pg_migrator.dll"/>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Doc Files</description>
                    <destination>${installdir}/doc</destination>
                    <name>docfileswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/windows/CHANGES.pg_migrator"/>
                        <distributionFile origin="staging/windows/DEVELOPERS.pg_migrator"/>
                        <distributionFile origin="staging/windows/IMPLEMENTATION.pg_migrator"/>
                        <distributionFile origin="staging/windows/IMPLEMENTATION_jp.pg_migrator"/>
                        <distributionFile origin="staging/windows/INSTALL.pg_migrator"/>
                        <distributionFile origin="staging/windows/INSTALL_jp.pg_migrator"/>
                        <distributionFile origin="staging/windows/LICENSE.pg_migrator"/>
                        <distributionFile origin="staging/windows/README.pg_migrator"/>
                    </distributionFileList>
                </folder>
            </folderList>
        </component>
    </componentList>
    <!-- Install Directory -->
    <parameterList>
    <stringParameter name="originalplatform" ask="0" cliOptionShow="0"/>
        <stringParameter name="branding" cliOptionName="branding" ask="0" cliOptionShow="0"/>
        <directoryParameter>
            <name>installdir</name>
            <description>Installer.Parameter.installdir.description</description>
            <explanation>Installer.Parameter.installdir.explanation</explanation>
            <value>${default_installdir}</value>
            <default/>
            <allowEmptyValue>0</allowEmptyValue>
            <ask>yes</ask>
            <cliOptionName>prefix</cliOptionName>
            <mustBeWritable>yes</mustBeWritable>
            <mustExist>0</mustExist>
            <width>40</width>
            <ruleList>
                <compareText>
                    <text>${pgMigratorVersion}</text>
                    <logic>equals</logic>
                    <value/>
                </compareText>
            </ruleList>
            <!-- Validating whether installdir is empty -->
            <validationActionList>
                <setInstallerVariable name="isValidPGPATH" value="true"/>
                <actionGroup>
                    <actionList>
                        <setInstallerVariable name="installdir" value="${default_installdir}" />
                        <throwError text="${msg(pg_migrator.installdir.empty)}"/>
                        <setInstallerVariable name="isValidPGPATH" value="false"/>
                    </actionList>
                    <ruleList>
                        <compareText text="${installdir}" logic="equals" value=""/>
                    </ruleList>
                </actionGroup>
                <actionGroup>
                    <actionList>
                        <showWarning text="${msg(pg_migrator.installdir.pgerror)}"/>
                        <setInstallerVariable name="next_page" value="installdir"/>
                        <setInstallerVariable name="isValidPGPATH" value="false"/>
                    </actionList>
                    <ruleList>
                        <fileTest path="${installdir}/bin/pg_config" condition="not_exists"/>
                        <compareText text="${platform_name}" logic="does_not_equal" value="windows"/>
                        <isTrue value="${isValidPGPATH}"/>
                    </ruleList>
                </actionGroup>
                <actionGroup>
                    <actionList>
                        <showWarning text="${msg(pg_migrator.installdir.pgerror)}"/>
                        <setInstallerVariable name="next_page" value="installdir"/>
                        <setInstallerVariable name="isValidPGPATH" value="false"/>
                    </actionList>
                    <ruleList>
                        <fileTest path="${installdir}\bin\pg_config.exe" condition="not_exists"/>
                        <compareText text="${platform_name}" logic="equals" value="windows"/>
                        <isTrue value="${isValidPGPATH}"/>
                    </ruleList>
                </actionGroup>
                <setInstallerVariableFromScriptOutput>
                    <name>pg_version_str</name>
                    <exec>${installdir}\bin\pg_config.exe</exec>
                    <execArgs>--version</execArgs>
                    <workingDirectory>${installdir}\bin</workingDirectory>
                    <ruleList>
                        <compareText text="${platform_name}" logic="equals" value="windows"/>
                        <isTrue value="${isValidPGPATH}"/>
                    </ruleList>
                </setInstallerVariableFromScriptOutput>
                <setInstallerVariableFromScriptOutput>
                    <name>pg_version_str</name>
                    <exec>${installdir}/bin/pg_config</exec>
                    <execArgs>--version</execArgs>
                    <workingDirectory>${installdir}/bin</workingDirectory>
                    <ruleList>
                        <compareText text="${platform_name}" logic="does_not_equal" value="windows"/>
                        <isTrue value="${isValidPGPATH}"/>
                    </ruleList>
                </setInstallerVariableFromScriptOutput>
                <setInstallerVariableFromRegEx>
                      <name>pg_version</name>
                      <text>${pg_version_str}</text>
                      <pattern>^PostgreSQL ([0-9].[0-9]).?[\w]*$</pattern>
                      <substitution>\1</substitution>
                      <ruleList>
                          <compareText logic="does_not_equal" text="${pg_version_str}" value=""/>
                      </ruleList>
                </setInstallerVariableFromRegEx>
                <actionGroup>
                    <actionList>
                        <showWarning text="${msg(pg_migrator.installdir.pg_version.mismatch)}"/>
                        <setInstallerVariable name="next_page" value="installdir"/>
                    </actionList>
                    <ruleList>
                        <compareText logic="does_not_equal" text="${pg_version}" value="PG_MAJOR_VERSION"/>
                        <isTrue value="${isValidPGPATH}"/>
                    </ruleList>
                </actionGroup>
            </validationActionList>

            <!-- Validating whether installdir contains whitespaces (Linux) -->
            <postShowPageActionList>
                <actionGroup>
                    <actionList>  
                        <showWarning>
                            <text>${msg(pg_migrator.installdir.error)}</text>
                        </showWarning>
                        <setInstallerVariable name="next_page" value="installdir"/>
                    </actionList>
                    <ruleList>
                       <regExMatch>
                           <text>${installdir}</text>
                           <logic>does_not_match</logic>
                           <pattern>^/([0-9a-zA-Z_/\.\-]*)$</pattern>
                       </regExMatch>
                       <compareText>
                           <logic>does_not_equal</logic>
                           <text>${platform_name}</text>
                           <value>windows</value>
                       </compareText>
                    </ruleList>
                </actionGroup>

                <!-- Validating whether installdir is valid (Windows) -->
                <actionGroup>
                   <actionList>
                     <setInstallerVariable name="installdir" value="${default_installdir}" />
                     <showWarning>
                        <text>${msg(pg_migrator.installdir.error)}</text>
                     </showWarning>
                     <setInstallerVariable name="next_page" value="installdir"/>
                   </actionList>
                   <ruleList>
                       <regExMatch>
                         <text>${installdir}</text>
                         <logic>does_not_match</logic>
                         <pattern>^([a-zA-Z]:)\\([0-9a-zA-Z_\\\s\.\-\(\)]*)$</pattern>
                       </regExMatch>
                       <compareText>
                         <text>${platform_name}</text>
                         <logic>equals</logic>
                         <value>windows</value>
                       </compareText>
                   </ruleList>
                 </actionGroup>
            </postShowPageActionList>
        </directoryParameter>
        
        <!-- Explain that we're using an existing installation directory -->
        <labelParameter>
            <name>upgrade</name>
            <title>${msg(upgrade.existing.installation.title)}</title>
            <description>${msg(upgrade.existing.installation.description)}</description>
            <ruleList>
              <compareText text="${pgMigratorVersion}" logic="does_not_equal" value=""/>
            </ruleList>
        </labelParameter>
    </parameterList>
</project>
