<project>
    <!-- Package details -->
    <shortName>pgmigrator</shortName>
    <fullName>pgMigrator</fullName>
    <version>PG_VERSION_PGMIGRATOR-PG_BUILDNUM_PGMIGRATOR</version>
    <!-- Product Specific Options -->
    <productComments>pg_migrator, packaged by EnterpriseDB</productComments>
    <productDisplayName>${product_fullname} ${productVersion}</productDisplayName>
    <requireInstallationByRootUser>1</requireInstallationByRootUser>
    <!-- The options are used for RPM registration -->
    <description>Tool for migration from an old release of PostgreSQL to a new release.</description>
    <summary>Migration tool for an older release of PostgreSQL to a new release, packaged by EnterpriseDB</summary>
    <vendor>EnterpriseDB</vendor>

    <!-- Installer Size -->
    <width>550</width>
    <height>400</height>

    <!-- Misc options -->
    <installerFilename>${product_shortname}-${product_version}-${platform_name}.${platform_exec_suffix}</installerFilename>
    <wrapLicenseFileText>0</wrapLicenseFileText>
    <compressionAlgorithm>lzma</compressionAlgorithm>
    <unattendedModeUI>minimal</unattendedModeUI>
    <enableRollback>0</enableRollback>
    <saveRelativePaths>1</saveRelativePaths>
    <uninstallerName>uninstall-${product_shortname}</uninstallerName>
    <outputDirectory>../output</outputDirectory>
    <installationLogFile>${system_temp_directory}/install-${product_shortname}.log</installationLogFile>

    <!-- Images -->
    <disableSplashScreen>1</disableSplashScreen>
    <leftImage>../resources/pg-side.png</leftImage>

    <!-- i18n files for the UI -->
    <allowedLanguages>en</allowedLanguages>
    <customLanguageFileList>
        <language>
            <code>en</code>
            <encoding>iso8859-1</encoding>
            <file>i18n/en.lng</file>
        </language>
    </customLanguageFileList>
    <preShowHelpActionList>
        <!-- MAC : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>/Library/PostgreSQL/PG_MAJOR_VERSION</value>
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="osx"/>
            </ruleList>
        </setInstallerVariable>
        <!-- LIN : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${platform_install_prefix}/PostgreSQL/PG_MAJOR_VERSION</value>
            <ruleList>
                <compareText logic="contains" text="${platform_name}" value="linux"/>
            </ruleList>
        </setInstallerVariable>
        <!-- WIN : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${platform_install_prefix}\PostgreSQL\PG_MAJOR_VERSION</value>
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </setInstallerVariable>
    </preShowHelpActionList>
  
    <!-- Prebuild Actons-->
    <preBuildActionList>
      <setInstallerVariable name="originalplatform" value="${platform_name}"/>
      <setInstallerVariable name="originalplatform" value="linux-x32">
          <ruleList>
              <compareText text="${platform_name}" value="linux"/>
          </ruleList>
      </setInstallerVariable>
    </preBuildActionList>
    <initializationActionList>
        <setInstallerVariable name="productVersion" persist="1" value="PG_VERSION_PGMIGRATOR" />
    <!-- Abort Installation as trying to  run a 32-bit installer on 64-bit machine -->
        <throwError>
          <customErrorMessage>${msg(platform.not.match)}</customErrorMessage>
          <text>Unknown Error</text>
          <ruleList>
            <platformTest type="linux-x64"/>
            <compareText text="${originalplatform}" value="linux-x32"/>
          </ruleList>
        </throwError>
        <!-- LIN : Set the default values for unattended mode -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="installdir" value="${platform_install_prefix}/PostgreSQL/PG_MAJOR_VERSION"/>
            </actionList>
            <ruleList>
                <compareText logic="equals" text="${installer_ui}" value="unattended"/>
                <compareText logic="contains" text="${platform_name}" value="linux"/>
            </ruleList>
        </actionGroup>
        <!-- WIN : Set the default values for unattended mode -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="installdir" value="${platform_install_prefix}\PostgreSQL\PG_MAJOR_VERSION"/>
            </actionList>
            <ruleList>
                <compareText logic="equals" text="${installer_ui}" value="unattended"/>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>
        <!-- MAC : Set the default values for unattended mode -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="installdir" value="/Library/PostgreSQL/PG_MAJOR_VERSION"/>
            </actionList>
            <ruleList>
                <compareText logic="equals" text="${installer_ui}" value="unattended"/>
                <compareText logic="equals" text="${platform_name}" value="osx"/>
            </ruleList>
        </actionGroup>
        <!-- MAC : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>/Library/PostgreSQL/PG_MAJOR_VERSION</value>
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="osx"/>
            </ruleList>
        </setInstallerVariable>
        <!-- LIN : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${platform_install_prefix}/PostgreSQL/PG_MAJOR_VERSION</value>
            <ruleList>
                <compareText logic="contains" text="${platform_name}" value="linux"/>
            </ruleList>
        </setInstallerVariable>
        <!-- WIN : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${platform_install_prefix}\PostgreSQL\PG_MAJOR_VERSION</value>
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </setInstallerVariable>
    </initializationActionList>
    <preInstallationActionList>

        <setInstallerVariable name="iExistingEmail" persist="0" value=""/>

        <!-- Creates the ini file if not exits -->
        <touchFile path="/etc/postgres-reg.ini">
            <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
            </ruleList>
        </touchFile>

        <!-- LIN & MAC : Get the branding & check Previous Installation of pgMigrator-->
        <actionGroup>
            <actionList>
                <iniFileGet file="/etc/postgres-reg.ini" section="pgMigrator-PG_MAJOR_VERSION" key="Branding" variable="iBranding"/>
                <iniFileGet file="/etc/postgres-reg.ini" section="pgMigrator-PG_MAJOR_VERSION" key="Version" variable="pgMigratorVersion"/>
            </actionList>
            <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>

        <!-- WIN : Check Previous Installation of pgMigrator-->
        <actionGroup>
            <actionList>
                <!-- Get the branding -->
                <registryGet name="Branding" key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgMigrator-PG_MAJOR_VERSION" variable="iBranding"/>
                <registryGet name="Version" key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgMigrator-PG_MAJOR_VERSION" variable="pgMigratorVersion"/>
            </actionList>
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>

        <!-- If there appears to be an existing installation, with no Branding value. --> 
        <!-- force the default value. Otherwise, set the branding to whatever we read, -->
        <!-- or, set the default -->
        
        <!-- Existing, old install (version, but no branding) -->
        <setInstallerVariable>
            <name>branding</name>
            <persist>0</persist>
            <value>PostgreSQL</value>
            <ruleList>
                <compareText logic="does_not_equal" text="${pgMigratorVersion}" value=""/>
                <compareText logic="equals" text="${iBranding}" value=""/>
            </ruleList>
        </setInstallerVariable>
        
        <!-- Existing install, with branding -->
        <setInstallerVariable>
            <name>branding</name>
            <persist>0</persist>
            <value>${iBranding}</value>
            <ruleList>
                <compareText logic="does_not_equal" text="${iBranding}" value=""/>
            </ruleList>
        </setInstallerVariable>
        
        <!-- New install, nothing set on the command line -->
        <setInstallerVariable>
            <name>branding</name>
            <persist>0</persist>
            <value>PostgreSQL</value>
            <ruleList>
                <compareText logic="equals" text="${branding}" value=""/>
            </ruleList>
        </setInstallerVariable>
        
        <logMessage text="Using branding: ${branding}"/>
        <!-- Set the installation directory in case of re-install/upgrade -->
        <actionGroup>
            <actionList>
                <iniFileGet file="/etc/postgres-reg.ini" section="pgMigrator-PG_MAJOR_VERSION" key="InstallationDirectory" variable="installdir"/>
                <iniFileGet file="/etc/postgres-reg.ini" section="pgMigrator-PG_MAJOR_VERSION" key="Username" variable="iExistingEmail"/>
            </actionList>
            <ruleList>
                <compareText logic="does_not_equal" text="${pgMigratorVersion}" value=""/>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>
   
        <!-- WIN: Set the installation directory in case of re-install/upgrade -->
        <actionGroup>
            <actionList>
                <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgMigrator-PG_MAJOR_VERSION" name="Location" variable="installdir"/>
                <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgMigrator-PG_MAJOR_VERSION" name="Username" variable="iExistingEmail"/>
            </actionList>
            <ruleList>
                <compareText logic="does_not_equal" text="${pgMigratorVersion}" value=""/>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>

        <!-- Existing, old install (version found, but no Username and not provided on the command-line) -->
        <setInstallerVariable name="existingEmail" persist="0" value="">
            <ruleList>
                <compareText logic="does_not_equal" text="${TuningWizardVersion}" value=""/>
                <compareText logic="equals" text="${iExistingEmail}" value=""/>
                <compareText logic="does_not_equal" text="${existingEmail}" value=""/>
            </ruleList>
        </setInstallerVariable>
        
        <!-- Existing install with Username (ignore command-line) -->
        <setInstallerVariable name="existingEmail" persist="0" value="${iExistingEmail}">
            <ruleList>
                <compareText logic="does_not_equal" text="${TuningWizardVersion}" value=""/>
                <compareText logic="does_not_equal" text="${iExistingEmail}" value=""/>
            </ruleList>
        </setInstallerVariable>

        <!-- LIN | MAC : Exit the installation if the installdir is not valid (Unattended mode) -->
        <actionGroup>
            <actionList>
                <showWarning text="${msg(pg_migrator.installdir.pgerror)}"/>
                <exit exitCode="0"/>
            </actionList>
            <ruleList>
                <fileTest path="${installdir}/bin/pg_config" condition="not_exists"/>
                <compareText text="${platform_name}" logic="does_not_equal" value="windows"/>
                <compareText logic="equals" text="${installer_ui}" value="unattended"/>
            </ruleList>
        </actionGroup>
		
        <!-- WIN: Exit the installation if the installdir is not valid (Unattended mode) -->
        <actionGroup>
            <actionList>
                <showWarning text="${msg(pg_migrator.installdir.pgerror)}"/>
                <exit exitCode="0"/>
            </actionList>
            <ruleList>
                <fileTest path="${installdir}/bin/pg_config" condition="not_exists"/>
                <compareText text="${platform_name}" logic="equals" value="windows"/>
                <compareText logic="equals" text="${installer_ui}" value="unattended"/>
            </ruleList>
        </actionGroup>
		
        <!-- Exits the installation if the postgresql version is not compatible with pg_migrator version (Unattended mode) -->
        <actionGroup>
            <actionList>
                 <setInstallerVariableFromScriptOutput>
                    <name>pg_version_str</name>
                    <exec>${installdir}/bin/pg_config</exec>
                    <execArgs>--version</execArgs>
                    <workingDirectory>${installdir}/bin</workingDirectory>
                    <ruleList>
                        <compareText text="${platform_name}" logic="does_not_equal" value="windows"/>
                    </ruleList>
                </setInstallerVariableFromScriptOutput>
                <setInstallerVariableFromScriptOutput>
                    <name>pg_version_str</name>
                    <exec>${installdir}\bin\pg_config.exe</exec>
                    <execArgs>--version</execArgs>
                    <workingDirectory>${installdir}\bin</workingDirectory>
                    <ruleList>
                        <compareText text="${platform_name}" logic="equals" value="windows"/>
                    </ruleList>
                </setInstallerVariableFromScriptOutput>
                <setInstallerVariableFromRegEx>
                      <name>pg_version</name>
                      <text>${pg_version_str}</text>
                      <pattern>^PostgreSQL ([0-9].[0-9]).?[\w]*$</pattern>
                      <substitution>\1</substitution>
                      <ruleList>
                         <compareText logic="does_not_equal" text="${pg_version_str}" value=""/>
                      </ruleList>
                </setInstallerVariableFromRegEx>
                <showWarning text="${msg(pg_migrator.installdir.pg_version.mismatch)}">
                    <ruleList>
                      <compareText logic="does_not_equal" text="${pg_version}" value="PG_MAJOR_VERSION"/>
                   </ruleList>
                </showWarning>
                <exit exitCode="0">
                   <ruleList>
                      <compareText logic="does_not_equal" text="${pg_version}" value="PG_MAJOR_VERSION"/>
                   </ruleList>
                </exit>
            </actionList>
            <ruleList>
                <compareText logic="equals" text="${installer_ui}" value="unattended"/>
            </ruleList>
        </actionGroup>
        <!-- LIN/LIN-X64/MAC: Unpack existing-enterprisedb-mail authentication scripts -->
        <actionGroup>
            <actionList>
                <createDirectory path="${system_temp_directory}/pgmigrator"/>
                <!-- Lin: Unpack scripts and required libraries -->
                <actionGroup>
                    <actionList>
                        <unpackFile
                            component="userValidation"
                            destination="${system_temp_directory}/pgmigrator/sysinfo.sh"
                            folder="scriptslinux"
                            origin="sysinfo.sh"/>
                        <unpackFile
                            component="userValidation"
                            destination="${system_temp_directory}/pgmigrator/validateUserClient.o"
                            folder="scriptslinux"
                            origin="validateUserClient.o"/>
                        <unpackDirectory
                            component="userValidation"
                            destination="${system_temp_directory}/pgmigrator/"
                            folder="scriptslinux"
                            origin="lib"/>
                    </actionList>
                    <ruleList>
                        <compareText logic="equals" text="${platform_name}" value="linux"/>
                    </ruleList>
                </actionGroup>
                <!-- Lin-x64: Unpack scripts and required libraries -->
                <actionGroup>
                    <actionList>
                        <unpackFile
                            component="userValidation"
                            destination="${system_temp_directory}/pgmigrator/sysinfo.sh"
                            folder="scriptslinux-x64"
                            origin="sysinfo.sh"/>
                        <unpackFile
                            component="userValidation"
                            destination="${system_temp_directory}/pgmigrator/validateUserClient.o"
                            folder="scriptslinux-x64"
                            origin="validateUserClient.o"/>
                        <unpackDirectory
                            component="userValidation"
                            destination="${system_temp_directory}/pgmigrator/"
                            folder="scriptslinux-x64"
                            origin="lib"/>
                    </actionList>
                    <ruleList>
                        <compareText logic="equals" text="${platform_name}" value="linux-x64"/>
                    </ruleList>
                </actionGroup>
                <!-- MAC: Unpack scripts and required libraries -->
                <actionGroup>
                    <actionList>
                        <unpackFile
                            component="userValidation"
                            destination="${system_temp_directory}/pgmigrator/sysinfo.sh"
                            folder="scriptsosx"
                            origin="sysinfo.sh"/>
                        <unpackFile
                            component="userValidation"
                            destination="${system_temp_directory}/pgmigrator/validateUserClient.o"
                            folder="scriptsosx"
                            origin="validateUserClient.o"/>
                    </actionList>
                    <ruleList>
                        <compareText logic="equals" text="${platform_name}" value="osx"/>
                    </ruleList>
                </actionGroup>
        
                <!-- Use script to generate the required information, while validating email -->
                <setEnvironmentVariable name="LD_LIBRARY_PATH" value="${system_temp_directory}/pgmigrator/lib"/>
                <!-- Generate UUID -->
                <setInstallerVariableFromScriptOutput name="uuid_val" showMessageOnError="0" exec="uuidgen" abortOnError="0"/>
                <!-- User predefined value, if uuidgen does not exist -->
                <setInstallerVariable name="uuid_val" value="72550354-0602-4c25-aa07-5a914fd54193">
                    <ruleList>
                        <compareText value="" logic="equals" text="${uuid_val}"/>
                    </ruleList>
                </setInstallerVariable>
                <!-- run sysinfo.sh -->
                <runProgram program="${system_temp_directory}/pgmigrator/sysinfo.sh"
                            workingDirectory="${system_temp_directory}/pgmigrator"
                            showMessageOnError="0"
                            abortOnError="0"/>
                <propertiesFileGet
                    file="${system_temp_directory}/pgmigrator/sysinfo.properties"
                    key="PROCESSOR_ARCH"
                    variable="processor_arch"/>
                <propertiesFileGet
                    file="${system_temp_directory}/pgmigrator/sysinfo.properties"
                    key="TOTAL_MEM_IN_GB"
                    variable="total_mem_in_gb"/>
                <propertiesFileGet
                    file="${system_temp_directory}/pgmigrator/sysinfo.properties"
                    key="OS"
                    variable="os"/>
                <propertiesFileGet
                    file="${system_temp_directory}/pgmigrator/sysinfo.properties"
                    key="NUMBER_OF_PROCESSORS"
                    variable="number_of_processors"/>
                <propertiesFileGet
                    file="${system_temp_directory}/pgmigrator/sysinfo.properties"
                    key="PROCESSOR_TYPE"
                    variable="processor_type"/>
                <propertiesFileGet
                    file="${system_temp_directory}/pgmigrator/sysinfo.properties"
                    key="LANGUAGE"
                    variable="language"/>
                <propertiesFileGet
                    file="${system_temp_directory}/pgmigrator/sysinfo.properties"
                    key="SHARED_MEMORY_IN_MB"
                    variable="shared_memory_in_mb"/>
        
                <stringModify text="${processor_arch}" variable="processor_arch" logic="trim"/>
                <stringModify text="${total_mem_in_gb}" variable="total_mem_in_gb" logic="trim"/>
                <stringModify text="${os}" variable="os" logic="trim"/>
                <stringModify text="${number_of_processors}" variable="number_of_processors" logic="trim"/>
                <stringModify text="${processor_type}" variable="processor_type" logic="trim"/>
                <stringModify text="${language}" variable="language" logic="trim"/>
                <stringModify text="${shared_memory_in_mb}" variable="shared_memory_in_mb" logic="trim"/>
        
                <!-- The sysinfo.sh script can not find the shared memory/total memory info -->
                <!-- Because, bc (The arbitrary precision calculator) could not be found on the system -->
                <setInstallerVariable name="shared_memory_in_mb" value="0">
                    <ruleEvaluationLogic>or</ruleEvaluationLogic>
                    <ruleList>
                        <stringTest text="${shared_memory_in_mb}" type="empty"/>
                        <stringTest text="${shared_memory_in_mb}" type="not_digit"/>
                    </ruleList>
                </setInstallerVariable>
                <setInstallerVariable name="total_mem_in_gb" value="0">
                    <ruleEvaluationLogic>or</ruleEvaluationLogic>
                    <ruleList>
                        <stringTest text="${total_mem_in_gb}" type="empty"/>
                        <stringTest text="${total_mem_in_gb}" type="not_digit"/>
                    </ruleList>
                </setInstallerVariable>
            </actionList>
            <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>
        <actionGroup>
            <actionList>
                <createDirectory path="${system_temp_directory}\pgmigrator"/>
                <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{7299052b-02a4-4627-81f2-1818da5d550d}" name="DisplayVersion" variable="VC_REDIST_2005_VERSION"/>
                <actionGroup>
                    <actionList>
                        <unpackFile component="vcredist"
                                    destination="${system_temp_directory}\vcredist_x86.exe"
                                    folder="vcredistwindows"
                                    origin="vcredist_x86.exe"/>
                        <runProgram program="${system_temp_directory}\vcredist_x86.exe"
                                    programArguments="/q"
                                    workingDirectory="${windir}"
                                    abortOnError="0"
                                    showMessageOnError="0"/>
                    </actionList>
                    <ruleList>
                        <compareText logic="equals" text="${VC_REDIST_2005_VERSION}" value=""/>
                    </ruleList>
                </actionGroup>
                <unpackFile
                    component="userValidation"
                    destination="${system_temp_directory}\pgmigrator\validateUserClient.exe"
                    folder="scriptswindows"
                    origin="validateUserClient.exe"/>
                <unpackFile
                    component="userValidation"
                    destination="${system_temp_directory}\pgmigrator\dbserver_guid.exe"
                    folder="scriptswindows"
                    origin="dbserver_guid.exe"/>
                <setInstallerVariableFromScriptOutput
                    name="uuid_val"
                    showMessageOnError="0"
                    exec="${system_temp_directory}\pgmigrator\dbserver_guid.exe"
                    abortOnError="0"/>
                <setInstallerVariableFromRegEx
                    name="uuid_val"
                    text="${uuid_val}"
                    pattern="^dbser_guid=([^\S]*)$"
                    substitution="\1"
                    abortOnError="0"
                    showMessageOnError="0">
                    <ruleList>
                        <compareText logic="does_not_equal" text="${uuid_val}" value=""/>
                    </ruleList>
                </setInstallerVariableFromRegEx>
                <setInstallerVariable name="uuid_val" value="6ab74420-9efb-4fb6-b005-a3a0fadc59a5">
                    <ruleEvaluationLogic>or</ruleEvaluationLogic>
                    <ruleList>
                        <compareText text="${uuid_val}" logic="equals" value=""/>
                        <regExMatch text="${uuid_val}" logic="does_not_match" pattern="^([A-Fa-f0-9\-]*)$"/>
                    </ruleList>
                </setInstallerVariable>
            </actionList>
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>
        <actionGroup>
            <actionList>
                <throwError text="${msg(emailpassword.not.provided)}" abortOnError="1">
                    <ruleEvaluationLogic>or</ruleEvaluationLogic>
                    <ruleList>
                        <compareText logic="equals" text="${existingEmail}" value=""/>
                        <compareText logic="equals" text="${existingPassword}" value=""/>
                    </ruleList>
                </throwError>
                <logMessage text="Sending parameter:&quot;${uuid_val}&quot; &quot;TuningWizard&quot; &quot;false&quot; &quot;true&quot; &quot;${language}&quot; &quot;${os}&quot; &quot;${number_of_processors}&quot; &quot;${processor_arch}&quot; &quot;${processor_type}&quot; &quot;${total_mem_in_gb}&quot; &quot;${shared_memory_in_mb}&quot; &quot;${existingEmail}&quot; &quot;${existingPassword}&quot;">
                    <ruleList>
                        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                    </ruleList>
                </logMessage>

                <setInstallerVariableFromScriptOutput
                    customErrorMessage="${msg(validatinguser.ws.error)}"
                    exec="${system_temp_directory}/tuningwizard/validateUserClient.o"
                    execArgs="&quot;${uuid_val}&quot; &quot;TuningWizard&quot; &quot;false&quot; &quot;true&quot; &quot;${language}&quot; &quot;${os}&quot; &quot;${number_of_processors}&quot; &quot;${processor_arch}&quot; &quot;${processor_type}&quot; &quot;${total_mem_in_gb}&quot; &quot;${shared_memory_in_mb}&quot; &quot;${existingEmail}&quot; &quot;${existingPassword}&quot;"
                    name="ws_existinguser_result"
                    abortOnError="0"
                    workingDirectory="${system_temp_directory}/tuningwizard">
                    <ruleList>
                        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                    </ruleList>
                </setInstallerVariableFromScriptOutput>
                <logMessage text="Sending parameter: &quot;TuningWizard&quot; &quot;false&quot; &quot;true&quot; &quot;${existingEmail}&quot; &quot;${existingPassword}&quot; &quot;${uuid_val}&quot;">
                    <ruleList>
                        <compareText logic="equals" text="${platform_name}" value="windows"/>
                    </ruleList>
                </logMessage>
        
                <setInstallerVariableFromScriptOutput
                    customErrorMessage="${msg(validatinguser.ws.error)}"
                    exec="${system_temp_directory}\tuningwizard\validateUserClient.exe"
                    execArgs="&quot;TuningWizard&quot; &quot;false&quot; &quot;true&quot; &quot;${existingEmail}&quot; &quot;${existingPassword}&quot; &quot;${uuid_val}&quot;"
                    name="ws_existinguser_result"
                    abortOnError="0"
                    workingDirectory="${system_temp_directory}\tuningwizard">
                    <ruleList>
                        <compareText logic="equals" text="${platform_name}" value="windows"/>
                    </ruleList>
                </setInstallerVariableFromScriptOutput>
                <stringModify text="${ws_existinguser_result}" variable="ws_existinguser_result" logic="trim"/>
                <throwError abortOnError="1" text="${msg(ws.email.not.authenticated)}">
                    <ruleList>
                        <compareText logic="equals" text="${ws_existinguser_result}" value="1"/>
                    </ruleList>
                </throwError>
                <throwError abortOnError="1" text="${msg(ws.email.not.validated)}">
                    <ruleList>
                        <compareText logic="equals" text="${ws_existinguser_result}" value="2"/>
                    </ruleList>
                </throwError>
                <throwError abortOnError="1" text="${msg(ws.email.already.exists)}">
                    <ruleList>
                        <compareText logic="equals" text="${ws_existinguser_result}" value="3"/>
                    </ruleList>
                </throwError>
                <throwError abortOnError="1" text="${msg(ws.exception.from.server)}">
                    <ruleList>
                        <compareText logic="equals" text="${ws_existinguser_result}" value="4"/>
                    </ruleList>
                </throwError>
                <throwError abortOnError="1" text="${msg(ws.internet.not.connected)}">
                    <ruleList>
                        <compareText logic="equals" text="${ws_existinguser_result}" value=""/>
                    </ruleList>
                </throwError>
            </actionList>
            <ruleList>
                <compareText logic="equals" text="${installer_ui}" value="unattended"/>
                <compareText logic="equals" text="${iExistingEmail}" value=""/>
            </ruleList>
        </actionGroup>
    </preInstallationActionList>
    <postInstallationActionList>
        <actionGroup>
            <actionList>
                <iniFileSet file="/etc/postgres-reg.ini" section="pgMigrator-PG_MAJOR_VERSION" key="Description" value="${msg(install.summary)}"/>
                <iniFileSet file="/etc/postgres-reg.ini" section="pgMigrator-PG_MAJOR_VERSION" key="InstallationDirectory" value="${installdir}"/>
                <iniFileSet file="/etc/postgres-reg.ini" section="pgMigrator-PG_MAJOR_VERSION" key="Version" value="${product_version}"/>
                <!-- Branding info -->
                <logMessage text="Write the branding(${branding}) to the ini file..."/>
                <iniFileSet file="/etc/postgres-reg.ini" section="pgMigrator-PG_MAJOR_VERSION" key="Branding" value="${branding}"/>
                <iniFileSet file="/etc/postgres-reg.ini" section="pgMigrator-PG_MAJOR_VERSION" key="Username" value="${existingEmail}"/>
            </actionList>
            <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>
        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgMigrator-PG_MAJOR_VERSION" name="Description" value="${msg(install.summary)}"/>
        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgMigrator-PG_MAJOR_VERSION" name="InstallationDirectory" value="${installdir}"/>
        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgMigrator-PG_MAJOR_VERSION" name="Version" value="${product_version}"/>
        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgMigrator-PG_MAJOR_VERSION" name="Branding" value="${branding}"/>
        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgMigrator-PG_MAJOR_VERSION" name="Username" value="${existingEmail}"/>

        <copyFile origin="${installdir}/lib/pg_migrator.so"
                  destination="${pkglibdir}/"
                  abortOnError="0"
                  showMessageOnError="0">
            <ruleList>
                <compareText text="${platform_name}" logic="does_not_equal" value="windows"/>
                <compareText text="${installdir}/lib" logic="does_not_equal" value="${pkglibdir}"/>
            </ruleList>
        </copyFile>
        <copyFile origin="${installdir}\lib\pg_migrator.dll"
                  destination="${pkglibdir}\"
                  abortOnError="0"
                  showMessageOnError="0">
            <ruleList>
                <compareText text="${platform_name}" logic="equals" value="windows"/>
            </ruleList>
        </copyFile>
    </postInstallationActionList>

    <!-- preUninstallation actions -->
    <preUninstallationActionList>
        <actionGroup>
            <actionList>
                <iniFileSet file="/etc/postgres-reg.ini" section="pgMigrator-PG_MAJOR_VERSION" key="Description" value=""/>
                <iniFileSet file="/etc/postgres-reg.ini" section="pgMigrator-PG_MAJOR_VERSION" key="InstallationDirectory" value=""/>
                <iniFileSet file="/etc/postgres-reg.ini" section="pgMigrator-PG_MAJOR_VERSION" key="Version" value=""/>
                <iniFileSet file="/etc/postgres-reg.ini" section="pgMigrator-PG_MAJOR_VERSION" key="Branding" value=""/>
                <iniFileSet file="/etc/postgres-reg.ini" section="pgMigrator-PG_MAJOR_VERSION" key="Username" value=""/>
            </actionList>
            <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>
        <deleteFile path="${pkglibdir}/pg_migrator.so">
            <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                <fileTest path="${pkglibdir}/pg_migrator.so" condition="exists"/>
            </ruleList>
        </deleteFile>
        <deleteFile path="${pkglibdir}\pg_migrator.dll">
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
                <fileTest path="${pkglibdir}\pg_migrator.dll" condition="exists"/>
            </ruleList>
        </deleteFile>
    </preUninstallationActionList>
    <!-- Components -->
    <componentList>
        <component>
            <name>default</name>
            <description>Default Component</description>
            <canBeEdited>0</canBeEdited>
            <selected>1</selected>
            <show>1</show>
            <folderList>
                <!-- LIN- Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/bin</destination>
                    <name>programfileslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/linux/bin/pg_migrator"/>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Library Files</description>
                    <destination>${installdir}/lib</destination>
                    <name>libfileslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/linux/lib/pg_migrator.so"/>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Doc Files</description>
                    <destination>${installdir}/doc</destination>
                    <name>docfileslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/linux/CHANGES.pg_migrator"/>
                        <distributionFile origin="staging/linux/DEVELOPERS.pg_migrator"/>
                        <distributionFile origin="staging/linux/IMPLEMENTATION.pg_migrator"/>
                        <distributionFile origin="staging/linux/IMPLEMENTATION_jp.pg_migrator"/>
                        <distributionFile origin="staging/linux/INSTALL.pg_migrator"/>
                        <distributionFile origin="staging/linux/INSTALL_jp.pg_migrator"/>
                        <distributionFile origin="staging/linux/LICENSE.pg_migrator"/>
                        <distributionFile origin="staging/linux/README.pg_migrator"/>
                    </distributionFileList>
                </folder>
                <!-- LIN-X64 - Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/bin</destination>
                    <name>programfileslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/linux-x64/bin/pg_migrator"/>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Library Files</description>
                    <destination>${installdir}/lib</destination>
                    <name>libfileslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/linux-x64/lib/pg_migrator.so"/>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Doc Files</description>
                    <destination>${installdir}/doc</destination>
                    <name>docfileslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/linux-x64/CHANGES.pg_migrator"/>
                        <distributionFile origin="staging/linux-x64/DEVELOPERS.pg_migrator"/>
                        <distributionFile origin="staging/linux-x64/IMPLEMENTATION.pg_migrator"/>
                        <distributionFile origin="staging/linux-x64/IMPLEMENTATION_jp.pg_migrator"/>
                        <distributionFile origin="staging/linux-x64/INSTALL.pg_migrator"/>
                        <distributionFile origin="staging/linux-x64/INSTALL_jp.pg_migrator"/>
                        <distributionFile origin="staging/linux-x64/LICENSE.pg_migrator"/>
                        <distributionFile origin="staging/linux-x64/README.pg_migrator"/>
                    </distributionFileList>
                </folder>
                <!-- MAC Program Files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/bin</destination>
                    <name>programfilesosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/osx/bin/pg_migrator"/>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Library Files</description>
                    <destination>${installdir}/lib</destination>
                    <name>libfilesosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/osx/lib/pg_migrator.so"/>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Doc Files</description>
                    <destination>${installdir}/doc</destination>
                    <name>docfilesosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/osx/CHANGES.pg_migrator"/>
                        <distributionFile origin="staging/osx/DEVELOPERS.pg_migrator"/>
                        <distributionFile origin="staging/osx/IMPLEMENTATION.pg_migrator"/>
                        <distributionFile origin="staging/osx/IMPLEMENTATION_jp.pg_migrator"/>
                        <distributionFile origin="staging/osx/INSTALL.pg_migrator"/>
                        <distributionFile origin="staging/osx/INSTALL_jp.pg_migrator"/>
                        <distributionFile origin="staging/osx/LICENSE.pg_migrator"/>
                        <distributionFile origin="staging/osx/README.pg_migrator"/>
                    </distributionFileList>
                </folder>
                <!-- WIN - Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}/bin</destination>
                    <name>programfileswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/windows/bin/pg_migrator.exe"/>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Library Files</description>
                    <destination>${installdir}/lib</destination>
                    <name>libfileswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/windows/lib/pg_migrator.dll"/>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Doc Files</description>
                    <destination>${installdir}/doc</destination>
                    <name>docfileswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/windows/CHANGES.pg_migrator"/>
                        <distributionFile origin="staging/windows/DEVELOPERS.pg_migrator"/>
                        <distributionFile origin="staging/windows/IMPLEMENTATION.pg_migrator"/>
                        <distributionFile origin="staging/windows/IMPLEMENTATION_jp.pg_migrator"/>
                        <distributionFile origin="staging/windows/INSTALL.pg_migrator"/>
                        <distributionFile origin="staging/windows/INSTALL_jp.pg_migrator"/>
                        <distributionFile origin="staging/windows/LICENSE.pg_migrator"/>
                        <distributionFile origin="staging/windows/README.pg_migrator"/>
                    </distributionFileList>
                </folder>
            </folderList>
        </component>
        <component>
            <name>vcredist</name>
            <description>Visual Studio Redistribution</description>
            <canBeEdited>0</canBeEdited>
            <selected>0</selected>
            <show>0</show>
            <folderList>
                <folder>
                    <name>vcredistwindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/windows/vcredist_x86.exe"/>
                    </distributionFileList>
                </folder>
            </folderList>
        </component>
        <component>
            <name>userValidation</name>
            <description>User Validation Scripts</description>
            <canBeEdited>0</canBeEdited>
            <selected>0</selected>
            <show>0</show>
            <folderList>
                <!-- LIN: Program files -->
                <folder>
                    <description>Scripts</description>
                    <destination>${system_temp_directory}/pgmigrator</destination>
                    <name>scriptslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/linux/UserValidation/validateUserClient.o"/>
                        <distributionFile origin="staging/linux/UserValidation/sysinfo.sh"/>
                        <distributionDirectory origin="staging/linux/UserValidation/lib"/>
                    </distributionFileList>
                </folder>
                <!-- LIN-X64: Program files -->
                <folder>
                    <description>Scripts</description>
                    <destination>${system_temp_directory}/pgmigrator</destination>
                    <name>scriptslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/linux-x64/UserValidation/validateUserClient.o"/>
                        <distributionFile origin="staging/linux-x64/UserValidation/sysinfo.sh"/>
                        <distributionDirectory origin="staging/linux-x64/UserValidation/lib"/>
                    </distributionFileList>
                </folder>
                
                <!-- MAC: Program files -->
                <folder>
                    <description>Scripts</description>
                    <destination>${system_temp_directory}/pgmigrator</destination>
                    <name>scriptsosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/osx/UserValidation/validateUserClient.o"/>
                        <distributionFile origin="staging/osx/UserValidation/sysinfo.sh"/>
                    </distributionFileList>
                </folder>
        
                <!-- WIN: Program files -->
                <folder>
                    <description>Scripts</description>
                    <destination>${system_temp_directory}/pgmigrator</destination>
                    <name>scriptswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionFile origin="staging/windows/UserValidation/dbserver_guid.exe"/>
                        <distributionFile origin="staging/windows/UserValidation/validateUserClient.exe"/>
                    </distributionFileList>
                </folder>
            </folderList>
        </component>
    </componentList>
    <!-- Install Directory -->
    <parameterList>
        <parameterGroup
            name="registration"
            title="${msg(registration.title.value)}"
            explanation="${msg(registration.explanation.value)}">
            <parameterList>
                <choiceParameter
                    name="alreadyRegistered"
                    default="0"
                    width="30"
                    allowEmptyValue="0"
                    cliOptionShow="0"
                    displayType="radiobuttons">
                    <optionList>
                        <option
                            text="${msg(registration.existingemail.no)}"
                            value="0"/>
                        <option
                            text="${msg(registration.existingemail.yes)}"
                            value="1"/>
                    </optionList>
                </choiceParameter>
            </parameterList>
            <!-- Open registration page, if not already registered user -->
            <postShowPageActionList>
                <launchBrowser url="http://www.enterprisedb.com/create-promo-account.do?type=pg_migrator"
                               abortOnError="1">
                    <ruleList>
                            <isFalse value="${alreadyRegistered}"/>
                    </ruleList>
                </launchBrowser>
            </postShowPageActionList>
            <!-- Check if upgradation is done on older version of pg_migrator,
                     which does not have this authentication process -->
            <ruleList>
                 <compareText logic="equals" text="${iExistingEmail}" value=""/>
            </ruleList>
        </parameterGroup>
        <parameterGroup
            name="userAuthenticationPage"
            title="${msg(existingemail.authentication.title.value)}">
            <parameterList>
                <labelParameter
                    name="existingemail_authentication_lbl"
                    explanation="${msg(existingemail.authentication.explanation.value)}"/>
                <stringParameter
                    name="existingEmail"
                    cliOptionName="existing-user"
                    width="30"
                    ask="1"
                    description="${msg(userAuth.email.value)}"
                    allowEmptyValue="1"
                    cliOptionShow="1">
                    <validationActionList>
                        <throwError text="${msg(error.invalid.email.value)}">
                            <ruleList>
                                <regExMatch logic="does_not_match" text="${existingEmail}">
                                    <pattern>^[a-zA-Z][\w\.-]*[a-zA-Z0-9]@[a-zA-Z0-9][\w\.-]*[a-zA-Z0-9]\.[a-zA-Z][a-zA-Z\.]*[a-zA-Z]$</pattern>
                                </regExMatch>
                            </ruleList>
                        </throwError>
                    </validationActionList>
                </stringParameter>
                <passwordParameter
                    name="existingPassword"
                    width="30"
                    cliOptionName="existing-password"
                    ask="1"
                    description="${msg(userAuth.password.value)}"
                    allowEmptyValue="1"
                    askForConfirmation="0"
                    cliOptionShow="1">
                    <validationActionList>
                        <throwError text="${msg(error.invalid.password.value)}">
                            <ruleEvaluationLogic>or</ruleEvaluationLogic>
                            <ruleList>
                                <stringTest text="${existingPassword}" type="empty"/>
                                <regExMatch logic="matches" pattern="\s+" text="${existingPassword}"/>
                            </ruleList>
                        </throwError>
                    </validationActionList>
                </passwordParameter>
            </parameterList>
            <!-- Validate entered email & password -->
            <postShowPageActionList>
                <logMessage text="Sending parameter:&quot;${uuid_val}&quot; &quot;pg_migrator&quot; &quot;false&quot; &quot;true&quot; &quot;${language}&quot; &quot;${os}&quot; &quot;${number_of_processors}&quot; &quot;${processor_arch}&quot; &quot;${processor_type}&quot; &quot;${total_mem_in_gb}&quot; &quot;${shared_memory_in_mb}&quot; &quot;${existingEmail}&quot; &quot;${existingPassword}&quot;">
                    <ruleList>
                        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                    </ruleList>
                </logMessage>
                <setInstallerVariableFromScriptOutput
                    customErrorMessage="${msg(validatinguser.ws.error)}"
                    exec="${system_temp_directory}/pgmigrator/validateUserClient.o"
                    execArgs="&quot;${uuid_val}&quot; &quot;pg_migrator&quot; &quot;false&quot; &quot;true&quot; &quot;${language}&quot; &quot;${os}&quot; &quot;${number_of_processors}&quot; &quot;${processor_arch}&quot; &quot;${processor_type}&quot; &quot;${total_mem_in_gb}&quot; &quot;${shared_memory_in_mb}&quot; &quot;${existingEmail}&quot; &quot;${existingPassword}&quot;"
                    name="ws_existinguser_result"
                    abortOnError="0"
                    workingDirectory="${system_temp_directory}/pgmigrator">
                    <ruleList>
                        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                    </ruleList>
                </setInstallerVariableFromScriptOutput>
                <logMessage text="Sending parameter:&quot;pg_migrator&quot; &quot;false&quot; &quot;true&quot; &quot;${existingEmail}&quot; &quot;${existingPassword}&quot; &quot;${uuid_val}&quot;">
                    <ruleList>
                        <compareText logic="equals" text="${platform_name}" value="windows"/>
                    </ruleList>
                </logMessage>
                <setInstallerVariableFromScriptOutput
                    customErrorMessage="${msg(validatinguser.ws.error)}"
                    exec="${system_temp_directory}\pgmigrator\validateUserClient.exe"
                    execArgs="&quot;pg_migrator&quot; &quot;false&quot; &quot;true&quot; &quot;${existingEmail}&quot; &quot;${existingPassword}&quot; &quot;${uuid_val}&quot;"
                    name="ws_existinguser_result"
                    abortOnError="0"
                    workingDirectory="${system_temp_directory}\pgmigrator">
                    <ruleList>
                        <compareText logic="equals" text="${platform_name}" value="windows"/>
                    </ruleList>
                </setInstallerVariableFromScriptOutput>
                <throwError abortOnError="0" text="${msg(ws.email.not.authenticated)}">
                    <ruleList>
                        <compareText logic="equals" text="${ws_existinguser_result}" value="1"/>
                    </ruleList>
                </throwError>
                <throwError abortOnError="0" text="${msg(ws.email.not.validated)}">
                    <ruleList>
                        <compareText logic="equals" text="${ws_existinguser_result}" value="2"/>
                    </ruleList>
                </throwError>
                <throwError abortOnError="0" text="${msg(ws.email.already.exists)}">
                    <ruleList>
                        <compareText logic="equals" text="${ws_existinguser_result}" value="3"/>
                    </ruleList>
                </throwError>
                <throwError abortOnError="0" text="${msg(ws.exception.from.server)}">
                    <ruleList>
                        <compareText logic="equals" text="${ws_existinguser_result}" value="4"/>
                    </ruleList>
                </throwError>
                <throwError abortOnError="0" text="${msg(ws.internet.not.connected)}">
                    <ruleList>
                        <compareText logic="equals" text="${ws_existinguser_result}" value=""/>
                    </ruleList>
                </throwError>
        
                <setInstallerVariable name="stay_on_this_page" value="true"/>
                <setInstallerVariable name="stay_on_this_page" value="false">
                    <ruleList>
                        <compareText logic="equals" text="${ws_existinguser_result}" value="0"/>
                    </ruleList>
                </setInstallerVariable>
                 <setInstallerVariable name="stay_on_this_page" value="false">
                    <ruleList>
                        <compareText logic="equals" text="${ws_existinguser_result}" value="00"/>
                        <isTrue value="${ws_existinguser_result}"/>
                    </ruleList>
                </setInstallerVariable>
        
                <setInstallerVariable name="next_page" value="userAuthenticationPage">
                    <ruleList>
                        <isTrue value="${stay_on_this_page}"/>
                    </ruleList>
                </setInstallerVariable>
            </postShowPageActionList>
            <!-- Check if upgradation is done on older version of pg_migrator,
                     which does not have this authentication process -->
            <ruleList>
                 <compareText logic="equals" text="${iExistingEmail}" value=""/>
            </ruleList>
        </parameterGroup>
        <stringParameter name="originalplatform" ask="0" cliOptionShow="0"/>
        <stringParameter name="branding" cliOptionName="branding" ask="0" cliOptionShow="0"/>
        <parameterGroup
            name="installationDirectory"
            description="Installer.Parameter.installdir.description"
            explanation="Installer.Parameter.installdir.explanation"
            title="${msg(pm.installation.dir)}">
            <parameterList>
                <directoryParameter>
                    <name>installdir</name>
                    <value>${default_installdir}</value>
                    <default/>
                    <allowEmptyValue>0</allowEmptyValue>
                    <ask>yes</ask>
                    <cliOptionName>prefix</cliOptionName>
                    <mustBeWritable>yes</mustBeWritable>
                    <mustExist>0</mustExist>
                    <width>40</width>
                    <!-- Validating whether installdir is empty -->
                    <validationActionList>
                        <setInstallerVariable name="isValidPGPATH" value="true"/>
                        <actionGroup>
                            <actionList>
                                <setInstallerVariable name="installdir" value="${default_installdir}" />
                                <throwError text="${msg(pg_migrator.installdir.empty)}"/>
                                <setInstallerVariable name="isValidPGPATH" value="false"/>
                            </actionList>
                            <ruleList>
                                <compareText text="${installdir}" logic="equals" value=""/>
                            </ruleList>
                        </actionGroup>
                        <actionGroup>
                            <actionList>
                                <showWarning text="${msg(pg_migrator.installdir.pgerror)}"/>
                                <setInstallerVariable name="next_page" value="installdir"/>
                                <setInstallerVariable name="isValidPGPATH" value="false"/>
                            </actionList>
                            <ruleList>
                                <fileTest path="${installdir}/bin/pg_config" condition="not_exists"/>
                                <compareText text="${platform_name}" logic="does_not_equal" value="windows"/>
                                <isTrue value="${isValidPGPATH}"/>
                            </ruleList>
                        </actionGroup>
                        <actionGroup>
                            <actionList>
                                <showWarning text="${msg(pg_migrator.installdir.pgerror)}"/>
                                <setInstallerVariable name="next_page" value="installdir"/>
                                <setInstallerVariable name="isValidPGPATH" value="false"/>
                            </actionList>
                            <ruleList>
                                <fileTest path="${installdir}\bin\pg_config.exe" condition="not_exists"/>
                                <compareText text="${platform_name}" logic="equals" value="windows"/>
                                <isTrue value="${isValidPGPATH}"/>
                            </ruleList>
                        </actionGroup>
                        <setInstallerVariableFromScriptOutput name="pg_version_str"
                                                              exec="${installdir}\bin\pg_config.exe"
                                                              execArgs="--version"
                                                              workingDirectory="${installdir}\bin">
                            <ruleList>
                                <compareText text="${platform_name}" logic="equals" value="windows"/>
                                <isTrue value="${isValidPGPATH}"/>
                            </ruleList>
                        </setInstallerVariableFromScriptOutput>
                        <setInstallerVariableFromScriptOutput name="pg_version_str"
                                                              exec="${installdir}/bin/pg_config"
                                                              execArgs="--version"
                                                              workingDirectory="${installdir}/bin">
                            <ruleList>
                                <compareText text="${platform_name}" logic="does_not_equal" value="windows"/>
                                <isTrue value="${isValidPGPATH}"/>
                            </ruleList>
                        </setInstallerVariableFromScriptOutput>
                        <setInstallerVariableFromRegEx name="pg_version"
                                                       text="${pg_version_str}"
                                                       pattern="^PostgreSQL ([0-9].[0-9]).?[\w]*$"
                                                       substitution="\1">
                              <ruleList>
                                  <compareText logic="does_not_equal" text="${pg_version_str}" value=""/>
                              </ruleList>
                        </setInstallerVariableFromRegEx>
                        <setInstallerVariableFromScriptOutput name="pkglibdir"
                                                              exec="${installdir}\bin\pg_config.exe"
                                                              execArgs="--pkglibdir"
                                                              workingDirectory="${installdir}\bin">
                            <ruleList>
                                <compareText text="${platform_name}" logic="equals" value="windows"/>
                                <isTrue value="${isValidPGPATH}"/>
                            </ruleList>
                        </setInstallerVariableFromScriptOutput>
                        <setInstallerVariableFromScriptOutput name="pkglibdir"
                                                              exec="${installdir}/bin/pg_config"
                                                              execArgs="--pkglibdir"
                                                              workingDirectory="${installdir}/bin">
                            <ruleList>
                                <compareText text="${platform_name}" logic="does_not_equal" value="windows"/>
                                <isTrue value="${isValidPGPATH}"/>
                            </ruleList>
                        </setInstallerVariableFromScriptOutput>
                        <!-- Make the pkglibdir variable available in the unstaller -->
                        <setInstallerVariable name="pkglibdir"
                                              value="${pkglibdir}"
                                              persist="1"/>
                        <actionGroup>
                            <actionList>
                                <showWarning text="${msg(pg_migrator.installdir.pg_version.mismatch)}"/>
                                <setInstallerVariable name="isValidPGPATH" value="false"/>
                                <setInstallerVariable name="next_page" value="installdir"/>
                            </actionList>
                            <ruleList>
                                <compareText logic="does_not_equal" text="${pg_version}" value="PG_MAJOR_VERSION"/>
                                <isTrue value="${isValidPGPATH}"/>
                            </ruleList>
                        </actionGroup>
                        <actionGroup>
                            <actionList>
                                <setInstallerVariable name="isValidPGPATH" value="false"/>
                                <showWarning text="${msg(pg_migrator.installdir.pg_config.corrupted)}"/>
                                <setInstallerVariable name="next_page" value="installdir"/>
                            </actionList>
                            <ruleList>
                                <compareText logic="equals" text="${pkglibdir}" value=""/>
                                <compareText text="${platform_name}" logic="does_not_equal" value="windows"/>
                                <isTrue value="${isValidPGPATH}"/>
                            </ruleList>
                        </actionGroup>
                        <actionGroup>
                            <actionList>
                                <showWarning text="${msg(pg_migrator.installdir.pg_config.corrupted.win)}"/>
                                <setInstallerVariable name="isValidPGPATH" value="false"/>
                                <setInstallerVariable name="next_page" value="installdir"/>
                            </actionList>
                            <ruleList>
                                <compareText logic="equals" text="${pkglibdir}" value=""/>
                                <compareText text="${platform_name}" logic="equals" value="windows"/>
                                <isTrue value="${isValidPGPATH}"/>
                            </ruleList>
                        </actionGroup>
                        <setInstallerVariableFromRegEx text="${pkglibdir}"
                                                       name="pkglibdir"
                                                       substitution="\/"
                                                       pattern="\\">
                            <ruleList>
                                <compareText text="${platform_name}" logic="equals" value="windows"/>
                                <isTrue value="${isValidPGPATH}"/>
                            </ruleList>
                        </setInstallerVariableFromRegEx>
                    </validationActionList>
        
                    <!-- Validating whether installdir contains whitespaces (Linux) -->
                    <postShowPageActionList>
                        <actionGroup>
                            <actionList>  
                                <showWarning text="${msg(pg_migrator.installdir.error)}"/>
                                <setInstallerVariable name="next_page" value="installdir"/>
                            </actionList>
                            <ruleList>
                               <regExMatch>
                                   <text>${installdir}</text>
                                   <logic>does_not_match</logic>
                                   <pattern>^/([0-9a-zA-Z_/\.\-]*)$</pattern>
                               </regExMatch>
                               <compareText>
                                   <logic>does_not_equal</logic>
                                   <text>${platform_name}</text>
                                   <value>windows</value>
                               </compareText>
                            </ruleList>
                        </actionGroup>
        
                        <!-- Validating whether installdir is valid (Windows) -->
                        <actionGroup>
                           <actionList>
                             <setInstallerVariable name="installdir" value="${default_installdir}" />
                             <showWarning>
                                <text>${msg(pg_migrator.installdir.error)}</text>
                             </showWarning>
                             <setInstallerVariable name="next_page" value="installdir"/>
                           </actionList>
                           <ruleList>
                               <regExMatch>
                                 <text>${installdir}</text>
                                 <logic>does_not_match</logic>
                                 <pattern>^([a-zA-Z]:)\\([0-9a-zA-Z_\\\s\.\-\(\)]*)$</pattern>
                               </regExMatch>
                               <compareText>
                                 <text>${platform_name}</text>
                                 <logic>equals</logic>
                                 <value>windows</value>
                               </compareText>
                           </ruleList>
                         </actionGroup>
                    </postShowPageActionList>
                </directoryParameter>
            </parameterList>
            <ruleList>
                <compareText text="${pgMigratorVersion}" logic="equals" value=""/>
            </ruleList>
        </parameterGroup>
        
        <!-- Explain that we're using an existing installation directory -->
        <labelParameter>
            <name>upgrade</name>
            <title>${msg(upgrade.existing.installation.title)}</title>
            <description>${msg(upgrade.existing.installation.description)}</description>
            <ruleList>
              <compareText text="${pgMigratorVersion}" logic="does_not_equal" value=""/>
            </ruleList>
        </labelParameter>
    </parameterList>
</project>
