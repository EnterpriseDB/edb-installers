<project>
    <!-- Package details -->
    <shortName>pgbouncer</shortName>
    <fullName>PgBouncer</fullName>
    <version>PG_VERSION_PGBOUNCER-PG_BUILDNUM_PGBOUNCER</version>
    <windowsResourceProductVersion>PG_VERSION_PGBOUNCER</windowsResourceProductVersion>
    <!-- These options are used on Windows -->
    <startMenuGroupName/>
    <!-- Product Specific Options -->
    <productComments>PgBouncer: Connection pooler for PostgreSQL, packaged by EnterpriseDB</productComments>
    <productDisplayName>${product_fullname} ${productVersion}</productDisplayName>
    <requestedExecutionLevel>asInvoker</requestedExecutionLevel>
    <requireInstallationByRootUser>${admin_rights}</requireInstallationByRootUser>
    <!-- The options are used for RPM registration -->
    <description>PgBouncer: Connection pooler for PostgreSQL </description>
    <summary>PgBouncer: Connection pooler for PostgreSQL, packaged by EnterpriseDB</summary>
    <vendor>EnterpriseDB</vendor>

    <!-- Installer Size -->
    <width>550</width>
    <height>400</height>

    <!-- Misc options -->
    <installerFilename>${product_shortname}-PG_MAJOR_VERSION-${product_version}-${platform_name}.${platform_exec_suffix}</installerFilename>
    <wrapLicenseFileText>0</wrapLicenseFileText>
    <compressionAlgorithm>lzma</compressionAlgorithm>
    <unattendedModeUI>minimal</unattendedModeUI>
    <enableRollback>0</enableRollback>
    <saveRelativePaths>1</saveRelativePaths>
    <uninstallerName>uninstall-${product_shortname}</uninstallerName>
    <outputDirectory>../output</outputDirectory>
    <installationLogFile>${system_temp_directory}/install-${product_shortname}.log</installationLogFile>
    <uninstallationLogFile>${system_temp_directory}/uninstall-${product_shortname}.log</uninstallationLogFile>
    <allowWindowResize>1</allowWindowResize>
    <windowsSoftwareRegistryPrefix/>
    <!-- Images -->
    <disableSplashScreen>1</disableSplashScreen>
    <leftImage>../resources/pg-side.png</leftImage>

    <!-- i18n files for the UI -->
    <allowLanguageSelection>1</allowLanguageSelection>
    <defaultLanguage>auto</defaultLanguage>
    <allowedLanguages>en zh_CN zh_TW ja ko</allowedLanguages>
    <customLanguageFileList>
        <language>
            <code>en</code>
            <encoding>iso8859-1</encoding>
            <file>i18n/en.lng</file>
        </language>
        <language>
            <code>zh_CN</code>
            <encoding>utf-8</encoding>
            <file>i18n/zh_CN.lng</file>
        </language>
        <language>
            <code>zh_TW</code>
            <encoding>utf-8</encoding>
            <file>i18n/zh_TW.lng</file>
        </language>
        <language>
            <code>ja</code>
            <encoding>utf-8</encoding>
            <file>i18n/jp.lng</file>
        </language>
	<language>
            <code>ko</code>
            <encoding>utf-8</encoding>
            <file>i18n/ko.lng</file>
        </language>

    </customLanguageFileList>

    <!-- Custom functions -->
    <functionDefinitionList>
      <actionDefinition name="createTempDir">
        <actionList>
          <globalVariables names="random_number"/>
          <actionGroup>
            <actionList>
              <setInstallerVariable name="iteration" value="0"/>
              <!-- Create a random number to use unique filenames -->
              <while>
                <actionList>
                  <generateRandomValue length="10" variable="random_number"/>
                  <runProgram>
                    <program>sh</program>
                    <programArguments>-c &lt;&lt;EOF '
                                      umask 0077
                                      mkdir "${system_temp_directory}/${dirPrefix}_${random_number}"
                                      if [ $? -ne 0 ];
                                      then
                                         exit 100
                                      fi
                                     '
EOF
                    </programArguments>
                  </runProgram>
                  <break>
                    <ruleList>
                      <compareText logic="equals" text="0" value="${program_exit_code}"/>
                    </ruleList>
                 </break>
                 <actionGroup>
                   <actionList>
                     <throwError text="${msg(cannot.create.tmp.dir)}" abortOnError="1">
                       <ruleList>
                          <compareValues value1="${iteration}" logic="equals" value2="9"/>
                       </ruleList>
                     </throwError>
                   </actionList>
                 </actionGroup>
                 <mathExpression text="${iteration}+1" variable="iteration"/>
               </actionList>
               <conditionRuleList>
                 <compareValues value1="${iteration}" logic="less" value2="10"/>
               </conditionRuleList>
             </while>
             <setInstallerVariable name="random_number" value="${random_number}"/>
          </actionList>
          <ruleList>
            <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
          </ruleList>
        </actionGroup>
        <actionGroup>
          <actionList>
            <generateRandomValue length="10" variable="random_number"/>
            <createDirectory path="${system_temp_directory}/${dirPrefix}_${random_number}"/>
            <setInstallerVariable name="random_number" value="${random_number}"/>
          </actionList>
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
          </ruleList>
        </actionGroup>
       </actionList>
       <parameterList>
         <stringParameter name="dirPrefix" allowEmptyValue="0"/>
       </parameterList>
      </actionDefinition>

      <actionDefinition name="checkSolarisVersion">
        <actionList>
          <globalVariables names="solaris_version"/>
          <actionGroup>
            <actionList>
              <runProgram program="cat" programArguments="/etc/release" abortOnError="0" showMessageOnError="0"/>
              <setInstallerVariable name="solaris_version" value="${program_stdout}" persist="1"/>
              <stringModify text="${solaris_version}" variable="solaris_version" logic="trim"/>
            </actionList>
            <ruleList>
              <compareText logic="contains" text="${platform_name}" value="solaris"/>
            </ruleList>
          </actionGroup>
        </actionList>
      </actionDefinition>
    </functionDefinitionList>

    <preShowHelpActionList>
        <!-- Set the default values -->
		<setInstallerVariable name="defaultpghost" value="localhost"/>
		<setInstallerVariable name="defaultpguser" value="postgres"/>
		<setInstallerVariable name="defaultpgport" value="5432"/>
		<!-- Set the default postgres password, to be used only in unnattended mode -->
		<setInstallerVariable name="defaultpgpassword" value=""/>
		<setInstallerVariable name="def_listen_port" value="6432"/>
		<!-- MAC : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>/Library/PostgresPlus/Shared/PgBouncer</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
        <!-- LIN : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${platform_install_prefix}/PostgresPlus/Shared/PgBouncer</value>
            <ruleEvaluationLogic>or</ruleEvaluationLogic>
            <ruleList>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>solaris</value>
                </compareText>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
		<compareText logic="contains" text="${platform_name}" value="hpux"/>
            </ruleList>
        </setInstallerVariable>
        <!-- WIN : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${platform_install_prefix}\PostgresPlus\Shared\PgBouncer</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
    </preShowHelpActionList>
    <!-- Prebuild Actons-->
    <preBuildActionList>
      <setInstallerVariable name="originalplatform" value="${platform_name}"/>
      <setInstallerVariable name="originalplatform" value="linux-x32">
          <ruleList>
              <compareText text="${platform_name}" value="linux"/>
          </ruleList>
      </setInstallerVariable>
      <setInstallerVariable name="project.parameter(pgbouncerdetails).parameter(system_user).ask" value="0">
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
      </setInstallerVariable>
      <setInstallerVariable>
        <name>project.defaultInstallationMode</name>
        <value>text</value>
        <ruleList>
          <compareText logic="contains" text="${platform_name}" value="hpux"/>
        </ruleList>
      </setInstallerVariable>
      <!-- Change allowed values for installation mode in HP-UX -->
      <setInstallerVariable name="project.allowedInstallationModes" value="text unattended">
        <ruleList>
          <compareText logic="contains" text="${platform_name}" value="hpux"/>
        </ruleList>
      </setInstallerVariable>
    </preBuildActionList>
    <initializationActionList>
        <setInstallerVariable name="project.parameter(extract_mode).ask" value="0"/>
        <setInstallerVariable name="productVersion" persist="1" value="PG_VERSION_PGBOUNCER" />
	<!-- Set the default values -->
	<setInstallerVariable name="defaultpghost" value="localhost"/>
	<setInstallerVariable name="defaultpguser" value="postgres"/>
	<setInstallerVariable name="defaultpgport" value="5432"/>
	<setInstallerVariable name="defaultpgdbname" value="postgres"/>
	<!-- Set the default postgres password, to be used only in unnattended mode -->
	<setInstallerVariable name="defaultpgpassword" value=""/>
	<setInstallerVariable name="defaultpgpassword" value="postgres">
	  <ruleList>
    	    <compareText logic="equals" text="${installer_ui}" value="unattended"/>
	  </ruleList>
	</setInstallerVariable>

        <setInstallerVariable name="productVersion" persist="1" value="PG_VERSION_PGBOUNCER" />
        <setInstallerVariable name="pgbouncerVersion" value="" />

	    <!-- Abort Installation as trying to  run a 32-bit installer on 64-bit machine -->
        <throwError>
          <customErrorMessage>${msg(platform.not.match)}</customErrorMessage>
          <text>Unknown Error</text>
          <ruleList>
            <platformTest type="linux-x64"/>
            <compareText text="${originalplatform}" value="linux-x32"/>
          </ruleList>
        </throwError>
	<!-- Abort Installation as GUI mode is not available for HPUX -->
    	<throwError>
      	  <customErrorMessage>${msg(gui.not.available.hpux)}</customErrorMessage>
      	  <text>Unknown Error</text>
          <ruleList>
            <compareText logic="contains" text="${platform_name}" value="hpux"/>
            <compareText logic="does_not_equal" text="${installer_ui}" value="unattended"/>
            <compareText logic="does_not_equal" text="${installer_ui}" value="text"/>
          </ruleList>
        </throwError>

        <!-- LIN : Set the default values for unattended mode -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="installdir" value="${platform_install_prefix}/PostgresPlus/Shared/PgBouncer"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${installer_ui}</text>
                    <value>unattended</value>
                </compareText>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </actionGroup>

	<!-- HPUX : Set the default values for unattended mode -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="installdir" value="${platform_install_prefix}/PostgresPlus/Shared/PgBouncer"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${installer_ui}</text>
                    <value>unattended</value>
                </compareText>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>hpux</value>
                </compareText>
            </ruleList>
        </actionGroup>

        <!-- Solaris : Set the default values for unattended mode -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="installdir" value="${platform_install_prefix}/PostgresPlus/Shared/PgBouncer"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${installer_ui}</text>
                    <value>unattended</value>
                </compareText>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>solaris</value>
                </compareText>
            </ruleList>
        </actionGroup>
        <!-- WIN : Set the default values for unattended mode -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="installdir" value="${platform_install_prefix}\PostgresPlus\Shared\PgBouncer"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${installer_ui}</text>
                    <value>unattended</value>
                </compareText>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
        <!-- MAC : Set the default values for unattended mode -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="installdir" value="/Library/PostgresPlus/Shared/PgBouncer"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${installer_ui}</text>
                    <value>unattended</value>
                </compareText>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </actionGroup>
	<!-- MAC : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>/Library/PostgresPlus/Shared/PgBouncer</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
        <!-- LIN : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${platform_install_prefix}/PostgresPlus/Shared/PgBouncer</value>
            <ruleEvaluationLogic>or</ruleEvaluationLogic>
            <ruleList>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>solaris</value>
                </compareText>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
		<compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>hpux</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
        <!-- WIN : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${platform_install_prefix}\PostgresPlus\Shared\PgBouncer</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
    </initializationActionList>
    <preInstallationActionList>
	<createTempDir dirPrefix="pgbouncer"/>
        <!-- Setting defaultUnixGroup and defaultUnixOwner -->
        <actionGroup>
          <actionList>
            <setInstallerVariable name="project.defaultUnixGroup" value="daemon"/>
            <setInstallerVariable name="project.defaultUnixOwner" value="root"/>
          </actionList>
          <ruleList>
            <isFalse value="${extract_mode}"/>
          </ruleList>
        </actionGroup>
        <actionGroup>
             <actionList>
                 <setInstallerVariable name="branding" value=""/>
                 <!-- Do not create uninstaller in case of extract-only mode -->
                 <setInstallerVariable name="createUninstaller" value="0" persist="1"/>
             </actionList>
             <ruleList>
                 <isTrue value="${extract_mode}"/>
             </ruleList>
        </actionGroup>

        <!-- Do not perform the below actions in case of extract-only mode -->
        <actionGroup>
            <actionList>
                <!-- Abort installation if not super-user and not running in extract-only mode-->
                <throwError text="${msg(Installer.Warning.RootPrivileges)}">
                    <ruleList>
                       <isFalse value="${installer_is_root_install}"/>
                    </ruleList>
                </throwError>
                <setInstallerVariable name="project.windowsSoftwareRegistryPrefix" value="${project.vendor}\${project.fullName}_PGBOUNCER_SERVICE_VER"/>

                <!-- Creates the ini file if not exits -->
                <touchFile path="/etc/postgres-reg.ini">
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </touchFile>
                <!-- LIN & MAC : Get the check Previous Installation of pgbouncer-->
                <actionGroup>
                    <actionList>
                        <iniFileGet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>pgbouncer_PGBOUNCER_SERVICE_VER</section>
                            <key>Version</key>
                            <variable>pgbouncerVersion</variable>
                        </iniFileGet>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </actionGroup>
        
                <!-- WIN : Check Previous Installation of pgbouncer-->
                <actionGroup>
                    <actionList>
                        <registryGet>
                            <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgbouncer_PGBOUNCER_SERVICE_VER</key>
                            <name>Version</name>
                            <variable>pgbouncerVersion</variable>
                        </registryGet>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </actionGroup>
     
		<actionGroup>
		    <actionList>
			<setInstallerVariable name="installationType" value="upgrade" />
		    </actionList>
		    <ruleList>
			<compareText>
			    <text>${pgbouncerVersion}</text>
			    <logic>does_not_equal</logic>
			    <value/>
			</compareText>
		    </ruleList>
		</actionGroup>
   
                <actionGroup>
                    <actionList>
                        <!-- LIN & MAC: Set the system_user in case of re-install/upgrade -->
                        <!-- On Beta version, we have used System_User variable.
                             For consistency, we renamed System_User to SystemUser -->
                        <iniFileGet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>pgbouncer_PGBOUNCER_SERVICE_VER</section>
                            <key>System_User</key>
                            <variable>iSystem_User</variable>
                            <ruleList>
                                <compareText>
                                    <logic>does_not_equal</logic>
                                    <text>${platform_name}</text>
                                    <value>windows</value>
                                </compareText>
                            </ruleList>
                        </iniFileGet>
                        <iniFileGet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>pgbouncer_PGBOUNCER_SERVICE_VER</section>
                            <key>SystemUser</key>
                            <variable>iSystem_User</variable>
                            <ruleList>
                                <compareText>
                                    <logic>does_not_equal</logic>
                                    <text>${platform_name}</text>
                                    <value>windows</value>
                                </compareText>
                                <compareText>
                                    <logic>equals</logic>
                                    <text>${iSystem_User}</text>
                                    <value/>
                                </compareText>
                            </ruleList>
                        </iniFileGet>
                        <setInstallerVariable name="system_user" value="${iSystem_User}" >
                            <ruleList>
                                <compareText text="${iSystem_User}" logic="does_not_equal" value="" />
                            </ruleList>
                        </setInstallerVariable>
                        <!-- LIN & MAC: Set the installation directory in case of re-install/upgrade -->
                        <iniFileGet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>pgbouncer_PGBOUNCER_SERVICE_VER</section>
                            <key>InstallationDirectory</key>
                            <variable>installdir</variable>
                            <ruleList>
                                <compareText>
                                    <logic>does_not_equal</logic>
                                    <text>${platform_name}</text>
                                    <value>windows</value>
                                </compareText>
                            </ruleList>
                        </iniFileGet>
                        <!-- WIN: Set the installation directory in case of re-install/upgrade -->
                        <registryGet>
                            <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgbouncer_PGBOUNCER_SERVICE_VER</key>
                            <name>Location</name>
                            <variable>installdir</variable>
                            <ruleList>
                                <compareText>
                                    <logic>equals</logic>
                                    <text>${platform_name}</text>
                                    <value>windows</value>
                                </compareText>
                            </ruleList>
                        </registryGet> 
                        <!-- WIN: Stop the pgbouncer service -->    
                        <stopWindowsService>
                            <serviceName>pgbouncer-PGBOUNCER_SERVICE_VER</serviceName>
                            <displayName>pgbouncer-PGBOUNCER_SERVICE_VER</displayName>
                            <abortOnError>0</abortOnError>
                            <showMessageOnError>0</showMessageOnError>
                            <ruleList>
                                <compareText>
                                    <logic>equals</logic>
                                    <text>${platform_name}</text>
                                    <value>windows</value>
                                </compareText>
                            </ruleList>
                        </stopWindowsService>  
                        <!-- Mac: Stop the pgbouncer service -->    
                        <runProgram>
                            <program>launchctl</program>
                            <programArguments>unload /Library/LaunchDaemons/com.edb.launchd.pgbouncer-PGBOUNCER_SERVICE_VER.plist</programArguments>
                            <abortOnError>0</abortOnError>
                            <showMessageOnError>0</showMessageOnError>
                            <ruleList>
                                <compareText>
                                    <logic>equals</logic>
                                    <text>${platform_name}</text>
                                    <value>osx</value>
                                </compareText>
                            </ruleList>
                        </runProgram>
                        <!-- Linux: Stop the pgbouncer service -->    
                        <runProgram>
                            <program>/etc/init.d/pgbouncer-PGBOUNCER_SERVICE_VER</program>
                            <programArguments>stop</programArguments>
                            <abortOnError>0</abortOnError>
                            <showMessageOnError>0</showMessageOnError>
                            <ruleList>
                                <compareText>
                                    <logic>contains</logic>
                                    <text>${platform_name}</text>
                                    <value>linux</value>
                                </compareText>
                            </ruleList>
                        </runProgram>
			<!-- HPUX: Stop the pgbouncer service -->
                        <runProgram>
                            <program>/sbin/init.d/pgbouncer-PGBOUNCER_SERVICE_VER</program>
                            <programArguments>stop</programArguments>
                            <abortOnError>0</abortOnError>
                            <showMessageOnError>0</showMessageOnError>
                            <ruleList>
                                <compareText>
                                    <logic>contains</logic>
                                    <text>${platform_name}</text>
                                    <value>hpux</value>
                                </compareText>
                            </ruleList>
                        </runProgram>
                        <!-- Solaris Stop the pgbouncer service -->  
                        <actionGroup>
                            <actionList>  
                                <runProgram>
                                    <program>svcadm</program>
                                    <programArguments>-v disable svc:/application/pgbouncer-PGBOUNCER_SERVICE_VER:default</programArguments>
                                    <abortOnError>0</abortOnError>
                                    <customErrorMessage>${msg(pgbouncer.service.stop.error)}</customErrorMessage>
                                </runProgram>
                                <runProgram>
                                    <program>svccfg</program>
                                    <programArguments>-v delete -f svc:/application/pgbouncer-PGBOUNCER_SERVICE_VER:default</programArguments>
                                    <abortOnError>0</abortOnError>
                                    <customErrorMessage>${msg(pgbouncer.service.stop.error)}</customErrorMessage>
                                </runProgram>
				<checkSolarisVersion/>
            			<deleteFile path="/var/svc/manifest/application/pgbouncer-PGBOUNCER_SERVICE_VER.xml">
              			  <ruleList>
                		    <compareText text="${solaris_version}" logic="contains" value="Solaris 10"/>
              			  </ruleList>
            			</deleteFile>
            			<deleteFile path="${installdir}/installer/pgbouncer/pgbouncer-PGBOUNCER_SERVICE_VER.xml">
              			  <ruleList>
                		    <compareText text="${solaris_version}" logic="does_not_contain" value="Solaris 10"/>
              			  </ruleList>
            			</deleteFile>
                		<deleteFile path="/lib/svc/method/pgbouncer-PGBOUNCER_SERVICE_VER" />
                            </actionList> 
                            <ruleList>
                                <compareText>
                                    <logic>contains</logic>
                                    <text>${platform_name}</text>
                                    <value>solaris</value>
                                </compareText>
                            </ruleList>
                        </actionGroup>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${pgbouncerVersion}</text>
                            <value/>
                        </compareText>
                    </ruleList>
                </actionGroup>
        
                <!-- Get a free port for pgbouncer -->
                <getFreePort>
                    <variable>def_listen_port</variable>
                    <initialPort>6432</initialPort>
                    <finalPort>65535</finalPort>
                    <ruleList>
                       <isTrue value="${installer_is_root_install}"/>
                    </ruleList>
                </getFreePort>
            </actionList>
            <ruleList>
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </actionGroup>

        <!-- Delete these two files, generated by older version installer -->
        <!--<deleteFile path="/tmp/.s.PGSQL.${pgbouncer_port}">
            <ruleList>
		<ruleGroup>
                  <ruleList ruleEvaluationGroup="or">
                    <compareText logic="contains" text="${platform_name}" value="linux"/>
                    <compareText logic="contains" text="${platform_name}" value="solaris"/>
                  </ruleList>
                </ruleGroup>
                <fileExists path="/tmp/.s.PGSQL.${pgbouncer_port}"/>
            </ruleList>
        </deleteFile>-->
        
        <deleteFile path="/var/pgbouncer-${system_user}/pgbouncer-PGBOUNCER_SERVICE_VER.pid">
            <ruleList>
		<ruleGroup>
		  <ruleList ruleEvaluationGroup="or">
                    <compareText logic="contains" text="${platform_name}" value="linux"/>
		    <compareText logic="contains" text="${platform_name}" value="solaris"/>
		  </ruleList>
		</ruleGroup>
                <fileExists path="/var/pgbouncer-${system_user}/pgbouncer-PGBOUNCER_SERVICE_VER.pid"/>
            </ruleList>
        </deleteFile>
        <!-- Validate the PostgreSQL Server Details -->
        <actionGroup>
          <actionList>

              <!-- Extract file --> 
              <unpackDirectory>
                  <origin>instscripts</origin>
                  <destination>${system_temp_directory}/pgbouncer_${random_number}</destination>
                  <component>default</component>
                  <folder>installfileslinux</folder>
                  <ruleList>
                      <compareText>
                          <logic>equals</logic>
                          <text>${platform_name}</text>
                          <value>linux</value>
                      </compareText>
                  </ruleList>
              </unpackDirectory>
	      <!--HPUX -->
	      <unpackDirectory>
                  <origin>instscripts</origin>
                  <destination>${system_temp_directory}/pgbouncer_${random_number}</destination>
                  <component>default</component>
                  <folder>installfileshpux</folder>
                  <ruleList>
                      <compareText>
                          <logic>equals</logic>
                          <text>${platform_name}</text>
                          <value>hpux</value>
                      </compareText>
                  </ruleList>
              </unpackDirectory>

              <unpackDirectory>
                  <origin>instscripts</origin>
                  <destination>${system_temp_directory}/pgbouncer_${random_number}</destination>
                  <component>default</component>
                  <folder>installfileslinux-x64</folder>
                  <ruleList>
                      <compareText>
                          <logic>equals</logic>
                          <text>${platform_name}</text>
                          <value>linux-x64</value>
                      </compareText>
                  </ruleList>
              </unpackDirectory>
              <unpackDirectory>
                  <origin>instscripts</origin>
                  <destination>${system_temp_directory}/pgbouncer_${random_number}</destination>
                  <component>default</component>
                  <folder>installfileslinux-ppc64</folder>
                  <ruleList>
                      <compareText>
                          <logic>equals</logic>
                          <text>${platform_name}</text>
                          <value>linux-ppc</value>
                      </compareText>
                  </ruleList>
              </unpackDirectory>
              <unpackDirectory>
                  <origin>instscripts</origin>
                  <destination>${system_temp_directory}\pgbouncer_${random_number}</destination>
                  <component>default</component>
                  <folder>installfileswindows</folder>
                  <ruleList>
                      <compareText>
                          <logic>equals</logic>
                          <text>${platform_name}</text>
                          <value>windows</value>
                      </compareText>
                  </ruleList>
              </unpackDirectory>
              <unpackDirectory>
                  <origin>instscripts</origin>
                  <destination>${system_temp_directory}/pgbouncer_${random_number}</destination>
                  <component>default</component>
                  <folder>installfilessolaris-x64</folder>
                  <ruleList>
                      <compareText>
                          <logic>equals</logic>
                          <text>${platform_name}</text>
                          <value>solaris-intel</value>
                      </compareText>
                  </ruleList>
              </unpackDirectory>
              <unpackDirectory>
                  <origin>instscripts</origin>
                  <destination>${system_temp_directory}/pgbouncer_${random_number}</destination>
                  <component>default</component>
                  <folder>installfilessolaris-sparc</folder>
                  <ruleList>
                      <compareText>
                          <logic>equals</logic>
                          <text>${platform_name}</text>
                          <value>solaris-sparc</value>
                      </compareText>
                  </ruleList>
              </unpackDirectory>
              <unpackFile>
                  <origin>installer/pgbouncer/check-connection.bat</origin>
                  <destination>${system_temp_directory}/pgbouncer_${random_number}/instscripts/check-connection.bat</destination>
                  <component>default</component>
                  <folder>installfileswindows</folder>
                  <ruleList>
                      <compareText>
                          <logic>equals</logic>
                          <text>${platform_name}</text>
                          <value>windows</value>
                      </compareText>
                  </ruleList>
              </unpackFile>
              <unpackDirectory>
                  <origin>instscripts</origin>
                  <destination>${system_temp_directory}/pgbouncer_${random_number}</destination>
                  <component>default</component>
                  <folder>installfilesosx</folder>
                  <ruleList>
                      <compareText>
                          <logic>equals</logic>
                          <text>${platform_name}</text>
                          <value>osx</value>
                      </compareText>
                  </ruleList>
              </unpackDirectory>
            
            <!-- Running the Script to validate the PostgreSQL Server Details -->
            <setEnvironmentVariable name="PGHOST" value="${pghost}"/>
            <setEnvironmentVariable name="PGUSER" value="${pguser}"/>
            <setEnvironmentVariable name="PGPASSWORD" value="${pgpassword}"/>
            <setEnvironmentVariable name="PGPORT" value="${pgport}"/>
            <setEnvironmentVariable name="LD_LIBRARY_PATH" value="${system_temp_directory}/pgbouncer_${random_number}/instscripts"/>

            <setInstallerVariableFromScriptOutput>
              <exec>${system_temp_directory}/pgbouncer_${random_number}/instscripts/psql</exec>
              <execArgs>-d ${pgdbname} -l </execArgs>
              <name>connection</name>
              <workingDirectory>${system_temp_directory}/pgbouncer_${random_number}/instscripts</workingDirectory>
              <abortOnError>0</abortOnError>
              <showMessageOnError>0</showMessageOnError> 
              <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
              </ruleList>
            </setInstallerVariableFromScriptOutput>
            <setInstallerVariable name="pgdbname" value="edb" >
              <ruleList>
                <compareText logic="equals" text="${connection}" value=""/>
              </ruleList>
            </setInstallerVariable>
            <setInstallerVariableFromScriptOutput>
              <exec>${system_temp_directory}/pgbouncer_${random_number}/instscripts/psql</exec>
              <execArgs>-d ${pgdbname} -l </execArgs>
              <name>connection</name>
              <workingDirectory>${system_temp_directory}/pgbouncer_${random_number}/instscripts</workingDirectory>
              <abortOnError>0</abortOnError>
              <showMessageOnError>0</showMessageOnError> 
              <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                <compareText logic="equals" text="${connection}" value=""/>
              </ruleList>
            </setInstallerVariableFromScriptOutput>
            <setInstallerVariable name="pgdbname" value="template1" >
              <ruleList>
                <compareText logic="equals" text="${connection}" value=""/>
              </ruleList>
            </setInstallerVariable>
            <setInstallerVariableFromScriptOutput>
              <exec>${system_temp_directory}/pgbouncer_${random_number}/instscripts/psql</exec>
              <execArgs>-d ${pgdbname} -l </execArgs>
              <name>connection</name>
              <workingDirectory>${system_temp_directory}/pgbouncer_${random_number}/instscripts</workingDirectory>
              <abortOnError>0</abortOnError>
              <showMessageOnError>0</showMessageOnError> 
              <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                <compareText logic="equals" text="${connection}" value=""/>
              </ruleList>
            </setInstallerVariableFromScriptOutput>
            <setInstallerVariableFromScriptOutput>
              <exec>${system_temp_directory}\pgbouncer_${random_number}\instscripts\check-connection.bat</exec>
              <execArgs>"${system_temp_directory}\pgbouncer_${random_number}\instscripts\psql.exe" ${pgdbname}</execArgs>
              <name>connection</name>
              <workingDirectory>${system_temp_directory}\pgbouncer_${random_number}\instscripts</workingDirectory>
              <abortOnError>0</abortOnError>
              <showMessageOnError>0</showMessageOnError> 
              <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
              </ruleList>
            </setInstallerVariableFromScriptOutput>
            <setInstallerVariable name="pgdbname" value="edb" >
              <ruleList>
                <compareText logic="equals" text="${connection}" value=""/>
              </ruleList>
            </setInstallerVariable>
            <setInstallerVariableFromScriptOutput>
              <exec>${system_temp_directory}\pgbouncer_${random_number}\instscripts\check-connection.bat</exec>
              <execArgs>"${system_temp_directory}\pgbouncer_${random_number}\instscripts\psql.exe" ${pgdbname}</execArgs>
              <name>connection</name>
              <workingDirectory>${system_temp_directory}\pgbouncer_${random_number}\instscripts</workingDirectory>
              <abortOnError>0</abortOnError>
              <showMessageOnError>0</showMessageOnError> 
              <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
              </ruleList>
            </setInstallerVariableFromScriptOutput>
            <setInstallerVariable name="pgdbname" value="template1" >
              <ruleList>
                <compareText logic="equals" text="${connection}" value=""/>
              </ruleList>
            </setInstallerVariable>
            <setInstallerVariableFromScriptOutput>
              <exec>${system_temp_directory}\pgbouncer_${random_number}\instscripts\check-connection.bat</exec>
              <execArgs>"${system_temp_directory}\pgbouncer_${random_number}\instscripts\psql.exe" ${pgdbname}</execArgs>
              <name>connection</name>
              <workingDirectory>${system_temp_directory}\pgbouncer_${random_number}\instscripts</workingDirectory>
              <abortOnError>0</abortOnError>
              <showMessageOnError>0</showMessageOnError> 
              <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
              </ruleList>
            </setInstallerVariableFromScriptOutput>
            <stringModify text="${connection}" variable="connection" logic="trim"/>
            <throwError>
                <text>${program_stderr}</text>
                <ruleList>
                    <compareText>
                        <logic>equals</logic>
                        <text>${connection}</text>
                        <value/>
                    </compareText>
                </ruleList>
            </throwError> 
          </actionList>
          <ruleList>
            <compareText text="${pgbouncerVersion}" logic="equals" value="" /> 
            <compareText text="${installer_ui}" logic="equals" value="unattended" />
            <isFalse value="${extract_mode}" />
          </ruleList>    
         </actionGroup> 
         <actionGroup>
            <actionList>
               <copyFile>
                   <origin>${installdir}/share/pgbouncer.ini</origin>
                   <destination>${installdir}/share/pgbouncer.ini.bak1</destination>
               </copyFile>
            </actionList>
           <ruleList>
               <compareText>
                   <logic>does_not_equal</logic>
                   <text>${pgbouncerVersion}</text>
                   <value/>
               </compareText>
           </ruleList>
        </actionGroup> 
    </preInstallationActionList>
    <postInstallationActionList>
        <!-- Do not perform the below actions in case of extract-only mode -->
        <actionGroup>
            <actionList>
                <!-- Create a log directory -->
                <createDirectory>
                    <path>${installdir}/log</path>
                    <ruleList>
                        <fileTest>
                            <path>${installdir}/log</path>
                            <condition>not_exists</condition>
                        </fileTest>
                        <compareText>
                            <text>${platform_name}</text>
                            <logic>equals</logic>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </createDirectory>

                <!-- Perform substitution in the config and ctl files -->
                <actionGroup>
                    <actionList>
                        <setInstallerVariable name="pghost" value="127.0.0.1">
                            <ruleList>
                                <compareText>
                                    <text>${pghost}</text>
                                    <logic>equals</logic>
                                    <value>localhost</value>
                                </compareText>
                            </ruleList>
                        </setInstallerVariable>
                        <substitute>
                            <files>${installdir}/share/pgbouncer.ini</files>
                            <substitutionList>
                                <substitution>
                                    <pattern>@@CON@@</pattern>
                                    <value>${pgdbname} = host=${pghost} port=${pgport}</value>
                                </substitution>
                                <substitution>
                                    <pattern>@@LISTENPORT@@</pattern>
                                    <value>${pgbouncer_port}</value>
                                </substitution>
                                <substitution>
                                    <pattern>@@ADMINUSERS@@</pattern>
                                    <value>${pguser}</value>
                                </substitution>
                                <substitution>
                                    <pattern>@@STATSUSERS@@</pattern>
                                    <value>${pguser}</value>
                                </substitution>
                            </substitutionList>
                        </substitute>
                        <substitute>
                            <files>${installdir}/share/pgbouncer.ini</files>
                            <substitutionList>
                                <substitution>
                                    <pattern>@@LOGFILE@@</pattern>
                                    <value>/var/log/pgbouncer-PGBOUNCER_SERVICE_VER/pgbouncer.log</value>
                                </substitution>
                                <substitution>
                                    <pattern>@@PIDFILE@@</pattern>
                                    <value>/var/pgbouncer-${system_user}/pgbouncer-PGBOUNCER_SERVICE_VER.pid</value>
                                </substitution>
                                <substitution>
                                    <pattern>@@AUTHFILE@@</pattern>
                                    <value>${installdir}/etc/userlist.txt</value>
                                </substitution>
                            </substitutionList>
                            <ruleList>
                                <compareText>
                                    <text>${platform_name}</text>
                                    <logic>does_not_equal</logic>
                                    <value>windows</value>
                                </compareText>
                            </ruleList>
                        </substitute>
                        <substitute>
                            <files>${installdir}\share\pgbouncer.ini</files>
                            <substitutionList>
                                <substitution>
                                    <pattern>@@LOGFILE@@</pattern>
                                    <value>${installdir}\log\pgbouncer.log</value>
                                </substitution>
                                <substitution>
                                    <pattern>@@PIDFILE@@</pattern>
                                    <value>${installdir}\log\pgbouncer.pid</value>
                                </substitution>
                                <substitution>
                                    <pattern>@@AUTHFILE@@</pattern>
                                    <value>${installdir}\etc\userlist.txt</value>
                                </substitution>
                            </substitutionList>
                            <ruleList>
                                <compareText>
                                    <text>${platform_name}</text>
                                    <logic>equals</logic>
                                    <value>windows</value>
                                </compareText>
                            </ruleList>
                        </substitute>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>${pgbouncerVersion}</text>
                            <value/>
                        </compareText>
                    </ruleList>
                </actionGroup>
		<!-- Convert pgbouncer.ini from dos to unix format -->
        	<dos2unix>
          	  <files>${installdir}\share\pgbouncer.ini</files>
          	  <ruleList>
            	    <compareText logic="equals" text="${platform_name}" value="windows"/>
          	  </ruleList>
        	</dos2unix>
                <!-- Create etc directory for userlist.txt file -->
                <createDirectory>
                    <path>${installdir}/etc</path>
                    <ruleList>
                        <fileTest>
                            <path>${installdir}/etc</path>
                            <condition>not_exists</condition>
                        </fileTest>
                    </ruleList>
                </createDirectory>
		<touchFile path="${installdir}/etc/userlist.txt"/>
                <changeOwnerAndGroup>
                    <files>${installdir}/etc/userlist.txt</files>
                    <owner>${system_user}</owner>
                </changeOwnerAndGroup>
                <changePermissions>
                    <files>${installdir}/etc/userlist.txt</files>
                    <permissions>700</permissions>
                </changePermissions>
                <!-- Create the userlist.txt file -->
                <writeFile>
                    <path>${installdir}/etc/userlist.txt</path>
                    <text>"${pguser}" "${pgpassword}"</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>${pgbouncerVersion}</text>
                            <value/>
                        </compareText>
                    </ruleList>
                </writeFile>
                <!-- Write pgbouncer details to ini file -->
                <actionGroup>
                    <actionList>
                        <iniFileSet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>pgbouncer_PGBOUNCER_SERVICE_VER</section>
                            <key>Description</key>
                            <value>${msg(install.summary)}</value>
                        </iniFileSet>
                        <iniFileSet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>pgbouncer_PGBOUNCER_SERVICE_VER</section>
                            <key>InstallationDirectory</key>
                            <value>${installdir}</value>
                        </iniFileSet>
                        <iniFileSet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>pgbouncer_PGBOUNCER_SERVICE_VER</section>
                            <key>Version</key>
                            <value>${product_version}</value>
                        </iniFileSet>
                        <iniFileSet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>pgbouncer_PGBOUNCER_SERVICE_VER</section>
                            <key>SystemUser</key>
                            <value>${system_user}</value>
                        </iniFileSet>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </actionGroup>
        
                <!-- Register pgbouncer service -->
                 <runProgram>
                    <program>${installdir}\installer\pgbouncer\startupcfg.bat</program>
                    <programArguments>"${installdir}"</programArguments>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                        <compareText>
                            <logic>equals</logic>
                            <text>${pgbouncerVersion}</text>
                            <value/>
                        </compareText>
                    </ruleList>
                </runProgram>
                <actionGroup>
                    <actionList>
                        <copyFile>
                           <origin>${installdir}/share/pgbouncer.ini.bak1</origin>
                           <destination>${installdir}/share/pgbouncer.ini</destination>
                        </copyFile>
                        <deleteFile>
                           <path>${installdir}/share/pgbouncer.ini.bak1</path>
                        </deleteFile>
                    </actionList>
                    <ruleList>
                        <fileTest>
                            <path>${installdir}/share/pgbouncer.ini.bak1</path>
                            <condition>exists</condition>
                        </fileTest>
                    </ruleList>
                </actionGroup>
                <!-- LINUX | MAC | HPUX : Install pgbouncer service -->
                <runProgram>
                    <program>${installdir}/installer/pgbouncer/startupcfg.sh</program>
                    <programArguments>"${installdir}" "${system_user}" "PGBOUNCER_SERVICE_VER"</programArguments>
                    <abortOnError>0</abortOnError>
                    <customErrorMessage>${msg(pgbouncer.linux.service.error)}</customErrorMessage>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </runProgram>
                <!-- Win : Disable pgbouncer Service if autostart is no-->
                <runProgram>
                    <program>sc</program>
                    <programArguments>config pgbouncer-PGBOUNCER_SERVICE_VER start= demand</programArguments>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                    <ruleList>
                        <compareText logic="equals" text="${platform_name}" value="windows"/>
                        <isFalse value="${autostart}"/>
                    </ruleList>
                </runProgram>
                <!-- LIN : Disable pgbouncer Service if autostart is no-->
                <actionGroup>
                    <actionList>
                        <runProgram>
                           <program>/sbin/chkconfig</program>
                           <programArguments>pgbouncer-PGBOUNCER_SERVICE_VER off</programArguments>
                           <abortOnError>0</abortOnError>
                           <showMessageOnError>0</showMessageOnError>
                        </runProgram>
                        <runProgram>
                           <program>/usr/sbin/update-rc.d</program>
                           <programArguments>pgbouncer-PGBOUNCER_SERVICE_VER disable</programArguments>
                           <abortOnError>0</abortOnError>
                           <showMessageOnError>0</showMessageOnError>
                        </runProgram>
                     </actionList>
                     <ruleList>
                         <compareText logic="contains" text="${platform_name}" value="linux"/>
                         <isFalse value="${autostart}"/>
                     </ruleList>
                </actionGroup>
		<!-- Solaris: Disable pgbouncer Service if autostart is no -->
		<actionGroup>
                  <actionList>
                    <runProgram>
                      <program>svcadm</program>
                      <programArguments>-v disable svc:/application/pgbouncer-PGBOUNCER_SERVICE_VER:default</programArguments>
                      <abortOnError>0</abortOnError>
                      <customErrorMessage>${msg(pgbouncer.service.stop.error)}</customErrorMessage>
                    </runProgram>
                  </actionList>
                  <ruleList>
                    <compareText>
                      <logic>contains</logic>
                      <text>${platform_name}</text>
                      <value>solaris</value>
                    </compareText>
		    <isFalse value="${autostart}"/>
                  </ruleList>
                </actionGroup>
		<!-- HPUX : Disable pgbouncer Service if autostart is no-->
                <actionGroup>
                  <actionList>
                    <deleteFile>
                      <path>/sbin/rc3.d/S86pgbouncer-PGBOUNCER_SERVICE_VER</path>
                    </deleteFile>
                    <deleteFile>
                      <path>/sbin/rc0.d/K14pgbouncer-PGBOUNCER_SERVICE_VER</path>
                    </deleteFile>
                    <deleteFile>
                      <path>/sbin/rc1.d/K14pgbouncer-PGBOUNCER_SERVICE_VER</path>
                    </deleteFile>
                    <deleteFile>
                      <path>/sbin/rc2.d/K14pgbouncer-PGBOUNCER_SERVICE_VER</path>
                    </deleteFile>
                  </actionList>
                  <ruleList>
                    <compareText logic="contains" text="${platform_name}" value="hpux"/>
                    <isFalse value="${autostart}"/>
                  </ruleList>
                </actionGroup>

                <!-- WIN: Start the pgbouncer service -->    
                <startWindowsService>
                    <serviceName>pgbouncer-PGBOUNCER_SERVICE_VER</serviceName>
                    <displayName>pgbouncer-PGBOUNCER_SERVICE_VER</displayName>
                    <abortOnError>0</abortOnError>
                    <customErrorMessage>${msg(pgbouncer.service.start.error)}</customErrorMessage>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                        <compareText>
                            <logic>equals</logic>
                            <text>${autostart}</text>
                            <value>yes</value>
                        </compareText>
                    </ruleList>
                </startWindowsService>  
 
                <!-- Linux: Start the pgbouncer service -->    
                <runProgram>
                    <program>/etc/init.d/pgbouncer-PGBOUNCER_SERVICE_VER</program>
                    <programArguments>start</programArguments>
                    <abortOnError>0</abortOnError>
                    <customErrorMessage>${msg(pgbouncer.service.start.error)}</customErrorMessage>
                    <ruleList>
                        <compareText>
                            <logic>contains</logic>
                            <text>${platform_name}</text>
                            <value>linux</value>
                        </compareText>
                        <compareText>
                            <logic>equals</logic>
                            <text>${autostart}</text>
                            <value>yes</value>
                        </compareText>
                    </ruleList>
                </runProgram>

		<!-- HPUX: Start the pgbouncer service -->    
                <runProgram>
                    <program>/sbin/init.d/pgbouncer-PGBOUNCER_SERVICE_VER</program>
                    <programArguments>start</programArguments>
                    <abortOnError>0</abortOnError>
                    <customErrorMessage>${msg(pgbouncer.service.start.error)}</customErrorMessage>
                    <ruleList>
                        <compareText>
                            <logic>contains</logic>
                            <text>${platform_name}</text>
                            <value>hpux</value>
                        </compareText>
                        <compareText>
                            <logic>equals</logic>
                            <text>${autostart}</text>
                            <value>yes</value>
                        </compareText>
                    </ruleList>
                </runProgram>
       
               <!-- MAC: Start the pgbouncer service -->    
                <runProgram>
                    <program>launchctl</program>
                    <programArguments>load /Library/LaunchDaemons/com.edb.launchd.pgbouncer-PGBOUNCER_SERVICE_VER.plist</programArguments>
                    <abortOnError>0</abortOnError>
                    <customErrorMessage>${msg(pgbouncer.service.start.error)}</customErrorMessage>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>${platform_name}</text>
                            <value>osx</value>
                        </compareText>
                        <compareText>
                            <logic>equals</logic>
                            <text>${autostart}</text>
                            <value>yes</value>
                        </compareText>
                    </ruleList>
                </runProgram>
        
                <runProgram>
                    <program>cscript</program>
                    <programArguments>//NoLogo "${installdir}/installer/pgbouncer/securefile.vbs" "${installdir}\etc\userlist.txt" "${system_username}"</programArguments>
                    <abortOnError>0</abortOnError>
                    <customErrorMessage>${msg(error.file.notsecure)}</customErrorMessage>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </runProgram>
        
                <deleteFile path="${installdir}/instscripts" />
            </actionList>
            <ruleList>
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </actionGroup>

        <actionGroup>
            <actionList>
                <!-- Create etc directory for userlist.txt file -->
                <createDirectory path="${installdir}/etc">
                    <ruleList>
                        <fileTest path="${installdir}/etc" condition="not_exists"/>
                    </ruleList>
                </createDirectory>

                <touchFile path="${installdir}/etc/userlist.txt"/>
                <changePermissions>
                    <files>${installdir}/etc/userlist.txt</files>
                    <permissions>700</permissions>
                </changePermissions>
		<!-- Convert pgbouncer.ini from dos to unix format -->
        	<dos2unix>
          	  <files>${installdir}\share\pgbouncer.ini</files>
         	  <ruleList>
            	    <compareText logic="equals" text="${platform_name}" value="windows"/>
          	  </ruleList>
        	</dos2unix>
            </actionList>
            <ruleList>
                <isTrue value="${extract_mode}"/>
            </ruleList>
        </actionGroup>
	<!-- Remove the temporary folder -->
        <deleteFile path="${system_temp_directory}/pgbouncer_${random_number}/instscripts" >
            <ruleList>
                <fileExists path="${system_temp_directory}/pgbouncer_${random_number}/instscripts" />
            </ruleList>
        </deleteFile>
	<deleteFile path="${system_temp_directory}/pgbouncer_${random_number}" >
            <ruleList>
                <fileExists path="${system_temp_directory}/pgbouncer_${random_number}" />
            </ruleList>
        </deleteFile>
    </postInstallationActionList>

    <installationAbortedActionList>
      <deleteFile path="${system_temp_directory}/pgbouncer_${random_number}" >
        <ruleList>
          <fileExists path="${system_temp_directory}/pgbouncer_${random_number}" />
        </ruleList>
      </deleteFile>
    </installationAbortedActionList>

    <!-- preUninstallation actions -->
    <preUninstallationActionList>

        <!-- Abort uninstallation if not super-user/Administrator -->
        <actionGroup>
            <actionList>
                <showWarning text="${msg(Installer.Warning.UninstallerAdministratorPrivileges)}"/>
                <exit/>
            </actionList>
            <ruleList>
                <isFalse value="${installer_is_root_install}"/>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>
        <actionGroup>
            <actionList>
                <showWarning text="${msg(Installer.Warning.UninstallerRootPrivileges)}"/>
                <exit/>
            </actionList>
            <ruleList>
                <isFalse value="${installer_is_root_install}"/>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>

        <!-- MAC: Stop the pgbouncer service -->    
         <runProgram>
            <program>launchctl</program>
            <programArguments>unload /Library/LaunchDaemons/com.edb.launchd.pgbouncer-PGBOUNCER_SERVICE_VER.plist</programArguments>
            <abortOnError>0</abortOnError>
            <customErrorMessage>${msg(pgbouncer.service.stop.error)}</customErrorMessage>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </runProgram>

       <deleteFile>
            <path>/Library/LaunchDaemons/com.edb.launchd.pgbouncer-PGBOUNCER_SERVICE_VER.plist</path>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </deleteFile>

        <!-- WIN: Stop the pgbouncer service -->    
        <stopWindowsService>
            <serviceName>pgbouncer-PGBOUNCER_SERVICE_VER</serviceName>
            <displayName>pgbouncer-PGBOUNCER_SERVICE_VER</displayName>
            <abortOnError>0</abortOnError>
            <customErrorMessage>${msg(pgbouncer.service.stop.error)}</customErrorMessage>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </stopWindowsService>  


        <runProgram>
            <program>${installdir}\bin\pgbouncer.exe</program>
            <programArguments>-unregservice "${installdir}\share\pgbouncer.ini"</programArguments>
            <abortOnError>0</abortOnError>
            <customErrorMessage>${msg(pgbouncer.uninstall.service.error)}</customErrorMessage>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </runProgram>

        <runProgram>
            <program>/etc/init.d/pgbouncer-PGBOUNCER_SERVICE_VER</program>
            <programArguments>stop</programArguments>
            <abortOnError>0</abortOnError>
            <customErrorMessage>${msg(pgbouncer.service.stop.error)}</customErrorMessage>
            <ruleList>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </runProgram>

	<!-- HPUX -->
	<runProgram>
            <program>/sbin/init.d/pgbouncer-PGBOUNCER_SERVICE_VER</program>
            <programArguments>stop</programArguments>
            <abortOnError>0</abortOnError>
            <customErrorMessage>${msg(pgbouncer.service.stop.error)}</customErrorMessage>
            <ruleList>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>hpux</value>
                </compareText>
            </ruleList>
        </runProgram>

        <actionGroup>
            <actionList>
                <runProgram>
                    <program>svcadm</program>
                    <programArguments>-v disable svc:/application/pgbouncer-PGBOUNCER_SERVICE_VER:default</programArguments>
                    <abortOnError>0</abortOnError>
                    <customErrorMessage>${msg(pgbouncer.service.stop.error)}</customErrorMessage>
                </runProgram>
                <runProgram>
                    <program>svccfg</program>
                    <programArguments>-v delete -f svc:/application/pgbouncer-PGBOUNCER_SERVICE_VER:default</programArguments>
                    <abortOnError>0</abortOnError>
                    <customErrorMessage>${msg(pgbouncer.service.stop.error)}</customErrorMessage>
                </runProgram>
		<checkSolarisVersion/>
                  <deleteFile path="/var/svc/manifest/application/pgbouncer-PGBOUNCER_SERVICE_VER.xml">
                    <ruleList>
                      <compareText text="${solaris_version}" logic="contains" value="Solaris 10"/>
                    </ruleList>
                  </deleteFile>
                  <deleteFile path="${installdir}/installer/pgbouncer/pgbouncer-PGBOUNCER_SERVICE_VER.xml">
                    <ruleList>
                      <compareText text="${solaris_version}" logic="does_not_contain" value="Solaris 10"/>
                    </ruleList>
                  </deleteFile>
                <deleteFile path="/lib/svc/method/pgbouncer-PGBOUNCER_SERVICE_VER" />
            </actionList> 
            <ruleList>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>solaris</value>
                </compareText>
            </ruleList>
        </actionGroup>
         
        <deleteFile>
            <path>/etc/init.d/pgbouncer-PGBOUNCER_SERVICE_VER</path>
            <ruleList>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </deleteFile>

	<!-- HPUX: Remove the startup item -->
	<actionGroup>
	  <actionList>
            <deleteFile>
              <path>/sbin/init.d/pgbouncer-PGBOUNCER_SERVICE_VER</path>
            </deleteFile>
            <deleteFile>
              <path>/sbin/rc3.d/S86pgbouncer-PGBOUNCER_SERVICE_VER</path>
            </deleteFile>
            <deleteFile>
              <path>/sbin/rc0.d/K14pgbouncer-PGBOUNCER_SERVICE_VER</path>
            </deleteFile>
            <deleteFile>
              <path>/sbin/rc1.d/K14pgbouncer-PGBOUNCER_SERVICE_VER</path>
            </deleteFile>
            <deleteFile>
              <path>/sbin/rc2.d/K14pgbouncer-PGBOUNCER_SERVICE_VER</path>
            </deleteFile>	
          </actionList>
	  <ruleList>
            <compareText>
              <logic>contains</logic>
              <text>${platform_name}</text>
              <value>hpux</value>
            </compareText>
          </ruleList>
        </actionGroup>
        <deleteFile>
            <path>${installdir}/etc</path>
        </deleteFile>

        <deleteFile>
            <path>${installdir}/log</path>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </deleteFile>
        <deleteFile>
            <path>/var/run/pgbouncer</path>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </deleteFile>

        <actionGroup>
            <actionList>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>pgbouncer_PGBOUNCER_SERVICE_VER</section>
                    <key>Description</key>
                    <value/>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>pgbouncer_PGBOUNCER_SERVICE_VER</section>
                    <key>InstallationDirectory</key>
                    <value/>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>pgbouncer_PGBOUNCER_SERVICE_VER</section>
                    <key>Version</key>
                    <value/>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>pgbouncer_PGBOUNCER_SERVICE_VER</section>
                    <key>SystemUser</key>
                    <value/>
                </iniFileSet>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
        
    </preUninstallationActionList>
    <!-- Components -->
    <componentList>
        <component>
            <name>default</name>
            <description>Default Component</description>
            <canBeEdited>1</canBeEdited>
            <selected>1</selected>
            <show>1</show>
            <folderList>
                <!-- LIN- Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfileslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux/pgbouncer/lib</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux/pgbouncer/bin</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux/pgbouncer/share</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux/pgbouncer/doc</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Files</description>
                    <destination>${installdir}</destination>
                    <name>installfileslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux/instscripts</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>

		<!-- HPUX - Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfileshpux</name>
                    <platforms>hpux</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/hpux/pgbouncer/lib</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/hpux/pgbouncer/bin</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/hpux/pgbouncer/share</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/hpux/pgbouncer/doc</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Files</description>
                    <destination>${installdir}</destination>
                    <name>installfileshpux</name>
                    <platforms>hpux</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/hpux/instscripts</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/hpux/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>

                <!-- LIN-X64 - Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfileslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-x64/pgbouncer/lib</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux-x64/pgbouncer/bin</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux-x64/pgbouncer/share</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux-x64/pgbouncer/doc</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Files</description>
                    <destination>${installdir}</destination>
                    <name>installfileslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-x64/instscripts</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux-x64/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <!-- LIN-PPC64 - Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfileslinux-ppc64</name>
                    <platforms>linux-ppc</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-ppc64/pgbouncer/lib</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux-ppc64/pgbouncer/bin</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux-ppc64/pgbouncer/share</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux-ppc64/pgbouncer/doc</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Files</description>
                    <destination>${installdir}</destination>
                    <name>installfileslinux-ppc64</name>
                    <platforms>linux-ppc</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-ppc64/instscripts</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux-ppc64/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
               <!-- MAC Program Files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfilesosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/osx/pgbouncer/lib</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/osx/pgbouncer/bin</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/osx/pgbouncer/share</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/osx/pgbouncer/doc</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Files</description>
                    <destination>${installdir}</destination>
                    <name>installfilesosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/osx/instscripts</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/osx/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <!-- WIN - Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfileswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/windows/bin</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/windows/share</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/windows/pgbouncer/doc</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Files</description>
                    <destination>${installdir}</destination>
                    <name>installfileswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/windows/instscripts</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/windows/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>

                <!-- SOLARIS-X64 - Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfilessolaris-x64</name>
                    <platforms>solaris-intel</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/solaris-x64/pgbouncer/lib</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/solaris-x64/pgbouncer/bin</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/solaris-x64/pgbouncer/share</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/solaris-x64/pgbouncer/doc</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Files</description>
                    <destination>${installdir}</destination>
                    <name>installfilessolaris-x64</name>
                    <platforms>solaris-intel</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/solaris-x64/instscripts</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/solaris-x64/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>

                <!-- SOLARIS-SPARC - Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfilessolaris-sparc</name>
                    <platforms>solaris-sparc</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/solaris-sparc/pgbouncer/lib</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/solaris-sparc/pgbouncer/bin</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/solaris-sparc/pgbouncer/share</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/solaris-sparc/pgbouncer/doc</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Files</description>
                    <destination>${installdir}</destination>
                    <name>installfilessolaris-sparc</name>
                    <platforms>solaris-sparc</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/solaris-sparc/instscripts</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/solaris-sparc/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
           </folderList>
        </component>
    </componentList>
    <parameterList>

        <booleanParameter name="extract_mode" cliOptionName="extract-only" default="0" ask="1" cliOptionShow="1"/>
        <booleanParameter name="admin_rights" cliOptionName="require-admin" default="0" ask="0" cliOptionShow="0"/>
        <stringParameter cliOptionName="autostart" ask="0" cliOptionShow="0">
              <name>autostart</name>
              <description>AutoStart Service</description>
              <explanation/>
              <value/>
              <default>yes</default>
              <allowEmptyValue>1</allowEmptyValue>
              <width>40</width>
            </stringParameter>
    
        <parameterGroup>
          <name>pgdetails</name>
          <title>${msg(pg.details.title)}</title>
          <explanation>${msg(pg.details.explanation)}</explanation>
          <value/>
          <default/>
          <parameterList>
    
            <!-- Postgres Host -->
            <stringParameter>
              <name>pghost</name>
              <description>Host</description>
              <explanation/>
              <value/>
              <default>${defaultpghost}</default>
              <allowEmptyValue>1</allowEmptyValue>
              <width>40</width>
            </stringParameter>
      
            <!-- Postgres User -->
            <stringParameter>
              <name>pguser</name>
              <description>User Name</description>
              <explanation/>
              <value/>
              <default>${defaultpguser}</default>
              <allowEmptyValue>1</allowEmptyValue>
              <width>40</width>
            </stringParameter>
    
            <!-- Postgres User Password -->
            <passwordParameter>
              <name>pgpassword</name>
              <title>Password</title>
              <description>Password</description>
              <explanation/>
              <value/>
              <default>${defaultpgpassword}</default>
              <allowEmptyValue>1</allowEmptyValue>
              <askForConfirmation>0</askForConfirmation>
              <descriptionRetype/>
              <width>40</width>
            </passwordParameter>
    
            <!-- Postgres Port(Default 5432) -->
            <stringParameter>
              <name>pgport</name>
              <description>Port</description>
              <explanation/>
              <value/>
              <default>${defaultpgport}</default>
              <allowEmptyValue>1</allowEmptyValue>
              <width>40</width>
            </stringParameter>
    
            <stringParameter cliOptionName="dbname" ask="0" cliOptionShow="0">
              <name>pgdbname</name>
              <description>Database</description>
              <explanation/>
              <value/>
              <default>${defaultpgdbname}</default>
              <allowEmptyValue>1</allowEmptyValue>
              <width>40</width>
            </stringParameter>
            
          </parameterList>
          <ruleList>
              <compareText>
                  <text>${pgbouncerVersion}</text>
                  <logic>equals</logic>
                  <value/>
              </compareText>
              <isFalse value="${extract_mode}"/>
          </ruleList>
       
    
          <!-- Checking the validity of PostgreSQL Server Details -->
          <validationActionList>
            <actionGroup>
              <actionList>
                <throwError>
                  <text>${msg(pg.blank.error)}</text>
                </throwError>
              </actionList>
              <ruleEvaluationLogic>OR</ruleEvaluationLogic>
              <ruleList>
                <compareText logic="equals" text="${pgport}" value=""/>
                <compareText logic="equals" text="${pguser}" value=""/>
                <compareText logic="equals" text="${pgpassword}" value=""/>
                <compareText logic="equals" text="${pgdbname}" value=""/>
              </ruleList>
            </actionGroup>
    
            <!-- Validate the PostgreSQL Server Details -->
            <actionGroup>
              <actionList>
    
                  <!-- Extract file --> 
                  <unpackDirectory>
                      <origin>instscripts</origin>
                      <destination>${system_temp_directory}/pgbouncer_${random_number}</destination>
                      <component>default</component>
                      <folder>installfileslinux</folder>
                      <ruleList>
                          <compareText>
                              <logic>equals</logic>
                              <text>${platform_name}</text>
                              <value>linux</value>
                          </compareText>
                      </ruleList>
                  </unpackDirectory>

		  <unpackDirectory>
                      <origin>instscripts</origin>
                      <destination>${system_temp_directory}/pgbouncer_${random_number}</destination>
                      <component>default</component>
                      <folder>installfileshpux</folder>
                      <ruleList>
                          <compareText>
                              <logic>equals</logic>
                              <text>${platform_name}</text>
                              <value>hpux</value>
                          </compareText>
                      </ruleList>
                  </unpackDirectory>

                  <unpackDirectory>
                      <origin>instscripts</origin>
                      <destination>${system_temp_directory}/pgbouncer_${random_number}</destination>
                      <component>default</component>
                      <folder>installfileslinux-x64</folder>
                      <ruleList>
                          <compareText>
                              <logic>equals</logic>
                              <text>${platform_name}</text>
                              <value>linux-x64</value>
                          </compareText>
                      </ruleList>
                  </unpackDirectory>
                  <unpackDirectory>
                      <origin>instscripts</origin>
                      <destination>${system_temp_directory}/pgbouncer_${random_number}</destination>
                      <component>default</component>
                      <folder>installfileslinux-ppc64</folder>
                      <ruleList>
                          <compareText>
                              <logic>equals</logic>
                              <text>${platform_name}</text>
                              <value>linux-ppc</value>
                          </compareText>
                      </ruleList>
                  </unpackDirectory>
                  <unpackDirectory>
                      <origin>instscripts</origin>
                      <destination>${system_temp_directory}\pgbouncer_${random_number}</destination>
                      <component>default</component>
                      <folder>installfileswindows</folder>
                      <ruleList>
                          <compareText>
                              <logic>equals</logic>
                              <text>${platform_name}</text>
                              <value>windows</value>
                          </compareText>
                      </ruleList>
                  </unpackDirectory>
                  <unpackDirectory>
                      <origin>instscripts</origin>
                      <destination>${system_temp_directory}/pgbouncer_${random_number}</destination>
                      <component>default</component>
                      <folder>installfilessolaris-x64</folder>
                      <ruleList>
                          <compareText>
                              <logic>equals</logic>
                              <text>${platform_name}</text>
                              <value>solaris-intel</value>
                          </compareText>
                      </ruleList>
                  </unpackDirectory>
                  <unpackDirectory>
                      <origin>instscripts</origin>
                      <destination>${system_temp_directory}/pgbouncer_${random_number}</destination>
                      <component>default</component>
                      <folder>installfilessolaris-sparc</folder>
                      <ruleList>
                          <compareText>
                              <logic>equals</logic>
                              <text>${platform_name}</text>
                              <value>solaris-sparc</value>
                          </compareText>
                      </ruleList>
                  </unpackDirectory>
                  <unpackFile>
                      <origin>installer/pgbouncer/check-connection.bat</origin>
                      <destination>${system_temp_directory}/pgbouncer_${random_number}/instscripts/check-connection.bat</destination>
                      <component>default</component>
                      <folder>installfileswindows</folder>
                      <ruleList>
                          <compareText>
                              <logic>equals</logic>
                              <text>${platform_name}</text>
                              <value>windows</value>
                          </compareText>
                      </ruleList>
                  </unpackFile>
                  <unpackDirectory>
                      <origin>instscripts</origin>
                      <destination>${system_temp_directory}/pgbouncer_${random_number}</destination>
                      <component>default</component>
                      <folder>installfilesosx</folder>
                      <ruleList>
                          <compareText>
                              <logic>equals</logic>
                              <text>${platform_name}</text>
                              <value>osx</value>
                          </compareText>
                      </ruleList>
                  </unpackDirectory>
                
                <!-- Running the Script to validate the PostgreSQL Server Details -->
                <setEnvironmentVariable name="PGHOST" value="${pghost}"/>
                <setEnvironmentVariable name="PGUSER" value="${pguser}"/>
                <setEnvironmentVariable name="PGPASSWORD" value="${pgpassword}"/>
                <setEnvironmentVariable name="PGPORT" value="${pgport}"/>
                <setEnvironmentVariable name="LD_LIBRARY_PATH" value="${system_temp_directory}/pgbouncer_${random_number}/instscripts"/>
    
                <setInstallerVariableFromScriptOutput>
                  <exec>${system_temp_directory}/pgbouncer_${random_number}/instscripts/psql</exec>
                  <execArgs>-d ${pgdbname} -l </execArgs>
                  <name>connection</name>
                  <workingDirectory>${system_temp_directory}/pgbouncer_${random_number}/instscripts</workingDirectory>
                  <abortOnError>0</abortOnError>
                  <showMessageOnError>0</showMessageOnError> 
                  <ruleList>
                    <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                  </ruleList>
                </setInstallerVariableFromScriptOutput>
                <setInstallerVariable name="pgdbname" value="edb" >
                  <ruleList>
                    <compareText logic="equals" text="${connection}" value=""/>
                    <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                  </ruleList>
                </setInstallerVariable>
                <setInstallerVariableFromScriptOutput>
                  <exec>${system_temp_directory}/pgbouncer_${random_number}/instscripts/psql</exec>
                  <execArgs>-d ${pgdbname} -l </execArgs>
                  <name>connection</name>
                  <workingDirectory>${system_temp_directory}/pgbouncer_${random_number}/instscripts</workingDirectory>
                  <abortOnError>0</abortOnError>
                  <showMessageOnError>0</showMessageOnError> 
                  <ruleList>
                    <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                    <compareText logic="equals" text="${connection}" value=""/>
                  </ruleList>
                </setInstallerVariableFromScriptOutput>
                <setInstallerVariable name="pgdbname" value="template1" >
                  <ruleList>
                    <compareText logic="equals" text="${connection}" value=""/>
                    <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                  </ruleList>
                </setInstallerVariable>
                <setInstallerVariableFromScriptOutput>
                  <exec>${system_temp_directory}/pgbouncer_${random_number}/instscripts/psql</exec>
                  <execArgs>-d ${pgdbname} -l </execArgs>
                  <name>connection</name>
                  <workingDirectory>${system_temp_directory}/pgbouncer_${random_number}/instscripts</workingDirectory>
                  <abortOnError>0</abortOnError>
                  <showMessageOnError>0</showMessageOnError> 
                  <ruleList>
                    <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                    <compareText logic="equals" text="${connection}" value=""/>
                  </ruleList>
                </setInstallerVariableFromScriptOutput>
                <setInstallerVariableFromScriptOutput>
                  <exec>${system_temp_directory}\pgbouncer_${random_number}\instscripts\check-connection.bat</exec>
                  <execArgs>"${system_temp_directory}\pgbouncer_${random_number}\instscripts\psql.exe" ${pgdbname}</execArgs>
                  <name>connection</name>
                  <workingDirectory>${system_temp_directory}\pgbouncer_${random_number}\instscripts</workingDirectory>
                  <abortOnError>0</abortOnError>
                  <showMessageOnError>0</showMessageOnError> 
                  <ruleList>
                    <compareText logic="equals" text="${platform_name}" value="windows"/>
                  </ruleList>
                </setInstallerVariableFromScriptOutput>
                <setInstallerVariable name="pgdbname" value="edb" >
                  <ruleList>
                    <compareText logic="equals" text="${connection}" value=""/>
                    <compareText logic="equals" text="${platform_name}" value="windows"/>
                  </ruleList>
                </setInstallerVariable>
                <setInstallerVariableFromScriptOutput>
                  <exec>${system_temp_directory}\pgbouncer_${random_number}\instscripts\check-connection.bat</exec>
                  <execArgs>"${system_temp_directory}\pgbouncer_${random_number}\instscripts\psql.exe" ${pgdbname}</execArgs>
                  <name>connection</name>
                  <workingDirectory>${system_temp_directory}\pgbouncer_${random_number}\instscripts</workingDirectory>
                  <abortOnError>0</abortOnError>
                  <showMessageOnError>0</showMessageOnError> 
                  <ruleList>
                    <compareText logic="equals" text="${platform_name}" value="windows"/>
                  </ruleList>
                </setInstallerVariableFromScriptOutput>
                <setInstallerVariable name="pgdbname" value="template1" >
                  <ruleList>
                    <compareText logic="equals" text="${connection}" value=""/>
                    <compareText logic="equals" text="${platform_name}" value="windows"/>
                  </ruleList>
                </setInstallerVariable>
                <setInstallerVariableFromScriptOutput>
                  <exec>${system_temp_directory}\pgbouncer_${random_number}\instscripts\check-connection.bat</exec>
                  <execArgs>"${system_temp_directory}\pgbouncer_${random_number}\instscripts\psql.exe" ${pgdbname}</execArgs>
                  <name>connection</name>
                  <workingDirectory>${system_temp_directory}\pgbouncer_${random_number}\instscripts</workingDirectory>
                  <abortOnError>0</abortOnError>
                  <showMessageOnError>0</showMessageOnError> 
                  <ruleList>
                    <compareText logic="equals" text="${platform_name}" value="windows"/>
                  </ruleList>
                </setInstallerVariableFromScriptOutput>
                <stringModify text="${connection}" variable="connection" logic="trim"/>
                <actionGroup>
                    <actionList>
                        <setInstallerVariable name="pgdbname" value="postgres" />
                        <showWarning>
                             <text>${program_stderr}</text>
                        </showWarning>
                        <setInstallerVariable>
                             <name>next_page</name>
                             <value>pgdetails</value>
                        </setInstallerVariable>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>${connection}</text>
                            <value/>
                        </compareText>
                    </ruleList>
                </actionGroup>
              </actionList>
             </actionGroup> 
          </validationActionList>   
        </parameterGroup>
        
        <parameterGroup>
          <name>pgbouncerdetails</name>
          <title>${msg(pgbouncer.details.title)}</title>
          <explanation>${msg(pgbouncer.details.explanation)}</explanation>
          <value/>
          <default/>
          <parameterList>
    
            <!-- Listening Port(Default 6432) -->
            <stringParameter>
              <name>pgbouncer_port</name>
              <description>Listening Port</description>
              <explanation/>
              <value/>
              <default>${def_listen_port}</default>
              <allowEmptyValue>1</allowEmptyValue>
              <width>40</width>
            </stringParameter>
    
            <!-- System User (Default postgres) -->
            <stringParameter>
              <name>system_user</name>
              <description>Operating System User</description>
              <explanation/>
              <value/>
              <default>postgres</default>
              <allowEmptyValue>1</allowEmptyValue>
              <width>40</width>
              <ruleList>
                   <compareText>
                        <text>${platform_name}</text>
                        <logic>does_not_equal</logic>
                        <value>windows</value>
                   </compareText>
              </ruleList>
            </stringParameter>
         </parameterList>
          <ruleList>
              <compareText>
                  <text>${pgbouncerVersion}</text>
                  <logic>equals</logic>
                  <value/>
              </compareText>
              <isFalse value="${extract_mode}"/>
          </ruleList>
          <validationActionList>
            <actionGroup>
              <actionList>
                <throwError>
                  <text>${msg(pgbouncer.blank.error)}</text>
                </throwError>
              </actionList>
              <ruleEvaluationLogic>OR</ruleEvaluationLogic>
              <ruleList>
                <compareText logic="equals" text="${system_user}" value=""/>
                <compareText logic="equals" text="${pgbouncer_port}" value=""/>
              </ruleList>
            </actionGroup>

            <throwError>
                <text>${msg(pgbouncer.system.user.error)}</text>
                <ruleList>
                  <compareText logic="equals" text="${system_user}" value="root"/>
                </ruleList>
            </throwError> 
                
            <throwError>
                <text>${msg(pgbouncer.port.error)}</text>
                <ruleList>
                    <portTest>
                        <port>${pgbouncer_port}</port>
                        <condition>cannot_bind</condition>
                    </portTest>
                </ruleList>
            </throwError>
            <throwError>
                <text>${msg(pgbouncer.user.error)}</text>
                <ruleList>
                    <userTest>
                        <username>${system_user}</username>
                        <logic>not_exists</logic>
                    </userTest>
                    <compareText>
                        <text>${platform_name}</text>
                        <logic>does_not_equal</logic>
                        <value>windows</value>
                   </compareText>
                </ruleList>
            </throwError>  
          </validationActionList>
        </parameterGroup>
    </parameterList>

    <!-- Install Directory -->
    <parameterList>
	<stringParameter name="originalplatform" ask="0" cliOptionShow="0"/>
        <directoryParameter>
            <name>installdir</name>
            <description>Installer.Parameter.installdir.description</description>
            <explanation>Installer.Parameter.installdir.explanation</explanation>
            <value>${default_installdir}</value>
            <default/>
            <allowEmptyValue>0</allowEmptyValue>
            <ask>yes</ask>
            <cliOptionName>prefix</cliOptionName>
            <mustBeWritable>yes</mustBeWritable>
            <mustExist>0</mustExist>
            <width>40</width>
            <ruleList>
                <compareText>
                    <text>${pgbouncerVersion}</text>
                    <logic>equals</logic>
                    <value/>
                </compareText>
            </ruleList>
            <!-- Validating whether installdir is empty -->
            <validationActionList>
                <actionGroup>
                    <actionList>
                        <setInstallerVariable name="installdir" value="${default_installdir}" />
                        <throwError>
                            <text>${msg(pgbouncer.installdir.empty)}</text>
                        </throwError>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <text>${installdir}</text>
                            <logic>equals</logic>
                            <value />
                        </compareText>
                    </ruleList>
                </actionGroup>
            </validationActionList>
            <!-- Validating whether installdir contains whitespaces (Linux) -->
            <postShowPageActionList>
                <actionGroup>
                    <actionList>  
                        <showWarning>
                            <text>${msg(pgbouncer.installdir.error)}</text>
                        </showWarning>
                        <setInstallerVariable name="next_page" value="installdir"/>
                    </actionList>
                    <ruleList>
                       <regExMatch>
                           <text>${installdir}</text>
                           <logic>does_not_match</logic>
                           <pattern>^/([0-9a-zA-Z_/\.\-]*)$</pattern>
                       </regExMatch>
                       <compareText>
                           <logic>does_not_equal</logic>
                           <text>${platform_name}</text>
                           <value>windows</value>
                       </compareText>
                    </ruleList>
	        </actionGroup>
                <!-- Validating whether installdir is valid (Windows) -->
                <actionGroup>
                   <actionList>
                     <setInstallerVariable name="installdir" value="${default_installdir}" />
                     <showWarning>
                        <text>${msg(pgbouncer.installdir.error)}</text>
                     </showWarning>
                     <setInstallerVariable name="next_page" value="installdir"/>
                   </actionList>
                   <ruleList>
                       <regExMatch>
                         <text>${installdir}</text>
                         <logic>does_not_match</logic>
                         <pattern>^([a-zA-Z]:)\\([0-9a-zA-Z_\\\s\.\-\(\)]*)$</pattern>
                       </regExMatch>
                       <compareText>
                         <text>${platform_name}</text>
                         <logic>equals</logic>
                         <value>windows</value>
                       </compareText>
                   </ruleList>
                 </actionGroup>
            </postShowPageActionList>
        </directoryParameter>
	<!-- Explain that we're using an existing installation directory -->
        <labelParameter>
            <name>upgrade</name>
            <title>${msg(upgrade.existing.installation.title)}</title>
            <description>${msg(upgrade.existing.installation.description)}</description>
            <ruleList>
		<compareText>
                    <text>${pgbouncerVersion}</text>
                    <logic>does_not_equal</logic>
                    <value/>
                </compareText>
                <isFalse value="${extract_mode}" />
            </ruleList>
        </labelParameter>
    </parameterList>
</project>
