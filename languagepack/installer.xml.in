<?xml version="1.0"?>
<project>
  <!-- Package details -->
  <shortName>languagepack</shortName>
  <fullName>Language Pack</fullName>
  <version>EDB_VERSION_LANGUAGEPACK-EDB_BUILDNUM_LANGUAGEPACK</version>
  <windowsResourceProductVersion>EDB_VERSION_LANGUAGEPACK</windowsResourceProductVersion>
  <allowWindowResize>1</allowWindowResize>
  <!-- Product Specific Options -->
  <startMenuGroupName/>
  <productComments>Language Pack for PostgreSQL, by EnterpriseDB</productComments>
  <productUrlHelpLink>http://www.enterprisedb.com/learning/documentation.do </productUrlHelpLink>
  <productUrlInfoAbout>http://www.enterprisedb.com</productUrlInfoAbout>
  <productDisplayName>${product_fullname} ${product_version}</productDisplayName>
  <requestedExecutionLevel>asInvoker</requestedExecutionLevel>
  <requireInstallationByRootUser>${admin_rights}</requireInstallationByRootUser>
  <!-- The options are used for RPM registration -->
  <description>Language Pack for PostgreSQL</description>
  <summary>Language Pack for PostgreSQL, by EnterpriseDB</summary>
  <vendor>EnterpriseDB</vendor>
  <!-- Installer Size -->
  <width>550</width>
  <height>400</height>
  <!-- Misc options -->
  <installerFilename>edb-${product_shortname}-${product_version}-${platform_name}.${platform_exec_suffix}</installerFilename>
  <wrapLicenseFileText>0</wrapLicenseFileText>
  <compressionAlgorithm>lzma</compressionAlgorithm>
  <unattendedModeUI>minimal</unattendedModeUI>
  <enableRollback>0</enableRollback>
  <saveRelativePaths>1</saveRelativePaths>
  <uninstallerName>uninstall-edb-${product_shortname}</uninstallerName>
  <uninstallerDirectory>${installdir}</uninstallerDirectory>
  <outputDirectory>../output</outputDirectory>
  <installationLogFile>${system_temp_directory}/install-edb-${product_shortname}.log</installationLogFile>
  <uninstallationLogFile>${system_temp_directory}/uninstall-edb-${product_shortname}.log</uninstallationLogFile>
  <windowsSoftwareRegistryPrefix/>
  <replaceLockedFilesOnReboot>1</replaceLockedFilesOnReboot>
  <!-- Images -->
  <disableSplashScreen>1</disableSplashScreen>
  <leftImage>../resources/pg-side.png</leftImage>
  <!-- i18n files for the UI -->
  <customLanguageFileList>
    <language>
      <code>en</code>
      <encoding>iso8859-1</encoding>
      <file>i18n/en.lng</file>
    </language>
  </customLanguageFileList>
  <allowedLanguages>en</allowedLanguages>
  <defaultLanguage>auto</defaultLanguage>
  <!-- Languages allowed? -->
  <allowLanguageSelection>1</allowLanguageSelection>
  <functionDefinitionList>
    <actionDefinition name="createTempDir">
       <actionList>
         <globalVariables names="random_number"/>
         <actionGroup>
           <actionList>
             <setInstallerVariable name="iteration" value="0"/>
             <!-- Create a random number to use unique filenames -->
             <while>
               <actionList>
                 <generateRandomValue length="10" variable="random_number"/>
                 <runProgram>
                   <program>sh</program>
                   <programArguments>-c &lt;&lt;EOF '
                                     umask 0077
                                     mkdir "${system_temp_directory}/${dirPrefix}_${random_number}"
                                     if [ $? -ne 0 ];
                                     then
                                        exit 100
                                     fi
                                     '
EOF
                   </programArguments>
                 </runProgram>
                 <break>
                   <ruleList>
                     <compareText logic="equals" text="0" value="${program_exit_code}"/>
                   </ruleList>
                 </break>
                 <actionGroup>
                   <actionList>
                     <throwError text="${msg(cannot.create.tmp.dir)}" abortOnError="1">
                       <ruleList>
                         <compareValues value1="${iteration}" logic="equals" value2="9"/>
                       </ruleList>
                     </throwError>
                   </actionList>
                 </actionGroup>
                 <mathExpression text="${iteration}+1" variable="iteration"/>
               </actionList>
               <conditionRuleList>
                 <compareValues value1="${iteration}" logic="less" value2="10"/>
               </conditionRuleList>
             </while>
             <setInstallerVariable name="random_number" value="${random_number}"/>
           </actionList>
           <ruleList>
             <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
           </ruleList>
         </actionGroup>
	 <actionGroup>
           <actionList>
             <generateRandomValue length="10" variable="random_number"/>
             <createDirectory path="${system_temp_directory}/${dirPrefix}_${random_number}"/>
             <setInstallerVariable name="random_number" value="${random_number}"/>
           </actionList>
           <ruleList>
             <compareText logic="equals" text="${platform_name}" value="windows"/>
           </ruleList>
         </actionGroup>
       </actionList>
       <parameterList>
         <stringParameter name="dirPrefix" allowEmptyValue="0"/>
       </parameterList>
     </actionDefinition>
    <actionDefinition name="checkSolarisVersion">
      <actionList>
        <globalVariables names="solaris_version"/>
        <actionGroup>
          <actionList>
            <runProgram program="cat" programArguments="/etc/release" abortOnError="0" showMessageOnError="0"/>
            <setInstallerVariable name="solaris_version" value="${program_stdout}" persist="1"/>
            <stringModify text="${solaris_version}" variable="solaris_version" logic="trim"/>
          </actionList>
          <ruleList>
            <compareText logic="contains" text="${platform_name}" value="solaris"/>
          </ruleList>
        </actionGroup>
      </actionList>
    </actionDefinition>
  </functionDefinitionList>
  <!-- Prebuild Actons-->
  <preBuildActionList>
    <setInstallerVariable name="originalplatform" value="${platform_name}"/>
    <setInstallerVariable name="originalplatform" value="linux-x32">
      <ruleList>
        <compareText text="${platform_name}" value="linux"/>
      </ruleList>
    </setInstallerVariable>
    <!-- Setting windows64bitMode for windows-x64 -->
    <setInstallerVariable name="project.windows64bitMode" value="1">
      <ruleList>
        <compareText logic="equals" text="${windowsArchitecture}" value="x64"/>
      </ruleList>
    </setInstallerVariable>
    <setInstallerVariable name="project.parameter(install_runtimes).ask" value="0">
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </setInstallerVariable>
    <!-- Change installer file name for Windows-x64 -->
    <setInstallerVariable name="project.installerFilename" value="edb-${product_shortname}-${product_version}-${platform_name}-${windowsArchitecture}.${platform_exec_suffix}">
      <ruleList>
        <compareText logic="equals" text="${windowsArchitecture}" value="x64"/>
      </ruleList>
    </setInstallerVariable>
  </preBuildActionList>
  <preShowHelpActionList>
    <!-- LIN/SOLARIS/HPUX : Set the default installation directory -->
    <setInstallerVariable>
      <name>default_installdir</name>
      <persist>1</persist>
      <value>${platform_install_prefix}/edb/languagepack-EDB_VERSION_LANGUAGEPACK</value>
      <ruleEvaluationLogic>or</ruleEvaluationLogic>
      <ruleList>
        <compareText logic="contains" text="${platform_name}" value="linux"/>
        <compareText logic="contains" text="${platform_name}" value="solaris"/>
        <compareText logic="contains" text="${platform_name}" value="hpux"/>
      </ruleList>
    </setInstallerVariable>
    <setInstallerVariable name="booleanAllowedTag" value="&#10;                                Allowed: yes no"/>
    <setInstallerVariable name="project.parameter(extract_mode).value" value="${project.parameter(extract_mode).value}${booleanAllowedTag}"/>
    <setInstallerVariable name="project.parameter(install_runtimes).value" value="${project.parameter(install_runtimes).value}${booleanAllowedTag}">
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
      </ruleList>
    </setInstallerVariable>
    <!-- WIN : Set the default installation directory for win64 -->
    <setInstallerVariable>
      <name>default_installdir</name>
      <persist>1</persist>
      <value>C:\edb\languagepack-EDB_VERSION_LANGUAGEPACK\x64</value>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
        <compareText logic="equals" text="${windowsArchitecture}" value="x64"/>
      </ruleList>
    </setInstallerVariable>
    <!-- WIN : Set the default installation directory -->
    <setInstallerVariable>
      <name>default_installdir</name>
      <persist>1</persist>
      <value>C:\edb\languagepack-EDB_VERSION_LANGUAGEPACK\i386</value>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
        <compareText logic="equals" text="${windowsArchitecture}" value="x32"/>
      </ruleList>
    </setInstallerVariable>
    <!-- Mac -->
    <setInstallerVariable name="default_installdir" value="/Library/edb/languagepack-EDB_VERSION_LANGUAGEPACK">
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="osx"/>
      </ruleList>
    </setInstallerVariable>
  </preShowHelpActionList>
  <initializationActionList>
    <setInstallerVariable name="project.parameter(extract_mode).ask" value="0"/>
    <setInstallerVariable name="installer_registry_prefix" value="edb" persist="1"/>
    <setInstallerVariable name="project.parameter(install_runtimes).ask" value="0"/>
    <!-- Abort Installation as trying to  run a 32-bit installer on 64-bit machine -->
    <throwError>
      <customErrorMessage>${msg(platform.not.match)}</customErrorMessage>
      <text>Unknown Error</text>
      <ruleList>
        <platformTest type="linux-x64"/>
        <compareText text="${originalplatform}" value="linux-x32"/>
      </ruleList>
    </throwError>
    <!-- MAC: Set the default values for unattended mode -->
    <actionGroup>
      <actionList>
        <setInstallerVariable name="installdir" value="/Library/edb/languagepack-EDB_VERSION_LANGUAGEPACK"/>
      </actionList>
      <ruleList>
	<!-- following check means mode equals unattended -->
        <compareText text="${installer_interactivity}" logic="does_not_equal" value="normal"/>
        <compareText logic="equals" text="${platform_name}" value="osx"/>
      </ruleList>
    </actionGroup>
    <!-- LIN/SOLARIS/HPUX : Set the default values for unattended mode -->
    <actionGroup>
      <actionList>
        <setInstallerVariable name="installdir" value="${platform_install_prefix}/edb/languagepack-EDB_VERSION_LANGUAGEPACK"/>
      </actionList>
      <ruleList>
	<!-- following check means mode equals unattended -->
        <compareText text="${installer_interactivity}" logic="does_not_equal" value="normal"/>
        <ruleGroup ruleEvaluationLogic="or">
          <ruleList>
            <compareText logic="contains" text="${platform_name}" value="linux"/>
            <compareText logic="contains" text="${platform_name}" value="solaris"/>
            <compareText logic="contains" text="${platform_name}" value="hpux"/>
          </ruleList>
        </ruleGroup>
      </ruleList>
    </actionGroup>
    <!-- WIN : Set the default values for unattended mode -->
    <actionGroup>
      <actionList>
    	<!-- WIN : Set the default installation directory for win64 -->
    	<setInstallerVariable>
      	  <name>installdir</name>
      	  <value>C:\edb\languagepack-EDB_VERSION_LANGUAGEPACK\x64</value>
      	  <ruleList>
            <compareText logic="equals" text="${windowsArchitecture}" value="x64"/>
      	  </ruleList>
    	</setInstallerVariable>
    	<!-- WIN : Set the default installation directory -->
    	<setInstallerVariable>
      	  <name>installdir</name>
      	  <value>C:\edb\languagepack-EDB_VERSION_LANGUAGEPACK\i386</value>
      	  <ruleList>
            <compareText logic="equals" text="${windowsArchitecture}" value="x32"/>
      	  </ruleList>
    	</setInstallerVariable>
      </actionList>
      <ruleList>
	<!-- following check means mode equals unattended -->
        <compareText text="${installer_interactivity}" logic="does_not_equal" value="normal"/>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </actionGroup>
    <!-- MAC : Set the default installation directory -->
    <setInstallerVariable name="default_installdir" persist="1" value="/Library/edb/languagepack-EDB_VERSION_LANGUAGEPACK">
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="osx"/>
      </ruleList>
    </setInstallerVariable>
    <!-- LIN/SOLARIS/HPUX : Set the default installation directory -->
    <setInstallerVariable>
      <name>default_installdir</name>
      <persist>1</persist>
      <value>${platform_install_prefix}/edb/languagepack-EDB_VERSION_LANGUAGEPACK</value>
      <ruleEvaluationLogic>or</ruleEvaluationLogic>
      <ruleList>
        <compareText logic="contains" text="${platform_name}" value="linux"/>
        <compareText logic="contains" text="${platform_name}" value="solaris"/>
        <compareText logic="contains" text="${platform_name}" value="hpux"/>
      </ruleList>
    </setInstallerVariable>
    <!-- WIN : Set the default installation directory for win64 -->
    <setInstallerVariable>
      <name>default_installdir</name>
      <persist>1</persist>
      <value>C:\edb\languagepack-EDB_VERSION_LANGUAGEPACK\x64</value>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
        <compareText logic="equals" text="${windowsArchitecture}" value="x64"/>
      </ruleList>
    </setInstallerVariable>
    <!-- WIN : Set the default installation directory -->
    <setInstallerVariable>
      <name>default_installdir</name>
      <persist>1</persist>
      <value>C:\edb\languagepack-EDB_VERSION_LANGUAGEPACK\i386</value>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
        <compareText logic="equals" text="${windowsArchitecture}" value="x32"/>
      </ruleList>
    </setInstallerVariable>
    <!-- On Solaris11, platform_install_prefix for an ordinary user expands to /home. and according to FB20570
         installation directory cannot be set explicitly to "^/home". Hence, prepend "/export" to the value.-->
    <checkSolarisVersion/>
    <setInstallerVariableFromRegEx>
      <name>default_installdir</name>
      <pattern>^/home/(.*)$</pattern>
      <substitution>/export/home/\1</substitution>
      <text>${default_installdir}</text>
      <ruleList>
        <compareText text="${platform_name}" logic="contains" value="solaris"/>
        <compareText text="${solaris_version}" logic="contains" value="Solaris 11"/>
        <regExMatch text="${platform_install_prefix}" logic="matches" pattern="^/(home)"/>
      </ruleList>
    </setInstallerVariableFromRegEx>
  </initializationActionList>
  <preInstallationActionList>
    <!-- Creating a temporary directory -->
    <!-- Setting defaultUnixGroup and defaultUnixOwner -->
    <actionGroup>
     <actionList>
       <setInstallerVariable name="project.defaultUnixGroup" value="daemon"/>
       <setInstallerVariable name="project.defaultUnixOwner" value="root"/>
     </actionList>
     <ruleList>
       <isFalse value="${extract_mode}"/>
     </ruleList>
    </actionGroup>
    <actionGroup>
      <actionList>
        <!-- Do not create uninstaller in case of extract-only mode -->
        <setInstallerVariable name="createUninstaller" value="0" persist="1"/>
      </actionList>
      <ruleList>
        <isTrue value="${extract_mode}"/>
      </ruleList>
    </actionGroup>
    <!-- Do not perform the below actions in case of extract-only mode -->
    <actionGroup>
      <actionList>
        <!-- Abort installation if not super-user and not running in extract-only mode-->
        <throwError text="${msg(Installer.Warning.RootPrivileges)}">
          <ruleList>
            <isFalse value="${installer_is_root_install}"/>
            <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
          </ruleList>
        </throwError>
        <throwError text="${msg(Installer.Warning.AdministratorPrivileges)}">
          <ruleList>
            <isFalse value="${installer_is_root_install}"/>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
            <isFalse value="${extract_mode}"/>
          </ruleList>
        </throwError>
	
        <!-- Creates the ini file if not exits -->
        <touchFile path="/etc/postgres-reg.ini">
          <ruleList>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
            <isFalse value="${extract_mode}"/>
          </ruleList>
        </touchFile>
        <!-- LIN & MAC : Check Previous Installation of languagepack-->
        <actionGroup>
          <actionList>
            <iniFileGet>
              <file>/etc/postgres-reg.ini</file>
              <section>${installer_registry_prefix}_languagepack_EDB_VERSION_LANGUAGEPACK</section>
              <key>Version</key>
              <variable>languagepackversion</variable>
            </iniFileGet>
          </actionList>
          <ruleList>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </actionGroup>
        <!-- WIN : Check Previous Installation of languagepack-->
        <actionGroup>
          <actionList>
            <registryGet>
              <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\languagepack\${installer_registry_prefix}\EDB_VERSION_LANGUAGEPACK</key>
              <name>Version</name>
              <variable>languagepackversion</variable>
            </registryGet>
          </actionList>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </actionGroup>
        <!-- Set the installation directory in case of re-install/upgrade -->
        <actionGroup>
          <actionList>
            <iniFileGet>
              <file>/etc/postgres-reg.ini</file>
              <section>${installer_registry_prefix}_languagepack_EDB_VERSION_LANGUAGEPACK</section>
              <key>InstallationDirectory</key>
              <variable>installdir</variable>
            </iniFileGet>
          </actionList>
          <ruleList>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${languagepackversion}</text>
              <value/>
            </compareText>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </actionGroup>
        <!-- WIN: Set the installation directory in case of re-install/upgrade -->
        <actionGroup>
          <actionList>
            <registryGet>
              <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\languagepack\${installer_registry_prefix}\EDB_VERSION_LANGUAGEPACK</key>
              <name>Base Directory</name>
              <variable>installdir</variable>
            </registryGet>
          </actionList>
          <ruleList>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${languagepackversion}</text>
              <value/>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </actionGroup>
      </actionList>
      <ruleList>
        <isFalse value="${extract_mode}"/>
      </ruleList>
    </actionGroup>
    <!-- We will also need to get the VC++ runtimes installed on Windows, before we do anything with binaries -->
    <actionGroup>
      <actionList>
	<createTempDir dirPrefix="languagepack"/>
        <unpackFile>
          <component>default</component>
          <destination>${system_temp_directory}\languagepack_${random_number}\vcredist_x86.exe</destination>
          <folder>programfileswindows</folder>
          <origin>installer/languagepack/vcredist_x86.exe</origin>
	  <ruleList>
            <compareText logic="equals" text="${windowsArchitecture}" value="x32"/>
          </ruleList>
        </unpackFile>
	
        <unpackFile>
          <component>default</component>
          <destination>${system_temp_directory}\languagepack_${random_number}\vcredist_x64.exe</destination>
          <folder>programfileswindows</folder>
          <origin>installer/languagepack/vcredist_x64.exe</origin>
          <ruleList>
            <compareText logic="equals" text="${windowsArchitecture}" value="x64"/>
          </ruleList>
        </unpackFile>
	
        <runProgram>
          <program>${system_temp_directory}\languagepack_${random_number}\vcredist_x86.exe</program>
          <programArguments>/q /norestart</programArguments>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
          <customErrorMessage>${msg(error.installing.runtimes)}</customErrorMessage>
	  <ruleList>
            <compareText logic="equals" text="${windowsArchitecture}" value="x32"/>
          </ruleList>
        </runProgram>
	
        <runProgram>
          <program>${system_temp_directory}\languagepack_${random_number}\vcredist_x64.exe</program>
          <programArguments>/q  /norestart</programArguments>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
          <ruleList>
            <compareText logic="equals" text="${windowsArchitecture}" value="x64"/>
          </ruleList>
        </runProgram>
	<throwError>
          <text>${msg(error.installing.runtimes)}</text>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>127</text>
              <value>${program_exit_code}</value>
            </compareText>
          </ruleList>
        </throwError>
       <actionGroup>
         <actionList>
           <logMessage text="${msg(warning.reboot.machine)}"/>
           <setInstallerVariable name="rebootRequired" value="1"/>
         </actionList>
         <ruleList>
           <compareText logic="equals" text="${program_exit_code}" value="3010"/>
         </ruleList>
       </actionGroup>

      </actionList>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
        <isFalse value="${extract_mode}"/>
        <isTrue value="${install_runtimes}"/>
      </ruleList>
    </actionGroup>
  </preInstallationActionList>
  <postInstallationActionList>
   
   <!-- replace installdir place holder in launchpsql.sh for HPUX -->
    <!-- substitute>
      <files>${installdir}/languagepack-EDB_VERSION_LANGUAGEPACK.config</files>
      <substitutionList>
        <substitution>
          <pattern>PERL_INST</pattern>
          <value>${installdir}/Perl-EDB_VERSION_PERL</value>
        </substitution>
       <substitution>
          <pattern>PYTHON_INST</pattern>
          <value>${installdir}/Python-EDB_VERSION_PYTHON</value>
        </substitution>
       <substitution>
          <pattern>TCL_INST</pattern>
          <value>${installdir}/Tcl-EDB_VERSION_TCL</value>
        </substitution>
      </substitutionList>
    </substitute -->
    <!-- Do not perform the below actions in case of extract-only mode -->
    <actionGroup>
      <actionList>
        <actionGroup>
          <actionList>
            <iniFileSet>
              <file>/etc/postgres-reg.ini</file>
              <section>${installer_registry_prefix}_languagepack_EDB_VERSION_LANGUAGEPACK</section>
              <key>Description</key>
              <value>${msg(install.summary)}</value>
            </iniFileSet>
            <iniFileSet>
              <file>/etc/postgres-reg.ini</file>
              <section>${installer_registry_prefix}_languagepack_EDB_VERSION_LANGUAGEPACK</section>
              <key>InstallationDirectory</key>
              <value>${installdir}</value>
            </iniFileSet>
            <iniFileSet>
              <file>/etc/postgres-reg.ini</file>
              <section>${installer_registry_prefix}_languagepack_EDB_VERSION_LANGUAGEPACK</section>
              <key>Version</key>
              <value>${product_version}</value>
            </iniFileSet>
          </actionList>
          <ruleList>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </actionGroup>
        <registrySet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\languagepack\${installer_registry_prefix}\EDB_VERSION_LANGUAGEPACK</key>
          <name>Description</name>
          <value>${msg(install.summary)}</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </registrySet>
        <registrySet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\languagepack\${installer_registry_prefix}\EDB_VERSION_LANGUAGEPACK</key>
          <name>Base Directory</name>
          <value>${installdir}</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </registrySet>
        <registrySet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\languagepack\${installer_registry_prefix}\EDB_VERSION_LANGUAGEPACK</key>
          <name>Version</name>
          <value>${product_version}</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </registrySet>
	<deleteFile path="${system_temp_directory}/languagepack_${random_number}" >
          <ruleList>
            <fileExists path="${system_temp_directory}/languagepack_${random_number}" />
          </ruleList>
        </deleteFile>
      </actionList>
      <ruleList>
        <isFalse value="${extract_mode}"/>
      </ruleList>
     </actionGroup>
  </postInstallationActionList>
  <installationAbortedActionList>
    <deleteFile path="${system_temp_directory}/languagepack_${random_number}" abortOnError="0" showMessageOnError="0">
      <ruleList>
        <fileTest path="${system_temp_directory}/languagepack_${random_number}" condition="exists"/>
      </ruleList>
    </deleteFile>
  </installationAbortedActionList>
  <!-- preUninstallation actions -->
  <preUninstallationActionList>
    <actionGroup>
      <actionList>
        <showWarning text="${msg(Installer.Warning.UninstallerAdministratorPrivileges)}"/>
        <exit/>
      </actionList>
      <ruleList>
        <isFalse value="${installer_is_root_install}"/>
        <compareText logic="equals" text="${platform_name}" value="windows" />
      </ruleList>
    </actionGroup>
    <actionGroup>
      <actionList>
        <showWarning text="${msg(Installer.Warning.UninstallerRootPrivileges)}"/>
        <exit/>
      </actionList>
      <ruleList>
        <isFalse value="${installer_is_root_install}"/>
        <compareText logic="does_not_equal" text="${platform_name}" value="windows" />
      </ruleList>
    </actionGroup>
    <actionGroup>
      <actionList>
        <iniFileSet>
          <file>/etc/postgres-reg.ini</file>
          <section>${installer_registry_prefix}_languagepack_EDB_VERSION_LANGUAGEPACK</section>
          <key>Description</key>
          <value/>
        </iniFileSet>
        <iniFileSet>
          <file>/etc/postgres-reg.ini</file>
          <section>${installer_registry_prefix}_languagepack_EDB_VERSION_LANGUAGEPACK</section>
          <key>InstallationDirectory</key>
          <value/>
        </iniFileSet>
        <iniFileSet>
          <file>/etc/postgres-reg.ini</file>
          <section>${installer_registry_prefix}_languagepack_EDB_VERSION_LANGUAGEPACK</section>
          <key>Version</key>
          <value/>
        </iniFileSet>
      </actionList>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </actionGroup>
    <registryDelete>
      <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\languagepack\${installer_registry_prefix}\EDB_VERSION_LANGUAGEPACK</key>
    </registryDelete>
  </preUninstallationActionList>
  <postUninstallationActionList>
    <deleteFile path="${installdir}">
      <ruleList>
        <fileTest path="${installdir}" condition="is_empty"/>
      </ruleList>
    </deleteFile>
    <deleteFile path="${installdir}">
      <ruleList>
        <fileTest path="${installdir}" condition="is_empty"/>
      </ruleList>
    </deleteFile>
  </postUninstallationActionList>
  <!-- Components -->
  <componentList>
    <component>
      <name>default</name>
      <description>Default Component</description>
      <canBeEdited>1</canBeEdited>
      <selected>1</selected>
      <show>1</show>
      <folderList>
        <!-- LIN- Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfileslinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/linux/Perl-EDB_VERSION_PERL</origin>
            </distributionDirectory>
          <distributionDirectory>
              <origin>staging/linux/Python-EDB_VERSION_PYTHON</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/linux/Tcl-EDB_VERSION_TCL</origin>
            </distributionDirectory>
            <!-- distributionFile>
              <origin>staging/linux/languagepack-EDB_VERSION_LANGUAGEPACK.config</origin>
            </distributionFile -->
            <distributionFile>
              <origin>staging/linux/languagepack_3rd_party_licenses.txt</origin>
            </distributionFile>
          </distributionFileList>
        </folder>
        <!-- LIN-X64 - Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfileslinux_x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/linux-x64/Perl-EDB_VERSION_PERL</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/linux-x64/Python-EDB_VERSION_PYTHON</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/linux-x64/Tcl-EDB_VERSION_TCL</origin>
            </distributionDirectory>
            <!-- distributionFile>
              <origin>staging/linux-x64/languagepack-EDB_VERSION_LANGUAGEPACK.config</origin>
            </distributionFile -->
            <distributionFile>
              <origin>staging/linux-x64/languagepack_3rd_party_licenses.txt</origin>
            </distributionFile>
          </distributionFileList>
        </folder>
        <!-- WIN - Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfileswindows</name>
          <platforms>windows</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/windows/Perl-EDB_VERSION_PERL</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/windows/Python-EDB_VERSION_PYTHON</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/windows/Tcl-EDB_VERSION_TCL</origin>
            </distributionDirectory>
	    <distributionDirectory>
              <origin>staging/windows/installer</origin>
            </distributionDirectory>
            <distributionFile>
              <origin>staging/windows/languagepack_3rd_party_licenses.txt</origin>
            </distributionFile>
          </distributionFileList>
        </folder>
        <!-- MAC - Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfilesosx</name>
          <platforms>osx</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/osx/Perl-EDB_VERSION_PERL</origin>
            </distributionDirectory>
	    <distributionDirectory>
              <origin>staging/osx/Python-EDB_VERSION_PYTHON</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/osx/Tcl-EDB_VERSION_TCL</origin>
            </distributionDirectory>
            <distributionFile>
              <origin>staging/osx/languagepack_3rd_party_licenses.txt</origin>
            </distributionFile>
          </distributionFileList>
        </folder>
        <!-- SOLARIS INTEL- Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfilessolaris_intel</name>
          <platforms>solaris-intel</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/solaris-intel/Perl-EDB_VERSION_PERL</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/solaris-intel/Python-EDB_VERSION_PYTHON</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/solaris-intel/Tcl-EDB_VERSION_TCL</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <!-- SOLARIS SPARC- Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfilessolaris_sparc</name>
          <platforms>solaris-sparc</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/solaris-sparc/Perl-EDB_VERSION_PERL</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/solaris-sparc/Python-EDB_VERSION_PYTHON</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/solaris-sparc/Tcl-EDB_VERSION_TCL</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <!-- HPUX- Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfileshpux</name>
          <platforms>hpux</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/hpux/Perl-EDB_VERSION_PERL</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/hpux/Python-EDB_VERSION_PYTHON</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/hpux/Tcl-EDB_VERSION_TCL</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
      </folderList>
    </component>
  </componentList>
  <!-- Install Directory -->
  <parameterList>
    <booleanParameter name="extract_mode" cliOptionName="extract-only" default="0" ask="1" cliOptionShow="1"/>
    <booleanParameter name="admin_rights" cliOptionName="require-admin" default="0" ask="0" cliOptionShow="0"/>
    <stringParameter name="originalplatform" ask="0" cliOptionShow="0"/>
    <stringParameter name="windowsArchitecture" value="x32" ask="0">
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
      </ruleList>
    </stringParameter>
    <booleanParameter>
      <name>install_runtimes</name>
      <description>${msg(install.runtimes.description)}</description>
      <explanation/>
      <value/>
      <default>yes</default>
      <ask>yes</ask>
      <cliOptionName>install_runtimes</cliOptionName>
      <cliOptionShow>1</cliOptionShow>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
        <isFalse value="${extract_mode}"/>
      </ruleList>
    </booleanParameter>
    <directoryParameter>
      <name>installdir</name>
      <description>Installer.Parameter.installdir.description</description>
      <explanation>Installer.Parameter.installdir.explanation</explanation>
      <value>${default_installdir}</value>
      <default/>
      <allowEmptyValue>0</allowEmptyValue>
      <ask>no</ask>
      <cliOptionName>prefix</cliOptionName>
      <mustBeWritable>yes</mustBeWritable>
      <mustExist>0</mustExist>
      <width>40</width>
      <ruleEvaluationLogic>or</ruleEvaluationLogic>
      <ruleList>
        <compareText>
          <text>${languagepackversion}</text>
          <logic>equals</logic>
          <value/>
        </compareText>
        <isTrue value="${extract_mode}"/>
      </ruleList>
      <!-- Validating whether installdir is empty -->
      <validationActionList>
        <actionGroup>
          <actionList>
            <setInstallerVariable name="installdir" value="${default_installdir}"/>
            <throwError>
              <text>${msg(edb_languagepack.installdir.empty)}</text>
            </throwError>
          </actionList>
          <ruleList>
            <compareText>
              <text>${installdir}</text>
              <logic>equals</logic>
              <value/>
            </compareText>
            <isFalse value="${extract_mode}"/>
          </ruleList>
        </actionGroup>
      </validationActionList>
      <!-- Validating whether installdir contains whitespaces (Linux) -->
      <postShowPageActionList>
        <actionGroup>
          <actionList>
            <showWarning>
              <text>${msg(languagepack.installdir.error)}</text>
            </showWarning>
            <setInstallerVariable name="next_page" value="installdir"/>
          </actionList>
          <ruleList>
            <regExMatch>
              <text>${installdir}</text>
              <logic>does_not_match</logic>
              <pattern>^/([0-9a-zA-Z_/\.\-]*)$</pattern>
            </regExMatch>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </actionGroup>
        <!-- Validating whether installdir starts with /home on Solaris 11-->
        <checkSolarisVersion/>
        <actionGroup>
          <actionList>
            <showWarning text="${msg(languagepack.installdir.invalid.solaris11)}"/>
            <setInstallerVariable name="next_page" value="installdir"/>
          </actionList>
          <ruleList>
            <compareText text="${platform_name}" logic="contains" value="solaris"/>
            <compareText text="${solaris_version}" logic="contains" value="Solaris 11"/>
            <regExMatch text="${installdir}" logic="matches" pattern="^/(home)"/>
          </ruleList>
        </actionGroup>
        <!-- Validating whether installdir is valid (Windows) -->
        <actionGroup>
          <actionList>
            <setInstallerVariable name="installdir" value="${default_installdir}"/>
            <showWarning>
              <text>${msg(languagepack.installdir.error)}</text>
            </showWarning>
            <setInstallerVariable name="next_page" value="installdir"/>
          </actionList>
          <ruleList>
            <regExMatch>
              <text>${installdir}</text>
              <logic>does_not_match</logic>
              <pattern>^([a-zA-Z]:)\\([0-9a-zA-Z_\\\s\.\-\(\)]*)$</pattern>
            </regExMatch>
            <compareText>
              <text>${platform_name}</text>
              <logic>equals</logic>
              <value>windows</value>
            </compareText>
          </ruleList>
        </actionGroup>
      </postShowPageActionList>
    </directoryParameter>
    <!-- Explain that we're using an existing installation directory -->
    <labelParameter>
      <name>upgrade</name>
      <title>${msg(upgrade.existing.installation.title)}</title>
      <description>${msg(upgrade.existing.installation.description)}</description>
      <ruleList>
        <compareText>
          <text>${languagepackversion}</text>
          <logic>does_not_equal</logic>
          <value/>
        </compareText>
        <isFalse value="${extract_mode}"/>
      </ruleList>
    </labelParameter>
  </parameterList>
</project>
