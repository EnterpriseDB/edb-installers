<project>
    <!-- Package details -->
    <shortName>migrationtoolkit</shortName>
    <fullName>MigrationToolkit</fullName>
    <version>PG_VERSION_MIGRATIONTOOLKIT-PG_BUILDNUM_MIGRATIONTOOLKIT</version>
	
    <!-- These options are used on Windows -->
    <startMenuGroupName>${branding}</startMenuGroupName>
	
    <!-- Product Specific Options -->
    <productDisplayName>EnterpriseDB ${product_fullname} ${productVersion}</productDisplayName>
    <productComments>EnterpriseDB ${product_fullname} ${productVersion}</productComments>
    <productUrlHelpLink>http://www.enterprisedb.com</productUrlHelpLink>
    <productUrlInfoAbout>http://www.enterprisedb.com</productUrlInfoAbout>
	
    <!-- The options are used for RPM registration -->
    <description>${product_fullname} ${productVersion} by EnterpriseDB</description>
    <summary>${msg(install.summary)}</summary>
    <vendor>EnterpriseDB</vendor>
    <release>1</release>

    <!-- Installer Size -->
    <width>550</width>
    <height>400</height>

    <!-- Misc package options -->
    <installerFilename>${product_shortname}-${product_version}-${platform_name}.${platform_exec_suffix}</installerFilename>
    <enableRollback>0</enableRollback>
    <requireInstallationByRootUser>1</requireInstallationByRootUser>
    <saveRelativePaths>1</saveRelativePaths>
    <outputDirectory>../output</outputDirectory>
    <uninstallerDirectory>${installdir}</uninstallerDirectory>
    <uninstallerName>uninstall-${product_shortname}</uninstallerName>
    <unattendedModeUI>minimal</unattendedModeUI>
    <compressionAlgorithm>lzma</compressionAlgorithm>
    <installationLogFile>${system_temp_directory}/install-${product_shortname}.log</installationLogFile>

    <!-- Images -->
    <disableSplashScreen>1</disableSplashScreen>
    <leftImage>../resources/edb-side.png</leftImage>

    <!-- i18n files for the UI -->
    <allowedLanguages>en</allowedLanguages>
    <customLanguageFileList>
        <language>
            <code>en</code>
            <encoding>utf-8</encoding>
            <file>i18n/en.lng</file>
        </language>
    </customLanguageFileList>

    <preShowHelpActionList>
        <!-- MAC : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>/Library/PostgresPlus/EnterpriseDB-MigrationToolkit</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
		
        <!-- LIN : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${platform_install_prefix}/PostgresPlus/EnterpriseDB-MigrationToolkit</value>
            <ruleList>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
		
        <!-- WIN : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${platform_install_prefix}\PostgresPlus\EnterpriseDB-MigrationToolkit</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
    </preShowHelpActionList>
	
    <!-- Prebuild Actons-->
    <preBuildActionList>
      <setInstallerVariable name="originalplatform" value="${platform_name}"/>
      <setInstallerVariable name="originalplatform" value="linux-x32">
          <ruleList>
              <compareText text="${platform_name}" value="linux"/>
          </ruleList>
      </setInstallerVariable>
    </preBuildActionList>
	
    <!-- Initialisation actions -->
    <initializationActionList>
	<setInstallerVariable name="productVersion" persist="1" value="PG_VERSION_MIGRATIONTOOLKIT" />
	
	<!-- Abort Installation as trying to  run a 32-bit installer on 64-bit machine -->
        <throwError>
          <customErrorMessage>${msg(platform.not.match)}</customErrorMessage>
          <text>Unknown Error</text>
          <ruleList>
            <platformTest type="linux-x64"/>
            <compareText text="${originalplatform}" value="linux-x32"/>
          </ruleList>
        </throwError>
		
        <!-- Set the MigrationToolkit version(if exists) -->
        <setInstallerVariable name="MigrationToolkitVersion" value="">
            <persist>0</persist>
        </setInstallerVariable>
	
       <!-- MAC : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>/Library/PostgresPlus/EnterpriseDB-MigrationToolkit</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
		
        <!-- LIN : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${platform_install_prefix}/PostgresPlus/EnterpriseDB-MigrationToolkit</value>
            <ruleList>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
		
        <!-- WIN : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${platform_install_prefix}\PostgresPlus\EnterpriseDB-MigrationToolkit</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
    </initializationActionList>
	
    <!-- Preinstallation actions -->
    <preInstallationActionList> 

        <!-- Check for AS84 installed jre -->
        <registryGet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\AS\8.4\jre</key>
          <name>Location</name>
          <variable>jrehome</variable>
        </registryGet>
 
        <iniFileGet>
          <file>/etc/ppas-8.4.ini</file>
          <section>jre</section>
          <key>InstallationDirectory</key>
          <variable>jrehome</variable>
          <ruleList>
             <compareText text="${platform_name}" logic="does_not_equal" value="windows" />
             <fileExists path="/etc/ppas-8.4.ini" />
          </ruleList>
        </iniFileGet>

        <!-- Check if the valid jrehome switch is supplied -->
        <throwError>
          <customErrorMessage>${msg(jre.invalid.error)}</customErrorMessage>
          <text>Unknown Error</text>
          <ruleList>
             <compareText text="${jrehome}" logic="does_not_equal" value="" />
             <compareText text="${platform_name}" logic="does_not_equal" value="windows" />
             <fileTest path="${jrehome}/bin/java" condition="not_exists" />
          </ruleList>
        </throwError>
        <throwError>
          <customErrorMessage>${msg(jre.invalid.error.windows)}</customErrorMessage>
          <text>Unknown Error</text>
          <ruleList>
             <compareText text="${jrehome}" logic="does_not_equal" value="" />
             <compareText text="${platform_name}" logic="equals" value="windows" />
             <fileTest path="${jrehome}\bin\java.exe" condition="not_exists" />
          </ruleList>
        </throwError>

        <!-- Set the java_executable variable if valid jrehome switch is supplied -->
        <setInstallerVariable name="java_executable" value="${jrehome}/bin/java" >
          <ruleList>
             <compareText text="${jrehome}" logic="does_not_equal" value="" />
             <compareText text="${platform_name}" logic="does_not_equal" value="windows" />
             <fileExists path="${jrehome}/bin/java" />
          </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="java_executable" value="${jrehome}\bin\java.exe" >
          <ruleList>
             <compareText text="${jrehome}" logic="does_not_equal" value="" />
             <compareText text="${platform_name}" logic="equals" value="windows" />
             <fileExists path="${jrehome}\bin\java.exe" />
          </ruleList>
        </setInstallerVariable>
	
        <!-- Detecting Java, Abort if not found -->
        <autodetectJava>
            <promptUser>0</promptUser>
            <abortOnError>1</abortOnError>
            <showMessageOnError>1</showMessageOnError>
            <customErrorMessage>${msg(java.error)}</customErrorMessage>
            <ruleList>
               <compareText text="${jrehome}" logic="equals" value="" />
            </ruleList>
        </autodetectJava>

        <!-- Creates the ini file if not exits -->
        <touchFile path="/etc/postgres-reg.ini">
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </touchFile>
		
        <!-- LIN & MAC: Check Previous Installation of MigrationToolkit -->
        <actionGroup>
            <actionList>
                <iniFileGet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>MigrationToolkit</section>
                    <key>Branding</key>
                    <variable>iBranding</variable>
                </iniFileGet>
                <iniFileGet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>MigrationToolkit</section>
                    <key>Version</key>
                    <variable>MigrationToolkitVersion</variable>
                </iniFileGet>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
		
        <!--    LIN & MAC: Set the Installation Directory in case of re-install/upgrade -->
        <actionGroup>
            <actionList>
                <iniFileGet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>MigrationToolkit</section>
                    <key>InstallationDirectory</key>
                    <variable>installdir</variable>
                </iniFileGet>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${MigrationToolkitVersion}</text>
                    <value/>
                </compareText>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
		
        <!-- WIN: Check Previous Installation of MigrationToolkit -->
        <actionGroup>
            <actionList>
                <registryGet>
                    <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\MigrationToolkit</key>
                    <name>Branding</name>
                    <variable>iBranding</variable>
                </registryGet>
                <registryGet>
                    <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\MigrationToolkit</key>
                    <name>Version</name>
                    <variable>MigrationToolkitVersion</variable>
                </registryGet>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
		
        <!-- WIN: Set the Installation Directory in case of re-install/upgrade -->
        <actionGroup>
            <actionList>
                <registryGet>
                    <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\MigrationToolkit</key>
                    <name>Location</name>
                    <variable>installdir</variable>
                </registryGet>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${MigrationToolkitVersion}</text>
                    <value/>
                </compareText>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
		
        <!-- If there appears to be an existing installation, with no Branding value. --> 
	<!-- force the default value. Otherwise, set the branding to whatever we read, -->
	<!-- or, set the default -->
	
	<!-- Existing, old install (version, but no branding) -->
	<setInstallerVariable>
		<name>branding</name>
		<persist>0</persist>
		<value>PostgreSQL</value>
		<ruleList>
			<compareText>
				<logic>does_not_equal</logic>
				<text>${MigrationToolkitVersion}</text>
				<value></value>
			</compareText>
			<compareText>
				<logic>equals</logic>
				<text>${iBranding}</text>
				<value></value>
			</compareText>
		</ruleList>
	</setInstallerVariable>
	
	<!-- Existing install, with branding -->
	<setInstallerVariable>
		<name>branding</name>
		<persist>0</persist>
		<value>${iBranding}</value>
		<ruleList>
			<compareText>
				<logic>does_not_equal</logic>
				<text>${iBranding}</text>
				<value></value>
			</compareText>
		</ruleList>
	</setInstallerVariable>
	
	<!-- New install, nothing set on the command line -->
	<setInstallerVariable>
		<name>branding</name>
		<persist>0</persist>
		<value>PostgreSQL</value>
		<ruleList>
			<compareText>
				<logic>equals</logic>
				<text>${branding}</text>
				<value></value>
			</compareText>
		</ruleList>
	</setInstallerVariable>
	
        <logMessage>
            <text>Using branding: ${branding}</text>
        </logMessage>        
		
        <!-- Setting the installation type as upgrade if previous installation found -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="installationType" value="upgrade"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${MigrationToolkitVersion}</text>
                    <value/>
                </compareText>
            </ruleList>
        </actionGroup>
    </preInstallationActionList>
	
    <!-- Post installation actions -->
    <postInstallationActionList>
  
       <!-- Replace / with \  on windows -->
       <setInstallerVariableFromRegEx>
            <text>${java_executable}</text>
            <substitution>\</substitution>
            <name>java_executable_windows</name>
            <pattern>\/</pattern>
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows" />
            </ruleList>
       </setInstallerVariableFromRegEx>


       <substitute>
            <files>
                   ${installdir}/runMTK.sh
            </files>
            <substitutionList>
                <substitution>
                   <pattern>java</pattern>
                   <value>${java_executable}</value>
                </substitution>
            </substitutionList>
       </substitute>
 
       <substitute>
            <files>
                   ${installdir}/runMTK.bat
            </files>
            <substitutionList>
                <substitution>
                   <pattern>java</pattern>
                   <value>"${java_executable_windows}"</value>
                </substitution>
            </substitutionList>
       </substitute>
 
        <!-- LIN & MAC: Write the MigrationToolkit Version to INI File -->
        <actionGroup>
            <actionList>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>MigrationToolkit</section>
                    <key>Description</key>
                    <value>${msg(install.summary)}</value>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>MigrationToolkit</section>
                    <key>InstallationDirectory</key>
                    <value>${installdir}</value>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>MigrationToolkit</section>
                    <key>Version</key>
                    <value>${product_version}</value>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>MigrationToolkit</section>
                    <key>Branding</key>
                    <value>${branding}</value>
                </iniFileSet>
            </actionList>
            <ruleList>
                <compareText>
                    <text>${platform_name}</text>
                    <logic>does_not_equal</logic>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
		
        <registrySet>
            <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\MigrationToolkit</key>
            <name>Branding</name>
            <value>${branding}</value>
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </registrySet>
    </postInstallationActionList>
	
    <!-- preUninstallation actions -->
    <preUninstallationActionList>
	
        <!-- LIN & MAC: Unsetting the MigrationToolkit values in the ini file -->
        <actionGroup>
            <actionList>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>MigrationToolkit</section>
                    <key>Description</key>
                    <value/>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>MigrationToolkit</section>
                    <key>InstallationDirectory</key>
                    <value/>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>MigrationToolkit</section>
                    <key>Version</key>
                    <value/>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>MigrationToolkit</section>
                    <key>Branding</key>
                    <value/>
                </iniFileSet>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
    </preUninstallationActionList>
	
    <!-- Components -->
    <componentList>
        <component>
            <name>MigrationToolkit</name>
            <description>MigrationToolkit</description>
            <canBeEdited>0</canBeEdited>
            <selected>1</selected>
            <show>1</show>
            <folderList>
			
                <!-- LIN: Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfilesbinlinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/linux/MigrationToolkit/toolkit.properties</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/linux/MigrationToolkit/runMTK.sh</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/linux/MigrationToolkit/MigrationToolKit_PPSS_README.txt</origin>
                        </distributionFile>
                        <distributionDirectory>
                            <origin>staging/linux/MigrationToolkit/lib</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <!-- LIN-X64: Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfilesbinlinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/linux-x64/MigrationToolkit/toolkit.properties</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/linux-x64/MigrationToolkit/runMTK.sh</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/linux-x64/MigrationToolkit/MigrationToolKit_PPSS_README.txt</origin>
                        </distributionFile>
                        <distributionDirectory>
                            <origin>staging/linux-x64/MigrationToolkit/lib</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <!-- WIN: Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfileswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/windows/MigrationToolkit/toolkit.properties</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/windows/MigrationToolkit/runMTK.bat</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/windows/MigrationToolkit/MigrationToolKit_PPSS_README.txt</origin>
                        </distributionFile>
                        <distributionDirectory>
                            <origin>staging/windows/MigrationToolkit/lib</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <!-- MAC: Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfilesbinosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/osx/MigrationToolkit/toolkit.properties</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/osx/MigrationToolkit/runMTK.sh</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/osx/MigrationToolkit/MigrationToolKit_PPSS_README.txt</origin>
                        </distributionFile>
                        <distributionDirectory>
                            <origin>staging/osx/MigrationToolkit/lib</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
            </folderList>
        </component>
    </componentList>
	
    <parameterList>
        <stringParameter name="originalplatform" ask="0" cliOptionShow="0"/>
        <stringParameter name="branding" cliOptionName="branding" ask="0" cliOptionShow="0"/>
        <stringParameter name="jrehome" cliOptionName="jrehome" default="" ask="0" cliOptionShow="0"/>

        <parameterGroup
            name="installationDirectory"
            description="Installer.Parameter.installdir.description"
            explanation="Installer.Parameter.installdir.explanation"
            title="${msg(mw.installation.dir)}">
            <parameterList>
                <!-- Install Directory -->
                <directoryParameter>
                    <name>installdir</name>
                    <value>${default_installdir}</value>
                    <default/>
                    <allowEmptyValue>0</allowEmptyValue>
                    <ask>yes</ask>
                    <cliOptionName>prefix</cliOptionName>
                    <mustBeWritable>yes</mustBeWritable>
                    <mustExist>0</mustExist>
                    <width>40</width>
        			
                    <!-- Validating whether installdir is empty -->
        	    <validationActionList>
                        <actionGroup>
                            <actionList>
                                <setInstallerVariable name="installdir" value="${default_installdir}" />
                                <throwError>
                                    <text>${msg(migrationtoolkit.installdir.empty)}</text>
                                </throwError>
                            </actionList>
                            <ruleList>
                                <compareText>
                                    <text>${installdir}</text>
                                    <logic>equals</logic>
                                    <value />
                                </compareText>
                            </ruleList>
                        </actionGroup>
                    </validationActionList>
        			
                    <!-- Validating whether installdir contains whitespaces (Linux) -->
                    <validationActionList>
                        <actionGroup>
                            <actionList>
                                <setInstallerVariable name="installdir" value="${default_installdir}" />
                                <throwError>
                                    <text>${msg(migrationtoolkit.installdir.error)}</text>
                                </throwError>
                            </actionList>
                            <ruleList>
                                <regExMatch>
                                    <text>${installdir}</text>
                                    <logic>does_not_match</logic>
                                    <pattern>^/([0-9a-zA-Z_/\.\-]*)$</pattern>
                                </regExMatch>
                                <compareText>
                                    <text>${platform_name}</text>
                                    <logic>does_not_equal</logic>
                                    <value>windows</value>
                                </compareText>
                            </ruleList>
                        </actionGroup>
        				
                        <!-- Validating whether installdir is valid (Windows) -->
                        <actionGroup>
                            <actionList>
                                 <setInstallerVariable name="installdir" value="${default_installdir}" />
                                 <showWarning>
                                     <text>${msg(migrationtoolkit.installdir.error)}</text>
                                 </showWarning>
                                 <setInstallerVariable name="next_page" value="installdir"/>
                           </actionList>
                           <ruleList>
                                <regExMatch>
                                     <text>${installdir}</text>
                                     <logic>does_not_match</logic>
                                     <pattern>^([a-zA-Z]:)\\([0-9a-zA-Z_\\\s\.\-\(\)]*)$</pattern>
                                </regExMatch>
                                <compareText>
                                     <text>${platform_name}</text>
                                     <logic>equals</logic>
                                     <value>windows</value>
                                </compareText>
                           </ruleList>
                        </actionGroup>
                    </validationActionList>
                </directoryParameter>
            </parameterList>
            <ruleList>
                <compareText text="${MigrationToolkitVersion}" logic="equals" value=""/>
            </ruleList>
        </parameterGroup>
		
	    <!-- Explain that we're using an existing installation directory -->
        <labelParameter>
            <name>upgrade</name>
            <title>${msg(upgrade.existing.installation.title)}</title>
            <description>${msg(upgrade.existing.installation.description)}</description>
            <ruleList>
		 <compareText>
                    <text>${MigrationToolkitVersion}</text>
                    <logic>does_not_equal</logic>
                    <value/>
                </compareText>
            </ruleList>
        </labelParameter>
    </parameterList>
</project>
