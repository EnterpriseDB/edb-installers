<!-- Authentication Page -->
<parameterGroup
  name="userAuthenticationPage"
  title="${msg(registration.existingemail.authentication.title.value)}">
  <parameterList>
    <labelParameter name="existingemail_authentication_lbl"
          explanation="${msg(registration.existingemail.authentication.explanation.value)}"/>
    <stringParameter name="existingEmail" allowEmptyValue="1" ask="1"
      cliOptionName="existing-user" cliOptionShow="1"
      width="30"
      description="${msg(registration.userAuth.email.value)}">
      <validationActionList>
        <throwError text="${msg(registration.error.invalid.email.value)}">
          <ruleList>
            <regExMatch logic="does_not_match" text="${existingEmail}">
              <pattern>^[a-zA-Z][\w\.-]*[a-zA-Z0-9]@[a-zA-Z0-9][\w\.-]*[a-zA-Z0-9]\.[a-zA-Z][a-zA-Z\.]*[a-zA-Z]$</pattern>
            </regExMatch>
          </ruleList>
        </throwError>
      </validationActionList>
    </stringParameter>

    <passwordParameter name="existingPassword" ask="1" cliOptionShow="1"
      width="30" allowEmptyValue="1" askForConfirmation="0"
      cliOptionName="existing-password"
      description="${msg(registration.userAuth.password.value)}">
      <validationActionList>
        <throwError text="${msg(registration.error.invalid.password.value)}">
          <ruleEvaluationLogic>or</ruleEvaluationLogic>
          <ruleList>
            <stringTest text="${existingPassword}" type="empty"/>
            <regExMatch logic="matches" pattern="\s+" text="${existingPassword}"/>
          </ruleList>
        </throwError>
      </validationActionList>
    </passwordParameter>

  </parameterList>

  <!-- Validate entered email & password -->
  <postShowPageActionList>
    <actionGroup>
      <actionList>
        <logMessage text="Sending parameter:&quot;${uuid_val}&quot; &quot;@@COMPONENT@@&quot; &quot;false&quot; &quot;true&quot; &quot;&quot; &quot;&quot; &quot;1&quot; &quot;&quot; &quot;&quot; &quot;0&quot; &quot;0&quot; &quot;${existingEmail}&quot; &quot;${existingPassword.password}&quot; &quot;${proxyHost}&quot; &quot;${proxyPort}&quot;"/>
        <setInstallerVariableFromScriptOutput name="ws_existinguser_result"
          abortOnError="0" customErrorMessage="${msg(registration.validatinguser.ws.error)}"
          exec="${system_temp_directory}/@@TEMPDIR@@/UserValidation/validateUserClient.o"
          execArgs="&quot;${uuid_val}&quot; &quot;@@COMPONENT@@&quot; &quot;false&quot; &quot;true&quot; &quot;&quot; &quot;&quot; &quot;1&quot; &quot;&quot; &quot;&quot; &quot;0&quot; &quot;0&quot; &quot;${existingEmail}&quot; &quot;${existingPassword.password}&quot; &quot;${proxyHost}&quot; &quot;${proxyPort}&quot;"
          workingDirectory="${system_temp_directory}/@@TEMPDIR@@/UserValidation"/>
      </actionList>
      <ruleList>
        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
      </ruleList>
    </actionGroup>

    <actionGroup>
      <actionList>
        <logMessage text="Sending parameter:&quot;@@COMPONENT@@&quot; &quot;false&quot; &quot;true&quot; &quot;${existingEmail}&quot; &quot;${existingPassword.password}&quot; &quot;${uuid_val}&quot;"/>
        <setInstallerVariableFromScriptOutput name="ws_existinguser_result"
          customErrorMessage="${msg(registration.validatinguser.ws.error)}"
          exec="${system_temp_directory}\@@TEMPDIR@@\UserValidation\validateUserClient.exe"
          execArgs="&quot;@@COMPONENT@@&quot; &quot;false&quot; &quot;true&quot; &quot;${existingEmail}&quot; &quot;${existingPassword.password}&quot; &quot;${uuid_val}&quot; &quot;${proxyHost}&quot; &quot;${proxyPort}&quot;"
          abortOnError="0"
          workingDirectory="${system_temp_directory}\@@TEMPDIR@@\UserValidation"/>
      </actionList>
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
      </ruleList>
    </actionGroup>

    <!-- 1. Could not authenticate email and password provided -->
    <throwError abortOnError="0" text="${msg(registration.ws.email.not.authenticated)}">
      <ruleList>
        <compareText logic="equals" text="${ws_existinguser_result}" value="1"/>
      </ruleList>
    </throwError>

    <!-- 2. The email has not been validated. -->
    <throwError abortOnError="0" text="${msg(registration.ws.email.not.validated)}">
      <ruleList>
        <compareText logic="equals" text="${ws_existinguser_result}" value="2"/>
      </ruleList>
    </throwError>

    <!-- 3. Email already exists -->
    <throwError abortOnError="0" text="${msg(registration.ws.email.already.exists)}">
      <ruleList>
        <compareText logic="equals" text="${ws_existinguser_result}" value="3"/>
      </ruleList>
    </throwError>

    <!-- 4. Unknown Error. :( -->
    <throwError abortOnError="0" text="${msg(registration.ws.exception.from.server)}">
      <ruleList>
        <compareText logic="equals" text="${ws_existinguser_result}" value="4"/>
      </ruleList>
    </throwError>

    <!-- 5. Could not connect to the web-service. -->
    <throwError abortOnError="0" text="${msg(registration.ws.internet.not.connected)}">
      <ruleList>
        <compareText logic="equals" text="${ws_existinguser_result}" value=""/>
      </ruleList>
    </throwError>

    <setInstallerVariable name="stay_on_this_page" value="true"/>

    <setInstallerVariable name="stay_on_this_page" value="false">
      <ruleList>
        <compareText logic="equals" text="${ws_existinguser_result}" value="0"/>
      </ruleList>
    </setInstallerVariable>

    <setInstallerVariable name="stay_on_this_page" value="false">
      <ruleList>
        <compareText logic="equals" text="${ws_existinguser_result}" value="00"/>
        <isTrue value="${ws_existinguser_result}"/>
      </ruleList>
    </setInstallerVariable>

    <setInstallerVariable name="next_page" value="userAuthenticationPage">
      <ruleList>
        <isTrue value="${stay_on_this_page}"/>
      </ruleList>
    </setInstallerVariable>

  </postShowPageActionList>
  <!-- Check if upgradation is done on older version of @@COMPONENT@@,
       which does not have this authentication process -->
  <ruleList>
    <compareText logic="equals" text="${iExistingEmail}" value=""/>
    <isTrue value="${reg_required}"/>
  </ruleList>

</parameterGroup>

