<project>
    <!-- Package details -->
    <shortName>pphqagent</shortName>
    <fullName>Postgres Plus HQ Agent</fullName>
    <version>PG_VERSION_HQAGENT-PG_BUILDNUM_HQAGENT</version>
    <!-- These options are used on Windows -->
    <startMenuGroupName>${branding}</startMenuGroupName>
    <!-- Product Specific Options -->
    <productComments>Postgres Plus HQ Agent, packaged by EnterpriseDB</productComments>
    <productDisplayName>${product_fullname} ${productVersion}</productDisplayName>
    <requireInstallationByRootUser>1</requireInstallationByRootUser>
    <!-- The options are used for RPM registration -->
    <description>Postgres Plus HQ Agent</description>
    <summary>Postgres Plus HQ Agent, packaged by EnterpriseDB</summary>
    <vendor>EnterpriseDB</vendor>

    <!-- Installer Size -->
    <width>550</width>
    <height>400</height>

    <!-- Misc options -->
    <installerFilename>${product_shortname}-${product_version}-${platform_name}.${platform_exec_suffix}</installerFilename>
    <wrapLicenseFileText>0</wrapLicenseFileText>
    <compressionAlgorithm>lzma</compressionAlgorithm>
    <unattendedModeUI>minimal</unattendedModeUI>
    <enableRollback>0</enableRollback>
    <saveRelativePaths>1</saveRelativePaths>
    <uninstallerName>uninstall-${product_shortname}</uninstallerName>
    <outputDirectory>../output</outputDirectory>
    <installationLogFile>${system_temp_directory}/install-${product_shortname}.log</installationLogFile>

    <!-- Images -->
    <disableSplashScreen>1</disableSplashScreen>
    <leftImage>../resources/edb-side.png</leftImage>

    <!-- i18n files for the UI -->
    <allowedLanguages>en</allowedLanguages>
    <customLanguageFileList>
        <language code="en" encoding="iso8859-1" file="i18n/en.lng"/>
    </customLanguageFileList>
    <preShowHelpActionList>
        <setInstallerVariable name="agenthost" persist="1" value="localhost"/>
        <setInstallerVariable name="pphqdefaultpassword" persist="1" value="hqadmin"/>
        <!-- MAC : Set the default installation directory -->
        <setInstallerVariable name="default_installdir" persist="1" value="/Library/PostgresPlus/HQ">
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="osx"/>
            </ruleList>
        </setInstallerVariable>
        <!-- LIN : Set the default installation directory -->
        <setInstallerVariable name="default_installdir" persist="1" value="${platform_install_prefix}/PostgresPlus/HQ">
            <ruleList>
                <compareText logic="contains" text="${platform_name}" value="linux"/>
            </ruleList>
        </setInstallerVariable>
        <!-- WIN : Set the default installation directory -->
        <setInstallerVariable name="default_installdir" persist="1" value="${platform_install_prefix}\PostgresPlus\HQ">
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </setInstallerVariable>
    </preShowHelpActionList>

    <!-- Prebuild Actons-->
    <preBuildActionList>
        <setInstallerVariable name="originalplatform" value="${platform_name}"/>
        <setInstallerVariable name="originalplatform" value="linux-x32">
            <ruleList>
                <compareText text="${platform_name}" value="linux"/>
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="project.parameter(serviceaccount).ask" value="0">
            <ruleList>
                <compareText text="${platform_name}" value="windows" logic="equals"/>
            </ruleList>
        </setInstallerVariable>
    </preBuildActionList>

    <initializationActionList>
        <setInstallerVariable name="productVersion" persist="1" value="PG_VERSION_HQAGENT"/>
        <setInstallerVariable name="project.parameter(jrehome).ask" value="0"/>
        <setInstallerVariable name="project.parameter(serviceaccount).ask" value="0"/>
        <setInstallerVariable name="agentport" value=""/>
        <setInstallerVariable name="configure" value="false"/>

        <!-- Abort Installation as trying to  run a 32-bit installer on 64-bit machine -->
        <throwError customErrorMessage="${msg(platform.not.match)}" text="Unknown Error">
            <ruleList>
                <platformTest type="linux-x64"/>
                <compareText text="${originalplatform}" value="linux-x32"/>
            </ruleList>
        </throwError>
        <!-- LIN : Set the default values for unattended mode -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="installdir" value="${platform_install_prefix}/PostgresPlus/HQ"/>
            </actionList>
            <ruleList>
                <compareText logic="equals" text="${installer_ui}" value="unattended"/>
                <compareText logic="contains" text="${platform_name}" value="linux"/>
            </ruleList>
        </actionGroup>
        <!-- WIN : Set the default values for unattended mode -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="installdir" value="${platform_install_prefix}\PostgresPlus\HQ"/>
            </actionList>
            <ruleList>
                <compareText logic="equals" text="${installer_ui}" value="unattended"/>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>
        <!-- MAC : Set the default values for unattended mode -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="installdir" value="/Library/PostgresPlus/HQ"/>
            </actionList>
            <ruleList>
                <compareText logic="equals" text="${installer_ui}" value="unattended"/>
                <compareText logic="equals" text="${platform_name}" value="osx"/>
            </ruleList>
        </actionGroup>
        <!-- MAC : Set the default installation directory -->
        <setInstallerVariable name="default_installdir" persist="1" value="/Library/PostgresPlus/HQ">
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="osx"/>
            </ruleList>
        </setInstallerVariable>
        <!-- LIN : Set the default installation directory -->
        <setInstallerVariable name="default_installdir" persist="1" value="${platform_install_prefix}/PostgresPlus/HQ">
            <ruleList>
                <compareText logic="contains" text="${platform_name}" value="linux"/>
            </ruleList>
        </setInstallerVariable>
        <!-- WIN : Set the default installation directory -->
        <setInstallerVariable name="default_installdir" persist="1" value="${platform_install_prefix}\PostgresPlus\HQ">
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="pphqAgentVersion" value=""/>
    </initializationActionList>
    <preInstallationActionList>
	<setInstallerVariable>
            <name>pphqdefaultpassword</name>
            <value>hqadmin</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${installer_ui}</text>
                    <value>unattended</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable>
            <name>pphqdefaultpassword</name>
            <value></value>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${installer_ui}</text>
                    <value>unattended</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>

        <setInstallerVariable name="serviceName" value="pphq-agent"/>
        <!-- Creates the ini file if not exits -->
        <touchFile path="/etc/postgres-reg.ini">
            <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
            </ruleList>
        </touchFile>

        <!-- Check if PPHQ installed on this machine -->
        <setInstallerVariable name="pphqVersion" value=""/>
        <iniFileGet file="/etc/postgres-reg.ini" section="pphq"
            key="Version" variable="pphqVersion">
            <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
            </ruleList>
        </iniFileGet>
        <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pphq" variable="pphqVersion" name="Version">
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </registryGet>

        <stringModify text="${pphqVersion}" variable="pphqVersion" logic="trim"/>
        <throwError text="${msg(hqagent.pphq.present.error)}">
            <ruleList>
                <stringTest text="${pphqVersion}" type="not_empty"/>
            </ruleList>
        </throwError>

        <!-- LIN & MAC : Get the branding & check Previous Installation of hqagent-->
        <actionGroup>
            <actionList>
                <iniFileGet file="/etc/postgres-reg.ini" section="pphqagent"
                    key="Branding" variable="iBranding"/>
                <iniFileGet file="/etc/postgres-reg.ini" section="pphqagent"
                    key="Version" variable="pphqAgentVersion"/>
            </actionList>
            <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>

        <!-- WIN : Check Previous Installation of hqagent-->
        <actionGroup>
            <actionList>
                <!-- Get the branding -->
                <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Postgres Plus HQ Agent" variable="iBranding" name="Branding"/>
                <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Postgres Plus HQ Agent" variable="pphqAgentVersion" name="Version"/>
            </actionList>
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>

        <setInstallerVariableFromRegEx name="pphqAgentVersion" text="${pphqAgentVersion}"
            pattern="^\([^ ][^ ]*\)-\([^ ][^ ]*\)" substitution="\1">
            <ruleList>
                <stringTest text="${pphqAgentVersion}" type="not_empty"/>
            </ruleList>
        </setInstallerVariableFromRegEx>

        <actionGroup>
            <actionList>
                <iniFileGet file="/etc/postgres-reg.ini" section="pphqagent" key="pphqhost" variable="pphqhost"/>
                <iniFileGet file="/etc/postgres-reg.ini" section="pphqagent" key="pphqport" variable="pphqport"/>
                <iniFileGet file="/etc/postgres-reg.ini" section="pphqagent" key="secure-connection" variable="pphqsecureconn"/>
                <iniFileGet file="/etc/postgres-reg.ini" section="pphqagent" key="pphquser" variable="pphquser"/>
                <iniFileGet file="/etc/postgres-reg.ini" section="pphqagent" key="agentport" variable="agentport"/>
		<iniFileGet file="/etc/postgres-reg.ini" section="pphqagent" key="agenthost" variable="agenthost"/>
            </actionList>
            <ruleList>
                <stringTest text="${pphqAgentVersion}" type="not_empty"/>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>
        <actionGroup>
            <actionList>
                <!-- Get the branding -->
                <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Postgres Plus HQ Agent" variable="pphqhost" name="pphqhost"/>
                <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Postgres Plus HQ Agent" variable="pphqport" name="pphqport"/>
                <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Postgres Plus HQ Agent" variable="secure-connection" name="${pphqsecureconn}"/>
                <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Postgres Plus HQ Agent" variable="pphquser" name="pphquser"/>
                <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Postgres Plus HQ Agent" variable="agentport" name="agentport"/>
				<registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Postgres Plus HQ Agent" variable="agenthost" name="agenthost"/>
            </actionList>
            <ruleList>
                <stringTest text="${pphqAgentVersion}" type="not_empty"/>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>

        <setInstallerVariable name="configure" value="true">
            <ruleEvaluationLogic>or</ruleEvaluationLogic>
            <ruleList>
                <stringTest text="${pphqAgentVersion}" type="empty"/>
                <stringTest text="${pphqhost}" type="empty"/>
                <stringTest text="${pphqport}" type="empty"/>
                <stringTest text="${pphquser}" type="empty"/>
                <stringTest text="${agentport}" type="empty"/>
				<stringTest text="${agenthost}" type="empty"/>
            </ruleList>
        </setInstallerVariable>

        <!-- Check if the valid jrehome switch is supplied -->
        <throwError customErrorMessage="${msg(jre.invalid.error)}" text="Unknown Error">
            <ruleList>
                <compareText text="${jrehome}" logic="does_not_equal" value="" />
                <compareText text="${platform_name}" logic="does_not_equal" value="windows" />
                <fileTest path="${jrehome}/bin/java" condition="not_exists" />
            </ruleList>
        </throwError>
        <throwError customErrorMessage="${msg(jre.invalid.error)}" text="Unknown Error">
            <ruleList>
                <compareText text="${jrehome}" logic="does_not_equal" value="" />
                <compareText text="${platform_name}" logic="equals" value="windows" />
                <fileTest path="${jrehome}\bin\java.exe" condition="not_exists" />
            </ruleList>
        </throwError>

        <!-- Set the java_executable variable if valid jrehome switch is supplied -->
        <setInstallerVariable name="java_executable" value="${jrehome}/bin/java" >
            <ruleList>
                <compareText text="${jrehome}" logic="does_not_equal" value="" />
                <compareText text="${platform_name}" logic="does_not_equal" value="windows" />
                <fileExists path="${jrehome}/bin/java" />
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="java_executable" value="${jrehome}\bin\java.exe" >
            <ruleList>
                <compareText text="${jrehome}" logic="does_not_equal" value="" />
                <compareText text="${platform_name}" logic="does_not_equal" value="windows" />
                <fileExists path="${jrehome}\bin\java.exe" />
            </ruleList>
        </setInstallerVariable>

        <!-- If there appears to be an existing installation, with no Branding value. -->
        <!-- force the default value. Otherwise, set the branding to whatever we read, -->
        <!-- or, set the default -->

        <!-- Existing, old install (version, but no branding) -->
        <setInstallerVariable name="branding" value="pphqagent">
            <ruleList>
                <compareText logic="does_not_equal" text="${pphqAgentVersion}" value=""/>
                <compareText logic="equals" text="${iBranding}" value=""/>
            </ruleList>
        </setInstallerVariable>

        <!-- Existing install, with branding -->
        <setInstallerVariable name="branding"  value="${iBranding}">
            <ruleList>
                <compareText logic="does_not_equal" text="${iBranding}" value=""/>
            </ruleList>
        </setInstallerVariable>

        <!-- New install, nothing set on the command line -->
        <setInstallerVariable name="branding" value="Postgres Plus HQ Agent">
            <ruleList>
                <compareText logic="equals" text="${branding}" value=""/>
            </ruleList>
        </setInstallerVariable>

        <logMessage text="Using branding: ${branding}"/>

        <!-- Set the installation directory in case of re-install/upgrade -->
        <actionGroup>
            <actionList>
                <iniFileGet file="/etc/postgres-reg.ini" section="pphqagent"
                    key="InstallationDirectory" variable="installdir"/>
            </actionList>
            <ruleList>
                <compareText logic="does_not_equal" text="${pphqAgentVersion}" value=""/>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>

        <!-- WIN: Set the installation directory in case of re-install/upgrade -->
        <actionGroup>
            <actionList>
                <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Postgres Plus HQ Agent" variable="installdir" name="Location"/>
            </actionList>
            <ruleList>
                <compareText logic="does_not_equal" text="${pphqAgentVersion}" value=""/>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>

    </preInstallationActionList>
    <readyToInstallActionList>

	    <!-- Use the bundled JRE, if no other has been specified -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="java_executable" value="${installdir}/jre6/bin/java"/>
                <setInstallerVariable name="jrehome" value="${installdir}/jre6"/>
            </actionList>
            <ruleList>
                <compareText text="${jrehome}" logic="equals" value=""/>
                <compareText text="${platform_name}" logic="contains" value="linux"/>
            </ruleList>
        </actionGroup>
        <actionGroup>
            <actionList>
                <setInstallerVariable name="java_executable" value="${installdir}\jre6\bin\java.exe"/>
                <setInstallerVariable name="jrehome" value="${installdir}\jre6"/>
            </actionList>
            <ruleList>
                <compareText text="${jrehome}" logic="equals" value=""/>
                <compareText text="${platform_name}" logic="equals" value="windows"/>
            </ruleList>
        </actionGroup>
        <actionGroup>
            <actionList>
                <setInstallerVariable name="java_executable" value="/System/Library/Frameworks/JavaVM.framework/Home/bin/java"/>
                <setInstallerVariable name="jrehome" value="/System/Library/Frameworks/JavaVM.framework/Home"/>
            </actionList>
            <ruleList>
                <compareText text="${jrehome}" logic="equals" value=""/>
                <compareText text="${platform_name}" logic="equals" value="osx"/>
            </ruleList>
        </actionGroup>

        <setEnvironmentVariable name="JAVA_HOME" value="${jrehome}"/>
        <setEnvironmentVariable name="HQ_JAVA_HOME" value="${jrehome}"/>

        <actionGroup>
            <actionList>
                <!-- stopping the pphq-agent in upgrade mode -->
                <runProgram program="${installdir}/scripts/agentctl.sh" abortOnError="0"
                    programArguments="--no-wait stop" workingDirectory="${installdir}"
                    showMessageOnError="0" progressText="${msg(pphqagent.stopping)}">
                    <ruleList>
                        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                    </ruleList>
                </runProgram>
                <actionGroup>
                    <actionList>
                        <stopWindowsService serviceName="Postgres Plus HQ Agent" abortOnError="0" showMessageOnError="0"/>
                        <deleteWindowsService serviceName="Postgres Plus HQ Agent" abortOnError="0"  showMessageOnError="0"/>
                    </actionList>
                    <ruleList>
                        <compareText logic="equals" text="${platform_name}" value="windows"/>
                    </ruleList>
                </actionGroup>
            </actionList>
            <ruleList>
                <stringTest text="${pphqAgentVersion}" type="not_empty"/>
            </ruleList>
        </actionGroup>
    </readyToInstallActionList>
    <postInstallationActionList>
        <actionGroup>
            <actionList>
                <setInstallerVariableFromScriptOutput
                        exec="cscript.exe"
                        execArgs="//nologo &quot;${installdir}\scripts\shortPathName.vbs&quot; &quot;${jrehome}&quot;"
                        name="jrehome" workingDirectory="${installdir}"/>
                <setInstallerVariableFromScriptOutput
                        exec="cscript.exe"
                        execArgs="//nologo &quot;${installdir}\scripts\shortPathName.vbs&quot; &quot;${installdir}&quot;"
                        name="installdir" workingDirectory="${installdir}"/>
                <setEnvironmentVariable name="HQ_JAVA_HOME" value="${jrehome}"/>
                <setEnvironmentVariable name="JAVA_HOME" value="${jrehome}"/>
                <addEnvironmentVariable name="HQ_JAVA_HOME" value="${jrehome}" scope="system"/>

                <setInstallerVariableFromScriptOutput
                        exec="cscript.exe"
                        execArgs="//nologo &quot;${installdir}\scripts\shortPathName.vbs&quot; &quot;${installdir}&quot;"
                        name="pphqInstallPath"
                        workingDirectory="${installdir}"/>
            </actionList>
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>
        <setInstallerVariableFromRegEx name="pphqInstallPath" text="${installdir}">
            <pattern>\\</pattern>
            <substitution>\\\\</substitution>
        </setInstallerVariableFromRegEx>
        <!-- Branding info -->
        <logMessage text="Write the branding to the ini file..."/>

        <actionGroup>
            <actionList>
                <iniFileSet file="/etc/postgres-reg.ini" section="pphqagent" key="Description" value="${msg(install.summary)}"/>
                <iniFileSet file="/etc/postgres-reg.ini" section="pphqagent" key="InstallationDirectory" value="${installdir}"/>
                <iniFileSet file="/etc/postgres-reg.ini" section="pphqagent" key="Version" value="${product_version}"/>
                <iniFileSet file="/etc/postgres-reg.ini" section="pphqagent" key="Branding" value="${branding}"/>
                <!-- Create user (serviceaccount) for the server, if does not exists -->
                <runProgram program="${installdir}/installer/pphqagent/createuser.sh"
                    programArguments="${serviceaccount} &quot;${installdir}/agent-PG_VERSION_HQAGENT&quot;"
                    workingDirectory="${installdir}/installer/pphqagent"
                    abortOnError="0" showMessageOnError="0">
                    <ruleList>
                        <fileExists path="${installdir}/installer/pphqagent/createuser.sh"/>
                        <compareText logic="does_not_equal" text="${serviceaccount}" value="root"/>
                    </ruleList>
                </runProgram>
                <runProgram program="${installdir}/installer/pphqagent/startupcfg.sh"
                    programArguments="0 0 PG_VERSION_HQAGENT &quot;${installdir}&quot; &quot;no-server-present&quot; &quot;${serviceName}&quot; &quot;root&quot; &quot;${serviceaccount}&quot;"
                    progressText="${msg(progress.text.startup.config)}"
                    workingDirectory="${installdir}/installer/pphq"
                    abortOnError="0" showMessageOnError="0">
                    <ruleList>
                        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                    </ruleList>
                </runProgram>
            </actionList>
            <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>

        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Postgres Plus HQ Agent" name="Branding" value="${branding}"/>
        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Postgres Plus HQ Agent" name="Description" value="${msg(install.summary)}"/>

        <!-- We need to install the agent service in order to start it -->
        <runProgram program="cscript.exe"
            programArguments="&quot;${installdir}\scripts\runProgram.vbs&quot; &quot;${installdir}\agent-PG_VERSION_HQAGENT\bin\pphq-agent.bat&quot; install" workingDirectory="${installdir}\agent-PG_VERSION_HQAGENT\bin"
            abortOnError="0" showMessageOnError="0">
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </runProgram>

        <!-- Shortcuts in case when platform is not windows -->
        <runProgram program="${installdir}/installer/pphqagent/createshortcuts.sh"
            programArguments="&quot;PG_VERSION_HQAGENT&quot; &quot;${branding}&quot; &quot;${installdir}&quot; &quot;${jrehome}&quot; &quot;${serviceaccount}&quot;"
            progressText="${msg(progress.text.creating.shortcuts)}"
            workingDirectory="${installdir}/installer/pphqagent"
            abortOnError="0" showMessageOnError="0">
            <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
            </ruleList>
        </runProgram>

        <setInstallerVariableFromScriptOutput
                exec="${java_executable}"
                execArgs="-jar &quot;${installdir}/agent-PG_VERSION_HQAGENT/bundles/agent-PG_VERSION_HQAGENT-PPHQ_BUILD/pdk/lib/sigar.jar&quot; netinfo"
                name="machineNetInfo"
                workingDirectory="${installdir}"/>

        <setInstallerVariable name="agenthost" value="localhost"/>

        <setInstallerVariableFromRegEx name="agenthost"  text="${machineNetInfo}">
            <pattern>^.*host\sname\.*([a-zA-Z0-9\.\-]*).*$</pattern>
            <substitution>\1</substitution>
            <ruleList>
                <stringTest text="${machineNetInfo}" type="not_empty"/>
            </ruleList>
        </setInstallerVariableFromRegEx>

        <!-- switch to ip-address, if host-name does not contain '.' (dot) -->
        <setInstallerVariableFromRegEx name="agenthost" text="${machineNetInfo}">
            <pattern>^.*primary\sip\saddress\.*([0-9\.]*).*$</pattern>
            <substitution>\1</substitution>
            <ruleList>
                <compareText logic="does_not_contain" text="${agenthost}" value="."/>
                <stringTest text="${machineNetInfo}" type="not_empty"/>
            </ruleList>
        </setInstallerVariableFromRegEx>

        <!-- Get a default port number - ideally 2144 -->
        <getFreePort variable="agentport" initialPort="2144" finalPort="65535"/>
        <setInstallerVariable name="pphquser" value="hqadmin">
            <ruleList>
                <stringTest text="${pphquser}" type="empty"/>
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="pphqhost" value="${agenthost}">
            <ruleList>
                <stringTest text="${pphqhost}" type="empty"/>
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="pphqport" value="7080">
            <ruleList>
                <stringTest text="${pphqport}" type="empty"/>
            </ruleList>
        </setInstallerVariable>

        <!-- Verify pphq-agent in unattended mode -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="pphqpassword" value="hqadmin">
                    <ruleList>
                        <stringTest text="${pphqpassword}" type="empty"/>
                    </ruleList>
                </setInstallerVariable>
                <propertiesFileSet file="${installdir}/agent-PG_VERSION_HQAGENT/conf/agent.properties"
                    key="agent.setup.camIP" value="${pphqhost}"/>
                <propertiesFileSet file="${installdir}/agent-PG_VERSION_HQAGENT/conf/agent.properties"
                    key="agent.setup.camPort" value="${pphqport}"/>
                <propertiesFileSet file="${installdir}/agent-PG_VERSION_HQAGENT/conf/agent.properties"
                    key="agent.setup.camSSLPort" value="${pphqport}"/>
                <propertiesFileSet file="${installdir}/agent-PG_VERSION_HQAGENT/conf/agent.properties"
                    key="agent.setup.camSecure" value="yes"/>
                <propertiesFileSet file="${installdir}/agent-PG_VERSION_HQAGENT/conf/agent.properties"
                    key="agent.setup.camSecure" value="no">
                    <ruleList>
                        <isFalse value="${pphqsecureconn}"/>
                    </ruleList>
                </propertiesFileSet>

                <propertiesFileSet file="${installdir}/agent-PG_VERSION_HQAGENT/conf/agent.properties"
                    key="agent.setup.camLogin" value="${pphquser}"/>
                <propertiesFileSet file="${installdir}/agent-PG_VERSION_HQAGENT/conf/agent.properties"
                    key="agent.setup.camPword" value="${pphqpassword}"/>
                <propertiesFileSet file="${installdir}/agent-PG_VERSION_HQAGENT/conf/agent.properties"
                    key="agent.setup.agentIP" value="${agenthost}"/>
                <propertiesFileSet file="${installdir}/agent-PG_VERSION_HQAGENT/conf/agent.properties"
                    key="agent.setup.agentPort" value="${agentport}"/>
                <propertiesFileSet file="${installdir}/agent-PG_VERSION_HQAGENT/conf/agent.properties"
                    key="agent.setup.resetupTokens" value="yes"/>

                <runProgram program="${installdir}/scripts/agentctl.sh"
                    programArguments="--no-wait start" workingDirectory="${installdir}/agent-PG_VERSION_HQAGENT/bin"
                    abortOnError="0" showMessageOnError="0">
                    <ruleList>
                        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                    </ruleList>
                </runProgram>
                <runProgram program="cscript.exe"
                    programArguments="&quot;${installdir}\scripts\runProgram.vbs&quot; &quot;${installdir}\agent-PG_VERSION_HQAGENT\bin\pphq-agent.bat&quot; start" workingDirectory="${installdir}\agent-PG_VERSION_HQAGENT\bin"
                    abortOnError="0" showMessageOnError="0">
                    <ruleList>
                        <compareText logic="equals" text="${platform_name}" value="windows"/>
                    </ruleList>
                </runProgram>
                <setInstallerVariable name="errCode" value="${program_exit_code}"/>
                <setInstallerVariable name="errMessage" value="${program_stderr}"/>
                <setInstallerVariable name="errMessage" value="${msg(hqagent.server.validation.fail)}">
                    <ruleList>
                        <compareText logic="contains" text="${errMessage}" value="Invalid username"/>
                    </ruleList>
                </setInstallerVariable>
                <!-- Stop Agent, if it failed on configuration -->
                <runProgram program="${installdir}/scripts/agentctl.sh"
                    programArguments="--no-wait stop" workingDirectory="${installdir}/agent-PG_VERSION_HQAGENT/bin"
                    abortOnError="0" showMessageOnError="0">
                    <ruleList>
                        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                        <compareText logic="does_not_equal" text="${errCode}" value="0"/>
                    </ruleList>
                </runProgram>
                <!-- Stop Agent, if it failed on configuration -->
                <runProgram program="cscript.exe"
                    programArguments="&quot;${installdir}\scripts\runProgram.vbs&quot; &quot;${installdir}\agent-PG_VERSION_HQAGENT\bin\pphq-agent.bat&quot; stop" workingDirectory="${installdir}\agent-PG_VERSION_HQAGENT\bin"
                    abortOnError="0" showMessageOnError="0">
                    <ruleList>
                        <compareText logic="equals" text="${platform_name}" value="windows"/>
                        <compareText logic="does_not_equal" text="${errCode}" value="0"/>
                    </ruleList>
                </runProgram>
                <setInstallerVariable name="errMessage" value="${msg(pphqagent.server.connection.fail)}">
                    <ruleList>
                        <compareText logic="contains" text="${errMessage}" value="Unable to connect"/>
                    </ruleList>
                </setInstallerVariable>
                <showWarning text="${errMessage}"/>

                <actionGroup>
                    <actionList>
                        <runProgram program="${installdir}/installer/pphqagent/startupcfg.sh"
                            programArguments="0 1 PG_VERSION_HQAGENT &quot;${installdir}&quot; &quot;no-server-present&quot; &quot;${serviceName}&quot; &quot;root&quot; &quot;${serviceaccount}&quot;"
                            progressText="${msg(progress.text.startup.config)}"
                            workingDirectory="${installdir}/installer/pphq"
                            abortOnError="0" showMessageOnError="0">
                        </runProgram>
                        <iniFileSet file="/etc/postgres-reg.ini" section="pphqagent" key="pphqhost" value="${pphqhost}"/>
                        <iniFileSet file="/etc/postgres-reg.ini" section="pphqagent" key="pphqport" value="${pphqport}"/>
                        <iniFileSet file="/etc/postgres-reg.ini" section="pphqagent" key="secure-connection" value="${pphqsecureconn}"/>
                        <iniFileSet file="/etc/postgres-reg.ini" section="pphqagent" key="pphquser" value="${pphquser}"/>
                        <iniFileSet file="/etc/postgres-reg.ini" section="pphqagent" key="agentport" value="${agentport}"/>
                        <iniFileSet file="/etc/postgres-reg.ini" section="pphqagent" key="agenthost" value="${agenthost}"/>
                    </actionList>
                    <ruleList>
                        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                    </ruleList>
                </actionGroup>
                <actionGroup>
                    <actionList>
                        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Postgres Plus HQ Agent" name="pphqhost" value="${pphqhost}"/>
                        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Postgres Plus HQ Agent" name="pphqport" value="${pphqport}"/>
                        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Postgres Plus HQ Agent" name="secure-connection" value="${pphqsecureconn}"/>
                        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Postgres Plus HQ Agent" name="pphquser" value="${pphquser}"/>
                        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Postgres Plus HQ Agent" name="agentport" value="${agentport}"/>
                        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Postgres Plus HQ Agent" name="agenthost" value="${agenthost}"/>
                    </actionList>
                    <ruleList>
                        <compareText logic="equals" text="${platform_name}" value="windows"/>
                    </ruleList>
                </actionGroup>
            </actionList>
            <ruleList>
                <compareText logic="equals" text="${installer_ui}" value="unattended"/>
            </ruleList>
        </actionGroup>
        <!-- Making user this value is available in uninstaller -->
        <setInstallerVariable name="branding" value="${branding}" persist="1"/>
        <setInstallerVariable name="serviceName" value="${serviceName}" persist="1"/>
	<!--
	Changing permissions of agent.properties file because it has password in plain text format.
	-->
	<actionGroup>
	    <actionList>
               <changePermissions>
	          <files>${installdir}/agent-PG_VERSION_HQAGENT/conf/agent.properties</files>
	          <permissions>600</permissions>
               </changePermissions>
	    </actionList>
            <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
            </ruleList>
	</actionGroup>
	<actionGroup>
	    <actionList>
               <changePermissions>
	          <files>${installdir}\agent-PG_VERSION_HQAGENT\conf\agent.properties</files>
	          <permissions>600</permissions>
               </changePermissions>
	    </actionList>
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
	</actionGroup>
    </postInstallationActionList>

    <!-- preUninstallation actions -->
    <preUninstallationActionList>
        <actionGroup>
            <actionList>
                <runProgram program="launchctl"
                      programArguments="unload /Library/LaunchDaemons/com.edb.launchd.${serviceName}.plist"
                      abortOnError="0" showMessageOnError="0"
                      progressText="${msg(pphqagent.stopping)}"/>
                <deleteFile path="/Library/LaunchDaemons/com.edb.launchd.${serviceName}.plist"
                      abortOnError="0" showMessageOnError="0"
                      progressText="${msg(pphqagent.service.removing)}"/>
		<deleteFile path="${installdir}/agent-PG_VERSION_HQAGENT/bundles/agent-PG_VERSION_HQAGENT-PPHQ_BUILD/pdk/work"
                      abortOnError="0" showMessageOnError="0"
                      progressText="${msg(pphqagent.work.directory.removing)}"/>
                <deleteFile path="/Applications/${branding}/Start Postgres Plus HQ Agent.app"
                      abortOnError="0" showMessageOnError="0"/>
                <deleteFile path="/Applications/${branding}/Stop Postgres Plus HQ Agent.app"
                      abortOnError="0" showMessageOnError="0"/>
            </actionList>
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="osx"/>
            </ruleList>
        </actionGroup>
        <actionGroup>
            <actionList>
                <runProgram program="${installdir}/scripts/agentctl.sh"
                        programArguments="--no-wait stop"
                        workingDirectory="${installdir}/scripts"
                        progressText="${msg(pphqagent.stopping)}"
                        abortOnError="0" showMessageOnError="0"/>
                <actionGroup>
                    <actionList>
                        <!-- Attempt to remove any runlevel config with chkconfig -->
                        <runProgram program="/sbin/chkconfig" showMessageOnError="0"
                              programArguments="--del ${serviceName}" abortOnError="0"
                              progressText="${msg(pphqagent.service.removing)}"/>

                        <!-- Remove the startup script -->
                        <deleteFile path="/etc/init.d/${serviceName}" abortOnError="0" showMessageOnError="0"/>

                        <!-- Attempt to remove any runlevel config with update-rc.d -->
                        <runProgram program="/usr/sbin/update-rc.d" showMessageOnError="0"
                              programArguments="-f ${serviceName} remove" abortOnError="0"/>

                        <!-- LIN : Remove Menu shortcuts -->
                        <runProgram program="${installdir}/installer/pphqagent/removeshortcuts.sh"
                              programArguments="&quot;${installdir}&quot; &quot;${branding}&quot;"
                              workingDirectory="${installdir}/installer/pphqagent" abortOnError="0" showMessageOnError="0"/>
		
                        <deleteFile path="${installdir}/agent-PG_VERSION_HQAGENT/bundles/agent-PG_VERSION_HQAGENT-PPHQ_BUILD/pdk/work"
			      abortOnError="0" showMessageOnError="0"
                              progressText="${msg(pphqagent.work.directory.removing)}"/>
                    </actionList>
                    <ruleList>
                        <compareText logic="contains" text="${platform_name}" value="linux"/>
                    </ruleList>
                </actionGroup>

                <iniFileSet file="/etc/postgres-reg.ini" section="pphqagent" key="InstallationDirectory" value=""/>
                <iniFileSet file="/etc/postgres-reg.ini" section="pphqagent" key="Description" value=""/>
                <iniFileSet file="/etc/postgres-reg.ini" section="pphqagent" key="Version" value=""/>
                <iniFileSet file="/etc/postgres-reg.ini" section="pphqagent" key="Branding" value=""/>
                <iniFileSet file="/etc/postgres-reg.ini" section="pphqagent" key="pphqhost" value=""/>
                <iniFileSet file="/etc/postgres-reg.ini" section="pphqagent" key="pphqport" value=""/>
                <iniFileSet file="/etc/postgres-reg.ini" section="pphqagent" key="secure-connection" value=""/>
                <iniFileSet file="/etc/postgres-reg.ini" section="pphqagent" key="pphquser" value=""/>
                <iniFileSet file="/etc/postgres-reg.ini" section="pphqagent" key="agentport" value=""/>
		<iniFileSet file="/etc/postgres-reg.ini" section="pphqagent" key="agenthost" value=""/>
            </actionList>
            <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>

        <actionGroup>
            <actionList>
                <stopWindowsService serviceName="Postgres Plus HQ Agent" abortOnError="0" showMessageOnError="0"
                      progressText="${msg(pphqagent.stopping)}"/>
                <deleteWindowsService serviceName="Postgres Plus HQ Agent" abortOnError="0"  showMessageOnError="0"
                      progressText="${msg(pphqagent.service.removing)}"/>
                <registryDelete key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Postgres Plus HQ Agent"/>
		<deleteFile path="${installdir}\agent-PG_VERSION_HQAGENT\bundles\agent-PG_VERSION_HQAGENT-PPHQ_BUILD\pdk\work"
                      abortOnError="0" showMessageOnError="0"
                      progressText="${msg(pphqagent.work.directory.removing)}"/>
            </actionList>
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>
    </preUninstallationActionList>

    <!-- Components -->
    <componentList>
        <component>
            <name>default</name>
            <description>Default Component</description>
            <canBeEdited>1</canBeEdited>
            <selected>1</selected>
            <show>1</show>
            <folderList>
                <!-- LIN- Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfileslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <!-- PPHQ Agent binaries -->
                        <distributionDirectory origin="staging/linux/agent-PG_VERSION_HQAGENT"/>
                        <!-- Installer Scripts -->
                        <distributionDirectory origin="staging/linux/installer"/>
                        <!-- JRE -->
                        <distributionDirectory origin="staging/linux/jre6"/>
                        <!-- Control Scripts -->
                        <distributionDirectory origin="staging/linux/scripts"/>
                    </distributionFileList>
                </folder>
                <!-- LIN-X64 - Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfileslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <!-- PPHQ Agent binaries -->
                        <distributionDirectory origin="staging/linux-x64/agent-PG_VERSION_HQAGENT"/>
                        <!-- Installer Scripts -->
                        <distributionDirectory origin="staging/linux-x64/installer"/>
                        <!-- JRE -->
                        <distributionDirectory origin="staging/linux-x64/jre6"/>
                        <!-- Control Scripts -->
                        <distributionDirectory origin="staging/linux-x64/scripts"/>
                    </distributionFileList>
                </folder>
                <!-- MAC Program Files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfilesosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <!-- PPHQ Agent binaries -->
                        <distributionDirectory origin="staging/osx/agent-PG_VERSION_HQAGENT"/>
                        <!-- Installer Scripts -->
                        <distributionDirectory origin="staging/osx/installer"/>
                        <!-- Control Scripts -->
                        <distributionDirectory origin="staging/osx/scripts"/>
                    </distributionFileList>
                </folder>
                <!-- WIN - Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfileswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <!-- PPHQ Agent binaries -->
                        <distributionDirectory origin="staging/windows/agent-PG_VERSION_HQAGENT"/>
                        <!-- JRE -->
                        <distributionDirectory origin="staging/windows/jre6"/>
                        <!-- Control Scripts -->
                        <distributionDirectory origin="staging/windows/scripts"/>
                    </distributionFileList>
                </folder>
            </folderList>
            <!-- WIN: Start Menu -->
            <startMenuShortcutList>
                <!-- Start agent -->
                <startMenuShortcut>
                    <name>Start Agent</name>
                    <runInTerminal>0</runInTerminal>
                    <windowsExec>${installdir}\agent-PG_VERSION_HQAGENT\bin\pphq-agent.bat</windowsExec>
                    <windowsExecArgs>start</windowsExecArgs>
                    <windowsIcon>${installdir}\scripts\images\hqagent-start.ico</windowsIcon>
                </startMenuShortcut>
                <!-- Stop Agent -->
                <startMenuShortcut>
                    <name>Stop Agent</name>
                    <runInTerminal>0</runInTerminal>
                    <windowsExec>${installdir}\agent-PG_VERSION_HQAGENT\bin\pphq-agent.bat</windowsExec>
                    <windowsExecArgs>stop</windowsExecArgs>
                    <windowsIcon>${installdir}\scripts\images\hqagent-stop.ico</windowsIcon>
                </startMenuShortcut>
            </startMenuShortcutList>
        </component>
    </componentList>
    <parameterList>
        <stringParameter name="originalplatform" ask="0" cliOptionShow="0"/>
        <stringParameter name="branding" cliOptionName="branding" ask="0" cliOptionShow="0"/>
        <stringParameter name="serviceaccount" cliOptionName="service-user" ask="1" cliOptionShow="1" default="root"/>
        <stringParameter name="jrehome" cliOptionName="jrehome" default="" ask="1" cliOptionShow="1"/>

        <!-- Install Directory -->
        <directoryParameter name="installdir" description="Installer.Parameter.installdir.description"
            explanation="Installer.Parameter.installdir.explanation" default=""
            value="${default_installdir}" allowEmptyValue="0" ask="yes"
            mustBeWritable="yes" mustExist="0" width="40">
            <ruleList>
                <compareText text="${pphqAgentVersion}" logic="equals" value=""/>
            </ruleList>
            <!-- Validating whether installdir is empty -->
            <validationActionList>
                <actionGroup>
                    <actionList>
                        <setInstallerVariable name="installdir" value="${default_installdir}" />
                        <throwError text="${msg(hqagent.installdir.empty)}"/>
                    </actionList>
                    <ruleList>
                        <compareText text="${installdir}" logic="equals" value=""/>
                    </ruleList>
                </actionGroup>
            </validationActionList>
            <!-- Validating whether installdir contains whitespaces (Linux) -->
            <postShowPageActionList>
                <actionGroup>
                    <actionList>
                        <showWarning text="${msg(hqagent.installdir.error)}"/>
                        <setInstallerVariable name="next_page" value="installdir"/>
                    </actionList>
                    <ruleList>
                        <regExMatch text="${installdir}" logic="does_not_match">
                            <pattern>^/([0-9a-zA-Z_/\.\-]*)$</pattern>
                        </regExMatch>
                        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                    </ruleList>
                </actionGroup>
                <!-- Validating whether installdir is valid (Windows) -->
                <actionGroup>
                    <actionList>
                        <setInstallerVariable name="installdir" value="${default_installdir}" />
                        <showWarning text="${msg(hqagent.installdir.error)}"/>
                        <setInstallerVariable name="next_page" value="installdir"/>
                    </actionList>
                    <ruleList>
                        <regExMatch text="${installdir}" logic="does_not_match">
                            <pattern>^([a-zA-Z]:)\\([0-9a-zA-Z_\\\s\.\-\(\)]*)$</pattern>
                        </regExMatch>
                        <compareText text="${platform_name}" logic="equals" value="windows"/>
                    </ruleList>
                </actionGroup>
            </postShowPageActionList>
        </directoryParameter>

        <!-- Explain that we're using an existing installation directory -->
        <labelParameter name="upgrade" title="${msg(upgrade.existing.installation.title)}"
            description="${msg(upgrade.existing.installation.description)}">
            <ruleList>
                <compareText text="${pphqAgentVersion}" logic="does_not_equal" value=""/>
            </ruleList>
        </labelParameter>

        <!-- PPHQ Agent Configuration Page -->
        <parameterGroup name="pphqserverdetails" title="${msg(pphq.server.title)}" insertAfter="installation"
              explanation="${pphqServerDetailsExplaination}">
            <parameterList>
                <!-- Postgres Plus HQ server Host -->
                <stringParameter name="pphqhost" explanation="" value="" default="${agenthost}"
                    description="${msg(pphqagent.config.pphqhost)}" cliOptionName="pphqhost"
                    allowEmptyValue="1" width="40">
                    <ruleList>
                        <isTrue value="${configure}"/>
                    </ruleList>
                </stringParameter>
                <!-- Postgres Plus HQ server port -->
                <stringParameter name="pphqport" description="${msg(pphqagent.config.pphqport)}" explanation=""
                    value="" default="7080" cliOptionName="pphqport" allowEmptyValue="1" width="40">
                    <ruleList>
                        <isTrue value="${configure}"/>
                    </ruleList>
                </stringParameter>
                <!-- Postgres Plus HQ monitoring Interface User -->
                <stringParameter name="pphquser" description="${msg(pphqagent.config.pphquser)}" explanation=""
                    value="" default="hqadmin" cliOptionName="pphquser" allowEmptyValue="1" width="40"/>
                <!-- Postgres Plus HQ monitoring Interface User Password -->
                <passwordParameter name="pphqpassword" description="${msg(pphqagent.config.pphqpassword)}" explanation=""
                    value="${pphqdefaultpassword}" cliOptionName="pphqpassword" descriptionRetype=""
                    allowEmptyValue="1" askForConfirmation="0" width="40"/>
                <booleanParameter name="pphqsecureconn" description="${msg(pphqagent.config.pphqsecureconn)}" explanation="" value=""
                    default="0" displayStyle="checkbox-left" cliOptionName="secure-connection">
                    <ruleList>
                        <isTrue value="${configure}"/>
                    </ruleList>
                </booleanParameter>
                <!-- Postgres Plus HQ agent Host -->
                <stringParameter name="agenthost" explanation="" value="" default="${agenthost}"
                    description="${msg(pphqagent.config.agenthost)}" cliOptionName="agenthost"
                    allowEmptyValue="1" width="40">
                    <ruleList>
                        <isTrue value="${configure}"/>
                    </ruleList>
                </stringParameter>
            </parameterList>
            <preShowPageActionList>
                <setInstallerVariable name="pphqServerDetailsExplaination"
                      value="${msg(pphqagent.server.details.explaination)}"/>
                <setInstallerVariable name="pphqServerDetailsExplaination"
                      value="${msg(pphqagent.server.details.explaination.upgrade)}">
                    <ruleList>
                        <isFalse value="${configure}"/>
                        <stringTest text="${pphqAgentVersion}" type="not_empty"/>
                    </ruleList>
                </setInstallerVariable>
            </preShowPageActionList>
            <!-- Checking the validity of Postgres Plus HQ Server Details -->
            <validationActionList>
                <stringModify text="${pphqhost}" variable="pphqhost" logic="trim"/>
                <stringModify text="${pphqport}" variable="pphqport" logic="trim"/>
                <stringModify text="${pphquser}" variable="pphquser" logic="trim"/>
				<stringModify text="${agenthost}" variable="agenthost" logic="trim"/>
                <throwError text="${msg(pphq.server.blank.error)}">
                    <ruleEvaluationLogic>or</ruleEvaluationLogic>
                    <ruleList>
                        <stringTest text="${pphqhost}" type="empty"/>
                        <stringTest text="${pphqport}" type="empty"/>
                        <stringTest text="${pphquser}" type="empty"/>
						<stringTest text="${agenthost}" type="empty"/>
                        <stringTest text="${pphqpassword}" type="empty"/>
                    </ruleList>
                </throwError>
                <showProgressDialog title="${msg(pphqagent.server.validating)}"
                    progressText="${msg(pphqagent.update.configuration)}">
                    <actionList>
                        <propertiesFileSet file="${installdir}/agent-PG_VERSION_HQAGENT/conf/agent.properties"
                            key="agent.setup.camIP" value="${pphqhost}"/>
                        <propertiesFileSet file="${installdir}/agent-PG_VERSION_HQAGENT/conf/agent.properties"
                            key="agent.setup.camPort" value="${pphqport}"/>
                        <propertiesFileSet file="${installdir}/agent-PG_VERSION_HQAGENT/conf/agent.properties"
                            key="agent.setup.camSSLPort" value="${pphqport}"/>
                        <propertiesFileSet file="${installdir}/agent-PG_VERSION_HQAGENT/conf/agent.properties"
                            key="agent.setup.camSecure" value="yes"/>
                        <propertiesFileSet file="${installdir}/agent-PG_VERSION_HQAGENT/conf/agent.properties"
                            key="agent.setup.camSecure" value="no">
                            <ruleList>
                                <isFalse value="${pphqsecureconn}"/>
                            </ruleList>
                        </propertiesFileSet>

                        <propertiesFileSet file="${installdir}/agent-PG_VERSION_HQAGENT/conf/agent.properties"
                            key="agent.setup.camLogin" value="${pphquser}"/>
                        <propertiesFileSet file="${installdir}/agent-PG_VERSION_HQAGENT/conf/agent.properties"
                            key="agent.setup.camPword" value="${pphqpassword}"/>
                        <propertiesFileSet file="${installdir}/agent-PG_VERSION_HQAGENT/conf/agent.properties"
                            key="agent.setup.agentIP" value="${agenthost}"/>
                        <propertiesFileSet file="${installdir}/agent-PG_VERSION_HQAGENT/conf/agent.properties"
                            key="agent.setup.agentPort" value="${agentport}"/>
                        <propertiesFileSet file="${installdir}/agent-PG_VERSION_HQAGENT/conf/agent.properties"
                            key="agent.setup.resetupTokens" value="yes"/>
                        <deleteFile path="${installdir}/agent-PG_VERSION_HQAGENT/data/keyvals"
                            abortOnError="0" showMessageOnError="0"/>
                        <deleteFile path="${installdir}/agent-PG_VERSION_HQAGENT/data/tokendata"
                            abortOnError="0" showMessageOnError="0"/>
                        <setInstallerVariable name="errMessage" value=""/>
                        <runProgram program="${installdir}/scripts/agentctl.sh"
                            progressText="${msg(pphqagent.starting)}"
                            programArguments="--no-wait start" workingDirectory="${installdir}/agent-PG_VERSION_HQAGENT/bin"
                            abortOnError="0" showMessageOnError="0">
                            <ruleList>
                                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                            </ruleList>
                        </runProgram>
                        <runProgram program="cscript.exe"
                            programArguments="&quot;${installdir}\scripts\runProgram.vbs&quot; &quot;${installdir}\agent-PG_VERSION_HQAGENT\bin\pphq-agent.bat&quot; start" workingDirectory="${installdir}\agent-PG_VERSION_HQAGENT\bin"
                            abortOnError="0" showMessageOnError="0">
                            <ruleList>
                                <compareText logic="equals" text="${platform_name}" value="windows"/>
                            </ruleList>
                        </runProgram>
                        <setInstallerVariable name="errMessage" value="${program_stderr}"/>
                        <setInstallerVariable name="errCode" value="${program_exit_code}"/>
                        <setInstallerVariable name="strmsg" value=""/>

                        <actionGroup>
                            <actionList>
                                <setInstallerVariable name="strmsg" value="${msg(hqagent.server.validation.fail)}">
                                    <ruleList>
                                        <compareText logic="contains" text="${errMessage}" value="Invalid username"/>
                                    </ruleList>
                                </setInstallerVariable>
                                <runProgram program="${installdir}/scripts/agentctl.sh"
                                    programArguments="--no-wait stop" workingDirectory="${installdir}/agent-PG_VERSION_HQAGENT/bin"
                                    abortOnError="0" showMessageOnError="0">
                                    <ruleList>
                                        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                                    </ruleList>
                                </runProgram>
                                <runProgram program="cscript.exe"
                                    programArguments="&quot;${installdir}\scripts\runProgram.vbs&quot; &quot;${installdir}\agent-PG_VERSION_HQAGENT\bin\pphq-agent.bat&quot; stop" workingDirectory="${installdir}\agent-PG_VERSION_HQAGENT\bin"
                                    abortOnError="0" showMessageOnError="0">
                                    <ruleList>
                                        <compareText logic="equals" text="${platform_name}" value="windows"/>
                                    </ruleList>
                                </runProgram>
                                <throwError text="ERROR: ${strmsg}">
                                    <ruleList>
                                        <stringTest text="${strmsg}" type="not_empty"/>
                                    </ruleList>
                                </throwError>
                                <setInstallerVariable name="errMessage" value="${msg(pphqagent.server.connection.fail)}">
                                    <ruleList>
                                        <compareText logic="contains" text="${errMessage}" value="Unable to connect"/>
                                    </ruleList>
                                </setInstallerVariable>
                                <showQuestion default="yes" text="${msg(pphqagent.start.error.question)}" variable="response"/>
                                <setInstallerVariable name="next_page" value="pphqserverdetails">
                                    <ruleList>
                                        <compareText logic="equals" text="${response}" value="yes"/>
                                    </ruleList>
                                </setInstallerVariable>
                            </actionList>
                            <ruleList>
                                <stringTest text="${errMessage}" type="not_empty"/>
                                <compareText logic="does_not_equal" text="${errCode}" value="0"/>
                            </ruleList>
                        </actionGroup>
                    </actionList>
                </showProgressDialog>
            </validationActionList>
            <postShowPageActionList>
                <actionGroup>
                    <actionList>
                        <iniFileSet file="/etc/postgres-reg.ini" section="pphqagent" key="pphqhost" value="${pphqhost}"/>
                        <iniFileSet file="/etc/postgres-reg.ini" section="pphqagent" key="pphqport" value="${pphqport}"/>
                        <iniFileSet file="/etc/postgres-reg.ini" section="pphqagent" key="secure-connection" value="${pphqsecureconn}"/>
                        <iniFileSet file="/etc/postgres-reg.ini" section="pphqagent" key="pphquser" value="${pphquser}"/>
                        <iniFileSet file="/etc/postgres-reg.ini" section="pphqagent" key="agentport" value="${agentport}"/>
			<iniFileSet file="/etc/postgres-reg.ini" section="pphqagent" key="agenthost" value="${agenthost}"/>
                        <runProgram program="${installdir}/installer/pphqagent/startupcfg.sh"
                            programArguments="0 1 PG_VERSION_HQAGENT &quot;${installdir}&quot; &quot;no-server-present&quot; &quot;${serviceName}&quot; &quot;root&quot; &quot;${serviceaccount}&quot;"
                            progressText="${msg(progress.text.startup.config)}"
                            workingDirectory="${installdir}/installer/pphq"
                            abortOnError="0" showMessageOnError="0">
                            <ruleList>
                                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                            </ruleList>
                        </runProgram>
                    </actionList>
                    <ruleList>
                        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                    </ruleList>
                </actionGroup>
                <actionGroup>
                    <actionList>
                        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Postgres Plus HQ Agent" name="pphqhost" value="${pphqhost}"/>
                        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Postgres Plus HQ Agent" name="pphqport" value="${pphqport}"/>
                        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Postgres Plus HQ Agent" name="secure-connection" value="${pphqsecureconn}"/>
                        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Postgres Plus HQ Agent" name="pphquser" value="${pphquser}"/>
                        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Postgres Plus HQ Agent" name="agentport" value="${agentport}"/>
						<registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Postgres Plus HQ Agent" name="agenthost" value="${agenthost}"/>
                    </actionList>
                    <ruleList>
                        <compareText logic="equals" text="${platform_name}" value="windows"/>
                    </ruleList>
                </actionGroup>
            </postShowPageActionList>
        </parameterGroup>
    </parameterList>
</project>
