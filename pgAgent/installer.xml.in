<project>

  <!-- Package details -->
  <shortName>pgagent</shortName>
  <fullName>pgAgent</fullName>
  <version>PG_VERSION_PGAGENT-PG_BUILDNUM_PGAGENT</version>

  <!-- product Specific Options -->
  <productComments>${product_fullname} ${productVersion}, packaged by EnterpriseDB</productComments>
  <productDisplayName>${product_fullname} ${productVersion}</productDisplayName>
  <productUrlHelpLink>http://www.enterprisedb.com</productUrlHelpLink>
  <productUrlInfoAbout>http://www.enterprisedb.com</productUrlInfoAbout>
  <startMenuGroupName></startMenuGroupName>

  <!-- The options are used for RPM registration -->
  <description>${product_shortname} ${productVersion}, packaged by EnterpriseDB</description>
  <summary>${msg(install.summary)}</summary>
  <vendor>EnterpriseDB</vendor>
  <release>1</release>

  <!-- Installer Size -->
  <width>550</width>
  <height>400</height>

  <!-- Misc options -->
  <installerFilename>${product_shortname}-${product_version}-${platform_name}.${platform_exec_suffix}</installerFilename>
  <compressionAlgorithm>lzma</compressionAlgorithm>
  <enableRollback>0</enableRollback>
  <requireInstallationByRootUser>${admin_rights}</requireInstallationByRootUser>
  <saveRelativePaths>1</saveRelativePaths>
  <outputDirectory>../output</outputDirectory>
  <unattendedModeUI>minimal</unattendedModeUI>
  <uninstallerName>uninstall-${product_shortname}</uninstallerName>
  <uninstallerDirectory>${installdir}</uninstallerDirectory>
  <installationLogFile>${system_temp_directory}/install-${product_shortname}.log</installationLogFile>
  <uninstallationLogFile>${system_temp_directory}/uninstall-${product_shortname}.log</uninstallationLogFile>
  <allowWindowResize>1</allowWindowResize>
  <windowsSoftwareRegistryPrefix/>
  <replaceLockedFilesOnReboot>1</replaceLockedFilesOnReboot>

  <!-- Images -->
  <disableSplashScreen>1</disableSplashScreen>
  <leftImage>../resources/pg-side.png</leftImage>

  <!-- i18n files for the UI -->
  <allowedLanguages>en</allowedLanguages>
  <customLanguageFileList>
    <language code="en" encoding="iso8859-1" file="i18n/en.lng"/>
  </customLanguageFileList>

  <preShowHelpActionList>
     <!-- Set the default values -->
    <setInstallerVariable name="defaultpghost" value="localhost"/>
    <setInstallerVariable name="defaultpguser" value="postgres"/>
    <setInstallerVariable name="defaultpgport" value="5432"/>
    <setInstallerVariable name="defaultpgdbname" value="postgres"/>
    <!-- Set the installation directory for different platform -->
    <setInstallerVariable name="defaultinstalldir" value="${platform_install_prefix}\pgAgent">
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
      </ruleList>
    </setInstallerVariable>
    <setInstallerVariable name="defaultinstalldir" value="${platform_install_prefix}/pgAgent">
      <ruleList>
        <compareText logic="contains" text="${platform_name}" value="linux"/>
      </ruleList>
    </setInstallerVariable>
    <setInstallerVariable name="defaultinstalldir" value="/Library/pgAgent">
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="osx"/>
      </ruleList>
    </setInstallerVariable>
    <setInstallerVariable name="defaultsyspassword" value=""/>
    <setInstallerVariable name="defaultpgpassword" value=""/>
  </preShowHelpActionList>

  <!-- Prebuild Actions -->
  <preBuildActionList>
    <setInstallerVariable name="originalplatform" value="${platform_name}"/>
    <setInstallerVariable name="originalplatform" value="linux-x32">
      <ruleList>
        <compareText text="${platform_name}" value="linux"/>
      </ruleList>
    </setInstallerVariable>
    <setInstallerVariable name="defaultpgpassword" value=""/>
  </preBuildActionList>

  <!-- Initialisation actions -->
  <initializationActionList>
    <setInstallerVariable name="systempassword" value="postgres" >
      <ruleList>
	  <compareText text="${platform_name}" logic="does_not_equal" value="windows"/>
      </ruleList>
    </setInstallerVariable>

    <setInstallerVariable name="pgAgentVersion" persist="0" value=""/>
    <setInstallerVariable name="project.parameter(extract_mode).ask" value="0"/>
    <setInstallerVariable name="productVersion" persist="1" value="PG_VERSION_PGAGENT"/>

    <!-- Abort Installation as trying to  run a 32-bit installer on 64-bit machine -->
    <throwError>
      <customErrorMessage>${msg(platform.not.match)}</customErrorMessage>
      <text>Unknown Error</text>
      <ruleList>
        <platformTest type="linux-x64"/>
        <compareText text="${originalplatform}" value="linux-x32"/>
      </ruleList>
    </throwError>

    <!-- Set the default values -->
    <setInstallerVariable name="defaultpghost" value="localhost"/>
    <setInstallerVariable name="defaultpguser" value="postgres"/>
    <setInstallerVariable name="defaultpgport" value="5432"/>
    <setInstallerVariable name="defaultpgdbname" value="postgres"/>

    <setInstallerVariableFromRegEx>
      <name>pgagent_installer_schema_version</name>
      <text>${productVersion}</text>
      <pattern>^([0-9]*).(.*)$</pattern>
      <substitution>\1</substitution>
    </setInstallerVariableFromRegEx>

    <!-- Set the default postgres password, to be used only in unnattended mode -->
    <setInstallerVariable name="defaultpgpassword" value=""/>
    <setInstallerVariable name="defaultpgpassword" value="postgres">
      <ruleList>
        <compareText logic="equals" text="${installer_ui}" value="unattended"/>
      </ruleList>
    </setInstallerVariable>

    <!-- Set the default system password, to be used only in unnattended mode -->
    <setInstallerVariable name="defaultsyspassword" value=""/>
    <setInstallerVariable name="defaultsyspassword" value="postgres">
      <ruleList>
        <compareText logic="equals" text="${installer_ui}" value="unattended"/>
      </ruleList>
    </setInstallerVariable>

    <!-- Set the system user, to be used only in unnattended mode -->
    <setInstallerVariable name="systemuser" value=""/>
    <setInstallerVariable name="systemuser" value="postgres">
      <ruleList>
        <compareText logic="equals" text="${installer_ui}" value="unattended"/>
      </ruleList>
    </setInstallerVariable>

    <!-- Set the installation directory for different platform -->
    <setInstallerVariable name="defaultinstalldir" value="${platform_install_prefix}\pgAgent">
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
      </ruleList>
    </setInstallerVariable>
    <setInstallerVariable name="defaultinstalldir" value="${platform_install_prefix}/pgAgent">
      <ruleList>
        <compareText logic="contains" text="${platform_name}" value="linux"/>
      </ruleList>
    </setInstallerVariable>
    <setInstallerVariable name="defaultinstalldir" value="/Library/pgAgent">
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="osx"/>
      </ruleList>
    </setInstallerVariable>
  </initializationActionList>

  <!-- Preinstallation actions -->
  <preInstallationActionList>
       <actionGroup>
      <actionList>
        <setInstallerVariable name="branding" value=""/>
        <!-- Do not create uninstaller in case of extract-only mode -->
        <setInstallerVariable name="createUninstaller" value="0" persist="1"/>
        <componentSelection select="configuration"/>
      </actionList>
      <ruleList>
        <isTrue value="${extract_mode}"/>
      </ruleList>
    </actionGroup>

    <!-- Do not perform the below actions in case of extract-only mode -->
    <actionGroup>
      <actionList>
        <!-- Abort installation if not super-user and not running in extract-only mode-->
        <throwError text="${msg(Installer.Warning.RootPrivileges)}">
          <ruleList>
            <isFalse value="${installer_is_root_install}"/>
          </ruleList>
        </throwError>
        <setInstallerVariable name="project.windowsSoftwareRegistryPrefix" value="${project.vendor}\${project.fullName}"/>

        <!-- Installing vcredist on windows -->
        <actionGroup>
          <actionList>
            <unpackFile component="configuration"
               destination="${system_temp_directory}\vcredist_x86.exe"
               folder="vcredistwindows" origin="vcredist_x86.exe"/>
            <runProgram program="${system_temp_directory}\vcredist_x86.exe"
               programArguments="/q" workingDirectory="${windir}"
               abortOnError="0" showMessageOnError="0"/>
          </actionList>
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
          </ruleList>
        </actionGroup>

        <!-- Creates the ini file if not exits -->
        <touchFile path="/etc/postgres-reg.ini">
          <ruleList>
            <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
          </ruleList>
        </touchFile>
        <setInstallerVariable name="defaultinstalldir" value="${installdir}"/>

        <!-- LIN & MAC : Check Previous Installation of pgAgent -->
        <actionGroup>
          <actionList>
            <iniFileGet file="/etc/postgres-reg.ini" section="pgAgent" key="Version" variable="pgAgentVersion"/>
          </actionList>
          <ruleList>
            <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
          </ruleList>
        </actionGroup>

        <!-- LIN & MAC : Set the installation directory in case of re-install/upgrade -->
        <actionGroup>
          <actionList>
            <iniFileGet file="/etc/postgres-reg.ini" section="pgAgent" key="InstallationDirectory" variable="installdir"/>
            <iniFileGet file="/etc/postgres-reg.ini" section="pgAgent" key="ServiceManager" variable="systemuser"/>
            <iniFileGet file="/etc/postgres-reg.ini" section="pgAgent" key="PGUSER" variable="pguser"/>
            <iniFileGet file="/etc/postgres-reg.ini" section="pgAgent" key="PGPORT" variable="pgport"/>
            <iniFileGet file="/etc/postgres-reg.ini" section="pgAgent" key="PGHOST" variable="pghost"/>
            <iniFileGet file="/etc/postgres-reg.ini" section="pgAgent" key="PGDATABASE" variable="pgdbname"/>
          </actionList>
          <ruleList>
            <compareText logic="does_not_equal" text="${pgAgentVersion}" value=""/>
            <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
          </ruleList>
        </actionGroup>

        <!-- WIN : Check Previous Installation of pgAgent -->
        <actionGroup>
          <actionList>
            <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgAgent" name="Version" variable="pgAgentVersion"/>
          </actionList>
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
          </ruleList>
        </actionGroup>

        <!-- WIN : Set the installation directory in case of re-install/upgrade -->
        <actionGroup>
          <actionList>
            <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgAgent" name="Location" variable="installdir"/>
            <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgAgent" name="ServiceManager" variable="systemuser"/>
            <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgAgent" name="PGUSER" variable="pguser"/>
            <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgAgent" name="PGHOST" variable="pghost"/>
            <registryGet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgAgent" name="PGPORT" variable="pgport"/>
          </actionList>
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
            <compareText logic="does_not_equal" text="${pgAgentVersion}" value=""/>
          </ruleList>
        </actionGroup>

	<setInstallerVariable name="optionRequired" value="systempassword" />
	<throwError text="${msg(Installer.CustomError.Upgrade.CommandLineOptionsNotPresent)}" >
	  <ruleList>
	       <compareText text="${installer_ui}" logic="equals" value="unattended" />
	       <compareText text="${systempassword}" logic="equals" value="" />
	       <isFalse value="${extract_mode}" />
               <compareText>
                    <text>${pgAgentVersion}</text>
                    <logic>does_not_equal</logic>
                    <value/>
               </compareText>
	  </ruleList>
	</throwError>

        <actionGroup>
            <actionList>
                <setInstallerVariable name="installationType" value="upgrade" />
            </actionList>
            <ruleList>
                <compareText>
                    <text>${pgAgentVersion}</text>
                    <logic>does_not_equal</logic>
                    <value/>
                </compareText>
            </ruleList>
        </actionGroup>

        <!-- Creating a temporary directory -->
        <createDirectory path="${system_temp_directory}/${product_fullname}"/>

        <!-- Create temporary directory -->
        <createDirectory path="${system_temp_directory}/${product_fullname}/bin"/>

        <actionGroup>
           <actionList>
            <!-- LIN: Unpack psql and its shared libraries -->
            <unpackFile>
              <component>pgAgent</component>
              <destination>${system_temp_directory}/${product_fullname}/bin/psql</destination>
              <folder>programfileslinux</folder>
              <origin>bin/psql</origin>
              <ruleList>
                <compareText logic="equals" text="${platform_name}" value="linux"/>
              </ruleList>
            </unpackFile>
            <unpackDirectory>
              <component>pgAgent</component>
              <destination>${system_temp_directory}/${product_fullname}/lib</destination>
              <folder>libfileslinux</folder>
              <origin>lib</origin>
              <ruleList>
                <compareText logic="equals" text="${platform_name}" value="linux"/>
              </ruleList>
            </unpackDirectory>

            <!-- LIN-x64: Unpack psql and its shared libraries -->
            <unpackFile>
              <component>pgAgent</component>
              <destination>${system_temp_directory}/${product_fullname}/bin/psql</destination>
              <folder>programfileslinux-x64</folder>
              <origin>bin/psql</origin>
              <ruleList>
                <compareText logic="equals" text="${platform_name}" value="linux-x64"/>
              </ruleList>
            </unpackFile>
            <unpackDirectory>
              <component>pgAgent</component>
              <destination>${system_temp_directory}/${product_fullname}/lib</destination>
              <folder>libfileslinux-x64</folder>
              <origin>lib</origin>
              <ruleList>
                <compareText logic="equals" text="${platform_name}" value="linux-x64"/>
              </ruleList>
            </unpackDirectory>

            <!-- MAC: Unpack psql and its shared libraries -->
            <unpackFile>
              <component>pgAgent</component>
              <destination>${system_temp_directory}/${product_fullname}/bin/psql</destination>
              <folder>programfilesosx</folder>
              <origin>bin/psql</origin>
              <ruleList>
                <compareText logic="equals" text="${platform_name}" value="osx"/>
              </ruleList>
            </unpackFile>
            <unpackDirectory>
              <component>pgAgent</component>
              <destination>${system_temp_directory}/${product_fullname}/lib</destination>
              <folder>libfilesosx</folder>
              <origin>lib</origin>
              <ruleList>
                <compareText logic="equals" text="${platform_name}" value="osx"/>
              </ruleList>
            </unpackDirectory>

            <!-- WIN: Unpack psql and its shared libraries -->
            <unpackFile>
              <component>pgAgent</component>
              <destination>${system_temp_directory}\${product_fullname}\bin\psql.exe</destination>
              <folder>libfileswindows</folder>
              <origin>bin\psql.exe</origin>
              <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
              </ruleList>
            </unpackFile>
            <unpackDirectory>
              <component>pgAgent</component>
              <destination>${system_temp_directory}\${product_fullname}</destination>
              <folder>libfileswindows</folder>
              <origin>bin</origin>
              <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
              </ruleList>
            </unpackDirectory>
           </actionList>
	</actionGroup>

        <actionGroup>
           <actionList>
              <setEnvironmentVariable name="PGHOST" value="${pghost}"/>
              <setEnvironmentVariable name="PGUSER" value="${pguser}"/>
              <setEnvironmentVariable name="PGPASSWORD" value="${pgpassword}"/>
              <setEnvironmentVariable name="PGPORT" value="${pgport}"/>
              <setEnvironmentVariable name="PGDATABASE" value="" />
              <setEnvironmentVariable name="LD_LIBRARY_PATH" value="${installdir}/lib"/>
              <setInstallerVariable name="pgdbname" value="" />
              <setInstallerVariable name="connection" value="" />

              <setInstallerVariable name="psql_executable" value="${system_temp_directory}/${product_fullname}/bin/psql"/>
              <setInstallerVariable name="psql_executable" value="${system_temp_directory}\${product_fullname}\bin\psql.exe">
               <ruleList>
                 <compareText logic="equals" text="${platform_name}" value="windows"/>
               </ruleList>
              </setInstallerVariable>
              <foreach variables="dbname">
                <values>postgres edb template1</values>
                <actionList>
                  <setInstallerVariableFromScriptOutput>
                    <exec>${psql_executable}</exec>
                    <execArgs>-l -d ${dbname}</execArgs>
                    <name>connection</name>
                    <workingDirectory>${installdir}/bin</workingDirectory>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                    <ruleList>
                      <compareText logic="equals" text="${connection}" value=""/>
                    </ruleList>
                  </setInstallerVariableFromScriptOutput>
                  <stringModify text="${connection}" variable="connection" logic="trim"/>
                  <setInstallerVariable name="pgdbname" value="${dbname}">
                    <ruleList>
                      <compareText logic="does_not_equal" text="${connection}" value=""/>
                      <compareText logic="equals" text="${pgdbname}" value=""/>
                    </ruleList>
                  </setInstallerVariable>
                </actionList>
              </foreach>
              <throwError text="${program_stderr}">
                <ruleList>
                  <compareText logic="equals" text="${connection}" value=""/>
                </ruleList>
              </throwError>
              <setEnvironmentVariable name="PGDATABASE" value="${pgdbname}"/>

              <setInstallerVariableFromScriptOutput name="user_has_permission"
                  abortOnError="0" showMessageOnError="0"
                  workingDirectory="${installdir}/bin">
                <exec>${psql_executable}</exec>
                <execArgs>-t -A -c "select CASE WHEN has_database_privilege(d.oid, 'CREATE') THEN 1 ELSE 0 END FROM pg_catalog.pg_database d WHERE d.datname=current_database()"</execArgs>
              </setInstallerVariableFromScriptOutput>
              <stringModify text="${user_has_permission}" variable="user_has_permission" logic="trim"/>

              <throwError text="${msg(pgagent.user.not.have.permission)}">
                <ruleList>
                  <isFalse value="${user_has_permission}"/>
                </ruleList>
              </throwError>

        <actionGroup>
          <actionList>
            <!-- Check if plpgsql exists -->
            <setInstallerVariableFromScriptOutput>
              <exec>${psql_executable}</exec>
              <execArgs>-t -A -c "SELECT lanname FROM pg_language WHERE lanname='plpgsql'"</execArgs>
              <name>plpgsql_exist</name>
              <workingDirectory>${system_temp_directory}/${product_fullname}</workingDirectory>
              <showMessageOnError>0</showMessageOnError>
              <abortOnError>0</abortOnError>
            </setInstallerVariableFromScriptOutput>
            <stringModify text="${plpgsql_exist}" variable="plpgsql_exist" logic="trim"/>

            <!-- Check for existing pgagent schema -->
            <setInstallerVariableFromScriptOutput>
              <exec>${psql_executable}</exec>
              <execArgs>-t -A -c "SELECT has_schema_privilege('pgagent', 'USAGE')"</execArgs>
              <name>pgagent_schema_exist</name>
              <workingDirectory>${system_temp_directory}/${product_fullname}</workingDirectory>
              <showMessageOnError>0</showMessageOnError>
              <abortOnError>0</abortOnError>
            </setInstallerVariableFromScriptOutput>
            <stringModify text="${pgagent_schema_exist}" variable="pgagent_schema_exist" logic="trim"/>

            <!-- Check for pgagent_schema_version function exist -->
            <setInstallerVariableFromScriptOutput>
              <exec>${psql_executable}</exec>
              <execArgs>-t -A -c "SELECT COUNT(*) FROM pg_proc WHERE proname = 'pgagent_schema_version' AND pronamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'pgagent') AND prorettype = (SELECT oid FROM pg_type WHERE typname = 'int2') AND proargtypes = ''"</execArgs>
              <name>pgagent_schema_version_function_exist</name>
              <workingDirectory>${system_temp_directory}/${product_fullname}</workingDirectory>
              <showMessageOnError>0</showMessageOnError>
              <abortOnError>0</abortOnError>
              <ruleList>
                <compareText logic="does_not_equal" text="${pgagent_schema_exist}" value=""/>
              </ruleList>
            </setInstallerVariableFromScriptOutput>
            <stringModify text="${pgagent_schema_version_function_exist}" variable="pgagent_schema_version_function_exist" logic="trim"/>

            <!-- Check for the current version of the pgagent schema -->
            <setInstallerVariableFromScriptOutput>
              <exec>${psql_executable}</exec>
              <execArgs>-t -A -c "SELECT pgagent.pgagent_schema_version()"</execArgs>
              <name>pgagent_current_schema_version</name>
              <workingDirectory>${system_temp_directory}/${product_fullname}</workingDirectory>
              <showMessageOnError>0</showMessageOnError>
              <abortOnError>0</abortOnError>
              <ruleList>
                <compareText logic="does_not_equal" text="${pgagent_schema_exist}" value=""/>
                <compareText logic="equals" text="${pgagent_schema_version_function_exist}" value="1"/>
              </ruleList>
            </setInstallerVariableFromScriptOutput>
            <stringModify text="${pgagent_current_schema_version}" variable="pgagent_current_schema_version" logic="trim"/>

          </actionList>
        </actionGroup>

        <!-- For pgagent schema already exists -->
        <actionGroup>
          <actionList>

            <!-- 1. pgagent schema exist and pgagent_schema_version function does not exist -->
            <showQuestion text="${msg(pgagent.schema.older.exist)}" variable="upgrade_schema">
              <ruleList>
                <compareText logic="does_not_equal" text="${pgagent_schema_version_function_exist}" value="1"/>
              </ruleList>
            </showQuestion>

            <!-- 2. pgagnet schema exist and pgagent_schema_version function exists,
                    but current_schema_version less than the installer_schema_version -->
            <showQuestion text="${msg(pgagent.schema.older.version.exist)}" variable="upgrade_schema">
              <ruleList>
                <compareText logic="equals" text="${pgagent_schema_version_function_exist}" value="1"/>
                <compareValues logic="less" value1="${pgagent_current_schema_version}" value2="${pgagent_installer_schema_version}"/>
              </ruleList>
            </showQuestion>

            <!-- 3. pgagnet schema exist and pgagent_schema_version function exists,
                    and current_schema_version matches the installer_schema_version -->
            <showInfo text="${msg(pgagent.schema.found)}">
              <ruleList>
                <compareText logic="equals" text="${pgagent_schema_version_function_exist}" value="1"/>
                <compareValues logic="equals" value1="${pgagent_current_schema_version}" value2="${pgagent_installer_schema_version}"/>
              </ruleList>
            </showInfo>

            <!-- 4. pgagnet schema exist and pgagent_schema_version function exists,
                    but current_schema_version greater than the installer_schema_version -->
            <actionGroup>
              <actionList>
                <throwError text="${msg(pgagent.schema.newer.version.exist)}"/>
                <setInstallerVariable name="next_page" value="pgdetails"/>
              </actionList>
              <ruleList>
                <compareText logic="equals" text="${pgagent_schema_version_function_exist}" value="1"/>
                <compareValues logic="greater" value1="${pgagent_current_schema_version}" value2="${pgagent_installer_schema_version}"/>
              </ruleList>
            </actionGroup>

          </actionList>
          <ruleList>
            <compareText logic="does_not_equal" text="${pgagent_schema_exist}" value=""/>
          </ruleList>
        </actionGroup>

           </actionList>
           <ruleList>
              <compareText logic="equals" text="${installer_ui}" value="unattended"/>
           </ruleList>
        </actionGroup>

	<!-- In case of unattended mode change value of pgagent_schema_exist to install
	1. If it is unattended mode.
	2. If this varriable is not passwed through command line.
	3. If pgagent_schema does not exist.
	-->
        <actionGroup>
          <actionList>
            <setInstallerVariable name="schema_in_unattended" value="install" persist="1"/>
          </actionList>
          <ruleList>
	    <compareText logic="equals" text="${installer_ui}" value="unattended"/>
            <compareText logic="equals" text="${schema_in_unattended}" value=""/>
            <compareText logic="equals" text="${pgagent_schema_exist}" value=""/>
          </ruleList>
        </actionGroup>

	<!-- In case of unattended mode change value of pgagent_schema_exist to upgrade
	1. If it is unattended mode.
	2. If this varriable is not passwed through command line.
	3. If pgagent_schema exists.
	-->
        <actionGroup>
          <actionList>
            <setInstallerVariable name="schema_in_unattended" value="upgrade" persist="1"/>
          </actionList>
          <ruleList>
	    <compareText logic="equals" text="${installer_ui}" value="unattended"/>
            <compareText logic="equals" text="${schema_in_unattended}" value=""/>
            <compareText logic="does_not_equal" text="${pgagent_schema_exist}" value=""/>
          </ruleList>
        </actionGroup>


        <!-- LIN : Stop the pgAgent Service -->
        <runProgram>
          <program>/etc/init.d/pgagent</program>
          <programArguments>stop</programArguments>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
          <ruleList>
            <compareText logic="contains" text="${platform_name}" value="linux"/>
            <compareText logic="does_not_equal" text="${pgAgentVersion}" value=""/>
          </ruleList>
        </runProgram>

        <!-- WIN : Stop the pgAgent Service -->
        <stopWindowsService>
          <serviceName>pgagent</serviceName>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
          <customErrorMessage>${msg(error.stop.pgagent)}</customErrorMessage>
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
            <compareText logic="does_not_equal" text="${pgAgentVersion}" value=""/>
          </ruleList>
        </stopWindowsService>

        <!-- MAC: Stop the pgAgent Service -->
        <runProgram>
          <program>launchctl</program>
          <programArguments>unload /Library/LaunchDaemons/com.edb.launchd.pgagent.plist</programArguments>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="osx"/>
            <compareText logic="does_not_equal" text="${pgAgentVersion}" value=""/>
          </ruleList>
        </runProgram>

      </actionList>
      <ruleList>
        <isFalse value="${extract_mode}"/>
      </ruleList>
    </actionGroup>
  </preInstallationActionList>

  <!-- Postinstallation actions -->
  <postInstallationActionList>

    <!-- Do not perform the below actions in case of extract-only mode -->
    <actionGroup>
      <actionList>
        <!-- LIN & MAC : Write the pgAgent Info to INI File -->
        <actionGroup>
          <actionList>
            <iniFileSet file="/etc/postgres-reg.ini" section="pgAgent" key="Description" value="${msg(install.summary)}"/>
            <iniFileSet file="/etc/postgres-reg.ini" section="pgAgent" key="InstallationDirectory" value="${installdir}"/>
            <iniFileSet file="/etc/postgres-reg.ini" section="pgAgent" key="Version" value="${product_version}"/>
            <iniFileSet file="/etc/postgres-reg.ini" section="pgAgent" key="ServiceManager" value="${systemuser}"/>
            <iniFileSet file="/etc/postgres-reg.ini" section="pgAgent" key="PGUSER" value="${pguser}"/>
            <iniFileSet file="/etc/postgres-reg.ini" section="pgAgent" key="PGHOST" value="${pghost}"/>
            <iniFileSet file="/etc/postgres-reg.ini" section="pgAgent" key="PGPORT" value="${pgport}"/>
            <iniFileSet file="/etc/postgres-reg.ini" section="pgAgent" key="PGDATABASE" value="${pgdbname}"/>
          </actionList>
          <ruleList>
            <compareText text="${platform_name}" logic="does_not_equal" value="windows"/>
          </ruleList>
        </actionGroup>

        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgAgent" name="Description" value="${msg(install.summary)}"/>
        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgAgent" name="Location" value="${installdir}"/>
        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgAgent" name="Version" value="${product_version}"/>
        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgAgent" name="ServiceManager" value="${systemuser}"/>
        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgAgent" name="PGUSER" value="${pguser}"/>
        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgAgent" name="PGHOST" value="${pghost}"/>
        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgAgent" name="PGPORT" value="${pgport}"/>
        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgAgent" name="PGDATABASE" value="${pgdbname}"/>

        <!-- Create the user account with which pgAgent will run-->
        <runProgram>
          <program>${installdir}/installer/pgAgent/createuser.sh</program>
          <programArguments>"${systemuser}" "${installdir}"</programArguments>
          <progressText>${msg(progress.text.creating.user)}</progressText>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
          <ruleList>
            <compareText text="${platform_name}" logic="does_not_equal" value="windows"/>
            <compareText text="${pgAgentVersion}" logic="equals" value=""/>
          </ruleList>
        </runProgram>

        <!-- WIN : Create user, if not exists -->
        <runProgram>
          <program>${installdir}\installer\pgAgent\createuser.exe</program>
          <!-- The dot at the beginning of the arguments is the domain -->
          <programArguments>. "${systemuser}" "${systempassword.password}"</programArguments>
          <progressText>${msg(progress.text.creating.user)}</progressText>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
            <compareText logic="equals" text="${pgAgentVersion}" value=""/>
            <compareText logic="equals" text="${installer_ui}" value="unattended"/>
          </ruleList>
        </runProgram>

        <throwError>
          <text>${msg(script.command.line.error)}</text>
          <ruleList>
            <compareText logic="equals" text="127" value="${program_exit_code}"/>
            <compareText logic="equals" text="${pgAgentVersion}" value=""/>
          </ruleList>
        </throwError>
        <throwError>
          <text>${msg(error.could.not.create.user)}</text>
          <ruleList>
            <compareText logic="equals" text="1" value="${program_exit_code}"/>
            <compareText logic="equals" text="${pgAgentVersion}" value=""/>
          </ruleList>
        </throwError>

        <!-- Create pgagent schema if not exists -->
        <actionGroup>
          <actionList>
           <!-- Create plpgsql, if not exists -->
            <runProgram>
              <program>${installdir}/bin/psql</program>
              <programArguments>-t -c "CREATE LANGUAGE plpgsql"</programArguments>
              <progressText>${msg(progress.text.creating.plpgsql)}</progressText>
              <abortOnError>0</abortOnError>
              <showMessageOnError>0</showMessageOnError>
              <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                <compareText logic="equals" text="${plpgsql_exist}" value=""/>
                <compareText logic="does_not_equal" text="${installer_ui}" value="unattended"/>
              </ruleList>
            </runProgram>

            <runProgram>
              <program>${installdir}\bin\psql.exe</program>
              <programArguments>-t -c "CREATE LANGUAGE plpgsql"</programArguments>
              <progressText>${msg(progress.text.creating.plpgsql)}</progressText>
              <abortOnError>0</abortOnError>
              <showMessageOnError>0</showMessageOnError>
              <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
                <compareText logic="equals" text="${plpgsql_exist}" value=""/>
                <compareText logic="does_not_equal" text="${installer_ui}" value="unattended"/>
              </ruleList>
            </runProgram>

            <!-- Create pgagent schema -->
            <runProgram>
              <program>${installdir}/bin/psql</program>
              <programArguments>-t -f "${installdir}/share/pgagent.sql"</programArguments>
              <progressText>${msg(progress.text.creating.pgagentschema)}</progressText>
              <abortOnError>0</abortOnError>
              <showMessageOnError>0</showMessageOnError>
              <workingDirectory>${installdir}/bin</workingDirectory>
              <ruleList>
                <compareText logic="equals" text="${pgagent_schema_exist}" value=""/>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                <compareText logic="does_not_equal" text="${installer_ui}" value="unattended"/>
              </ruleList>
            </runProgram>
            <runProgram>
              <program>${installdir}\bin\psql.exe</program>
              <programArguments>-t -f "${installdir}\share\pgagent.sql"</programArguments>
              <progressText>${msg(progress.text.creating.pgagentschema)}</progressText>
              <abortOnError>0</abortOnError>
              <showMessageOnError>0</showMessageOnError>
              <workingDirectory>${installdir}\bin</workingDirectory>
              <ruleList>
                <compareText logic="equals" text="${pgagent_schema_exist}" value=""/>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
                <compareText logic="does_not_equal" text="${installer_ui}" value="unattended"/>
              </ruleList>
            </runProgram>


            <!-- Upgrade schema pgagent -->
            <runProgram>
              <program>${installdir}/bin/psql</program>
              <programArguments>-t -f "${installdir}/share/pgagent_upgrade.sql"</programArguments>
              <progressText>${msg(progress.text.upgrading.pgagentschema)}</progressText>
              <abortOnError>0</abortOnError>
              <showMessageOnError>0</showMessageOnError>
              <workingDirectory>${installdir}/bin</workingDirectory>
              <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                <compareText logic="does_not_equal" text="${pgagent_schema_exist}" value=""/>
                <compareText logic="equals" text="${upgrade_schema}" value="yes"/>
                <compareText logic="does_not_equal" text="${pgagent_installer_schema_version}" value="${pgagent_current_schema_version}"/>
                <compareText logic="does_not_equal" text="${installer_ui}" value="unattended"/>
              </ruleList>
            </runProgram>
            <runProgram>
              <program>${installdir}\bin\psql.exe</program>
              <programArguments>-t -f "${installdir}\share\pgagent_upgrade.sql"</programArguments>
              <progressText>${msg(progress.text.upgrading.pgagentschema)}</progressText>
              <abortOnError>0</abortOnError>
              <showMessageOnError>0</showMessageOnError>
              <workingDirectory>${installdir}/bin</workingDirectory>
              <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
                <compareText logic="does_not_equal" text="${pgagent_schema_exist}" value=""/>
                <compareText logic="equals" text="${upgrade_schema}" value="yes"/>
                <compareText logic="does_not_equal" text="${pgagent_installer_schema_version}" value="${pgagent_current_schema_version}"/>
                <compareText logic="does_not_equal" text="${installer_ui}" value="unattended"/>
              </ruleList>
            </runProgram>

            <!-- Inform user about configuring pgagent schema manually -->
            <showInfo text="${msg(info.pgagent.schema.manual.upgrade)}">
              <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                <compareText logic="does_not_equal" text="${pgagent_schema_exist}" value=""/>
                <compareText logic="does_not_equal" text="${upgrade_schema}" value="yes"/>
                <compareText logic="does_not_equal" text="${pgagent_installer_schema_version}" value="${pgagent_current_schema_version}"/>
                <compareText logic="does_not_equal" text="${installer_ui}" value="unattended"/>
              </ruleList>
            </showInfo>
            <showInfo text="${msg(info.pgagent.schema.manual.upgrade.windows)}">
              <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
                <compareText logic="does_not_equal" text="${pgagent_schema_exist}" value=""/>
                <compareText logic="does_not_equal" text="${upgrade_schema}" value="yes"/>
                <compareText logic="does_not_equal" text="${pgagent_installer_schema_version}" value="${pgagent_current_schema_version}"/>
                <compareText logic="does_not_equal" text="${installer_ui}" value="unattended"/>
              </ruleList>
            </showInfo>

          </actionList>
        </actionGroup>

        <!-- Create pgagent schema in unattended mode -->
        <actionGroup>
          <actionList>
            <!-- Create plpgsql, if not exists -->
            <runProgram>
              <program>${installdir}/bin/psql</program>
              <programArguments>-t -c "CREATE LANGUAGE plpgsql"</programArguments>
              <progressText>${msg(progress.text.creating.plpgsql)}</progressText>
              <abortOnError>0</abortOnError>
              <showMessageOnError>0</showMessageOnError>
              <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                <compareText logic="equals" text="${schema_in_unattended}" value="install"/>
                <compareText logic="equals" text="${installer_ui}" value="unattended"/>
              </ruleList>
            </runProgram>

            <runProgram>
              <program>${installdir}\bin\psql.exe</program>
              <programArguments>-t -c "CREATE LANGUAGE plpgsql"</programArguments>
              <progressText>${msg(progress.text.creating.plpgsql)}</progressText>
              <abortOnError>0</abortOnError>
              <showMessageOnError>0</showMessageOnError>
              <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
                <compareText logic="equals" text="${schema_in_unattended}" value="install"/>
                <compareText logic="equals" text="${installer_ui}" value="unattended"/>
              </ruleList>
            </runProgram>

            <!-- Create pgagent schema -->
            <runProgram>
              <program>${installdir}/bin/psql</program>
              <programArguments>-t -f "${installdir}/share/pgagent.sql"</programArguments>
              <progressText>${msg(progress.text.creating.pgagentschema)}</progressText>
              <abortOnError>0</abortOnError>
              <showMessageOnError>0</showMessageOnError>
              <workingDirectory>${installdir}/bin</workingDirectory>
              <ruleList>
                <compareText logic="equals" text="${installer_ui}" value="unattended"/>
                <compareText logic="equals" text="${schema_in_unattended}" value="install"/>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
              </ruleList>
            </runProgram>
            <runProgram>
              <program>${installdir}\bin\psql.exe</program>
              <programArguments>-t -f "${installdir}\share\pgagent.sql"</programArguments>
              <progressText>${msg(progress.text.creating.pgagentschema)}</progressText>
              <abortOnError>0</abortOnError>
              <showMessageOnError>0</showMessageOnError>
              <workingDirectory>${installdir}/bin</workingDirectory>
              <ruleList>
                <compareText logic="equals" text="${installer_ui}" value="unattended"/>
                <compareText logic="equals" text="${schema_in_unattended}" value="install"/>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
              </ruleList>
            </runProgram>

            <!-- Upgrade schema pgagent -->
            <runProgram>
              <program>${installdir}/bin/psql</program>
              <programArguments>-t -f "${installdir}/share/pgagent_upgrade.sql"</programArguments>
              <progressText>${msg(progress.text.upgrading.pgagentschema)}</progressText>
              <abortOnError>0</abortOnError>
              <showMessageOnError>0</showMessageOnError>
              <workingDirectory>${installdir}/bin</workingDirectory>
              <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                <compareText logic="equals" text="${schema_in_unattended}" value="upgrade"/>
                <compareText logic="equals" text="${installer_ui}" value="unattended"/>
              </ruleList>
            </runProgram>
            <runProgram>
              <program>${installdir}\bin\psql.exe</program>
              <programArguments>-t -f "${installdir}\share\pgagent_upgrade.sql"</programArguments>
              <progressText>${msg(progress.text.upgrading.pgagentschema)}</progressText>
              <abortOnError>0</abortOnError>
              <showMessageOnError>0</showMessageOnError>
              <workingDirectory>${installdir}/bin</workingDirectory>
              <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
                <compareText logic="equals" text="${schema_in_unattended}" value="upgrade"/>
                <compareText logic="equals" text="${installer_ui}" value="unattended"/>
              </ruleList>
            </runProgram>
          </actionList>
          <ruleList>
            <compareText logic="equals" text="${installer_ui}" value="unattended"/>
          </ruleList>
        </actionGroup>
        <substitute>
          <files>${installdir}/installer/pgAgent/pgpass</files>
          <substitutionList>
            <substitution pattern="INSTALL_DIR" value="${installdir}"/>
            <substitution pattern="PG_HOST" value="${pghost}"/>
            <substitution pattern="PG_PORT" value="${pgport}"/>
            <substitution pattern="PG_USER" value="${pguser}"/>
            <substitution pattern="PG_PASSWORD" value="${pgpassword}"/>
            <substitution pattern="PG_DATABASE" value="${pgdbname}"/>
          </substitutionList>
          <ruleList>
            <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
          </ruleList>
        </substitute>

        <!-- WIN :                                                                   -->
        <!--     1. Create/Append pgpass.conf file in systemuser's appdata directory -->
        <!--     2. Create/Reinstall the pgAgent service                             -->
        <actionGroup>
          <actionList>
            <createDirectory>
              <path>${system_temp_directory}\${product_fullname}\bin</path>
              <ruleList>
                <fileTest>
                   <path>${system_temp_directory}\${product_fullname}\bin</path>
                   <condition>not_exists</condition>
                </fileTest>
              </ruleList>
            </createDirectory>
            <unpackFile>
              <component>configuration</component>
              <destination>${system_temp_directory}\${product_fullname}\bin\CreatePGPassconfForUser.exe</destination>
              <folder>createpgpassconfforuser</folder>
              <origin>CreatePGPassconfForUser.exe</origin>
            </unpackFile>
            <runProgram>
              <customErrorMessage>${msg(error.create.pgpass)}</customErrorMessage>
              <program>${system_temp_directory}\${product_fullname}\bin\CreatePGPassconfForUser.exe</program>
              <programArguments>${systemuser} "${systempassword.password}" ${pghost} ${pgport} ${pgdbname} ${pguser} "${pgpassword.password}"</programArguments>
              <workingDirectory>${windir}</workingDirectory>
              <abortOnError>0</abortOnError>
              <showMessageOnError>1</showMessageOnError>
            </runProgram>
            <deleteFile>
              <path>${system_temp_directory}\${product_fullname}\bin\CreatePGPassconfForUser.exe</path>
            </deleteFile>

            <!-- WIN : Install pgAgent as Service -->
            <!-- WIN : Remove the existing service, if any exist, when upgrading/reinstalling -->
            <runProgram>
              <program>${installdir}\bin\pgagent.exe</program>
              <programArguments>REMOVE pgAgent</programArguments>
              <workingDirectory>${installdir}\bin</workingDirectory>
              <abortOnError>0</abortOnError>
              <showMessageOnError>0</showMessageOnError>
              <ruleList>
                <compareText logic="does_not_equal" text="${pgAgentVersion}" value=""/>
              </ruleList>
            </runProgram>
            <runProgram>
              <customErrorMessage>${msg(error.install.pgagent)}</customErrorMessage>
              <program>${installdir}\bin\pgagent.exe</program>
              <programArguments>INSTALL pgAgent -u ${systemuser} -p "${systempassword.password}" host=${pghost} port=${pgport} user=${pguser} dbname=${pgdbname}</programArguments>
              <workingDirectory>${installdir}\bin</workingDirectory>
              <abortOnError>0</abortOnError>
              <showMessageOnError>1</showMessageOnError>
            </runProgram>
          </actionList>
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
          </ruleList>
        </actionGroup>

        <!-- LIN & MAC : Install pgAgent as Service -->
        <actionGroup>
          <actionList>
            <runProgram>
              <customErrorMessage>${msg(error.install.pgagent)}</customErrorMessage>
              <program>${installdir}/installer/pgAgent/startupcfg.sh</program>
              <programArguments>"${pghost}" "${pgport}" "${pguser}" "${systemuser}" "${installdir}" "${pgdbname}"</programArguments>
              <workingDirectory>${installdir}/installer/pgAgent</workingDirectory>
              <progressText>Configure pgAgent service</progressText>
              <abortOnError>0</abortOnError>
              <showMessageOnError>0</showMessageOnError>
            </runProgram>
          </actionList>
          <ruleList>
            <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
          </ruleList>
        </actionGroup>

        <!-- WIN : Start the pgAgent service -->
        <startWindowsService>
          <serviceName>pgAgent</serviceName>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
          </ruleList>
        </startWindowsService>

        <!-- LIN  : Start pgAgent -->
        <actionGroup>
          <actionList>
            <runProgram>
              <customErrorMessage>${msg(error.install.pgagent)}</customErrorMessage>
              <program>/etc/init.d/pgagent</program>
              <programArguments>start &amp;</programArguments>
              <workingDirectory>/etc/init.d</workingDirectory>
              <progressText>Starting pgAgent service</progressText>
              <abortOnError>0</abortOnError>
              <showMessageOnError>0</showMessageOnError>
            </runProgram>
          </actionList>
          <ruleList>
            <compareText logic="contains" text="${platform_name}" value="linux"/>
            <compareText logic="equals" text="${autostart}" value="yes"/>
          </ruleList>
        </actionGroup>

        <!-- MAC : Start the pgAgent service -->
        <runProgram>
          <program>launchctl</program>
          <programArguments>load /Library/LaunchDaemons/com.edb.launchd.pgagent.plist</programArguments>
          <abortOnError>0</abortOnError>
          <showMessageOnError>1</showMessageOnError>
          <customErrorMessage>${msg(error.start.pgagent)}</customErrorMessage>
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="osx"/>
            <compareText logic="equals" text="${autostart}" value="yes"/>
          </ruleList>
        </runProgram>

        <!-- Delete the temporary pgpass File -->
        <deleteFile>
          <path>${installdir}/installer/pgAgent/pgpass</path>
        </deleteFile>
      </actionList>
      <ruleList>
        <isFalse value="${extract_mode}"/>
      </ruleList>
    </actionGroup>

    <!-- Add description to the services -->
    <registrySet key="HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\pgAgent" name="Description" value="${msg(pgagent.service.description)}" >
        <ruleList>
           <isFalse value="${extract_mode}"/>
        </ruleList>
    </registrySet>
  </postInstallationActionList>

  <postUninstallerCreationActionList>
    <!-- Inform user about configuring pgagent Schema -->
    <showInfo text="${msg(configure.pgagent.schema)}">
      <ruleList>
	<compareText logic="equals" text="${pgagent_schema_exist}" value=""/>
      </ruleList>
    </showInfo>
  </postUninstallerCreationActionList>

  <!-- preUninstallation actions -->
  <preUninstallationActionList>

    <!-- Abort uninstallation if not super-user/Administrator -->
    <actionGroup>
      <actionList>
        <showWarning text="${msg(Installer.Warning.UninstallerAdministratorPrivileges)}"/>
        <exit/>
      </actionList>
      <ruleList>
        <isFalse value="${installer_is_root_install}"/>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
      </ruleList>
    </actionGroup>
    <actionGroup>
      <actionList>
        <showWarning text="${msg(Installer.Warning.UninstallerRootPrivileges)}"/>
        <exit/>
      </actionList>
      <ruleList>
        <isFalse value="${installer_is_root_install}"/>
        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
      </ruleList>
    </actionGroup>

    <!-- LIN & MAC : Unset the pgAgent Info from the ini file -->
    <actionGroup>
      <actionList>
        <iniFileSet file="/etc/postgres-reg.ini" section="pgAgent" key="Description" value=""/>
        <iniFileSet file="/etc/postgres-reg.ini" section="pgAgent" key="InstallationDirectory" value=""/>
        <iniFileSet file="/etc/postgres-reg.ini" section="pgAgent" key="Version" value=""/>
        <iniFileSet file="/etc/postgres-reg.ini" section="pgAgent" key="PGUSER" value=""/>
        <iniFileSet file="/etc/postgres-reg.ini" section="pgAgent" key="PGHOST" value=""/>
        <iniFileSet file="/etc/postgres-reg.ini" section="pgAgent" key="PGPORT" value=""/>
        <iniFileSet file="/etc/postgres-reg.ini" section="pgAgent" key="PGDATABASE" value=""/>
        <iniFileSet file="/etc/postgres-reg.ini" section="pgAgent" key="ServiceManager" value=""/>
      </actionList>
      <ruleList>
        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
      </ruleList>
    </actionGroup>

    <!-- WIN : Stop and Uninstall pgAgent Service -->
    <actionGroup>
      <actionList>
        <stopWindowsService>
          <serviceName>pgAgent</serviceName>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
          <customErrorMessage>${msg(error.stop.pgagent)}</customErrorMessage>
        </stopWindowsService>
        <runProgram>
          <customErrorMessage>${msg(error.uninstall.pgagent)}</customErrorMessage>
          <program>${installdir}\bin\pgagent.exe</program>
          <programArguments>REMOVE pgagent</programArguments>
          <workingDirectory>${installdir}\bin</workingDirectory>
          <abortOnError>0</abortOnError>
          <showMessageOnError>1</showMessageOnError>
        </runProgram>
      </actionList>
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
      </ruleList>
    </actionGroup>

    <!-- MAC : Stop and Uninstall pgAgent Service -->
    <actionGroup>
      <actionList>

        <!-- MAC: Stop the pgAgent Service -->
        <runProgram>
          <customErrorMessage>${msg(error.uninstall.pgagent)}</customErrorMessage>
          <program>launchctl</program>
          <programArguments>unload /Library/LaunchDaemons/com.edb.launchd.pgagent.plist</programArguments>
          <abortOnError>0</abortOnError>
          <showMessageOnError>1</showMessageOnError>
        </runProgram>
        <deleteFile>
          <path>/Library/LaunchDaemons/com.edb.launchd.pgagent.plist</path>
        </deleteFile>
      </actionList>
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="osx"/>
      </ruleList>
    </actionGroup>

    <!-- LIN : Stop and Uninstall pgAgent Service -->
    <actionGroup>
      <actionList>

        <!-- Stop the pgAgent service -->
        <runProgram>
          <program>/etc/init.d/pgagent</program>
          <programArguments>stop</programArguments>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
        </runProgram>

        <!-- Attempt to remove any runlevel config with chkconfig -->
        <runProgram>
          <customErrorMessage>${msg(error.uninstall.pgagent)}</customErrorMessage>
          <program>/sbin/chkconfig</program>
          <programArguments>--del pgagent</programArguments>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
        </runProgram>

        <!-- Remove the startup script -->
        <deleteFile>
          <path>/etc/init.d/pgagent</path>
        </deleteFile>

        <!-- Attempt to remove any runlevel config with update-rc.d -->
        <runProgram>
          <customErrorMessage>${msg(error.uninstall.pgagent)}</customErrorMessage>
          <program>/usr/sbin/update-rc.d</program>
          <programArguments>-f pgagent remove</programArguments>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
        </runProgram>
      </actionList>
      <ruleList>
        <compareText logic="contains" text="${platform_name}" value="linux"/>
      </ruleList>
    </actionGroup>
  </preUninstallationActionList>

  <!-- postUninstallation actions -->
  <postUninstallationActionList>

    <!-- Prompt user about pgAgent Schema Deletion/Drop -->
    <showInfo>
      <text>${msg(schema.drop.info)}</text>
    </showInfo>
  </postUninstallationActionList>

  <!-- Components -->
  <componentList>
    <component>
      <name>pgAgent</name>
      <description>pgAgent components</description>
      <canBeEdited>0</canBeEdited>
      <selected>1</selected>
      <show>1</show>
      <folderList>

        <!-- LIN : Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfileslinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/linux/bin</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Library Files</description>
          <destination>${installdir}</destination>
          <name>libfileslinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/linux/lib</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Configure Files</description>
          <destination>${installdir}</destination>
          <name>configurefileslinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/linux/share</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Installer Files</description>
          <destination>${installdir}</destination>
          <name>installfileslinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/linux/installer</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Other Files</description>
          <destination>${installdir}</destination>
          <name>otherfileslinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux/LICENSE</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux/README</origin>
            </distributionFile>
          </distributionFileList>
        </folder>
        <!-- LIN-X64 : Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfileslinux-x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/linux-x64/bin</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Library Files</description>
          <destination>${installdir}</destination>
          <name>libfileslinux-x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionDirectory>
                <origin>staging/linux-x64/lib</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Configure Files</description>
          <destination>${installdir}</destination>
          <name>configurefileslinux-x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/linux-x64/share</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Installer Files</description>
          <destination>${installdir}</destination>
          <name>installfileslinux-x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/linux-x64/installer</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Other Files</description>
          <destination>${installdir}</destination>
          <name>otherfileslinux-x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux-x64/LICENSE</origin>
            </distributionFile>
	    <distributionFile>
              <origin>staging/linux-x64/README</origin>
            </distributionFile>
          </distributionFileList>
        </folder>

        <!-- LIN-PPC64 : Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfileslinux-ppc64</name>
          <platforms>linux-ppc</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/linux-ppc64/bin</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Library Files</description>
          <destination>${installdir}</destination>
          <name>libfileslinux-ppc64</name>
          <platforms>linux-ppc</platforms>
          <distributionFileList>
            <distributionDirectory>
                <origin>staging/linux-ppc64/lib</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Configure Files</description>
          <destination>${installdir}</destination>
          <name>configurefileslinux-ppc64</name>
          <platforms>linux-ppc</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/linux-ppc64/share</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Installer Files</description>
          <destination>${installdir}</destination>
          <name>installfileslinux-ppc64</name>
          <platforms>linux-ppc</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/linux-ppc64/installer</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Other Files</description>
          <destination>${installdir}</destination>
          <name>otherfileslinux-ppc64</name>
          <platforms>linux-ppc</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux-ppc64/LICENSE</origin>
            </distributionFile>
	    <distributionFile>
              <origin>staging/linux-ppc64/README</origin>
            </distributionFile>
          </distributionFileList>
        </folder>

        <!-- WIN : Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}/bin</destination>
          <name>pgagentbinarywindows</name>
          <platforms>windows</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/windows/pgagent.exe</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/windows/pgaevent.dll</origin>
            </distributionFile>
          </distributionFileList>
       </folder>
       <folder>
          <description>Supported Library Files</description>
          <destination>${installdir}</destination>
          <name>libfileswindows</name>
          <platforms>windows</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/windows/bin</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Configure Files</description>
          <destination>${installdir}/share</destination>
          <name>configurefileswindows</name>
          <platforms>windows</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/windows/pgagent.sql</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/windows/pgagent_upgrade.sql</origin>
            </distributionFile>
          </distributionFileList>
        </folder>
        <folder>
          <description>Installer Files</description>
          <destination>${installdir}</destination>
          <name>installfileswindows</name>
          <platforms>windows</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/windows/installer</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Other Files</description>
          <destination>${installdir}</destination>
          <name>otherfileswindows</name>
          <platforms>windows</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/windows/LICENSE</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/windows/README</origin>
            </distributionFile>
          </distributionFileList>
        </folder>

        <!-- MAC : Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfilesosx</name>
          <platforms>osx</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/osx/bin</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Library Files</description>
          <destination>${installdir}</destination>
          <name>libfilesosx</name>
          <platforms>osx</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/osx/lib</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Configure Files</description>
          <destination>${installdir}</destination>
          <name>configurefilesosx</name>
          <platforms>osx</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/osx/share</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Installer Files</description>
          <destination>${installdir}</destination>
          <name>installfilesosx</name>
          <platforms>osx</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/osx/installer</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Other Files</description>
          <destination>${installdir}</destination>
          <name>otherfilesosx</name>
          <platforms>osx</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/osx/LICENSE</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/osx/README</origin>
            </distributionFile>
          </distributionFileList>
        </folder>
      </folderList>
    </component>
    <component>
      <name>configuration</name>
      <description>Configure</description>
      <canBeEdited>0</canBeEdited>
      <selected>0</selected>
      <show>0</show>
      <folderList>
        <!-- WIN : CreatePGPassconfForUser executable -->
        <folder>
          <description>CreatePGPassconfForUser</description>
          <destination>${installdir}\bin</destination>
          <name>createpgpassconfforuser</name>
          <platforms>windows</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/windows/CreatePGPassconfForUser.exe</origin>
            </distributionFile>
          </distributionFileList>
        </folder>
        <folder>
          <description>Visual C++.Net 2005 Redistribution Files</description>
          <destination>${installdir}</destination>
          <name>vcredistwindows</name>
          <platforms>windows</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/windows/vcredist_x86.exe</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
      </folderList>
    </component>
  </componentList>

  <!-- PostgreSQL Details Verification Page -->
  <parameterList>
    <booleanParameter name="extract_mode" cliOptionName="extract-only" default="0" ask="1" cliOptionShow="1"/>
    <booleanParameter name="admin_rights" cliOptionName="require-admin" default="0" ask="0" cliOptionShow="0"/>
    <stringParameter name="originalplatform" ask="0" cliOptionShow="0"/>

    <!-- Install Directory -->
    <directoryParameter>
      <name>installdir</name>
      <description>Installer.Parameter.installdir.description</description>
      <explanation>${msg(pgagent.installdir.explanation)}</explanation>
      <value>${defaultinstalldir}</value>
      <default/>
      <allowEmptyValue>0</allowEmptyValue>
      <ask>yes</ask>
      <cliOptionName>prefix</cliOptionName>
      <mustBeWritable>yes</mustBeWritable>
      <mustExist>0</mustExist>
      <width>40</width>
      <ruleList>
        <compareText logic="equals" text="${pgAgentVersion}" value=""/>
      </ruleList>

      <!-- Validating whether installdir is empty -->
      <validationActionList>
        <actionGroup>
          <actionList>
            <setInstallerVariable name="installdir" value="${defaultinstalldir}"/>
            <throwError>
              <text>${msg(pgagent.installdir.empty)}</text>
            </throwError>
          </actionList>
          <ruleList>
            <compareText logic="equals" text="${installdir}" value=""/>
          </ruleList>
        </actionGroup>
      </validationActionList>

      <!-- Validating whether installdir is valid -->
      <validationActionList>

        <!-- Validating whether installdir contains whitespaces (Linux) -->
        <actionGroup>
          <actionList>
            <setInstallerVariable name="installdir" value="${defaultinstalldir}"/>
            <throwError>
              <text>${msg(pgagent.installdir.error)}</text>
            </throwError>
            <setInstallerVariable name="next_page" value="installdir"/>
          </actionList>
          <ruleList>
            <regExMatch text="${installdir}" logic="does_not_match" pattern="^/([0-9a-zA-Z_/\.\-]*)$"/>
            <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
          </ruleList>
        </actionGroup>

        <!-- Validating whether installdir is valid (Windows) -->
        <actionGroup>
          <actionList>
            <setInstallerVariable name="installdir" value="${defaultinstalldir}"/>
            <throwError>
              <text>${msg(pgagent.installdir.error)}</text>
            </throwError>
            <setInstallerVariable name="next_page" value="installdir"/>
          </actionList>
          <ruleList>
            <regExMatch text="${installdir}" logic="does_not_match" pattern="^([a-zA-Z]:)\\([0-9a-zA-Z_\\\s\.\-\(\)]*)$"/>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
          </ruleList>
        </actionGroup>
      </validationActionList>
    </directoryParameter>

    <!-- Explain that we're using an existing installation directory -->
    <labelParameter>
      <name>upgrade</name>
      <title>${msg(upgrade.existing.installation.title)}</title>
      <description>${msg(upgrade.existing.installation.description)}</description>
      <ruleList>
        <compareText logic="does_not_equal" text="${pgAgentVersion}" value=""/>
      </ruleList>
    </labelParameter>
    <parameterGroup>
      <name>pgdetails</name>
      <title>${msg(pg.details.title)}</title>
      <explanation>${msg(pg.details.explanation)}</explanation>
      <value/>
      <default/>
      <parameterList>

        <!-- Postgres Host -->
        <stringParameter>
          <name>pghost</name>
          <description>Host</description>
          <explanation/>
          <value/>
          <default>${defaultpghost}</default>
          <allowEmptyValue>1</allowEmptyValue>
          <width>40</width>
	    <ruleList>
                <compareText logic="equals" text="${pgAgentVersion}" value=""/>
            </ruleList>
        </stringParameter>

        <!-- Postgres User -->
        <stringParameter>
          <name>pguser</name>
          <description>User Name</description>
          <explanation/>
          <value/>
          <default>${defaultpguser}</default>
          <allowEmptyValue>1</allowEmptyValue>
          <width>40</width>
	    <ruleList>
                <compareText logic="equals" text="${pgAgentVersion}" value=""/>
            </ruleList>
        </stringParameter>

        <!-- Postgres User Password -->
        <passwordParameter>
          <name>pgpassword</name>
          <title>Password</title>
          <description>Password</description>
          <explanation/>
          <value/>
          <default>${defaultpgpassword}</default>
          <allowEmptyValue>1</allowEmptyValue>
          <askForConfirmation>0</askForConfirmation>
          <descriptionRetype/>
          <width>40</width>
        </passwordParameter>

        <!-- Postgres Port(Default 5432) -->
        <stringParameter>
          <name>pgport</name>
          <description>Port</description>
          <explanation/>
          <value/>
          <default>${defaultpgport}</default>
          <allowEmptyValue>1</allowEmptyValue>
          <width>40</width>
	    <ruleList>
                <compareText logic="equals" text="${pgAgentVersion}" value=""/>
            </ruleList>
        </stringParameter>

        <stringParameter cliOptionName="dbname" ask="0" cliOptionShow="0">
          <name>pgdbname</name>
          <description>Database</description>
          <explanation/>
          <value/>
          <default></default>
          <allowEmptyValue>1</allowEmptyValue>
          <width>40</width>
	    <ruleList>
                <compareText logic="equals" text="${pgAgentVersion}" value=""/>
            </ruleList>
        </stringParameter>

        <choiceParameter cliOptionName="schema" ask="0" cliOptionShow="1">
          <name>schema_in_unattended</name>
          <description/>
          <explanation/>
          <value/>
          <default></default>
          <optionList>
            <option value="none"/>
            <option value="exists"/>
            <option value="upgrade"/>
            <option value="install"/>
          </optionList>
        </choiceParameter>

        <stringParameter cliOptionName="autostart" ask="0" cliOptionShow="0">
          <name>autostart</name>
          <description>AutoStart Service</description>
          <explanation/>
          <value/>
          <default>yes</default>
          <allowEmptyValue>1</allowEmptyValue>
          <width>40</width>
        </stringParameter>
      </parameterList>
      <ruleList>
        <isFalse value="${extract_mode}"/>
      </ruleList>

      <preShowPageActionList>
        <setInstallerVariable name="pgagent_schema_exist" value="0"/>
        <setInstallerVariable name="pgagent_schema_version_function_exist" value="0"/>
        <setInstallerVariable name="pgagent_current_schema_version" value=""/>
        <setInstallerVariable name="upgrade_schema" value="yes"/>
      </preShowPageActionList>

      <!-- Checking the validity of PostgreSQL Server Details -->
      <validationActionList>
        <actionGroup>
          <actionList>
            <throwError>
              <text>${msg(pg.blank.error)}</text>
            </throwError>
          </actionList>
          <ruleEvaluationLogic>OR</ruleEvaluationLogic>
          <ruleList>
            <compareText logic="equals" text="${pgport}" value=""/>
            <compareText logic="equals" text="${pguser}" value=""/>
            <compareText logic="equals" text="${pgpassword}" value=""/>
          </ruleList>
        </actionGroup>
        <throwError>
          <text>${msg(pgplus.port.error)}</text>
          <ruleEvaluationLogic>OR</ruleEvaluationLogic>
          <ruleList>
            <compareValues>
              <value1>${pgport}</value1>
              <logic>less_or_equal</logic>
              <value2>0</value2>
            </compareValues>
            <compareValues>
              <value1>${pgport}</value1>
              <logic>greater_or_equal</logic>
              <value2>65535</value2>
            </compareValues>
          </ruleList>
        </throwError>
        <!-- Creating a temporary directory -->
        <createDirectory path="${system_temp_directory}/${product_fullname}"/>

        <!-- Create temporary directory -->
        <createDirectory path="${system_temp_directory}/${product_fullname}/bin"/>

        <!-- Validate the PostgreSQL Server Details -->
        <actionGroup>
          <actionList>

            <!-- LIN: Unpack psql and its shared libraries -->
            <unpackFile>
              <component>pgAgent</component>
              <destination>${system_temp_directory}/${product_fullname}/bin/psql</destination>
              <folder>programfileslinux</folder>
              <origin>bin/psql</origin>
              <ruleList>
                <compareText logic="equals" text="${platform_name}" value="linux"/>
              </ruleList>
            </unpackFile>
            <unpackDirectory>
              <component>pgAgent</component>
              <destination>${system_temp_directory}/${product_fullname}/lib</destination>
              <folder>libfileslinux</folder>
              <origin>lib</origin>
              <ruleList>
                <compareText logic="equals" text="${platform_name}" value="linux"/>
              </ruleList>
            </unpackDirectory>

            <!-- LIN-x64: Unpack psql and its shared libraries -->
            <unpackFile>
              <component>pgAgent</component>
              <destination>${system_temp_directory}/${product_fullname}/bin/psql</destination>
              <folder>programfileslinux-x64</folder>
              <origin>bin/psql</origin>
              <ruleList>
                <compareText logic="equals" text="${platform_name}" value="linux-x64"/>
              </ruleList>
            </unpackFile>
            <unpackDirectory>
              <component>pgAgent</component>
              <destination>${system_temp_directory}/${product_fullname}/lib</destination>
              <folder>libfileslinux-x64</folder>
              <origin>lib</origin>
              <ruleList>
                <compareText logic="equals" text="${platform_name}" value="linux-x64"/>
              </ruleList>
            </unpackDirectory>

            <!-- LIN-ppc64: Unpack psql and its shared libraries -->
            <unpackFile>
              <component>pgAgent</component>
              <destination>${system_temp_directory}/${product_fullname}/bin/psql</destination>
              <folder>programfileslinux-ppc64</folder>
              <origin>bin/psql</origin>
              <ruleList>
                <compareText logic="equals" text="${platform_name}" value="linux-ppc"/>
              </ruleList>
            </unpackFile>
            <unpackDirectory>
              <component>pgAgent</component>
              <destination>${system_temp_directory}/${product_fullname}/lib</destination>
              <folder>libfileslinux-ppc64</folder>
              <origin>lib</origin>
              <ruleList>
                <compareText logic="equals" text="${platform_name}" value="linux-ppc"/>
              </ruleList>
            </unpackDirectory>


            <!-- MAC: Unpack psql and its shared libraries -->
            <unpackFile>
              <component>pgAgent</component>
              <destination>${system_temp_directory}/${product_fullname}/bin/psql</destination>
              <folder>programfilesosx</folder>
              <origin>bin/psql</origin>
              <ruleList>
                <compareText logic="equals" text="${platform_name}" value="osx"/>
              </ruleList>
            </unpackFile>
            <unpackDirectory>
              <component>pgAgent</component>
              <destination>${system_temp_directory}/${product_fullname}/lib</destination>
              <folder>libfilesosx</folder>
              <origin>lib</origin>
              <ruleList>
                <compareText logic="equals" text="${platform_name}" value="osx"/>
              </ruleList>
            </unpackDirectory>

            <!-- WIN: Unpack psql and its shared libraries -->
            <unpackFile>
              <component>pgAgent</component>
              <destination>${system_temp_directory}\${product_fullname}\bin\psql.exe</destination>
              <folder>libfileswindows</folder>
              <origin>bin\psql.exe</origin>
              <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
              </ruleList>
            </unpackFile>

            <unpackDirectory>
              <component>pgAgent</component>
              <destination>${system_temp_directory}\${product_fullname}</destination>
              <folder>libfileswindows</folder>
              <origin>bin</origin>
              <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
              </ruleList>
            </unpackDirectory>

            <!-- Running the Script to validate the PostgreSQL Server Details -->
            <setEnvironmentVariable name="PGHOST" value="${pghost}"/>
            <setEnvironmentVariable name="PGUSER" value="${pguser}"/>
            <setEnvironmentVariable name="PGPASSWORD" value="${pgpassword}"/>
            <setEnvironmentVariable name="PGPORT" value="${pgport}"/>
            <setEnvironmentVariable name="PGDATABASE" value=""/>
            <setEnvironmentVariable name="LD_LIBRARY_PATH" value="${system_temp_directory}/${product_fullname}/lib"/>
            <setInstallerVariable name="pgdbname" value="" />
            <setInstallerVariable name="connection" value="" />
            <foreach variables="dbname">
              <values>postgres edb template1</values>
              <actionList>
                <setInstallerVariableFromScriptOutput>
                  <exec>${system_temp_directory}/${product_fullname}/bin/psql</exec>
                  <execArgs>-l -d ${dbname}</execArgs>
                  <name>connection</name>
                  <workingDirectory>${system_temp_directory}/${product_fullname}/bin</workingDirectory>
                  <abortOnError>0</abortOnError>
                  <showMessageOnError>0</showMessageOnError>
                  <ruleList>
                    <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                    <compareText logic="equals" text="${connection}" value=""/>
                  </ruleList>
                </setInstallerVariableFromScriptOutput>
                <setInstallerVariableFromScriptOutput>
                  <exec>${system_temp_directory}\${product_fullname}\bin\psql.exe</exec>
                  <execArgs>-t -c "SELECT d.datname FROM pg_catalog.pg_database d WHERE d.datname='${dbname}'" -d ${dbname}</execArgs>
                  <name>connection</name>
                  <workingDirectory>${system_temp_directory}/${product_fullname}/bin</workingDirectory>
                  <abortOnError>0</abortOnError>
                  <showMessageOnError>0</showMessageOnError>
                  <ruleList>
                    <compareText logic="equals" text="${platform_name}" value="windows"/>
                    <compareText logic="equals" text="${connection}" value=""/>
                  </ruleList>
                </setInstallerVariableFromScriptOutput>
                <stringModify text="${connection}" variable="connection" logic="trim"/>
                <setInstallerVariable name="pgdbname" value="${dbname}">
                  <ruleList>
                    <compareText logic="does_not_equal" text="${connection}" value=""/>
                    <compareText logic="equals" text="${pgdbname}" value=""/>
                  </ruleList>
                </setInstallerVariable>
              </actionList>
            </foreach>
            <throwError text="${program_stderr}">
              <ruleList>
                <compareText logic="equals" text="${connection}" value=""/>
              </ruleList>
            </throwError>
            <setEnvironmentVariable name="PGDATABASE" value="${pgdbname}" />
            <setInstallerVariable name="psql_executable" value="${system_temp_directory}/${product_fullname}/bin/psql"/>
            <setInstallerVariable name="psql_executable" value="${system_temp_directory}\${product_fullname}\bin\psql.exe">
              <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
              </ruleList>
            </setInstallerVariable>

            <setInstallerVariableFromScriptOutput name="user_has_permission"
                showMessageOnError="0" abortOnError="0"
                workingDirectory="${system_temp_directory}/${product_fullname}">
              <exec>${psql_executable}</exec>
              <execArgs>-t -A -c "select CASE WHEN has_database_privilege(d.oid, 'CREATE') THEN 1 ELSE 0 END FROM pg_catalog.pg_database d WHERE d.datname=current_database()"</execArgs>
            </setInstallerVariableFromScriptOutput>
            <stringModify text="${user_has_permission}" variable="user_has_permission" logic="trim"/>

            <throwError text="${msg(pgagent.user.not.have.permission)}">
              <ruleList>
                <isFalse value="${user_has_permission}"/>
              </ruleList>
            </throwError>

	    <logMessage text="test=yes"/>
            <!-- Check if plpgsql exists -->
            <setInstallerVariableFromScriptOutput>
              <exec>${psql_executable}</exec>
              <execArgs>-t -A -c "SELECT lanname FROM pg_language WHERE lanname='plpgsql'"</execArgs>
              <name>plpgsql_exist</name>
              <workingDirectory>${system_temp_directory}/${product_fullname}</workingDirectory>
              <showMessageOnError>0</showMessageOnError>
              <abortOnError>0</abortOnError>
            </setInstallerVariableFromScriptOutput>
            <stringModify text="${plpgsql_exist}" variable="plpgsql_exist" logic="trim"/>

            <!-- Check for existing pgagent schema -->
            <setInstallerVariableFromScriptOutput>
              <exec>${psql_executable}</exec>
              <execArgs>-t -A -c "SELECT has_schema_privilege('pgagent', 'USAGE')"</execArgs>
              <name>pgagent_schema_exist</name>
              <workingDirectory>${system_temp_directory}/${product_fullname}</workingDirectory>
              <showMessageOnError>0</showMessageOnError>
              <abortOnError>0</abortOnError>
            </setInstallerVariableFromScriptOutput>
            <stringModify text="${pgagent_schema_exist}" variable="pgagent_schema_exist" logic="trim"/>

            <!-- Check for pgagent_schema_version function exist -->
            <setInstallerVariableFromScriptOutput>
              <exec>${psql_executable}</exec>
              <execArgs>-t -A -c "SELECT COUNT(*) FROM pg_proc WHERE proname = 'pgagent_schema_version' AND pronamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'pgagent') AND prorettype = (SELECT oid FROM pg_type WHERE typname = 'int2') AND proargtypes = ''"</execArgs>
              <name>pgagent_schema_version_function_exist</name>
              <workingDirectory>${system_temp_directory}/${product_fullname}</workingDirectory>
              <showMessageOnError>0</showMessageOnError>
              <abortOnError>0</abortOnError>
              <ruleList>
                <compareText logic="does_not_equal" text="${pgagent_schema_exist}" value=""/>
              </ruleList>
            </setInstallerVariableFromScriptOutput>
            <stringModify text="${pgagent_schema_version_function_exist}" variable="pgagent_schema_version_function_exist" logic="trim"/>

            <!-- Check for the current version of the pgagent schema -->
            <setInstallerVariableFromScriptOutput>
              <exec>${psql_executable}</exec>
              <execArgs>-t -A -c "SELECT pgagent.pgagent_schema_version()"</execArgs>
              <name>pgagent_current_schema_version</name>
              <workingDirectory>${system_temp_directory}/${product_fullname}</workingDirectory>
              <showMessageOnError>0</showMessageOnError>
              <abortOnError>0</abortOnError>
              <ruleList>
                <compareText logic="does_not_equal" text="${pgagent_schema_exist}" value=""/>
                <compareText logic="equals" text="${pgagent_schema_version_function_exist}" value="1"/>
              </ruleList>
            </setInstallerVariableFromScriptOutput>
            <stringModify text="${pgagent_current_schema_version}" variable="pgagent_current_schema_version" logic="trim"/>

          </actionList>
        </actionGroup>

        <!-- For pgagent schema already exists -->
        <actionGroup>
          <actionList>

            <!-- 1. pgagent schema exist and pgagent_schema_version function does not exist -->
            <showQuestion text="${msg(pgagent.schema.older.exist)}" variable="upgrade_schema">
              <ruleList>
                <compareText logic="does_not_equal" text="${pgagent_schema_version_function_exist}" value="1"/>
              </ruleList>
            </showQuestion>

            <!-- 2. pgagnet schema exist and pgagent_schema_version function exists,
                    but current_schema_version less than the installer_schema_version -->
            <showQuestion text="${msg(pgagent.schema.older.version.exist)}" variable="upgrade_schema">
              <ruleList>
                <compareText logic="equals" text="${pgagent_schema_version_function_exist}" value="1"/>
                <compareValues logic="less" value1="${pgagent_current_schema_version}" value2="${pgagent_installer_schema_version}"/>
              </ruleList>
            </showQuestion>

            <!-- 3. pgagnet schema exist and pgagent_schema_version function exists,
                    and current_schema_version matches the installer_schema_version -->
            <showInfo text="${msg(pgagent.schema.found)}">
              <ruleList>
                <compareText logic="equals" text="${pgagent_schema_version_function_exist}" value="1"/>
                <compareValues logic="equals" value1="${pgagent_current_schema_version}" value2="${pgagent_installer_schema_version}"/>
              </ruleList>
            </showInfo>

            <!-- 4. pgagnet schema exist and pgagent_schema_version function exists,
                    but current_schema_version greater than the installer_schema_version -->
            <actionGroup>
              <actionList>
                <throwError text="${msg(pgagent.schema.newer.version.exist)}"/>
                <setInstallerVariable name="next_page" value="pgdetails"/>
              </actionList>
              <ruleList>
                <compareText logic="equals" text="${pgagent_schema_version_function_exist}" value="1"/>
                <compareValues logic="greater" value1="${pgagent_current_schema_version}" value2="${pgagent_installer_schema_version}"/>
              </ruleList>
            </actionGroup>

          </actionList>
          <ruleList>
            <compareText logic="does_not_equal" text="${pgagent_schema_exist}" value=""/>
          </ruleList>
        </actionGroup>

	<!-- In case of unattended mode change value of pgagent_schema_exist to install
	1. If it is unattended mode.
	2. If this varriable is not passwed through command line.
	3. If pgagent_schema does not exist.
	-->
        <actionGroup>
          <actionList>
            <setInstallerVariable name="schema_in_unattended" value="install" persist="1"/>
          </actionList>
          <ruleList>
	    <compareText logic="equals" text="${installer_ui}" value="unattended"/>
            <compareText logic="equals" text="${schema_in_unattended}" value=""/>
            <compareText logic="equals" text="${pgagent_schema_exist}" value=""/>
          </ruleList>
        </actionGroup>

	<!-- In case of unattended mode change value of pgagent_schema_exist to upgrade
	1. If it is unattended mode.
	2. If this varriable is not passwed through command line.
	3. If pgagent_schema exists.
	-->
        <actionGroup>
          <actionList>
            <setInstallerVariable name="schema_in_unattended" value="upgrade" persist="1"/>
          </actionList>
          <ruleList>
	    <compareText logic="equals" text="${installer_ui}" value="unattended"/>
            <compareText logic="equals" text="${schema_in_unattended}" value=""/>
            <compareText logic="does_not_equal" text="${pgagent_schema_exist}" value=""/>
          </ruleList>
        </actionGroup>


        <!-- Set systemuser as postgres -->
        <actionGroup>
          <actionList>
            <setInstallerVariable name="systemuser" value="postgres" persist="1"/>
          </actionList>
          <ruleList>
            <compareText logic="equals" text="${pgAgentVersion}" value=""/>
            <compareText logic="equals" text="${systemuser}" value=""/>
          </ruleList>
        </actionGroup>
      </validationActionList>
    </parameterGroup>
    <parameterGroup>
      <name>sysuserdetails</name>
      <title>${msg(sysuser.details.title)}</title>
      <explanation>${_explanation}</explanation>
      <!-- Do not show this page if reinstallation other than windows -->
      <preShowPageActionList>
        <setInstallerVariable>
          <name>_explanation</name>
          <value>${msg(sysuser.details.explanation)}</value>
        </setInstallerVariable>

        <!-- On Windows, we need a different explanation -->
        <setInstallerVariable>
          <name>_explanation</name>
          <value>${msg(sysuser.details.explanation.windows)}</value>
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
          </ruleList>
        </setInstallerVariable>

        <!-- On Windows, we need a different explanation -->
        <setInstallerVariable>
          <name>_explanation</name>
          <value>${msg(sysuser.details.explanation.withuser.windows)}</value>
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
            <compareText logic="does_not_equal" text="${pgAgentVersion}" value=""/>
          </ruleList>
        </setInstallerVariable>
      </preShowPageActionList>
      <parameterList>
        <stringParameter>
          <name>systemuser</name>
          <description>${msg(config.systemuser.description)}</description>
          <explanation/>
          <value/>
          <default/>
          <allowEmptyValue>1</allowEmptyValue>
          <width>40</width>
          <cliOptionName>systemuser</cliOptionName>
          <cliOptionShow>yes</cliOptionShow>
          <ruleList>
            <compareText logic="equals" text="${pgAgentVersion}" value=""/>
          </ruleList>
        </stringParameter>
        <passwordParameter>
          <name>systempassword</name>
          <description>${msg(config.syspassword.description)}</description>
          <explanation/>
          <value/>
          <allowEmptyValue>1</allowEmptyValue>
          <cliOptionName>systempassword</cliOptionName>
          <cliOptionShow>yes</cliOptionShow>
          <descriptionRetype>${msg(config.syspassword.confirm)}</descriptionRetype>
          <width>40</width>
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
          </ruleList>
        </passwordParameter>
      </parameterList>
      <ruleList>
        <isFalse value="${extract_mode}"/>
        <ruleGroup>
            <ruleEvaluationLogic>OR</ruleEvaluationLogic>
            <ruleList>
               <compareText logic="equals" text="${pgAgentVersion}" value=""/>
               <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </ruleGroup>
      </ruleList>
      <validationActionList>
        <throwError text="${msg(systemuser.blank.error)}">
          <ruleList>
            <compareText logic="equals" text="${systemuser}" value=""/>
          </ruleList>
        </throwError>
        <throwError text="${msg(systempassword.blank.error)}">
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
            <compareText logic="equals" text="${systempassword}" value=""/>
          </ruleList>
        </throwError>
        <throwError text="${msg(systempassword.length.error)}">
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
            <compareTextLength logic="greater" text="${systempassword}" length="40"/>
          </ruleList>
        </throwError>

        <!-- WIN : Create user  -->
        <actionGroup>
          <actionList>
              <unpackFile>
                <component>pgAgent</component>
                <destination>${system_temp_directory}\${product_fullname}\bin\createuser.exe</destination>
                <folder>installfileswindows</folder>
                <origin>installer\pgAgent\createuser.exe</origin>
              </unpackFile>
              <runProgram>
                <program>${system_temp_directory}\${product_fullname}\bin\createuser.exe</program>
                <programArguments>. "${systemuser}" "${systempassword.password}"</programArguments>
                <abortOnError>0</abortOnError>
                <showMessageOnError>0</showMessageOnError>
              </runProgram>
              <throwError>
                <text>${msg(script.command.line.error)}</text>
                <ruleList>
                  <compareText logic="equals" text="${program_exit_code}" value="127"/>
                </ruleList>
              </throwError>
              <throwError>
                <text>${msg(config.systempassword.incorrect.windows)}</text>
                <ruleList>
                  <compareText logic="equals" text="${program_exit_code}" value="1"/>
                </ruleList>
              </throwError>
            </actionList>
            <ruleList>
              <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>
        <!-- WIN : Validate user name & password -->
        <actionGroup>
          <actionList>
            <unpackFile>
              <component>pgAgent</component>
              <destination>${system_temp_directory}\${product_fullname}\bin\validateuser.exe</destination>
              <folder>installfileswindows</folder>
              <origin>installer\pgAgent\validateuser.exe</origin>
            </unpackFile>
            <runProgram>
              <program>${system_temp_directory}\${product_fullname}\bin\validateuser.exe</program>
              <programArguments>. "${systemuser}" "${systempassword.password}"</programArguments>
              <abortOnError>0</abortOnError>
              <showMessageOnError>0</showMessageOnError>
            </runProgram>
            <throwError>
              <text>${msg(script.command.line.error)}</text>
              <ruleList>
                <compareText logic="equals" text="${program_exit_code}" value="127"/>
              </ruleList>
            </throwError>
            <throwError>
              <text>${msg(config.systempassword.incorrect.windows)}</text>
              <ruleList>
                <compareText logic="equals" text="${program_exit_code}" value="1"/>
              </ruleList>
            </throwError>
          </actionList>
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
          </ruleList>
      </actionGroup>
      </validationActionList>
      <preShowPageActionList>
     </preShowPageActionList>
   </parameterGroup>
  </parameterList>
</project>
