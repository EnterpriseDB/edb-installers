<project>

  <!-- Package details -->
  <shortName>pgagent</shortName>
  <fullName>pgAgent</fullName>
  <version>PG_VERSION_PGAGENT-PG_BUILDNUM_PGAGENT</version>

  <!-- product Specific Options -->
  <productComments>${product_fullname} ${productVersion}, packaged by EnterpriseDB</productComments>
  <productDisplayName>${product_fullname} ${productVersion}</productDisplayName>
  <productUrlHelpLink>http://www.enterprisedb.com</productUrlHelpLink>
  <productUrlInfoAbout>http://www.enterprisedb.com</productUrlInfoAbout>
  <startMenuGroupName></startMenuGroupName>

  <!-- The options are used for RPM registration -->
  <description>${product_shortname} ${productVersion}, packaged by EnterpriseDB</description>
  <summary>${msg(install.summary)}</summary>
  <vendor>EnterpriseDB</vendor>
  <release>1</release>

  <!-- Installer Size -->
  <width>550</width>
  <height>400</height>

  <!-- Misc options -->
  <installerFilename>${product_shortname}-${product_version}-${platform_name}.${platform_exec_suffix}</installerFilename>
  <compressionAlgorithm>lzma</compressionAlgorithm>
  <enableRollback>0</enableRollback>
  <requireInstallationByRootUser>1</requireInstallationByRootUser>
  <saveRelativePaths>1</saveRelativePaths>
  <outputDirectory>../output</outputDirectory>
  <unattendedModeUI>minimal</unattendedModeUI>
  <uninstallerName>uninstall-${product_shortname}</uninstallerName>
  <uninstallerDirectory>${installdir}</uninstallerDirectory>
  <installationLogFile>${system_temp_directory}/install-${product_shortname}.log</installationLogFile>

  <!-- Images -->
  <disableSplashScreen>1</disableSplashScreen>
  <leftImage>../resources/pg-side.png</leftImage>

  <!-- i18n files for the UI -->
  <customLanguageFileList>
    <language>
      <code>en</code>
      <encoding>iso8859-1</encoding>
      <file>i18n/en.lng</file>
    </language>
  </customLanguageFileList>

  <!-- Prebuild Actions -->
  <preBuildActionList>
    <setInstallerVariable name="originalplatform" value="${platform_name}"/>
    <setInstallerVariable name="originalplatform" value="linux-x32">
      <ruleList>
        <compareText text="${platform_name}" value="linux"/>
      </ruleList>
    </setInstallerVariable>
  </preBuildActionList>
  
  <!-- Initialisation actions -->
  <initializationActionList>
    <setInstallerVariable name="productVersion" persist="1" value="PG_VERSION_PGAGENT"/>
    
    <!-- Abort Installation as trying to  run a 32-bit installer on 64-bit machine -->
    <throwError>
      <customErrorMessage>${msg(platform.not.match)}</customErrorMessage>
      <text>Unknown Error</text>
      <ruleList>
        <platformTest type="linux-x64"/>
        <compareText text="${originalplatform}" value="linux-x32"/>
      </ruleList>
    </throwError>
    
    <!-- Set the default values -->
    <setInstallerVariable name="defaultpghost" value="localhost"/>
    <setInstallerVariable name="defaultpguser" value="postgres"/>
    <setInstallerVariable name="defaultpgport" value="5432"/>
    <setInstallerVariable name="defaultinstalldir" value=""/>
    <setInstallerVariable name="systemuser" value="" persist="1"/>
    <setInstallerVariable>
      <name>defaultpgpassword</name>
      <value>postgres</value>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${installer_ui}</text>
          <value>unattended</value>
        </compareText>
      </ruleList>
    </setInstallerVariable>
    <setInstallerVariable>
      <name>defaultpgpassword</name>
      <value/>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${installer_ui}</text>
          <value>unattended</value>
        </compareText>
      </ruleList>
    </setInstallerVariable>

    <!-- Set the default system password, to be used only in unnattended mode -->
    <setInstallerVariable>
      <name>defaultsyspassword</name>
      <value>postgres</value>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${installer_ui}</text>
          <value>unattended</value>
        </compareText>
      </ruleList>
    </setInstallerVariable>
    <setInstallerVariable>
      <name>defaultsyspassword</name>
      <value></value>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${installer_ui}</text>
          <value>unattended</value>
        </compareText>
      </ruleList>
    </setInstallerVariable>

    <!-- Set the default system user, to be used only in unnattended mode -->
    <setInstallerVariable>
      <name>defaultsysuser</name>
      <value/>
    </setInstallerVariable>
    <setInstallerVariable>
      <name>defaultsysuser</name>
      <value>postgres</value>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${installer_ui}</text>
          <value>unattended</value>
        </compareText>
      </ruleList>
    </setInstallerVariable>
    <actionGroup>
      <actionList>
        <setInstallerVariable name="defaultinstalldir" value="${platform_install_prefix}\pgAgent"/>
      </actionList>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </actionGroup>
    <actionGroup>
      <actionList>
        <setInstallerVariable name="defaultinstalldir" value="${platform_install_prefix}/pgAgent"/>
      </actionList>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </actionGroup>
   
    <!-- Set the default values for unattended mode -->
    <actionGroup>
      <actionList>
        <setInstallerVariable name="defaultpgpassword" value="postgres"/>
      </actionList>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${installer_ui}</text>
          <value>unattended</value>
        </compareText>
      </ruleList>
    </actionGroup>
  </initializationActionList>
  
  <!-- Preinstallation actions -->
  <preInstallationActionList>

    <!-- Creates the ini file if not exits -->
    <touchFile path="/etc/postgres-reg.ini">
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </touchFile>
    <setInstallerVariable name="defaultinstalldir" value="${installdir}"/>
    
    <!-- LIN & MAC : Check Previous Installation of pgAgent -->
    <actionGroup>
      <actionList>
        <iniFileGet>
          <file>/etc/postgres-reg.ini</file>
          <section>pgAgent</section>
          <key>Version</key>
          <variable>pgAgentVersion</variable>
        </iniFileGet>
      </actionList>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </actionGroup>
    
    <!-- LIN & MAC : Set the installation directory in case of re-install/upgrade -->
    <actionGroup>
      <actionList>
        <iniFileGet>
          <file>/etc/postgres-reg.ini</file>
          <section>pgAgent</section>
          <key>InstallationDirectory</key>
          <variable>installdir</variable>
        </iniFileGet>
        <iniFileGet>
          <file>/etc/postgres-reg.ini</file>
          <section>pgAgent</section>
          <key>ServiceManager</key>
          <variable>systemuser</variable>
        </iniFileGet>
     </actionList>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${pgAgentVersion}</text>
          <value/>
        </compareText>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </actionGroup>
    
    <!-- WIN : Check Previous Installation of pgAgent -->
    <actionGroup>
      <actionList>
        <registryGet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgAgent</key>
          <name>Version</name>
          <variable>pgAgentVersion</variable>
        </registryGet>
      </actionList>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </actionGroup>
    
    <!-- WIN : Set the installation directory in case of re-install/upgrade -->
    <actionGroup>
      <actionList>
        <registryGet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgAgent</key>
          <name>Location</name>
          <variable>installdir</variable>
        </registryGet>
        <registryGet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgAgent</key>
          <name>ServiceManager</name>
          <variable>systemuser</variable>
        </registryGet>
      </actionList>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${pgAgentVersion}</text>
          <value/>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </actionGroup>
    
    <!-- LIN : Stop the pgAgent Service -->
    <runProgram>
      <program>/etc/init.d/pgagent</program>
      <programArguments>stop</programArguments>
      <abortOnError>0</abortOnError>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>contains</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
        <compareText>
          <text>${pgAgentVersion}</text>
          <logic>does_not_equal</logic>
          <value/>
        </compareText>
      </ruleList>
    </runProgram>
    
    <!-- WIN : Stop the pgAgent Service -->
    <stopWindowsService>
      <serviceName>pgagent</serviceName>
      <abortOnError>0</abortOnError>
      <showMessageOnError>0</showMessageOnError>
      <customErrorMessage>${msg(error.stop.pgagent)}</customErrorMessage>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
        <compareText>
          <text>${pgAgentVersion}</text>
          <logic>does_not_equal</logic>
          <value/>
        </compareText>
      </ruleList>
    </stopWindowsService>
    
    <!-- MAC: Stop the pgAgent Service -->
    <runProgram>
      <program>${installdir}/installer/pgAgent/pgagentctl.sh</program>
      <programArguments>stop</programArguments>
      <abortOnError>0</abortOnError>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
        <compareText>
          <text>${pgAgentVersion}</text>
          <logic>does_not_equal</logic>
          <value/>
        </compareText>
      </ruleList>
    </runProgram>
  </preInstallationActionList>
  
  <!-- Postinstallation actions -->
  <postInstallationActionList>

    <!-- LIN & MAC : Write the pgAgent Info to INI File -->
    <actionGroup>
      <actionList>
        <iniFileSet>
          <file>/etc/postgres-reg.ini</file>
          <section>pgAgent</section>
          <key>Description</key>
          <value>${msg(install.summary)}</value>
        </iniFileSet>
        <iniFileSet>
          <file>/etc/postgres-reg.ini</file>
          <section>pgAgent</section>
          <key>InstallationDirectory</key>
          <value>${installdir}</value>
        </iniFileSet>
        <iniFileSet>
          <file>/etc/postgres-reg.ini</file>
          <section>pgAgent</section>
          <key>Version</key>
          <value>${product_version}</value>
        </iniFileSet>
        <iniFileSet>
          <file>/etc/postgres-reg.ini</file>
          <section>pgAgent</section>
          <key>ServiceManager</key>
          <value>${systemuser}</value>
        </iniFileSet>
      </actionList>
      <ruleList>
        <compareText>
          <text>${platform_name}</text>
          <logic>does_not_equal</logic>
          <value>windows</value>
        </compareText>
      </ruleList>
    </actionGroup>
    <registrySet>
      <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgAgent</key>
      <name>Description</name>
      <value>${msg(install.summary)}</value>
    </registrySet>
    <registrySet>
      <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgAgent</key>
      <name>Location</name>
      <value>${installdir}</value>
    </registrySet>
    <registrySet>
      <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgAgent</key>
      <name>Version</name>
      <value>${product_version}</value>
    </registrySet>
    <registrySet>
      <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\pgAgent</key>
      <name>ServiceManager</name>
      <value>${systemuser}</value>
    </registrySet>
    <!-- Create the user account with which pgAgent will run-->
    <runProgram>
      <program>${installdir}/installer/pgAgent/createuser.sh</program>
      <programArguments>"${systemuser}" "${installdir}"</programArguments>
      <progressText>${msg(progress.text.creating.user)}</progressText>
      <abortOnError>0</abortOnError>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${pgAgentVersion}</text>
          <value/>
        </compareText>
      </ruleList>
    </runProgram>

    <!-- WIN : Create user, if not exists -->
    <runProgram>
      <program>${installdir}\installer\pgAgent\createuser.exe</program>
      <!-- The dot at the beginning of the arguments is the domain -->
      <programArguments>. "${systemuser}" "${systempassword}"</programArguments>
      <progressText>${msg(progress.text.creating.user)}</progressText>
      <abortOnError>0</abortOnError>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${pgAgentVersion}</text>
          <value/>
        </compareText>
      </ruleList>
    </runProgram>

    <throwError>
      <text>${msg(script.command.line.error)}</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>127</text>
          <value>${program_exit_code}</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${pgAgentVersion}</text>
          <value/>
        </compareText>
      </ruleList>
    </throwError>
    <throwError>
      <text>${msg(error.could.not.create.user)}</text>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>1</text>
          <value>${program_exit_code}</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${pgAgentVersion}</text>
          <value/>
        </compareText>
      </ruleList>
    </throwError>

    <!-- Create pgagent schema if not exists -->
    <actionGroup>
      <actionList>
        <setEnvironmentVariable name="PGHOST" value="${pghost}"/>
        <setEnvironmentVariable name="PGUSER" value="${pguser}"/>
        <setEnvironmentVariable name="PGPASSWORD" value="${pgpassword}"/>
        <setEnvironmentVariable name="PGPORT" value="${pgport}"/>
        <setEnvironmentVariable name="LD_LIBRARY_PATH" value="${installdir}/lib"/>
        <!-- Create plpgsql, if not exists -->
        <runProgram>
          <program>${installdir}/bin/psql</program>
          <programArguments>-t -c "CREATE LANGUAGE plpgsql"</programArguments>
          <progressText>${msg(progress.text.creating.plpgsql)}</progressText>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
          <ruleList>
            <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
            <compareText logic="equals" text="${plpgsql}" value=""/>
          </ruleList>
        </runProgram>

        <runProgram>
          <program>${installdir}\installer\pgAgent\configurePgAgent.bat</program>
          <programArguments>"CREATE_PLPGSQL" "${installdir}\bin\psql.exe"</programArguments>
          <progressText>${msg(progress.text.creating.plpgsql)}</progressText>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
            <compareText logic="equals" text="${plpgsql}" value=""/>
          </ruleList>
        </runProgram>

 
        <!-- Create pgagent schema -->
        <runProgram>
          <program>${installdir}/bin/psql</program>
          <programArguments>-t -f "${installdir}/share/pgagent.sql"</programArguments>
          <progressText>${msg(progress.text.creating.pgagentschema)}</progressText>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
          <workingDirectory>${installdir}/bin</workingDirectory>
          <ruleList>
            <compareText logic="equals" text="${pgagent_schema}" value=""/>
            <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
          </ruleList>
        </runProgram>
        <runProgram>
          <program>${installdir}\installer\pgAgent\configurePgAgent.bat</program>
          <programArguments>"CREATE_PGAGENT_SCHEMA" "${installdir}\bin\psql.exe" "${installdir}/share/pgagent.sql"</programArguments>
          <progressText>${msg(progress.text.creating.pgagentschema)}</progressText>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
          <workingDirectory>${installdir}/bin</workingDirectory>
          <ruleList>
            <compareText logic="equals" text="${pgagent_schema}" value=""/>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
          </ruleList>
        </runProgram>
        <!-- Inform user about configuring pgagent Schema -->
        <showInfo text="${msg(configure.pgagent.schema)}"/>
      </actionList>
    </actionGroup>
    <substitute>
      <files>${installdir}/installer/pgAgent/pgagentctl.sh</files>
      <substitutionList>
        <substitution>
          <pattern>INSTALL_DIR</pattern>
          <value>${installdir}</value>
        </substitution>
        <substitution>
          <pattern>PG_HOST</pattern>
          <value>${pghost}</value>
        </substitution>
        <substitution>
          <pattern>PG_PORT</pattern>
          <value>${pgport}</value>
        </substitution>
        <substitution>
          <pattern>PG_USER</pattern>
          <value>${pguser}</value>
        </substitution>
        <substitution>
          <pattern>SYSTEM_USER</pattern>
          <value>${systemuser}</value>
        </substitution>
      </substitutionList>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
        <compareText>
          <text>${pgAgentVersion}</text>
          <logic>equals</logic>
          <value/>
        </compareText>
      </ruleList>
    </substitute>
    <substitute>
      <files>${installdir}/installer/pgAgent/pgpass</files>
      <substitutionList>
        <substitution>
          <pattern>PG_HOST</pattern>
          <value>${pghost}</value>
        </substitution>
        <substitution>
          <pattern>PG_PORT</pattern>
          <value>${pgport}</value>
        </substitution>
        <substitution>
          <pattern>PG_USER</pattern>
          <value>${pguser}</value>
        </substitution>
        <substitution>
          <pattern>PG_PASSWORD</pattern>
          <value>${pgpassword}</value>
        </substitution>
      </substitutionList>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
        <compareText>
          <text>${pgAgentVersion}</text>
          <logic>equals</logic>
          <value/>
        </compareText>
      </ruleList>
    </substitute>

    <!-- WIN :                                                                   -->
    <!--     1. Create/Append pgpass.conf file in systemuser's appdata directory -->
    <!--     2. Create/Reinstall the pgAgent service                             -->
    <actionGroup>
      <actionList>
        <copyFile>
          <origin>${installdir}\installer\pgAgent\createPGPASSCONF.bat</origin>
          <destination>${env(windir)}</destination>
        </copyFile>
        <substitute>
          <files>${env(windir)}\createPGPASSCONF.bat</files>
          <substitutionList>
            <substitution>
              <pattern>PG_HOST</pattern>
              <value>${pghost}</value>
            </substitution>
            <substitution>
              <pattern>PG_PORT</pattern>
              <value>${pgport}</value>
            </substitution>
            <substitution>
              <pattern>PG_USER</pattern>
              <value>${pguser}</value>
            </substitution>
            <substitution>
              <pattern>PG_PASSWORD</pattern>
              <value>${pgpassword}</value>
            </substitution>
          </substitutionList>
        </substitute>
        <unpackFile>
          <component>runas</component>
          <destination>${system_temp_directory}\${product_fullname}\bin\RunProgramAsUser.exe</destination>
          <folder>runasfilewindows</folder>
          <origin>RunProgramAsUser.exe</origin>
        </unpackFile>
        <runProgram>
          <customErrorMessage>${msg(error.create.pgpass)}</customErrorMessage>
          <program>${system_temp_directory}\${product_fullname}\bin\RunProgramAsUser.exe</program>
          <programArguments>${systemuser} ${systempassword} ${env(windir)}\createPGPASSCONF.bat</programArguments>
          <workingDirectory>${windir}</workingDirectory>
          <abortOnError>0</abortOnError>
          <showMessageOnError>1</showMessageOnError>
       </runProgram>
       <deleteFile>
         <path>${system_temp_directory}\${product_fullname}\bin\RunProgramAsUser.exe</path>
       </deleteFile>

        <!-- WIN : Install pgAgent as Service -->
        <!--       Try to reinstall the service in upgrade mode -->
        <runProgram>
          <customErrorMessage>${msg(error.install.pgagent)}</customErrorMessage>
          <program>${installdir}\bin\pgagent.exe</program>
          <programArguments>INSTALL pgagent -u ${systemuser} -p ${systempassword} host=${pghost} port=${pgport} user=${pguser} dbname=postgres</programArguments>
          <workingDirectory>${installdir}\bin</workingDirectory>
          <abortOnError>0</abortOnError>
          <showMessageOnError>1</showMessageOnError>
        </runProgram>
      </actionList>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </actionGroup>
    
    <!-- LIN & MAC : Install pgAgent as Service -->
    <actionGroup>
      <actionList>
        <runProgram>
          <customErrorMessage>${msg(error.install.pgagent)}</customErrorMessage>
          <program>${installdir}/installer/pgAgent/startupcfg.sh</program>
          <programArguments>"${pghost}" "${pgport}" "${pguser}" "${systemuser}" "${installdir}"</programArguments>
          <workingDirectory>${installdir}/installer/pgAgent</workingDirectory>
          <progressText>Configure pgAgent service</progressText>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
        </runProgram>
      </actionList>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${pgAgentVersion}</text>
          <value/>
        </compareText>
      </ruleList>
    </actionGroup>
    
    <!-- WIN : Start the pgAgent service -->
    <startWindowsService>
      <serviceName>pgagent</serviceName>
      <abortOnError>0</abortOnError>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </startWindowsService>
    
    <!-- LIN & LIN-X64 : Start the pgAgent service -->
    <!-- Disabled pgAgent service startup -->
    <!-- actionGroup>
      <actionList>
        <runProgram>
          <program>/bin/sh</program>
          <programArguments>/etc/init.d/pgagent start</programArguments>
          <abortOnError>0</abortOnError>
          <showMessageOnError>1</showMessageOnError>
        </runProgram>
      </actionList>
      <ruleList>
        <compareText>
          <logic>contains</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </actionGroup>
    -->

    <!-- MAC : Start the pgAgent service -->
    <!-- Disabled pgAgent service startup -->
    <!-- runProgram>
      <program>${installdir}/installer/pgAgent/pgagentctl.sh</program>
      <programArguments>start</programArguments>
      <abortOnError>0</abortOnError>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </runProgram -->

    <!-- Delete the temporary pgpass File -->
    <deleteFile>
      <path>${installdir}/installer/pgAgent/pgpass</path>
    </deleteFile>
  </postInstallationActionList>

  <!-- preUninstallation actions -->
  <preUninstallationActionList>
  
    <!-- LIN & MAC : Unset the pgAgent Info from the ini file -->
    <actionGroup>
      <actionList>
        <iniFileSet>
          <file>/etc/postgres-reg.ini</file>
          <section>pgAgent</section>
          <key>Description</key>
          <value/>
        </iniFileSet>
        <iniFileSet>
          <file>/etc/postgres-reg.ini</file>
          <section>pgAgent</section>
          <key>InstallationDirectory</key>
          <value/>
        </iniFileSet>
        <iniFileSet>
          <file>/etc/postgres-reg.ini</file>
          <section>pgAgent</section>
          <key>Version</key>
          <value/>
        </iniFileSet>
      </actionList>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </actionGroup>

    <!-- WIN : Stop and Uninstall pgAgent Service -->
    <actionGroup>
      <actionList>
        <stopWindowsService>
          <serviceName>pgagent</serviceName>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
          <customErrorMessage>${msg(error.stop.pgagent)}</customErrorMessage>
        </stopWindowsService>
        <runProgram>
          <customErrorMessage>${msg(error.uninstall.pgagent)}</customErrorMessage>
          <program>${installdir}\bin\pgagent.exe</program>
          <programArguments>REMOVE pgagent</programArguments>
          <workingDirectory>${installdir}\bin</workingDirectory>
          <abortOnError>0</abortOnError>
          <showMessageOnError>1</showMessageOnError>
        </runProgram>
      </actionList>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </actionGroup>

    <!-- MAC : Stop and Uninstall pgAgent Service -->
    <actionGroup>
      <actionList>

        <!-- MAC: Stop the pgAgent Service -->
        <runProgram>
          <customErrorMessage>${msg(error.uninstall.pgagent)}</customErrorMessage>
          <program>${installdir}/installer/pgAgent/pgagentctl.sh</program>
          <programArguments>stop</programArguments>
          <abortOnError>0</abortOnError>
          <showMessageOnError>1</showMessageOnError>
        </runProgram>
        <deleteFile>
          <path>/Library/LaunchDaemons/com.edb.launchd.pgagent.plist</path>
        </deleteFile>
      </actionList>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>osx</value>
        </compareText>
      </ruleList>
    </actionGroup>

    <!-- LIN : Stop and Uninstall pgAgent Service -->
    <actionGroup>
      <actionList>
  
        <!-- Stop the pgAgent service -->
        <runProgram>
          <program>/etc/init.d/pgagent</program>
          <programArguments>stop</programArguments>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
        </runProgram>

        <!-- Attempt to remove any runlevel config with chkconfig -->
        <runProgram>
          <customErrorMessage>${msg(error.uninstall.pgagent)}</customErrorMessage>
          <program>/sbin/chkconfig</program>
          <programArguments>--del pgagent</programArguments>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
        </runProgram>

        <!-- Remove the startup script -->
        <deleteFile>
          <path>/etc/init.d/pgagent</path>
        </deleteFile>

        <!-- Attempt to remove any runlevel config with update-rc.d -->
        <runProgram>
          <customErrorMessage>${msg(error.uninstall.pgagent)}</customErrorMessage>
          <program>/usr/sbin/update-rc.d</program>
          <programArguments>-f pgagent remove</programArguments>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
        </runProgram>
      </actionList>
      <ruleList>
        <compareText>
          <logic>contains</logic>
          <text>${platform_name}</text>
          <value>linux</value>
        </compareText>
      </ruleList>
    </actionGroup>
  </preUninstallationActionList>

  <!-- postUninstallation actions -->
  <postUninstallationActionList>
  
    <!-- Prompt user about pgAgent Schema Deletion/Drop -->
    <showInfo>
      <text>${msg(schema.drop.info)}</text>
    </showInfo>
  </postUninstallationActionList>

  <!-- Components -->
  <componentList>
    <component>
      <name>pgAgent</name>
      <description>pgAgent components</description>
      <canBeEdited>0</canBeEdited>
      <selected>1</selected>
      <show>1</show>
      <folderList>
  
        <!-- LIN : Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfileslinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/linux/bin</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Library Files</description>
          <destination>${installdir}</destination>
          <name>libfileslinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/linux/lib</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Configure Files</description>
          <destination>${installdir}</destination>
          <name>configurefileslinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/linux/share</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Installer Files</description>
          <destination>${installdir}</destination>
          <name>installfileslinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/linux/installer</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Other Files</description>
          <destination>${installdir}</destination>
          <name>otherfileslinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux/LICENSE</origin>
            </distributionFile>
            <distributionFile>
              <origin>staging/linux/README</origin>
            </distributionFile>
          </distributionFileList>
        </folder>

        <!-- LIN-X64 : Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfileslinux-x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/linux-x64/bin</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Library Files</description>
          <destination>${installdir}</destination>
          <name>libfileslinux-x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionDirectory>
                <origin>staging/linux-x64/lib</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Configure Files</description>
          <destination>${installdir}</destination>
          <name>configurefileslinux-x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/linux-x64/share</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Installer Files</description>
          <destination>${installdir}</destination>
          <name>installfileslinux-x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/linux-x64/installer</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Other Files</description>
          <destination>${installdir}</destination>
          <name>otherfileslinux-x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/linux-x64/LICENSE</origin>
            </distributionFile>
	    <distributionFile>
              <origin>staging/linux-x64/README</origin>
            </distributionFile>
          </distributionFileList>
        </folder>

        <!-- WIN : Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}/bin</destination>
          <name>pgagentbinarywindows</name>
          <platforms>windows</platforms>
          <distributionFileList>
              <distributionFile>
                  <origin>staging/windows/pgagent.exe</origin>
              </distributionFile>
              <distributionFile>
                  <origin>staging/windows/pgaevent.dll</origin>
              </distributionFile>
          </distributionFileList>
       </folder>
       <folder>
          <description>Supported Library Files</description>
          <destination>${installdir}</destination>
          <name>libfileswindows</name>
          <platforms>windows</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/windows/bin</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Configure Files</description>
          <destination>${installdir}/share</destination>
          <name>configurefileswindows</name>
          <platforms>windows</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/windows/pgagent.sql</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Installer Files</description>
          <destination>${installdir}</destination>
          <name>installfileswindows</name>
          <platforms>windows</platforms>
          <distributionFileList>
            <distributionDirectory>
                <origin>staging/windows/installer</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Other Files</description>
          <destination>${installdir}</destination>
          <name>otherfileswindows</name>
          <platforms>windows</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/windows/LICENSE</origin>
            </distributionFile>
	    <distributionFile>
              <origin>staging/windows/README</origin>
            </distributionFile>
          </distributionFileList>
        </folder>

        <!-- MAC : Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfilesosx</name>
          <platforms>osx</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/osx/bin</origin>
              <origin>staging/osx/lib</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Configure Files</description>
          <destination>${installdir}</destination>
          <name>configurefilesosx</name>
          <platforms>osx</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/osx/share</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Installer Files</description>
          <destination>${installdir}</destination>
          <name>installfilesosx</name>
          <platforms>osx</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/osx/installer</origin>
            </distributionDirectory>
          </distributionFileList>
        </folder>
        <folder>
          <description>Other Files</description>
          <destination>${installdir}</destination>
          <name>otherfilesosx</name>
          <platforms>osx</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/osx/LICENSE</origin>
            </distributionFile>
	    <distributionFile>
              <origin>staging/osx/README</origin>
            </distributionFile>
          </distributionFileList>
        </folder>
      </folderList>
    </component>
    <component>
      <name>runas</name>
      <description>pgAgent components</description>
      <canBeEdited>0</canBeEdited>
      <selected>0</selected>
      <show>0</show>
      <folderList>
        <!-- WIN : RunProgramAsUser executable -->
        <folder>
          <description>RunProgramAsUser</description>
          <destination>${installdir}\bin</destination>
          <name>runasfilewindows</name>
          <platforms>windows</platforms>
          <distributionFileList>
            <distributionFile>
              <origin>staging/windows/RunProgramAsUser.exe</origin>
            </distributionFile>
          </distributionFileList>
        </folder>
      </folderList>
    </component>
  </componentList>

  <!-- PostgreSQL Details Verification Page -->
  <parameterList>
    <stringParameter name="originalplatform" ask="0" cliOptionShow="0"/>

    <!-- Install Directory -->
    <directoryParameter>
      <name>installdir</name>
      <description>Installer.Parameter.installdir.description</description>
      <explanation>${msg(pgagent.installdir.explanation)}</explanation>
      <value>${defaultinstalldir}</value>
      <default/>
      <allowEmptyValue>0</allowEmptyValue>
      <ask>yes</ask>
      <cliOptionName>prefix</cliOptionName>
      <mustBeWritable>yes</mustBeWritable>
      <mustExist>0</mustExist>
      <width>40</width>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${pgAgentVersion}</text>
          <value/>
        </compareText>
      </ruleList>

      <!-- Validating whether installdir is empty -->
      <validationActionList>
        <actionGroup>
          <actionList>
            <setInstallerVariable name="installdir" value="${defaultinstalldir}"/>
            <throwError>
              <text>${msg(pgagent.installdir.empty)}</text>
            </throwError>
          </actionList>
          <ruleList>
            <compareText>
              <text>${installdir}</text>
              <logic>equals</logic>
              <value/>
            </compareText>
          </ruleList>
        </actionGroup>
      </validationActionList>

      <!-- Validating whether installdir is valid -->
      <validationActionList>
  
        <!-- Validating whether installdir contains whitespaces (Linux) -->
        <actionGroup>
          <actionList>
            <setInstallerVariable name="installdir" value="${defaultinstalldir}"/>
            <throwError>
              <text>${msg(pgagent.installdir.error)}</text>
            </throwError>
            <setInstallerVariable name="next_page" value="installdir"/>
          </actionList>
          <ruleList>
            <regExMatch>
              <text>${installdir}</text>
              <logic>does_not_match</logic>
              <pattern>^/([0-9a-zA-Z_/\.\-]*)$</pattern>
            </regExMatch>
            <compareText>
              <text>${platform_name}</text>
              <logic>does_not_equal</logic>
              <value>windows</value>
            </compareText>
          </ruleList>
        </actionGroup>

        <!-- Validating whether installdir is valid (Windows) -->
        <actionGroup>
          <actionList>
            <setInstallerVariable name="installdir" value="${defaultinstalldir}"/>
            <throwError>
              <text>${msg(pgagent.installdir.error)}</text>
            </throwError>
            <setInstallerVariable name="next_page" value="installdir"/>
          </actionList>
          <ruleList>
            <regExMatch>
              <text>${installdir}</text>
              <logic>does_not_match</logic>
              <pattern>^([a-zA-Z]:)\\([0-9a-zA-Z_\\\s\.\-\(\)]*)$</pattern>
            </regExMatch>
            <compareText>
              <text>${platform_name}</text>
              <logic>equals</logic>
              <value>windows</value>
            </compareText>
          </ruleList>
        </actionGroup>
      </validationActionList>
    </directoryParameter>

    <!-- Explain that we're using an existing installation directory -->
    <labelParameter>
      <name>upgrade</name>
      <title>${msg(upgrade.existing.installation.title)}</title>
      <description>${msg(upgrade.existing.installation.description)}</description>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${pgAgentVersion}</text>
          <value/>
        </compareText>
      </ruleList>
    </labelParameter>
    <parameterGroup>
      <name>pgdetails</name>
      <title>${msg(pg.details.title)}</title>
      <explanation>${msg(pg.details.explanation)}</explanation>
      <value/>
      <default/>
      <parameterList>

        <!-- Postgres Host -->
        <stringParameter>
          <name>pghost</name>
          <description>Host</description>
          <explanation/>
          <value/>
          <default>${defaultpghost}</default>
          <allowEmptyValue>1</allowEmptyValue>
          <width>40</width>
        </stringParameter>
  
        <!-- Postgres User -->
        <stringParameter>
          <name>pguser</name>
          <description>User Name</description>
          <explanation/>
          <value/>
          <default>${defaultpguser}</default>
          <allowEmptyValue>1</allowEmptyValue>
          <width>40</width>
        </stringParameter>

        <!-- Postgres User Password -->
        <passwordParameter>
          <name>pgpassword</name>
          <title>Password</title>
          <description>Password</description>
          <explanation/>
          <value/>
          <default>${defaultpgpassword}</default>
          <allowEmptyValue>1</allowEmptyValue>
          <askForConfirmation>0</askForConfirmation>
          <descriptionRetype/>
          <width>40</width>
        </passwordParameter>

        <!-- Postgres Port(Default 5432) -->
        <stringParameter>
          <name>pgport</name>
          <description>Port</description>
          <explanation/>
          <value/>
          <default>5432</default>
          <allowEmptyValue>1</allowEmptyValue>
          <width>40</width>
        </stringParameter>

      </parameterList>
      <ruleList>
        <compareText>
          <text>${pgAgentVersion}</text>
          <logic>equals</logic>
          <value/>
        </compareText>
      </ruleList>

      <!-- Checking the validity of PostgreSQL Server Details -->
      <validationActionList>
        <actionGroup>
          <actionList>
            <throwError>
              <text>${msg(pg.blank.error)}</text>
            </throwError>
          </actionList>
          <ruleEvaluationLogic>OR</ruleEvaluationLogic>
          <ruleList>
            <compareText>
              <text>${pgport}</text>
              <logic>equals</logic>
              <value/>
            </compareText>
            <compareText>
              <text>${pguser}</text>
              <logic>equals</logic>
              <value/>
            </compareText>
            <compareText>
              <text>${pgpassword}</text>
              <logic>equals</logic>
              <value/>
            </compareText>
          </ruleList>
        </actionGroup>

        <!-- Creating a temporary directory -->
        <createDirectory path="${system_temp_directory}/${product_fullname}"/>

        <!-- Create temporary directory -->
        <createDirectory path="${system_temp_directory}/${product_fullname}/bin"/>

        <!-- Validate the PostgreSQL Server Details -->
        <actionGroup>
          <actionList>

            <!-- LIN: Unpack psql and its shared libraries -->
            <unpackFile>
              <component>pgAgent</component>
              <destination>${system_temp_directory}/${product_fullname}/bin/psql</destination>
              <folder>programfileslinux</folder>
              <origin>bin/psql</origin>
              <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
              </ruleList>
            </unpackFile>
            <unpackDirectory>
              <component>pgAgent</component>
              <destination>${system_temp_directory}/${product_fullname}/lib</destination>
              <folder>libfileslinux</folder>
              <origin>lib</origin>
              <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
              </ruleList>
            </unpackDirectory>
            
            <!-- LIN-x64: Unpack psql and its shared libraries -->
            <unpackFile>
              <component>pgAgent</component>
              <destination>${system_temp_directory}/${product_fullname}/bin/psql</destination>
              <folder>programfileslinux-x64</folder>
              <origin>bin/psql</origin>
              <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>linux-x64</value>
                </compareText>
              </ruleList>
            </unpackFile>
            <unpackDirectory>
              <component>pgAgent</component>
              <destination>${system_temp_directory}/${product_fullname}/lib</destination>
              <folder>libfileslinux-x64</folder>
              <origin>lib</origin>
              <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>linux-x64</value>
                </compareText>
              </ruleList>
            </unpackDirectory>

            <!-- MAC: Unpack psql and its shared libraries -->
            <unpackFile>
              <component>pgAgent</component>
              <destination>${system_temp_directory}/${product_fullname}/bin/psql</destination>
              <folder>programfilesosx</folder>
              <origin>bin/psql</origin>
              <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
              </ruleList>
            </unpackFile>
            <unpackDirectory>
              <component>pgAgent</component>
              <destination>${system_temp_directory}/${product_fullname}/lib</destination>
              <folder>libfilesosx</folder>
              <origin>lib</origin>
              <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
              </ruleList>
            </unpackDirectory>

            <!-- WIN: Unpack psql and its shared libraries -->
            <unpackFile>
              <component>pgAgent</component>
              <destination>${system_temp_directory}\${product_fullname}\bin\psql.exe</destination>
              <folder>libfileswindows</folder>
              <origin>bin\psql.exe</origin>
              <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
              </ruleList>
            </unpackFile>
            <unpackFile>
              <component>pgAgent</component>
              <destination>${system_temp_directory}\${product_fullname}\bin\checkPG.bat</destination>
              <folder>installfileswindows</folder>
              <origin>installer/pgAgent/configurePgAgent.bat</origin>
              <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
              </ruleList>
            </unpackFile>

            <unpackDirectory>
              <component>pgAgent</component>
              <destination>${system_temp_directory}\${product_fullname}</destination>
              <folder>libfileswindows</folder>
              <origin>bin</origin>
              <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
              </ruleList>
            </unpackDirectory>

            <!-- Running the Script to validate the PostgreSQL Server Details -->
            <setEnvironmentVariable name="PGHOST" value="${pghost}"/>
            <setEnvironmentVariable name="PGUSER" value="${pguser}"/>
            <setEnvironmentVariable name="PGPASSWORD" value="${pgpassword}"/>
            <setEnvironmentVariable name="PGPORT" value="${pgport}"/>
            <setEnvironmentVariable name="LD_LIBRARY_PATH" value="${system_temp_directory}/${product_fullname}/lib"/>

            <setInstallerVariableFromScriptOutput>
              <exec>${system_temp_directory}/${product_fullname}/bin/psql</exec>
              <execArgs>-l</execArgs>
              <name>connection</name>
              <workingDirectory>${system_temp_directory}/${product_fullname}/bin</workingDirectory>
              <customErrorMessage>${msg(pg.details.error)}</customErrorMessage>
              <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
              </ruleList>
            </setInstallerVariableFromScriptOutput>

            <setInstallerVariableFromScriptOutput>
              <exec>${system_temp_directory}\${product_fullname}\bin\checkPG.bat</exec>
              <execArgs>"CHECK_CONNECTION" "${system_temp_directory}\${product_fullname}\bin\psql.exe"</execArgs>
              <name>connection</name>
              <workingDirectory>${system_temp_directory}/${product_fullname}/bin</workingDirectory>
              <customErrorMessage>${msg(pg.details.error)}</customErrorMessage>
              <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
              </ruleList>
            </setInstallerVariableFromScriptOutput>

            <!-- Check if plpgsql exists -->
            <setInstallerVariableFromScriptOutput>
              <exec>${system_temp_directory}/${product_fullname}/bin/psql</exec>
              <execArgs>-t -c "SELECT lanname FROM pg_language WHERE lanname='plpgsql'"</execArgs>
              <name>plpgsql</name>
              <workingDirectory>${system_temp_directory}/${product_fullname}</workingDirectory>
              <showMessageOnError>0</showMessageOnError>
              <abortOnError>0</abortOnError>
              <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
              </ruleList>
            </setInstallerVariableFromScriptOutput>

            <setInstallerVariableFromScriptOutput>
              <exec>${system_temp_directory}\${product_fullname}\bin\checkPG.bat</exec>
              <execArgs>"CHECK_PLPGSQL" "${system_temp_directory}\${product_fullname}\bin\psql.exe"</execArgs>
              <name>plpgsql</name>
              <workingDirectory>${system_temp_directory}\${product_fullname}</workingDirectory>
              <showMessageOnError>0</showMessageOnError>
              <abortOnError>0</abortOnError>
              <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
              </ruleList>
            </setInstallerVariableFromScriptOutput>

            <!-- Check for existing pgagent schema -->
            <setInstallerVariableFromScriptOutput>
              <exec>${system_temp_directory}/${product_fullname}/bin/psql</exec>
              <execArgs>-t -c "SELECT has_schema_privilege('pgagent', 'USAGE')"</execArgs>
              <name>pgagent_schema</name>
              <workingDirectory>${system_temp_directory}/${product_fullname}</workingDirectory>
              <showMessageOnError>0</showMessageOnError>
              <abortOnError>0</abortOnError>
              <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
              </ruleList>
            </setInstallerVariableFromScriptOutput>
            <setInstallerVariableFromScriptOutput>
              <exec>${system_temp_directory}\${product_fullname}\bin\checkPG.bat</exec>
              <execArgs>"CHECK_PGAGENT_SCHEMA" "${system_temp_directory}\${product_fullname}\bin\psql.exe"</execArgs>
              <name>pgagent_schema</name>
              <workingDirectory>${system_temp_directory}/${product_fullname}</workingDirectory>
              <showMessageOnError>0</showMessageOnError>
              <abortOnError>0</abortOnError>
              <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
              </ruleList>
            </setInstallerVariableFromScriptOutput>
          </actionList>
        </actionGroup>

        <!-- Initially set use_exist_schema to no -->
        <setInstallerVariable>
          <name>use_exist_schema</name>
          <value>yes</value>
        </setInstallerVariable>

        <!-- Ask if user wants to use existing pgagent schema -->
        <actionGroup>
          <actionList>
            <showQuestion>
              <text>${msg(pgagent.schema.error)}</text>
              <variable>use_exist_schema</variable>
            </showQuestion>
            <setInstallerVariable>
              <name>next_page</name>
              <value>pgdetails</value>
              <ruleList>
                <compareText>
                  <logic>equals</logic>
                  <text>${use_exist_schema}</text>
                  <value>no</value>
                </compareText>
              </ruleList>
            </setInstallerVariable>
          </actionList>
          <ruleList>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${pgagent_schema}</text>
              <value/>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${pgAgentVersion}</text>
              <value/>
            </compareText>
          </ruleList>
        </actionGroup>

        <!-- Inform the user if he/she wants to use postgres to manage pgAgent service -->
        <actionGroup>
          <actionList>
            <showQuestion>
              <text>${msg(ask.user.name)}</text>
              <variable>usepostgres</variable>
            </showQuestion>
          </actionList>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${pgAgentVersion}</text>
              <value/>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${use_exist_schema}</text>
              <value>yes</value>
            </compareText>
          </ruleList>
        </actionGroup>

        <!-- Set systemuser as postgres, if user answers 'yes' for above question -->
        <actionGroup>
          <actionList>
            <setInstallerVariable name="systemuser" value=""/>
          </actionList>
        </actionGroup>
        <actionGroup>
          <actionList>
            <setInstallerVariable name="systemuser" value="postgres" persist="1"/>
          </actionList>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${usepostgres}</text>
              <value>yes</value>
            </compareText>
          </ruleList>
        </actionGroup>
      </validationActionList>
    </parameterGroup>
    <parameterGroup>
      <name>sysuserdetails</name>
      <title>${msg(sysuser.details.title)}</title>
      <explanation>${_explanation}</explanation>
      <!-- Do not show this page if reinstallation other than windows -->
      <preShowPageActionList>
        <setInstallerVariable>
          <name>_explanation</name>
          <value>${msg(sysuser.details.explanation)}</value>
        </setInstallerVariable>

        <!-- On Windows, we need a different explanation -->
        <setInstallerVariable>
          <name>_explanation</name>
          <value>${msg(sysuser.details.explanation.windows)}</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </setInstallerVariable>

        <!-- On Windows, we need a different explanation -->
        <setInstallerVariable>
          <name>_explanation</name>
          <value>${msg(sysuser.details.explanation.withuser.windows)}</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${usepostgres}</text>
              <value>yes</value>
            </compareText>
          </ruleList>
        </setInstallerVariable>
      </preShowPageActionList>
      <parameterList>
        <stringParameter>
          <name>systemuser</name>
          <description>${msg(config.systemuser.description)}</description>
          <explanation/>
          <value/>
          <default>${defaultsysuser}</default>
          <allowEmptyValue>1</allowEmptyValue>
          <width>40</width>
          <cliOptionName>systemuser</cliOptionName>
          <cliOptionShow>yes</cliOptionShow>
          <ruleList>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${usepostgres}</text>
              <value>yes</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${pgAgentVersion}</text>
              <value/>
            </compareText>
          </ruleList>
        </stringParameter>
        <passwordParameter>
          <name>systempassword</name>
          <description>${msg(config.syspassword.description)}</description>
          <explanation/>
          <value/>
          <default>${defaultsyspassword}</default>
          <allowEmptyValue>1</allowEmptyValue>
          <cliOptionName>systempassword</cliOptionName>
          <cliOptionShow>yes</cliOptionShow>
          <descriptionRetype>${msg(config.syspassword.confirm)}</descriptionRetype>
          <width>40</width>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </passwordParameter>
      </parameterList>
      <ruleEvaluationLogic>OR</ruleEvaluationLogic>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${usepostgres}</text>
          <value>no</value>
        </compareText>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
      <validationActionList>
        <actionGroup>
          <actionList>
            <throwError>
              <text>${msg(systemuser.blank.error)}</text>
            </throwError>
          </actionList>
          <ruleList>
            <compareText>
              <text>${systemuser}</text>
              <logic>equals</logic>
              <value/>
            </compareText>
          </ruleList>
        </actionGroup>
        <actionGroup>
          <actionList>
            <throwError>
              <text>${msg(systempassword.blank.error)}</text>
            </throwError>
          </actionList>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${systempassword}</text>
              <value/>
            </compareText>
          </ruleList>
        </actionGroup>
        <!-- WIN : Validate user name & password -->
        <actionGroup>
          <actionList>
            <unpackFile>
              <component>pgAgent</component>
              <destination>${system_temp_directory}\${product_fullname}\bin\validateuser.exe</destination>
              <folder>installfileswindows</folder>
              <origin>installer\pgAgent\validateuser.exe</origin>
            </unpackFile>
            <runProgram>
              <program>${system_temp_directory}\${product_fullname}\bin\validateuser.exe</program>
              <programArguments>. "${systemuser}" "${systempassword}"</programArguments>
              <abortOnError>0</abortOnError>
              <showMessageOnError>0</showMessageOnError>
            </runProgram>
            <throwError>
              <text>${msg(script.command.line.error)}</text>
              <ruleList>
                <compareText>
                  <logic>equals</logic>
                  <text>127</text>
                  <value>${program_exit_code}</value>
                </compareText>
              </ruleList>
            </throwError>
            <throwError>
              <text>${msg(config.systempassword.incorrect.windows)}</text>
              <ruleList>
                <compareText>
                  <logic>equals</logic>
                  <text>1</text>
                  <value>${program_exit_code}</value>
                </compareText>
              </ruleList>
            </throwError>
          </actionList>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
      </actionGroup>
      </validationActionList>
      <preShowPageActionList>
     </preShowPageActionList>
   </parameterGroup>
  </parameterList>
</project>
