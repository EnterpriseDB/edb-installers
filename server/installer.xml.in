<project>
    <!-- Package details -->
    <shortName>postgresql</shortName>
    <fullName>PostgreSQL</fullName>
    <version>PG_MAJOR_VERSION</version>
    
    <!-- These options are used on Windows -->
    <productDisplayName>${product_fullname} ${product_version}</productDisplayName>
    <productComments>The PostgreSQL DDBMS, version ${product_version}, packaged by EnterpriseDB</productComments>
    <productUrlHelpLink>http://www.postgresql.org/docs</productUrlHelpLink>
    <productUrlInfoAbout>http://www.postgresql.org/</productUrlInfoAbout>
    <startMenuGroupName>${branding}</startMenuGroupName>
    <vendor>PostgreSQL Global Development Group</vendor>

    <!-- Installer Size -->
    <width>550</width>
    <height>400</height>
    
    <!-- Misc paackage options -->
    <enableRollback>0</enableRollback>
    <outputDirectory>../output</outputDirectory>
    <requireInstallationByRootUser>1</requireInstallationByRootUser>
    <unattendedModeUI>minimal</unattendedModeUI>
    <saveRelativePaths>1</saveRelativePaths>
    <defaultUnixGroup>daemon</defaultUnixGroup>
    <defaultUnixOwner>root</defaultUnixOwner>
    <installationLogFile>${system_temp_directory}/install-${product_shortname}.log</installationLogFile>
    <uninstallationLogFile>${system_temp_directory}/uninstall-${product_shortname}.log</uninstallationLogFile>
    <allowWindowResize>1</allowWindowResize>
    <replaceLockedFilesOnReboot>1</replaceLockedFilesOnReboot>
    
    <!-- Images -->
    <leftImage>../resources/pg-side.png</leftImage>
    <splashImage>../resources/pg-splash.png</splashImage>
    
    <!-- Languages allowed? -->
    <!-- <allowLanguageSelection>1</allowLanguageSelection> -->
    <allowedLanguages>en</allowedLanguages>
    
    <!-- i18n files for the UI -->
    <customLanguageFileList>
        <language>
            <code>en</code>
            <encoding>iso8859-1</encoding>
            <file>i18n/en.lng</file>
        </language>
    </customLanguageFileList>

    <!-- Custom functions -->
    <functionDefinitionList>
     <actionDefinition name="createTempDir">
       <actionList>
         <globalVariables names="random_number"/>
         <!-- Unix -->
         <actionGroup>
           <actionList>
            <setInstallerVariable name="iteration" value="0"/>
            <!-- Create a random number to use unique filenames -->
            <!-- If the tenporary directory already exist, then generate the random number again. Repeat it for 10 times and then exit if the directory still exists -->
             <while>
               <actionList>
                 <generateRandomValue length="10" variable="random_number"/>
                 <runProgram>
                   <program>sh</program>
                   <programArguments>-c &lt;&lt;EOF '
                                     umask 0077
                                     mkdir "${system_temp_directory}/${dirPrefix}_${random_number}"
                                     if [ $? -ne 0 ];
                                     then
                                        exit 100
                                     fi
                                     '
EOF
                   </programArguments>
                 </runProgram>
                 <break>
                   <ruleList>
                    <compareText logic="equals" text="0" value="${program_exit_code}"/>
                   </ruleList>
                 </break>
                <actionGroup>
                  <actionList>
                    <throwError text="${msg(cannot.create.tmp.dir)}" abortOnError="1">
                      <ruleList>
                         <compareValues value1="${iteration}" logic="equals" value2="9"/>
                       </ruleList>
                     </throwError>
                  </actionList>
                </actionGroup>
                 <mathExpression text="${iteration}+1" variable="iteration"/>
               </actionList>
               <conditionRuleList>
                 <compareValues value1="${iteration}" logic="less" value2="10"/>
               </conditionRuleList>
             </while>
            <setInstallerVariable name="random_number" value="${random_number}"/>
          </actionList>
          <ruleList>
             <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
           </ruleList>
         </actionGroup>
        <!-- Windows -->
        <actionGroup>
          <actionList>
            <generateRandomValue length="10" variable="random_number"/>
            <createDirectory path="${system_temp_directory}/${dirPrefix}_${random_number}"/>
            <setInstallerVariable name="random_number" value="${random_number}"/>
          </actionList>
           <ruleList>
             <compareText logic="equals" text="${platform_name}" value="windows"/>
           </ruleList>
        </actionGroup>
       </actionList>
       <parameterList>
         <stringParameter name="dirPrefix" allowEmptyValue="0"/>
       </parameterList>
     </actionDefinition>
    </functionDefinitionList>

    <!-- Prebuild Actons-->
    <preBuildActionList>
      <setInstallerVariable name="originalplatform" value="${platform_name}"/>
      <setInstallerVariable name="originalplatform" value="linux-x32">
          <ruleList>
              <compareText text="${platform_name}" value="linux"/>
          </ruleList>
      </setInstallerVariable>
    </preBuildActionList>
    
    <!-- Initialisation actions -->
    <initializationActionList>
    
    <!-- Abort Installation as trying to  run a 32-bit installer on 64-bit machine -->
        <throwError>
          <customErrorMessage>${msg(platform.not.match)}</customErrorMessage>
          <text>Unknown Error</text>
          <ruleList>
            <platformTest type="linux-x64"/>
            <compareText text="${originalplatform}" value="linux-x32"/>
          </ruleList>
        </throwError>
        
        <!-- Set the superusername -->
        <!-- TODO: Make this user configurable -->
        <setInstallerVariable>
            <name>supername</name>
            <value>postgres</value>
            <persist>1</persist>
        </setInstallerVariable>
        
        <!-- Set the default password, to be used only in unnattended mode -->
        <setInstallerVariable>
            <name>defaultpassword</name>
            <value>postgres</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${installer_ui}</text>
                    <value>unattended</value>
                </compareText>
            </ruleList>
             
        </setInstallerVariable>
        <setInstallerVariable>
            <name>defaultpassword</name>
            <value></value>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${installer_ui}</text>
                    <value>unattended</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
        
        <!-- Get a default port number - ideally 5432 -->
        <getFreePort>
            <variable>defaultport</variable>
            <initialPort>5432</initialPort>
            <finalPort>65535</finalPort>
        </getFreePort>
        
        <!-- Upgrading? -->
        <setInstallerVariable>
            <name>IsUpgrade</name>
            <value>0</value>
        </setInstallerVariable>
        
        <!-- Set the uninstaller name -->
        <setInstallerVariable>
            <name>uninstallerName</name>
            <persist>1</persist>
            <value>uninstall-postgresql</value>
        </setInstallerVariable>
        
        <!-- Catalog version -->
        <setInstallerVariable>
            <name>CatalogVersion</name>
            <value>PG_CATALOG_VERSION</value>
        </setInstallerVariable>
       
        <!-- Date/Time Setting -->
        <setInstallerVariable>
            <name>DateTimeSetting</name>
            <value>@@PG_DATETIME_SETTING_LINUX@@</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText> 
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable>
            <name>DateTimeSetting</name>
            <value>@@PG_DATETIME_SETTING_LINUX_X64@@</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>linux-x64</value>
                </compareText> 
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable>
            <name>DateTimeSetting</name>
            <value>@@PG_DATETIME_SETTING_WINDOWS@@</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText> 
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable>
            <name>DateTimeSetting</name>
            <value>@@PG_DATETIME_SETTING_OSX@@</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText> 
            </ruleList>
        </setInstallerVariable>
       
        <actionGroup>
            <actionList>
 
                <!-- Set the ini filename -->
                <setInstallerVariable>
                    <name>PostgreSqlIni</name>
                    <persist>1</persist>
                    <value>/etc/postgres-reg.ini</value>
                </setInstallerVariable>
        
                <logMessage>
                    <text>Using ini file: ${PostgreSqlIni}</text>
                </logMessage>
            </actionList>

            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
 
    </initializationActionList>
    
    <!-- Preinstallation actions -->
    <preInstallationActionList>
       
    <!-- Create temporary directory where all the temp files will be copied -->
        <!-- createTempDir is a custom function that creates the unique temporary directory with proper permissions and returns the path in tempDir variable -->
        <createTempDir dirPrefix="postgresql_installer"/>
        <actionGroup>
          <actionList>
            <createDirectory path="${system_temp_directory}/postgresql_installer_${random_number}/bin"/>
            <createDirectory path="${system_temp_directory}/postgresql_installer_${random_number}/lib"/>
          </actionList>
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="osx"/>
            <isFalse value="${extract_mode}"/>
          </ruleList>
        </actionGroup>

        <setInstallerVariable name="iDataDirectory" value=""/>
        <setInstallerVariable name="iBaseDirectory" value=""/>
 
        <!-- !WIN: Get existing directories & branding -->
        <actionGroup>
            <actionList>
                <!-- Get the existing data directory. -->
                <iniFileGet>
                    <file>${PostgreSqlIni}</file>
                    <key>DataDirectory</key>
                    <section>PostgreSQL/${product_version}</section>
                    <variable>iDataDirectory</variable>
                    <ruleList>
                        <fileTest>
                            <condition>readable</condition>
                            <path>${PostgreSqlIni}</path>
                        </fileTest>
                    </ruleList>
                </iniFileGet>
                <setInstallerVariable>
                    <name>iDataDirectory</name>
                    <persist>0</persist>
                    <value></value>
                    <ruleList>
                        <fileTest>
                            <condition>not_readable</condition>
                            <path>${PostgreSqlIni}</path>
                        </fileTest>
                    </ruleList>
                </setInstallerVariable>
                
                <!-- Get the base installation path. Any previous package could have set this. -->
                <iniFileGet>
                    <file>${PostgreSqlIni}</file>
                    <key>InstallationDirectory</key>
                    <section>PostgreSQL/${product_version}</section>
                    <variable>iBaseDirectory</variable>
                    <ruleList>
                        <fileTest>
                            <condition>readable</condition>
                            <path>${PostgreSqlIni}</path>
                        </fileTest>
                    </ruleList>
                </iniFileGet>
                <setInstallerVariable>
                    <name>iBaseDirectory</name>
                    <persist>0</persist>
                    <value></value>
                    <ruleList>
                        <fileTest>
                            <condition>not_readable</condition>
                            <path>${PostgreSqlIni}</path>
                        </fileTest>
                    </ruleList>
                </setInstallerVariable>
                
                <!-- Get the branding. -->
                <iniFileGet>
                    <file>${PostgreSqlIni}</file>
                    <key>Branding</key>
                    <section>PostgreSQL/${product_version}</section>
                    <variable>iBranding</variable>
                    <ruleList>
                        <fileTest>
                            <condition>readable</condition>
                            <path>${PostgreSqlIni}</path>
                        </fileTest>
                    </ruleList>
                </iniFileGet>
                <setInstallerVariable>
                    <name>iBranding</name>
                    <persist>0</persist>
                    <value></value>
                    <ruleList>
                        <fileTest>
                            <condition>not_readable</condition>
                            <path>${PostgreSqlIni}</path>
                        </fileTest>
                    </ruleList>
                </setInstallerVariable>
                
                <!-- Get the version installed. We use this to figure out if we have a pre-branding installation -->
                <iniFileGet>
                    <file>${PostgreSqlIni}</file>
                    <key>Version</key>
                    <section>PostgreSQL/${product_version}</section>
                    <variable>brandingVer</variable>
                    <ruleList>
                        <fileTest>
                            <condition>readable</condition>
                            <path>${PostgreSqlIni}</path>
                        </fileTest>
                    </ruleList>
                </iniFileGet>
                <setInstallerVariable>
                    <name>brandingVer</name>
                    <persist>0</persist>
                    <value></value>
                    <ruleList>
                        <fileTest>
                            <condition>not_readable</condition>
                            <path>${PostgreSqlIni}</path>
                        </fileTest>
                    </ruleList>
                </setInstallerVariable>
                
            </actionList>
            
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
        
        <!-- WIN: Get existing directories & branding -->
        <actionGroup>
            <actionList>
                <!-- Get the existing data directory. -->
                <registryGet>
                    <name>Data Directory</name>
                    <key>HKEY_LOCAL_MACHINE\SOFTWARE\PostgreSQL\Installations\postgresql-${product_version}</key>
                    <variable>iDataDirectory</variable>
                </registryGet>
                
                <!-- Get the existing installation directory. -->
                <registryGet>
                    <name>Base Directory</name>
                    <key>HKEY_LOCAL_MACHINE\SOFTWARE\PostgreSQL\Installations\postgresql-${product_version}</key>
                    <variable>iBaseDirectory</variable>
                </registryGet>
                
                <!-- Get the branding -->
                <registryGet>
                    <name>Branding</name>
                    <key>HKEY_LOCAL_MACHINE\SOFTWARE\PostgreSQL\Installations\postgresql-${product_version}</key>
                    <variable>iBranding</variable>
                </registryGet>
                
                <!-- Get the version installed. We use this to figure out if we have a pre-branding installation -->
                <registryGet>
                    <name>Version</name>
                    <key>HKEY_LOCAL_MACHINE\SOFTWARE\PostgreSQL\Installations\postgresql-${product_version}</key>
                    <variable>brandingVer</variable>
                </registryGet>
                                
            </actionList>
            
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>

        <!-- Set the iDataDirectory value to CLI datadir if no registry/ini value of dataDirectory is found --> 
        <setInstallerVariable>
            <name>iDataDirectory</name>
            <persist>0</persist>
            <value>${datadir}</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${iDataDirectory}</text>
                    <value/>
                </compareText>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${datadir}</text>
                    <value/>
                </compareText>
            </ruleList>
        </setInstallerVariable>

        
        <!-- If there appears to be an existing installation, with no Branding value. --> 
        <!-- force the default value. Otherwise, set the branding to whatever we read, -->
        <!-- or, set the default -->
        
        <!-- Existing, old install (version, but no branding) -->
        <setInstallerVariable>
            <name>branding</name>
            <persist>0</persist>
            <value>PostgreSQL ${product_version}</value>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${brandingVer}</text>
                    <value></value>
                </compareText>
                <compareText>
                    <logic>equals</logic>
                    <text>${iBranding}</text>
                    <value></value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
        
        <!-- Existing install, with branding -->
        <setInstallerVariable>
            <name>branding</name>
            <persist>0</persist>
            <value>${iBranding}</value>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${iBranding}</text>
                    <value></value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
        
        <!-- New install, nothing set on the command line -->
        <setInstallerVariable>
            <name>branding</name>
            <persist>0</persist>
            <value>PostgreSQL ${product_version}</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${branding}</text>
                    <value></value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
        
        <!-- Debugging -->
        <logMessage>
            <text>Existing base directory: ${iBaseDirectory}</text>
        </logMessage>
        <logMessage>
            <text>Existing data directory: ${iDataDirectory}</text>
        </logMessage>
        <logMessage>
            <text>Using branding: ${branding}</text>
        </logMessage>
       
        <!-- In unattended mode, set installdir to iBaseDirectory,
             if an already existing base directory value is found in the ini/registry. 
        -->
        <setInstallerVariable>
            <name>installdir</name>
            <value>${iBaseDirectory}</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${installer_ui}</text>
                    <value>unattended</value>
                </compareText>
                <stringTest>
                    <text>${iBaseDirectory}</text>
                    <type>not_empty</type>
                </stringTest>
            </ruleList>
        </setInstallerVariable>

        <!-- Preinstall script -->
        <unpackFile>
            <component>default</component>
            <destination>${system_temp_directory}/postgresql_installer_${random_number}/preinstall.sh</destination>
            <folder>programfilesmacosx</folder>
            <origin>installer/server/preinstall.sh</origin>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </unpackFile>

        <!-- Getlocales script -->
        <unpackFile>
            <component>default</component>
            <destination>${system_temp_directory}/postgresql_installer_${random_number}/getlocales.sh</destination>
            <folder>programfilesmacosx</folder>
            <origin>installer/server/getlocales.sh</origin>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </unpackFile>
       <unpackFile>
            <component>default</component>
            <destination>${system_temp_directory}/postgresql_installer_${random_number}/getlocales.sh</destination>
            <folder>programfileslinux</folder>
            <origin>installer/server/getlocales.sh</origin>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </unpackFile>
       <unpackFile>
            <component>default</component>
            <destination>${system_temp_directory}/postgresql_installer_${random_number}/getlocales.sh</destination>
            <folder>programfileslinux-x64</folder>
            <origin>installer/server/getlocales.sh</origin>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>linux-x64</value>
                </compareText>
            </ruleList>
        </unpackFile>
       <unpackFile>
            <component>default</component>
            <destination>${system_temp_directory}/postgresql_installer_${random_number}/getlocales.exe</destination>
            <folder>programfileswindows</folder>
            <origin>installer/server/getlocales.exe</origin>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </unpackFile>
                
        <!-- pg_controldata (used to check existing clusters) -->
        <actionGroup>
            <actionList>
                <unpackFile>
                    <component>default</component>
                    <destination>${system_temp_directory}/postgresql_installer_${random_number}/bin/pg_controldata</destination>
                    <folder>programfilesmacosx</folder>
                    <origin>bin/pg_controldata</origin>
                </unpackFile>
                <unpackFile>
                    <component>default</component>
                    <destination>${system_temp_directory}/postgresql_installer_${random_number}/lib/libxml2.2.dylib</destination>
                    <folder>programfilesmacosx</folder>
                    <origin>lib/libxml2.2.dylib</origin>
                </unpackFile>
                <unpackFile>
                    <component>default</component>
                    <destination>${system_temp_directory}/postgresql_installer_${random_number}/lib/libssl.1.0.0.dylib</destination>
                    <folder>programfilesmacosx</folder>
                    <origin>lib/libssl.1.0.0.dylib</origin>
                </unpackFile>
	       <unpackFile>
                    <component>default</component>
                    <destination>${system_temp_directory}/postgresql_installer_${random_number}/lib/libiconv.2.dylib</destination>
                    <folder>programfilesmacosx</folder>
                    <origin>lib/libiconv.2.dylib</origin>
                </unpackFile>
                <unpackFile>
                    <component>default</component>
                    <destination>${system_temp_directory}/postgresql_installer_${random_number}/lib/libcrypto.1.0.0.dylib</destination>
                    <folder>programfilesmacosx</folder>
                    <origin>lib/libcrypto.1.0.0.dylib</origin>
                </unpackFile>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </actionGroup>
        
        <actionGroup>
            <actionList>
                <unpackFile>
                    <component>default</component>
                    <destination>${system_temp_directory}/postgresql_installer_${random_number}/pg_controldata</destination>
                    <folder>programfileslinux</folder>
                    <origin>bin/pg_controldata</origin>
                </unpackFile>
                <unpackFile>
                    <component>default</component>
                    <destination>${system_temp_directory}/postgresql_installer_${random_number}/runpgcontroldata.sh</destination>
                    <folder>programfileslinux</folder>
                    <origin>installer/server/runpgcontroldata.sh</origin>
                </unpackFile>
                <unpackDirectory>
                    <component>default</component>
                    <destination>${system_temp_directory}/postgresql_installer_${random_number}/</destination>
                    <folder>programfileslinux</folder>
                    <origin>lib</origin>
                </unpackDirectory>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </actionGroup>
        
        <actionGroup>
            <actionList>
                <unpackFile>
                    <component>default</component>
                    <destination>${system_temp_directory}/postgresql_installer_${random_number}/pg_controldata</destination>
                    <folder>programfileslinux-x64</folder>
                    <origin>bin/pg_controldata</origin>
                </unpackFile>
                <unpackFile>
                    <component>default</component>
                    <destination>${system_temp_directory}/postgresql_installer_${random_number}/runpgcontroldata.sh</destination>
                    <folder>programfileslinux-x64</folder>
                    <origin>installer/server/runpgcontroldata.sh</origin>
                </unpackFile>
                <unpackDirectory>
                    <component>default</component>
                    <destination>${system_temp_directory}/postgresql_installer_${random_number}/</destination>
                    <folder>programfileslinux-x64</folder>
                    <origin>lib</origin>
                </unpackDirectory>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>linux-x64</value>
                </compareText>
            </ruleList>
        </actionGroup>
        
        <actionGroup>
            <actionList>
                <unpackFile>
                    <component>default</component>
                    <destination>${system_temp_directory}\postgresql_installer_${random_number}\pg_controldata.exe</destination>
                    <folder>programfileswindows</folder>
                    <origin>bin/pg_controldata.exe</origin>
                </unpackFile>
                <unpackFile>
                    <component>default</component>
                    <destination>${system_temp_directory}\postgresql_installer_${random_number}\libintl-8.dll</destination>
                    <folder>programfileswindows</folder>
                    <origin>bin/libintl-8.dll</origin>
                </unpackFile>
                <unpackFile>
                    <component>default</component>
                    <destination>${system_temp_directory}\postgresql_installer_${random_number}\libiconv-2.dll</destination>
                    <folder>programfileswindows</folder>
                    <origin>bin/libiconv-2.dll</origin>
                </unpackFile>
                
                <!-- Validate user binary -->
                <unpackFile>
                    <component>default</component>
                    <destination>${system_temp_directory}\postgresql_installer_${random_number}\validateuser.exe</destination>
                    <folder>programfileswindows</folder>
                    <origin>installer/server/validateuser.exe</origin>
                </unpackFile>

                <!-- Create user binary   -->
                <unpackFile>
                    <component>default</component>
                    <destination>${system_temp_directory}\postgresql_installer_${random_number}\createuser.exe</destination>
                    <folder>programfileswindows</folder>
                    <origin>installer/server/createuser.exe</origin>
                </unpackFile>
                
                <!-- We will also need to get the VC++ runtimes installed on Windows, before we do anything with binaries -->
                <unpackFile>
                    <component>default</component>
                    <destination>${system_temp_directory}\postgresql_installer_${random_number}\vcredist_x86.exe</destination>
                    <folder>programfileswindows</folder>
                    <origin>installer/vcredist_x86.exe</origin>
                    <customErrorMessage>${msg(error.installing.runtimes)}</customErrorMessage>
                </unpackFile>
                <unpackFile>
                    <component>default</component>
                    <destination>${system_temp_directory}/postgresql_installer_${random_number}/installruntimes.vbs</destination>
                    <folder>programfileswindows</folder>
                    <origin>installer/installruntimes.vbs</origin>
                    <customErrorMessage>${msg(error.installing.runtimes)}</customErrorMessage>
                </unpackFile>
                <runProgram>
                    <program>cscript</program>
                    <programArguments>//NoLogo "${system_temp_directory}\postgresql_installer_${random_number}\installruntimes.vbs" "${system_temp_directory}\postgresql_installer_${random_number}\vcredist_x86.exe"</programArguments>
                    <abortOnError>1</abortOnError>
                    <showMessageOnError>1</showMessageOnError>
                    <customErrorMessage>${msg(error.installing.runtimes)}</customErrorMessage>
                </runProgram>
                <throwError>
                    <text>${msg(script.command.line.error)}</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>127</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                    </ruleList>
                </throwError>
            </actionList>
             
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
                
        <!-- If we have an existing data directory location and it's not empty, check it looks sane -->
        <actionGroup>
            <actionList>
                
                <!-- Do we have a pg_control file? -->
                <throwError>
                    <text>${msg(error.data.directory.registered.broken)}</text>
                    <ruleList>            
                        <fileTest>
                            <path>${iDataDirectory}/global/pg_control</path>
                            <condition>not_exists</condition>
                        </fileTest>
                    </ruleList>
                </throwError>
                
                <!-- Do we have a valid catalog version? -->
                <runProgram>
                    <program>${system_temp_directory}/postgresql_installer_${random_number}/bin/pg_controldata</program>
                    <programArguments>"${iDataDirectory}"</programArguments>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>${platform_name}</text>
                            <value>osx</value>
                        </compareText>
                    </ruleList>
                </runProgram>
                
                <runProgram>
                    <program>${system_temp_directory}/postgresql_installer_${random_number}/runpgcontroldata.sh</program>
                    <programArguments>${system_temp_directory}/postgresql_installer_${random_number} "${iDataDirectory}"</programArguments>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                    <ruleList>
                        <compareText>
                            <logic>contains</logic>
                            <text>${platform_name}</text>
                            <value>linux</value>
                        </compareText>
                    </ruleList>
                </runProgram>
                
                <runProgram>
                    <program>${system_temp_directory}\postgresql_installer_${random_number}\pg_controldata.exe</program>
                    <programArguments>"${iDataDirectory}"</programArguments>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </runProgram>
                
                <setInstallerVariableFromRegEx>
                    <name>CurrentCatalogVersion</name>
                    <text>${program_stdout}</text>
                    <pattern>^.*Catalog version number:\s+([\d]+).*$</pattern>
                    <substitution>\1</substitution>
                </setInstallerVariableFromRegEx>
                
                <setInstallerVariableFromRegEx>
                    <name>CurrentDateTimeSettings</name>
                    <text>${program_stdout}</text>
                    <pattern>^.*Date/time type storage:\s+([\d\w\-]+\s+[\w]+).*$</pattern>
                    <substitution>\1</substitution>
                </setInstallerVariableFromRegEx>

                <logMessage>
                    <text>Existing cluster catalog version: ${CurrentCatalogVersion}, installer catalog version: ${CatalogVersion}</text>
                </logMessage>
                
                <logMessage>
                    <text>Existing cluster Date/time settings: ${CurrentDateTimeSettings}, installer Date/time settings: ${DateTimeSetting}</text>
                </logMessage>

                <throwError>
                    <text>${msg(error.data.directory.incompatible)}</text>
                    <ruleList>
                        <compareText>
                            <value>${CurrentCatalogVersion}</value>
                            <logic>does_not_equal</logic>
                            <text>${CatalogVersion}</text>
                        </compareText>
                    </ruleList>
                </throwError>

                <throwError>
                    <text>${msg(error.data.directory.incompatible.datetime)}</text>
                    <ruleList>
                        <compareText>
                            <value>${CurrentDateTimeSettings}</value>
                            <logic>does_not_equal</logic>
                            <text>${DateTimeSetting}</text>
                        </compareText>
                    </ruleList>
                </throwError>
            </actionList>
            
            <ruleList>
                <stringTest>
                    <text>${iDataDirectory}</text>
                    <type>not_empty</type>
                </stringTest>
                <fileExists>
                    <path>${iDataDirectory}</path>
                </fileExists>
                <fileTest>
                    <path>${iDataDirectory}</path>
                    <condition>is_not_empty</condition>
                </fileTest>
                 
            </ruleList>
        </actionGroup>
        
        <!-- So, is this an upgrade of an existing cluster? -->
        <!-- At this point, if we have an existing data directory it either looks valid, or is empty --> 
        <actionGroup>
            <actionList>
                <setInstallerVariable>
                    <name>IsUpgrade</name>
                    <value>1</value>
                </setInstallerVariable>
                <setInstallerVariable>
                    <name>datadir</name>
                    <value>${iDataDirectory}</value>
                </setInstallerVariable>
                <logMessage>
                    <text>Switching to upgrade mode with cluster: ${datadir}</text>
                </logMessage>

                <!-- Read the port number from the config file -->
                <readFile>
                    <path>${datadir}/postgresql.conf</path>
                    <name>serverconfig</name>
                </readFile>
                <setInstallerVariableFromRegEx>
                    <name>defaultport</name>
                    <text>${serverconfig}</text>
                    <pattern>^.*port\s*=\s*([\d]+)\s+.*$</pattern>
                    <substitution>\1</substitution>
                </setInstallerVariableFromRegEx>
            </actionList>
            
            <ruleList>
                <stringTest>
                    <text>${iDataDirectory}</text>
                    <type>not_empty</type>
                </stringTest>
                <fileTest>
                    <path>${iDataDirectory}</path>
                    <condition>is_not_empty</condition>
                </fileTest>
            </ruleList>
        </actionGroup>
        
        <!-- MAC: Preinstall script. -->
        <actionGroup>
            <actionList>
                <runProgram>
                    <program>${system_temp_directory}/postgresql_installer_${random_number}/preinstall.sh</program>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>
                
                <!-- Check the output from the preinstall script -->
                <throwError>
                    <text>${msg(error.shared.memory.manual)}</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>1</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                    </ruleList>
                </throwError>
                <throwError>
                    <text>${msg(error.shared.memory.updated)}</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>2</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                    </ruleList>
                </throwError>
                <throwError>
                    <text>${msg(error.shared.memory.shmall.manual)}</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>3</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                    </ruleList>
                </throwError>
                <throwError>
                    <text>${msg(error.shared.memory.shmall.updated)}</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>4</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                    </ruleList>
                </throwError>
            </actionList>
            
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </actionGroup>

        <!-- Get the locales available -->
        <actionGroup> 
            <actionList>
                <addChoiceOptions>
                    <name>locale</name>
                    <optionList>
                        <option>
                            <value>DEFAULT</value>
                            <text>[${msg(default.locale)}]</text>
                        </option>
                    </optionList>
                </addChoiceOptions>
                 <addChoiceOptions>
                    <name>locale</name>
                    <optionList>
                        <option>
                            <value>C</value>
                            <text>C</text>
                        </option>
                        <option>
                            <value>POSIX</value>
                            <text>POSIX</text>
                        </option>
                    </optionList>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </addChoiceOptions>
                
                <runProgram>
                    <program>${system_temp_directory}/postgresql_installer_${random_number}/getlocales.sh</program>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </runProgram>
                
                <runProgram>
                    <program>${system_temp_directory}\postgresql_installer_${random_number}\getlocales.exe</program>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </runProgram>
                
                <throwError>
                    <text>${msg(script.command.line.error)}</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>127</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                    </ruleList>
                </throwError>
                <addChoiceOptionsFromText>
                    <name>locale</name>
                    <text>${program_stdout}</text>
                </addChoiceOptionsFromText>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${IsUpgrade}</text>
                    <value>1</value>
                </compareText>
            </ruleList>
        </actionGroup>

        <!-- Set the default locale if needed. -->
        <actionGroup>
            <actionList>
                <setInstallerVariable>
                    <name>locale</name>
                    <value>DEFAULT</value>
                </setInstallerVariable>
            </actionList>
            <ruleList>
                <stringTest>
                    <text>${locale}</text>
                    <type>empty</type>
                </stringTest>
            </ruleList> 
        </actionGroup>

        <!-- Convert the locale value to something the choiceParameter will like -->
        <setInstallerVariableFromRegEx>
            <text>${locale}</text>
            <substitution>xxUSxx</substitution>
            <name>locale</name>
            <pattern>_</pattern>
        </setInstallerVariableFromRegEx>
        <setInstallerVariableFromRegEx>
            <text>${locale}</text>
            <substitution>xxDOTxx</substitution>
            <name>locale</name>
            <pattern>\.</pattern>
        </setInstallerVariableFromRegEx>
        <setInstallerVariableFromRegEx>
            <text>${locale}</text>
            <substitution>xxDASHxx</substitution>
            <name>locale</name>
            <pattern>-</pattern>
        </setInstallerVariableFromRegEx>
        <setInstallerVariableFromRegEx>
            <text>${locale}</text>
            <substitution>xxATxx</substitution>
            <name>locale</name>
            <pattern>@</pattern>
        </setInstallerVariableFromRegEx>
        <setInstallerVariableFromRegEx>
            <text>${locale}</text>
            <substitution>xxSPxx</substitution>
            <name>locale</name>
            <pattern>\s</pattern>
        </setInstallerVariableFromRegEx>
        <setInstallerVariableFromRegEx>
            <text>${locale}</text>
            <substitution>xxOBxx</substitution>
            <name>locale</name>
            <pattern>\(</pattern>
        </setInstallerVariableFromRegEx>
        <setInstallerVariableFromRegEx>
            <text>${locale}</text>
            <substitution>xxCBxx</substitution>
            <name>locale</name>
            <pattern>\)</pattern>
        </setInstallerVariableFromRegEx>
        <setInstallerVariableFromRegEx>
            <text>${locale}</text>
            <substitution>xxCOMMAxx</substitution>
            <name>locale</name>
            <pattern>,</pattern>
        </setInstallerVariableFromRegEx>
             
        <!-- Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>/Library/PostgreSQL/${product_version}</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
        
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${platform_install_prefix}/PostgreSQL/${product_version}</value>
            <ruleList>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
        
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${platform_install_prefix}/PostgreSQL/${product_version}</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
    </preInstallationActionList>

    <readyToInstallActionList>    

        <!-- Attempt to stop any existing server. We *always* do this, just in case  -->
        <!-- the existing installation is broken and it doesn't look like an upgrade -->

        <!-- MAC: Stop the server -->
        <runProgram>
            <program>/sbin/SystemStarter</program>
            <programArguments>stop postgresql-${product_version}</programArguments>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
                <fileExists>
                    <path>/Library/StartupItems/postgresql-${product_version}/postgresql-${product_version}</path>
                </fileExists>
            </ruleList>
        </runProgram>

        <!-- LINUX: Stop the server -->
        <runProgram>
            <program>/etc/init.d/postgresql-${product_version}</program>
            <programArguments>stop</programArguments>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
            <ruleList>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
                <fileExists>
                    <path>/etc/init.d/postgresql-${product_version}</path>
                </fileExists>
            </ruleList>
        </runProgram>
        
        <!-- WINDOWS: Stop the server -->
        <stopWindowsService>
            <serviceName>postgresql-${product_version}</serviceName>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
        </stopWindowsService>

        <!-- 
             In case of upgrade,
             Delete the dependent libraries from the existing installation
             The current installer will put only the required version of these libraries
         -->     
        <actionGroup>
            <actionList>
                <runProgram>
                    <program>rm</program>
                    <programArguments>-f ${installdir}/lib/libssl.so*</programArguments>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram> 
                <runProgram>
                    <program>rm</program>
                    <programArguments>-f ${installdir}/lib/libcrypto.so*</programArguments>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram> 
                <runProgram>
                    <program>rm</program>
                    <programArguments>-f ${installdir}/lib/libedit.so*</programArguments>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram> 
                <runProgram>
                    <program>rm</program>
                    <programArguments>-f ${installdir}/lib/libtermcap.so*</programArguments>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram> 
            </actionList> 
            <ruleList>
                <compareText>
                    <text>${IsUpgrade}</text>
                    <logic>equals</logic>
                    <value>1</value>
                </compareText> 
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </actionGroup>  

    </readyToInstallActionList>    

    <!-- Postinstallation actions -->
    <postInstallationActionList>
        <logMessage>
            <text>Running the post-installation/upgrade actions:</text>
        </logMessage>
        
        <!-- In upgrade mode, remove the existing ldconfig setting - set during the previous installation -->
        <actionGroup>
            <actionList>
                <logMessage text="Removing the existing ldconfig setting - set during the previous installation."/>
                <deleteFile>
                    <path>/etc/ld.so.conf.d/postgresql-${product_version}.conf</path>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </deleteFile>
                <substitute>
                    <substitutionList>
                        <substitution>
                            <pattern>${installdir}/lib</pattern>
                            <value></value>
                        </substitution>
                    </substitutionList>
                    <type>exact</type>
                    <files>/etc/ld.so.conf</files>
                </substitute>
            </actionList>
            <ruleList>
                <compareText logic="does_not_equal" text="${brandingVer}" value=""/>
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </actionGroup>

  
        <!-- Log Installation directory -->
        <logMessage>
            <text>Write the base directory to the ini file...</text>
        </logMessage>
        <iniFileSet>
            <file>${PostgreSqlIni}</file>
            <section>PostgreSQL/${product_version}</section>
            <key>InstallationDirectory</key>
            <value>${installdir}</value>
            <ruleList>
                <stringTest>
                    <text>${installdir}</text>
                    <type>not_empty</type>
                </stringTest>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </iniFileSet>
        <registrySet>
            <key>HKEY_LOCAL_MACHINE\SOFTWARE\PostgreSQL\Installations\postgresql-${product_version}</key>
            <name>Base Directory</name>
            <value>${installdir}</value>
        </registrySet>
        
        <!-- Log version number -->
        <logMessage>
            <text>Write the version number to the ini file...</text>
        </logMessage>
        <iniFileSet>
            <file>${PostgreSqlIni}</file>
            <section>PostgreSQL/${product_version}</section>
            <key>Version</key>
            <value>PG_MAJOR_VERSION.PG_MINOR_VERSION</value>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </iniFileSet>
        <registrySet>
            <key>HKEY_LOCAL_MACHINE\SOFTWARE\PostgreSQL\Installations\postgresql-${product_version}</key>
            <name>Version</name>
            <value>${product_version}</value>
        </registrySet>

        <!-- Track if any errors occurred so we can hide the Run Stackbuilder option -->
        <setInstallerVariable>
            <name>didError</name>
            <value>0</value>
        </setInstallerVariable>

        <!-- Create the service user account -->
        <runProgram>
            <program>${installdir}/installer/server/createuser.sh</program>
            <programArguments>"${supername}" "${installdir}"</programArguments>
            <progressText>${msg(progress.text.creating.user)}</progressText>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </runProgram>
        
       
        <setInstallerVariable>
            <name>didError</name>
            <value>1</value>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>0</text>
                    <value>${program_exit_code}</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
 
        <throwError>
            <text>${msg(script.command.line.error)}</text>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>127</text>
                    <value>${program_exit_code}</value>
                </compareText>
            </ruleList>
        </throwError>
        <throwError>
            <text>${msg(error.could.not.create.user)}</text>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>1</text>
                    <value>${program_exit_code}</value>
                </compareText>
            </ruleList>
        </throwError>

        <actionGroup>
            <actionList>
                <runProgram>
                    <program>${installdir}\installer\server\createuser.exe</program>
                    <!-- The dot at the beginning of the arguments is the domain -->
                    <programArguments>. "${supername}" "${superpassword}"</programArguments>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>

                <throwError>
                    <text>${msg(script.command.line.error)}</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>127</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                    </ruleList>
                </throwError>
                <throwError>
                    <text>${msg(error.could.not.create.user)}</text>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>2203</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>2245</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>0</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                    </ruleList>
                </throwError>
                <throwError>
                    <text>${msg(config.superpassword.format.error.windows)}</text>
                    <ruleEvaluationLogic>OR</ruleEvaluationLogic>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>2203</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                        <compareText>
                            <logic>equals</logic>
                            <text>2245</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                    </ruleList>
                </throwError>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
                <compareText>
                    <logic>equals</logic>
                    <text>${installer_ui}</text>
                    <value>unattended</value>
                </compareText>
            </ruleList>
        </actionGroup>
 
        <!-- Initialise the cluster if this is an installation -->
        <actionGroup>
            <actionList>
                <!-- Convert the locale into something understandable -->
                <setInstallerVariableFromRegEx>
                    <text>${locale}</text>
                    <substitution>_</substitution>
                    <name>reallocale</name>
                    <pattern>xxUSxx</pattern>
                </setInstallerVariableFromRegEx>
                <setInstallerVariableFromRegEx>
                    <text>${reallocale}</text>
                    <substitution>.</substitution>
                    <name>reallocale</name>
                    <pattern>xxDOTxx</pattern>
                </setInstallerVariableFromRegEx>
                <setInstallerVariableFromRegEx>
                    <text>${reallocale}</text>
                    <substitution>-</substitution>
                    <name>reallocale</name>
                    <pattern>xxDASHxx</pattern>
                </setInstallerVariableFromRegEx>
                <setInstallerVariableFromRegEx>
                    <text>${reallocale}</text>
                    <substitution>@</substitution>
                    <name>reallocale</name>
                    <pattern>xxATxx</pattern>
                </setInstallerVariableFromRegEx>
                <setInstallerVariableFromRegEx>
                    <text>${reallocale}</text>
                    <substitution> </substitution>
                    <name>reallocale</name>
                    <pattern>xxSPxx</pattern>
                </setInstallerVariableFromRegEx>
                <setInstallerVariableFromRegEx>
                    <text>${reallocale}</text>
                    <substitution>(</substitution>
                    <name>reallocale</name>
                    <pattern>xxOBxx</pattern>
                </setInstallerVariableFromRegEx>
                <setInstallerVariableFromRegEx>
                    <text>${reallocale}</text>
                    <substitution>)</substitution>
                    <name>reallocale</name>
                    <pattern>xxCBxx</pattern>
                </setInstallerVariableFromRegEx>
                <setInstallerVariableFromRegEx>
                    <text>${reallocale}</text>
                    <substitution>,</substitution>
                    <name>reallocale</name>
                    <pattern>xxCOMMAxx</pattern>
                </setInstallerVariableFromRegEx>
                
                <!-- Initdb -->
                <setEnvironmentVariable name="PGPASSWORD" value="${superpassword}">
                    <ruleList>
                       <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                    </ruleList>
                </setEnvironmentVariable>

                <runProgram>
                    <program>${installdir}/installer/server/initcluster.sh</program>
                    <programArguments>"${supername}" "${installdir}" "${datadir}" ${serverport} ${reallocale}</programArguments>
                    <progressText>${msg(progress.text.initialising.cluster)}</progressText>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </runProgram>
                
                <runProgram>
                    <program>cscript</program>
                    <programArguments>//NoLogo "${installdir}/installer/server/initcluster.vbs" "${supername}" "${superpassword}" "${installdir}" "${datadir}" ${serverport} "${reallocale}"</programArguments>
                    <progressText>${msg(progress.text.initialising.cluster)}</progressText>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </runProgram>
               
                <setInstallerVariable>
                    <name>didError</name>
                    <value>1</value>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>0</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                    </ruleList>
                </setInstallerVariable>
 
                <throwError>
                    <text>${msg(script.command.line.error)}</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>127</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                    </ruleList>
                </throwError>
                <throwError>
                    <text>${msg(error.could.not.initialise.cluster)}</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>1</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                    </ruleList>
                </throwError>
                <showWarning>
                    <text>${msg(warning.during.cluster.initialisation)}</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>2</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                    </ruleList>
                </showWarning>

            </actionList>
            
            <!-- Only appropriate for installs -->
            <ruleList>
                <compareValues>
                    <value1>${IsUpgrade}</value1>
                    <logic>equals</logic>
                    <value2>0</value2>
                </compareValues>
            </ruleList>
        </actionGroup>
        
        <!-- At this point we always want to configure & start the server -->
        <!-- Startup config -->
        <runProgram>
            <program>${installdir}/installer/server/startupcfg.sh</program>
            <programArguments>${product_version} "${supername}" "${installdir}" "${datadir}"</programArguments>
            <progressText>${msg(progress.text.configuring.startup)}</progressText>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </runProgram>
        
        <runProgram>
            <program>cscript</program>
            <programArguments>//NoLogo "${installdir}\installer\server\startupcfg.vbs" ${product_version} "${supername}" "${superpassword}" "${installdir}" "${datadir}"</programArguments>
            <progressText>${msg(progress.text.configuring.startup)}</progressText>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </runProgram>
       
        <setInstallerVariable>
            <name>didError</name>
            <value>1</value>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>0</text>
                    <value>${program_exit_code}</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
 
        <throwError>
            <text>${msg(script.command.line.error)}</text>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>127</text>
                    <value>${program_exit_code}</value>
                </compareText>
            </ruleList>
        </throwError>
        <throwError>
            <text>${msg(error.could.not.configure.startup)}</text>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>1</text>
                    <value>${program_exit_code}</value>
                </compareText>
            </ruleList>
        </throwError>
        <showWarning>
            <text>${msg(warning.during.startup.configuration)}</text>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>2</text>
                    <value>${program_exit_code}</value>
                </compareText>
            </ruleList>
        </showWarning>
       
        <!-- Shortcuts -->
        <runProgram>
            <program>${installdir}/installer/server/createshortcuts.sh</program>
            <programArguments>${product_version} "${supername}" ${serverport} "${branding}" "${installdir}" "${datadir}" "${system_temp_directory}/postgresql_installer_${random_number}"</programArguments>
            <progressText>${msg(progress.text.creating.shortcuts)}</progressText>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </runProgram>
       
        <runProgram>
            <program>cscript</program>
            <programArguments>//NoLogo "${installdir}\installer\server\createshortcuts.vbs" ${product_version} "${supername}" ${serverport} "${branding}" "${installdir}" "${datadir}"</programArguments>
            <progressText>${msg(progress.text.creating.shortcuts)}</progressText>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </runProgram>
        
        <setInstallerVariable>
            <name>didError</name>
            <value>1</value>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>0</text>
                    <value>${program_exit_code}</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
 
        <throwError>
            <text>${msg(script.command.line.error)}</text>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>127</text>
                    <value>${program_exit_code}</value>
                </compareText>
            </ruleList>
        </throwError>
        <showWarning>
            <text>${msg(warning.could.not.create.shortcuts)}</text>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>1</text>
                    <value>${program_exit_code}</value>
                </compareText>
            </ruleList>
        </showWarning>

        <!-- Startup -->
        <runProgram>
            <program>${installdir}/installer/server/startserver.sh</program>
            <programArguments>${product_version}</programArguments>
            <progressText>${msg(progress.text.starting.server)}</progressText>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </runProgram>
       
        <runProgram>
            <program>cscript</program>
            <programArguments>//NoLogo "${installdir}\installer\server\startserver.vbs" ${product_version}</programArguments>
            <progressText>${msg(progress.text.starting.server)}</progressText>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </runProgram>
        
        <setInstallerVariable>
            <name>didError</name>
            <value>1</value>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>0</text>
                    <value>${program_exit_code}</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
 
        <throwError>
            <text>${msg(script.command.line.error)}</text>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>127</text>
                    <value>${program_exit_code}</value>
                </compareText>
            </ruleList>
        </throwError>
        <throwError>
            <text>${msg(error.could.not.start.server)}</text>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>1</text>
                    <value>${program_exit_code}</value>
                </compareText>
            </ruleList>
        </throwError>

        <!-- If this is an installation, load the various database modules -->
        <actionGroup>
            <actionList>
                
                <runProgram>
                    <program>${installdir}/installer/server/loadmodules.sh</program>
                    <programArguments>"${supername}" "${installdir}" ${serverport}</programArguments>
                    <progressText>${msg(progress.text.loading.modules)}</progressText>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </runProgram>
        
                <runProgram>
                    <program>cscript</program>
                    <programArguments>//NoLogo "${installdir}\installer\server\loadmodules.vbs" "${supername}" "${superpassword}" "${installdir}" "${datadir}" ${serverport}</programArguments>
                    <progressText>${msg(progress.text.loading.modules)}</progressText>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </runProgram>

                <setInstallerVariable>
                    <name>didError</name>
                    <value>1</value>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>0</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                    </ruleList>
                </setInstallerVariable>
        
                <throwError>
                    <text>${msg(script.command.line.error)}</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>127</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                    </ruleList>
                </throwError>
                <throwError>
                    <text>${msg(error.could.not.load.modules)}</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>1</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                    </ruleList>
                </throwError>
                <showWarning>
                    <text>${msg(warning.during.module.loading)}</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>2</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                    </ruleList>
                </showWarning>

            </actionList>
            
            <!-- Only appropriate for installs -->
            <ruleList>
                <compareValues>
                    <value1>${IsUpgrade}</value1>
                    <logic>equals</logic>
                    <value2>0</value2>
                </compareValues>
            </ruleList>
        </actionGroup>
        
        <!-- Register the message formatting DLL on Windows -->
        <registrySet>
            <key>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application\PostgreSQL</key>
            <name>EventMessageFile</name>
            <value>${installdir}\lib\pgevent.dll</value>
            <abortOnError>0</abortOnError>
            <showMessageOnError>1</showMessageOnError>
        </registrySet>
        <registrySet>
            <key>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application\PostgreSQL</key>
            <name>TypesSupported</name>
            <value>7</value>
            <type>REG_DWORD</type>
            <abortOnError>0</abortOnError>
            <showMessageOnError>1</showMessageOnError>
        </registrySet>
        
        <!-- Set these last - if we get this far, initdb must have succeeded -->
        <!-- Data directory -->
        <logMessage>
            <text>Write the data directory to the ini file...</text>
        </logMessage>
        <iniFileSet>
            <file>${PostgreSqlIni}</file>
            <section>PostgreSQL/${product_version}</section>
            <key>DataDirectory</key>
            <value>${datadir}</value>
            <ruleList>
                <stringTest>
                    <text>${datadir}</text>
                    <type>not_empty</type>
                </stringTest>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </iniFileSet>
        <registrySet>
            <key>HKEY_LOCAL_MACHINE\SOFTWARE\PostgreSQL\Installations\postgresql-${product_version}</key>
            <name>Data Directory</name>
            <value>${datadir}</value>
            <ruleList>
                <stringTest>
                    <text>${datadir}</text>
                    <type>not_empty</type>
                </stringTest>
             </ruleList>
        </registrySet>
        <registrySet>
            <key>HKEY_LOCAL_MACHINE\SOFTWARE\PostgreSQL\Services\postgresql-${product_version}</key>
            <name>Data Directory</name>
            <value>${datadir}</value>
            <ruleList>
                <stringTest>
                    <text>${datadir}</text>
                    <type>not_empty</type>
                </stringTest>
             </ruleList>
        </registrySet>
        
        <!-- Port -->
        <logMessage>
            <text>Write the port number, service ID, locale and superuser to the ini file...</text>
        </logMessage>
        <iniFileSet>
            <file>${PostgreSqlIni}</file>
            <section>PostgreSQL/${product_version}</section>
            <key>Port</key>
            <value>${serverport}</value>
            <ruleList>
                <stringTest>
                    <text>${serverport}</text>
                    <type>not_empty</type>
                </stringTest>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </iniFileSet>
        <registrySet>
            <key>HKEY_LOCAL_MACHINE\SOFTWARE\PostgreSQL\Services\postgresql-${product_version}</key>
            <name>Port</name>
            <value>${serverport}</value>
            <type>REG_DWORD</type>
            <ruleList>
                <stringTest>
                    <text>${serverport}</text>
                    <type>not_empty</type>
                </stringTest>
             </ruleList>
        </registrySet>
        
        <!-- ServiceID -->
        <iniFileSet>
            <file>${PostgreSqlIni}</file>
            <section>PostgreSQL/${product_version}</section>
            <key>ServiceID</key>
            <value>postgresql-${product_version}</value>
            <ruleList>
                <stringTest>
                    <text>${serverport}</text> <!-- This is correct - only set the ServiceID if we know the port -->
                    <type>not_empty</type>
                </stringTest>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </iniFileSet>
        <registrySet>
            <key>HKEY_LOCAL_MACHINE\SOFTWARE\PostgreSQL\Installations\postgresql-${product_version}</key>
            <name>Service ID</name>
            <value>postgresql-${product_version}</value>
        </registrySet>
        
        
        <!-- Read the actual locale from the config file. We don't know what it was yet as the user may have chosen DEFAULT -->
        <readFile>
            <path>${datadir}/postgresql.conf</path>
            <name>serverconfig</name>
        </readFile>
        <setInstallerVariableFromRegEx>
            <name>actuallocale</name>
            <text>${serverconfig}</text>
            <pattern>^.*lc_messages\s*=\s*'([^']+)'\s+.*$</pattern>
            <substitution>\1</substitution>
        </setInstallerVariableFromRegEx>
                        
        <iniFileSet>
            <file>${PostgreSqlIni}</file>
            <section>PostgreSQL/${product_version}</section>
            <key>Locale</key>
            <value>${actuallocale}</value>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </iniFileSet>
        <registrySet>
            <key>HKEY_LOCAL_MACHINE\SOFTWARE\PostgreSQL\Services\postgresql-${product_version}</key>
            <name>Locale</name>
            <value>${actuallocale}</value>
        </registrySet>
        
        <!-- Superuser -->
        <iniFileSet>
            <file>${PostgreSqlIni}</file>
            <section>PostgreSQL/${product_version}</section>
            <key>Superuser</key>
            <value>${supername}</value>
            <ruleList>
                <stringTest>
                    <text>${supername}</text>
                    <type>not_empty</type>
                </stringTest>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </iniFileSet>
        <registrySet>
            <key>HKEY_LOCAL_MACHINE\SOFTWARE\PostgreSQL\Services\postgresql-${product_version}</key>
            <name>Database Superuser</name>
            <value>${supername}</value>
            <ruleList>
                <stringTest>
                    <text>${supername}</text>
                    <type>not_empty</type>
                </stringTest>
             </ruleList>
        </registrySet>
        <registrySet>
            <key>HKEY_LOCAL_MACHINE\SOFTWARE\PostgreSQL\Services\postgresql-${product_version}</key>
            <name>Service Account</name>
            <value>.\${supername}</value>
            <ruleList>
                <stringTest>
                    <text>${supername}</text>
                    <type>not_empty</type>
                </stringTest>
             </ruleList>
        </registrySet>
        
        <!-- Log server description -->
        <logMessage>
            <text>Write the server description to the ini file...</text>
        </logMessage>
        <iniFileSet>
            <file>${PostgreSqlIni}</file>
            <section>PostgreSQL/${product_version}</section>
            <key>Description</key>
            <value>PostgreSQL ${product_version}</value>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </iniFileSet>
        <registrySet>
            <key>HKEY_LOCAL_MACHINE\SOFTWARE\PostgreSQL\Services\postgresql-${product_version}</key>
            <name>Display Name</name>
            <value>PostgreSQL ${product_version}</value>
        </registrySet>
        
        <!-- Branding info -->
        <logMessage>
            <text>Write the server branding to the ini file...</text>
        </logMessage>
        <iniFileSet>
            <file>${PostgreSqlIni}</file>
            <section>PostgreSQL/${product_version}</section>
            <key>Branding</key>
            <value>${branding}</value>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </iniFileSet>
        <registrySet>
            <key>HKEY_LOCAL_MACHINE\SOFTWARE\PostgreSQL\Installations\postgresql-${product_version}</key>
            <name>Branding</name>
            <value>${branding}</value>
        </registrySet>
                
        <!-- The Windows product code, used to link to the installation -->
        <registrySet>
            <key>HKEY_LOCAL_MACHINE\SOFTWARE\PostgreSQL\Services\postgresql-${product_version}</key>
            <name>Product Code</name>
            <value>postgresql-${product_version}</value>
        </registrySet>
      
        <!-- OSX: Hide the dockIcon for shortcut -->
        <substitute>
            <files>/Applications/${branding}/Application Stack Builder.app/Contents/Info.plist</files>
            <substitutionList>
                <substitution pattern="&lt;/dict&gt;" value="        &lt;key&gt;LSUIElement&lt;/key&gt; &lt;string&gt;1&lt;/string&gt; &lt;/dict&gt;"/>
            </substitutionList>
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="osx"/>
            </ruleList>
        </substitute>

        <!-- Delete the temp scripts directory -->
        <logMessage>
          <text>Delete the temporary scripts directory...</text>
        </logMessage>
        <deleteFile>
          <path>${system_temp_directory}/postgresql_installer_${random_number}</path>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
        </deleteFile>

        <!-- All done!! -->
        <logMessage>
            <text>Finished running post-installation/upgrade tasks.</text>
        </logMessage>
         
    </postInstallationActionList>
    <installationAbortedActionList>
    <deleteFile path="${system_temp_directory}/postgresql_installer_${random_number}" abortOnError="0" showMessageOnError="0">
      <ruleList>
        <fileTest path="${system_temp_directory}/postgresql_installer_${random_number}" condition="exists"/>
      </ruleList>
    </deleteFile>
    <deleteFile path="${user_home_directory}/.postgresql-${tmp_random_number}" abortOnError="0" showMessageOnError="0">
      <ruleList>
        <fileTest path="${user_home_directory}/.postgresql-${tmp_random_number}" condition="exists"/>
      </ruleList>
    </deleteFile>
    </installationAbortedActionList>

   
    <!-- Final page actions -->
    <finalPageActionList>

         <runProgram>
            <!-- MAC: Run stackbuilder -->
            <program>open</program>
            <programArguments>"/Applications/${branding}/Application Stack Builder.app"</programArguments>
            <progressText>${msg(progress.text.run.stackbuilder)}</progressText>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${didError}</text>
                    <value>1</value>
                </compareText>
            </ruleList>
        </runProgram>

        <runProgram>
            <!-- Linux: Run stackbuilder -->
            <program>${installdir}/scripts/launchstackbuilder.sh</program>
            <progressText>${msg(progress.text.run.stackbuilder)}</progressText>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
            <ruleList>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${didError}</text>
                    <value>1</value>
                </compareText>
            </ruleList>
        </runProgram>
        
        <runProgram>
            <!-- Windows: Run stackbuilder -->
            <program>${installdir}/bin/stackbuilder.exe</program>
            <progressText>${msg(progress.text.run.stackbuilder)}</progressText>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${didError}</text>
                    <value>1</value>
                </compareText>
            </ruleList>
        </runProgram>

    </finalPageActionList>
 
    <!-- Preuninstallation actions -->
    <preUninstallationActionList>
   
        <createTempDir dirPrefix="postgresql_installer">
      <ruleList>
        <compareText logic="contains" text="${platform_name}" value="linux"/>
      </ruleList>
    </createTempDir>
 
        <!-- MAC: Stop the server -->
        <runProgram>
            <program>/sbin/SystemStarter</program>
            <programArguments>stop postgresql-${product_version}</programArguments>
            <abortOnError>0</abortOnError>
            <showMessageOnError>1</showMessageOnError>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </runProgram>
        
        <!-- LINUX: Stop the server -->
        <runProgram>
            <program>/etc/init.d/postgresql-${product_version}</program>
            <programArguments>stop</programArguments>
            <abortOnError>0</abortOnError>
            <showMessageOnError>1</showMessageOnError>
            <ruleList>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </runProgram>
        
        <!-- WINDOWS: Stop the server -->
        <stopWindowsService>
            <serviceName>postgresql-${product_version}</serviceName>
            <abortOnError>0</abortOnError>
            <showMessageOnError>1</showMessageOnError>
        </stopWindowsService>
        
        <!-- MAC: Remove menu shortcuts -->
        <deleteFile>
            <path>/Applications/${branding}</path>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </deleteFile>
        
        <!-- LINUX: Remove menu shortcuts -->
        <runProgram>
            <program>${installdir}/installer/server/removeshortcuts.sh</program>
            <programArguments>"${installdir}" ${product_version} "${branding}" "${system_temp_directory}/postgresql_installer_${random_number}"</programArguments>
            <ruleList>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </runProgram>
    
        <actionGroup> 
            <actionList>
            
                <!-- Version -->
                <iniFileSet>
                    <file>${PostgreSqlIni}</file>
                    <section>PostgreSQL/${product_version}</section>
                    <key>Version</key>
                    <value></value>
                </iniFileSet>
        
                <!-- Installation directory -->
                <iniFileSet>
                    <file>${PostgreSqlIni}</file>
                    <section>PostgreSQL/${product_version}</section>
                    <key>InstallationDirectory</key>
                    <value></value>
                </iniFileSet>
        
                <!-- Description -->
                <iniFileSet>
                    <file>${PostgreSqlIni}</file>
                    <section>PostgreSQL/${product_version}</section>
                    <key>Description</key>
                    <value></value>
                </iniFileSet>
       
                <!-- ServiceID -->
                <iniFileSet>
                    <file>${PostgreSqlIni}</file>
                    <section>PostgreSQL/${product_version}</section>
                    <key>ServiceID</key>
                    <value></value>
                </iniFileSet>
                
                <!-- Branding -->
                <iniFileSet>
                    <file>${PostgreSqlIni}</file>
                    <section>PostgreSQL/${product_version}</section>
                    <key>Branding</key>
                    <value></value>
                </iniFileSet>
             </actionList>

             <ruleList>
                 <compareText>
                     <logic>does_not_equal</logic>
                     <text>${platform_name}</text>
                     <value>windows</value>
                 </compareText>
             </ruleList>
        </actionGroup>
 
        <!-- MAC: Remove the startup item -->
        <deleteFile>
            <path>/Library/StartupItems/postgresql-${product_version}</path>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </deleteFile>
        
        <!-- LINUX: Remove the startup item -->
        <actionGroup>
            <actionList>
                <!-- Attempt to remove any runlevel config with chkconfig -->
                <runProgram>
                    <program>/sbin/chkconfig</program>
                    <programArguments>--del postgresql-${product_version}</programArguments>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>
                
                <!-- Remove the startup script -->
                <deleteFile>
                    <path>/etc/init.d/postgresql-${product_version}</path>
                </deleteFile>
                
                <!-- Attempt to remove any runlevel config with update-rc.d -->
                <runProgram>
                    <program>/usr/sbin/update-rc.d</program>
                    <programArguments>-f postgresql-${product_version} remove</programArguments>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>
                
                <!-- Delete the dynamic loader config -->
                <deleteFile>
                    <path>/etc/ld.so.conf.d/postgresql-${product_version}.conf</path>
                </deleteFile>
                <substitute>
                    <substitutionList>
                        <substitution>
                            <pattern>${installdir}/lib</pattern>
                            <value></value>
                        </substitution>
                    </substitutionList>
                    <type>exact</type>
                    <files>/etc/ld.so.conf</files>
                </substitute>
            </actionList>
            
            <ruleList>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </actionGroup>
        
        <!-- WINDOWS: Remove the service -->
        <deleteWindowsService>
            <serviceName>postgresql-${product_version}</serviceName>
            <abortOnError>0</abortOnError>
        </deleteWindowsService>
        
        <!-- WINDOWS: Unregister the event message DLL -->
        <registryDelete>
            <key>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application\PostgreSQL</key>
        </registryDelete>

        <registryDelete>
            <key>HKEY_LOCAL_MACHINE\SOFTWARE\PostgreSQL\Installations\postgresql-${product_version}</key>
        </registryDelete>

        <registryDelete>
            <key>HKEY_LOCAL_MACHINE\SOFTWARE\PostgreSQL\Services\postgresql-${product_version}</key>
        </registryDelete>
    </preUninstallationActionList>

    <!-- Post-uninstall actions -->
    <postUninstallationActionList>

        <deleteFile path="${system_temp_directory}/postgresql_installer_${random_number}">
          <ruleList>
            <compareText logic="contains" text="${platform_name}" value="linux"/>
          </ruleList>
        </deleteFile>

        <showWarning>
            <text>${msg(info.datadirectory.user.kept)}</text>
        </showWarning>
    </postUninstallationActionList>

    <!-- Components. Most components will be separate packages, so expect just one entry here most of the time -->
    <componentList>
        <component>
            <name>default</name>
            <description>Default Component</description>
            <canBeEdited>1</canBeEdited>
            <selected>1</selected>
            <show>1</show>
            <folderList>
                
                <!-- LINUX: Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfileslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux/bin</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux/doc</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux/include</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux/installer</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux/lib</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux/pgAdmin3</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux/scripts</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux/stackbuilder</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux/share</origin>
                        </distributionDirectory>
                    </distributionFileList>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${platform_name}</text>
                            <value>linux-x64</value>
                        </compareText>
                    </ruleList>
                </folder>
                
                <!-- LINUX_X64: Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfileslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-x64/bin</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux-x64/doc</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux-x64/include</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux-x64/installer</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux-x64/lib</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux-x64/pgAdmin3</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux-x64/scripts</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux-x64/stackbuilder</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux-x64/share</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                
                <!-- MAC: Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfilesmacosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/osx/bin</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/osx/doc</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/osx/include</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/osx/installer</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/osx/lib</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/osx/pgAdmin3.app</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/osx/scripts</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/osx/stackbuilder.app</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/osx/share</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                
                <!-- WIN: Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfileswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/windows/bin</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/windows/doc</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/windows/include</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/windows/installer</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/windows/lib</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/windows/pgAdmin III</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/windows/scripts</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/windows/share</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/windows/StackBuilder</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/windows/symbols</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
            </folderList>
                
            <!-- WIN: Start Menu -->
            <startMenuShortcutList>
            
                <startMenuFolder>
                    <name>Documentation</name>
                    <platforms>windows</platforms>
                    <startMenuShortcutList>
                
                        <!-- Installation notes -->
                        <startMenuLinkShortcut>
                            <name>Installation notes</name>
                            <runInTerminal>0</runInTerminal>
                            <url>file://${installdir}/doc/installation-notes.html</url>
                            <windowsIcon>${installdir}\scripts\images\pg-help.ico</windowsIcon>
                        </startMenuLinkShortcut>
                        
                        <!-- PostgreSQL -->
                        <startMenuLinkShortcut>
                            <name>PostgreSQL documentation</name>
                            <runInTerminal>0</runInTerminal>
                            <url>file://${installdir}/doc/postgresql/html/index.html</url>
                            <windowsIcon>${installdir}\scripts\images\pg-help.ico</windowsIcon>
                        </startMenuLinkShortcut>
                        
                        <!-- PostgreSQL release notes -->
                        <startMenuLinkShortcut>
                            <name>PostgreSQL release notes</name>
                            <runInTerminal>0</runInTerminal>
                            <url>file://${installdir}/doc/postgresql/html/release.html</url>
                            <windowsIcon>${installdir}\scripts\images\pg-help.ico</windowsIcon>
                        </startMenuLinkShortcut>
                        
                        <!-- pgAdmin -->
                        <startMenuShortcut>
                            <name>pgAdmin documentation</name>
                            <runInTerminal>0</runInTerminal>
                            <windowsExec>${installdir}/pgAdmin III/docs/en_US/pgadmin3.chm</windowsExec>
                        </startMenuShortcut>
                        
                        <!-- PL Java users guild -->
                        <startMenuLinkShortcut>
                            <name>PL Java users guide</name>
                            <runInTerminal>0</runInTerminal>
                            <url>file://${installdir}/doc/pljava/userguide.html</url>
                            <windowsIcon>${installdir}\scripts\images\pg-help.ico</windowsIcon>
                        </startMenuLinkShortcut>
                        
                        <!-- PL Java README -->
                        <startMenuLinkShortcut>
                            <name>PL Java README</name>
                            <runInTerminal>0</runInTerminal>
                            <url>file://${installdir}/doc/pljava/readme.html</url>
                            <windowsIcon>${installdir}\scripts\images\pg-help.ico</windowsIcon>
                        </startMenuLinkShortcut>
                        
                        
                        <!-- TODO: Rest of the docs -->
                        
                    </startMenuShortcutList>
                </startMenuFolder>
                
                <!-- pgAdmin -->
                <startMenuShortcut>
                    <name>pgAdmin III</name>
                    <runInTerminal>0</runInTerminal>
                    <windowsExec>${installdir}\bin\pgAdmin3.exe</windowsExec>
                </startMenuShortcut>
                
                <!-- Stackbuilder -->
                <startMenuShortcut>
                    <name>Application Stack Builder</name>
                    <runInTerminal>0</runInTerminal>
                    <windowsExec>${installdir}\bin\stackbuilder.exe</windowsExec>
                </startMenuShortcut>
                
                <!-- psql -->
                <startMenuShortcut>
                    <name>SQL Shell (psql)</name>
                    <runInTerminal>0</runInTerminal>
                    <windowsExec>${installdir}\scripts\runpsql.bat</windowsExec>
                    <windowsIcon>${installdir}\scripts\images\pg-psql.ico</windowsIcon>
                </startMenuShortcut>
                
                <!-- Reload config -->
                <startMenuShortcut>
                    <name>Reload Configuration</name>
                    <runInTerminal>0</runInTerminal>
                    <windowsExec>cscript.exe</windowsExec>
                    <windowsExecArgs>//NoLogo "${installdir}\scripts\serverctl.vbs" reload wait</windowsExecArgs>
                    <windowsIcon>${installdir}\scripts\images\pg-reload.ico</windowsIcon>
                </startMenuShortcut>
                
                <!-- Restart server -->
                <startMenuShortcut>
                    <name>Restart Server</name>
                    <runInTerminal>0</runInTerminal>
                    <windowsExec>cscript.exe</windowsExec>
                    <windowsExecArgs>//NoLogo "${installdir}\scripts\serverctl.vbs" restart wait</windowsExecArgs>
                    <windowsIcon>${installdir}\scripts\images\pg-restart.ico</windowsIcon>
                </startMenuShortcut>
                
                <!-- Start server -->
                <startMenuShortcut>
                    <name>Start Server</name>
                    <runInTerminal>0</runInTerminal>
                    <windowsExec>cscript.exe</windowsExec>
                    <windowsExecArgs>//NoLogo "${installdir}\scripts\serverctl.vbs" start wait</windowsExecArgs>
                    <windowsIcon>${installdir}\scripts\images\pg-start.ico</windowsIcon>
                </startMenuShortcut>
                
                <!-- Stop server -->
                <startMenuShortcut>
                    <name>Stop Server</name>
                    <runInTerminal>0</runInTerminal>
                    <windowsExec>cscript.exe</windowsExec>
                    <windowsExecArgs>//NoLogo "${installdir}\scripts\serverctl.vbs" stop wait</windowsExecArgs>
                    <windowsIcon>${installdir}\scripts\images\pg-stop.ico</windowsIcon>
                </startMenuShortcut>
            
            </startMenuShortcutList>
                
        </component>
    </componentList>
    
    
    <parameterList>
     
        <stringParameter name="originalplatform" ask="0" cliOptionShow="0"/>
        <stringParameter name="branding" cliOptionName="branding" ask="0" cliOptionShow="0"/>
   
        <!-- Installation directory. Only show if ${iBaseDirectory} is empty -->
        <directoryParameter>
            <name>installdir</name>
            <description>Installer.Parameter.installdir.description</description>
            <explanation>Installer.Parameter.installdir.explanation</explanation>
            <value></value>
            <default>${default_installdir}</default>
            <ask>yes</ask>
            <cliOptionName>prefix</cliOptionName>
            <width>30</width>
            <mustBeWritable>yes</mustBeWritable>
            <ruleList>
                <stringTest>
                    <text>${iBaseDirectory}</text>
                    <type>empty</type>
                </stringTest>
            </ruleList>

            <!-- Note that this validation occurs in a postShowPageActionList due     -->
            <!-- to some odd behaviour in InstallBuilder in the way <allowEmptyValue> -->
            <!-- interacts with default values, on the advice of tech support         -->
            
            <!-- !WIN: Always check if the installation directory path looks valid -->      
            <postShowPageActionList>
                <actionGroup>
                    <actionList>
                        <showWarning>
                            <text>${msg(error.install.directory.invalid)}</text>
                        </showWarning>
                        <setInstallerVariable name="next_page" value="installdir"/>
                    </actionList>
                    
                    <ruleList>
                        <regExMatch>
                            <text>${installdir}</text>
                            <logic>does_not_match</logic>
                            <pattern>^/([0-9a-zA-Z_/\.\-]*)$</pattern>
                        </regExMatch>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </actionGroup>
                <actionGroup>
                    <actionList>
                        <showWarning>
                            <text>${msg(error.install.directory.invalid.linux)}</text>
                        </showWarning>
                        <setInstallerVariable name="next_page" value="installdir"/>
                    </actionList>
                    
                    <ruleList>
                        <regExMatch>
                            <text>${installdir}</text>
                            <logic>matches</logic>
                            <pattern>^/+(usr)?$</pattern>
                        </regExMatch>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </actionGroup>
                
                <!-- WIN: Always check if the installation directory path looks valid -->        
                <actionGroup>
                    <actionList>
                        <showWarning>
                            <text>${msg(error.install.directory.invalid)}</text>
                        </showWarning>
                        <setInstallerVariable name="next_page" value="installdir"/>
                    </actionList>
                    
                    <ruleList>
                        <regExMatch>
                            <text>${installdir}</text>
                            <logic>does_not_match</logic>
                            <pattern>^([a-zA-Z]:)\\([0-9a-zA-Z_\\\s\.\-\(\)]*)$</pattern>
                        </regExMatch>
                        <compareText>
                            <logic>equals</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </actionGroup>
                
            </postShowPageActionList>
        </directoryParameter>
        
        <!-- Explain that we're using an existing installation directory -->
        <labelParameter>
            <name>upgrade</name>
            <title>${msg(upgrade.existing.installation.title)}</title>
            <description>${msg(upgrade.existing.installation.description)}</description>
            
            <preShowPageActionList>
                <!-- Set the installation directory to the existing location-->
                <setInstallerVariable>
                    <name>installdir</name>
                    <persist>1</persist>
                    <value>${iBaseDirectory}</value>
                </setInstallerVariable>
            </preShowPageActionList>
            
            <ruleList>
                <stringTest>
                    <text>${iBaseDirectory}</text>
                    <type>not_empty</type>
                </stringTest>
            </ruleList>
        </labelParameter>
        
        <!-- Data directory. Only show if not upgrading -->
        <directoryParameter>
            <name>datadir</name>
            <description>${msg(config.datadir.description)}</description>
            <explanation>${msg(config.datadir.explanation)}</explanation>
            <value></value>
            <default>${installdir}/data</default>
            <ask>yes</ask>
            <cliOptionName>datadir</cliOptionName>
            <width>30</width>
            <mustBeWritable>yes</mustBeWritable>
            <ruleList>
                <compareValues>
                    <value1>${IsUpgrade}</value1>
                    <logic>equals</logic>
                    <value2>0</value2>
                </compareValues>
            </ruleList>
            
            <!-- Check the directory selected. If it's a valid data directory, change to upgrade mode -->
            
            <!-- Note that this validation occurs in a postShowPageActionList due     -->
            <!-- to some odd behaviour in InstallBuilder in the way <allowEmptyValue> -->
            <!-- interacts with default values, on the advice of tech support         -->
            <postShowPageActionList>
                
                <!-- !WIN: Always check if the data directory path looks valid and is writeable -->        
                <actionGroup>
                    <!-- We need this because this isn't a validateActionList> -->
                    <abortOnError>0</abortOnError>
                
                    <actionList>
                        <setInstallerVariable name="next_page" value="datadir"/>
                        <throwError>
                            <text>${msg(error.data.directory.invalid)}</text>
                        </throwError>
                    </actionList>
                    
                    <ruleList>
                        <regExMatch>
                            <text>${datadir}</text>
                            <logic>does_not_match</logic>
                            <pattern>^/([0-9a-zA-Z_/\.\-]*)$</pattern>
                        </regExMatch>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </actionGroup>
                
                <!-- WIN: Always check if the data directory path looks valid and is writeable -->        
                <actionGroup>
                    <!-- We need this because this isn't a validateActionList> -->
                    <abortOnError>0</abortOnError>
                
                    <actionList>
                        <setInstallerVariable name="next_page" value="datadir"/>
                        <throwError>
                            <text>${msg(error.data.directory.invalid)}</text>
                        </throwError>
                    </actionList>
                    
                    <ruleList>
                        <regExMatch>
                            <text>${datadir}</text>
                            <logic>does_not_match</logic>
                            <pattern>^([a-zA-Z]:)\\([0-9a-zA-Z_\\\s\.\-\(\)]*)$</pattern>
                        </regExMatch>
                        <compareText>
                            <logic>equals</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </actionGroup>
 
                <!-- Build a regexp to test that the install dir is not a sub dir of the data dir -->
                <!-- Remove trailing / from path -->
                <setInstallerVariableFromRegEx>
                    <text>${datadir}</text>
                    <substitution></substitution>
                    <name>_re</name>
                    <pattern>\/$</pattern>
                    
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </setInstallerVariableFromRegEx>
                
                <setInstallerVariableFromRegEx>
                    <text>${datadir}</text>
                    <substitution></substitution>
                    <name>_re</name>
                    <pattern>\\$</pattern>
                    
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </setInstallerVariableFromRegEx>

                <!-- Replace / with \/ or \ with \\ on windows -->
                <setInstallerVariableFromRegEx>
                    <text>${_re}</text>
                    <substitution>\/</substitution>
                    <name>_re</name>
                    <pattern>\/</pattern>
                    
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </setInstallerVariableFromRegEx>

                <actionGroup>
                    <actionList>
                        <setInstallerVariableFromRegEx>
                            <text>${_re}</text>
                            <substitution>\\\\</substitution>
                            <name>_re</name>
                            <pattern>\\</pattern>
                        </setInstallerVariableFromRegEx>
                        <setInstallerVariableFromRegEx>
                            <text>${_re}</text>
                            <substitution>\\(</substitution>
                            <name>_re</name>
                            <pattern>\(</pattern>
                        </setInstallerVariableFromRegEx>
                        <setInstallerVariableFromRegEx>
                            <text>${_re}</text>
                            <substitution>\\)</substitution>
                            <name>_re</name>
                            <pattern>\)</pattern>
                        </setInstallerVariableFromRegEx>
                    </actionList>
                    
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </actionGroup>
                
                <!-- build the regexp -->
                <setInstallerVariable>
                    <name>_re</name>
                    <value>^${_re}\/([0-9a-zA-Z_/\.\-]*)</value>
                    
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </setInstallerVariable>

                <setInstallerVariable>
                    <name>_re</name>
                    <value>^${_re}\\([0-9a-zA-Z_\\\s\.\-\(\)]*)</value>
                    
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </setInstallerVariable>
                                
                <!-- Check the data directory does not match the installation directory -->        
                <actionGroup>
                    <!-- We need this because this isn't a validateActionList> -->
                    <abortOnError>0</abortOnError>
                
                    <actionList>
                        <setInstallerVariable name="next_page" value="datadir"/>
                        <throwError>
                            <text>${msg(error.data.directory.matches.install)}</text>
                        </throwError>
                    </actionList>
                    
                    <ruleEvaluationLogic>or</ruleEvaluationLogic>
                    <ruleList>
                        <compareText>
                            <text>${datadir}</text>
                            <logic>equals</logic>
                            <value>${installdir}</value>
                        </compareText>
                        <compareText>
                            <text>${datadir}/</text>
                            <logic>equals</logic>
                            <value>${installdir}</value>
                        </compareText>
                        <compareText>
                            <text>${datadir}\</text>
                            <logic>equals</logic>
                            <value>${installdir}</value>
                        </compareText>
                        <compareText>
                            <text>${datadir}</text>
                            <logic>equals</logic>
                            <value>${installdir}/</value>
                        </compareText>
                        <compareText>
                            <text>${datadir}</text>
                            <logic>equals</logic>
                            <value>${installdir}\</value>
                        </compareText>
                        <regExMatch>
                            <text>${installdir}</text>
                            <logic>matches</logic>
                            <pattern>${_re}</pattern>
                        </regExMatch>
                    </ruleList>
                </actionGroup>                

                <!-- Check an existing, non-empty data directory -->
                <actionGroup>
                    <!-- We need this because this isn't a validateActionList> -->
                    <abortOnError>0</abortOnError>
                    
                    <actionList>
                    
                        <!-- Do we have a pg_control file? -->
                        <actionGroup>
                            <actionList>
                                <setInstallerVariable name="next_page" value="datadir"/>
                                <throwError>
                                    <text>${msg(error.data.directory.existing.broken)}</text>
                                </throwError>
                            </actionList>
                            
                            <ruleList>            
                                <fileTest>
                                    <path>${datadir}/global/pg_control</path>
                                    <condition>not_exists</condition>
                                </fileTest>
                            </ruleList>
                        </actionGroup>
                        
                        <!-- Do we have a valid catalog version? -->
                        <runProgram>
                            <program>${system_temp_directory}/postgresql_installer_${random_number}/pg_controldata</program>
                            <programArguments>"${datadir}"</programArguments>
                            <abortOnError>0</abortOnError>
                            <showMessageOnError>0</showMessageOnError>
                            <ruleList>
                                <compareText>
                                    <logic>equals</logic>
                                    <text>${platform_name}</text>
                                    <value>osx</value>
                                </compareText>
                            </ruleList>
                        </runProgram>
                        
                        <runProgram>
                            <program>${system_temp_directory}/postgresql_installer_${random_number}/runpgcontroldata.sh</program>
                            <programArguments>${system_temp_directory}/postgresql_installer_${random_number} "${datadir}"</programArguments>
                            <abortOnError>0</abortOnError>
                            <showMessageOnError>0</showMessageOnError>
                            <ruleList>
                                <compareText>
                                    <logic>contains</logic>
                                    <text>${platform_name}</text>
                                    <value>linux</value>
                                </compareText>
                            </ruleList>
                        </runProgram>
                        
                        <runProgram>
                            <program>${system_temp_directory}\postgresql_installer_${random_number}\pg_controldata.exe</program>
                            <programArguments>"${datadir}"</programArguments>
                            <abortOnError>0</abortOnError>
                            <showMessageOnError>0</showMessageOnError>
                            <ruleList>
                                <compareText>
                                    <logic>equals</logic>
                                    <text>${platform_name}</text>
                                    <value>windows</value>
                                </compareText>
                            </ruleList>
                        </runProgram>
                        
                        <setInstallerVariableFromRegEx>
                            <name>CurrentCatalogVersion</name>
                            <text>${program_stdout}</text>
                            <pattern>^.*Catalog version number:\s+([\d]+).*$</pattern>
                            <substitution>\1</substitution>
                        </setInstallerVariableFromRegEx>
                        
                        <setInstallerVariableFromRegEx>
                            <name>CurrentDateTimeSettings</name>
                            <text>${program_stdout}</text>
                            <pattern>^.*Date/time type storage:\s+([\d\w\-]+\s+[\w]+).*$</pattern>
                            <substitution>\1</substitution>
                        </setInstallerVariableFromRegEx>

                       
                        <logMessage>
                            <text>Existing cluster catalog version: ${CurrentCatalogVersion}, installer catalog version: ${CatalogVersion}</text>
                        </logMessage>
                        
                        <logMessage>
                            <text>Existing cluster Date/time settings: ${CurrentDateTimeSettings}, installer Date/time settings: ${DateTimeSetting}</text>
                        </logMessage>
                        
                        <actionGroup>
                            <actionList>
                                <setInstallerVariable name="next_page" value="datadir"/>
                                <throwError>
                                    <text>${msg(error.data.directory.incompatible)}</text>
                                </throwError>
                            </actionList>
                            <ruleList>
                                <compareText>
                                    <value>${CurrentCatalogVersion}</value>
                                    <logic>does_not_equal</logic>
                                    <text>${CatalogVersion}</text>
                                </compareText>
                            </ruleList>
                        </actionGroup>

                        <actionGroup>
                            <actionList>
                                <setInstallerVariable name="next_page" value="datadir"/>
                                <throwError>
                                    <text>${msg(error.data.directory.incompatible.datetime)}</text>
                                </throwError>
                            </actionList>
                            <ruleList>
                                <compareText>
                                    <value>${CurrentDateTimeSettings}</value>
                                    <logic>does_not_equal</logic>
                                    <text>${DateTimeSetting}</text>
                                </compareText>
                            </ruleList>
                        </actionGroup>
                    </actionList>
                    
                    <!-- Switch to upgrade mode -->
                    <actionList>
                        <setInstallerVariable>
                            <name>IsUpgrade</name>
                            <value>1</value>
                        </setInstallerVariable>
                        <logMessage>
                            <text>Switching to upgrade mode with cluster: ${datadir}</text>
                        </logMessage>

                        <!-- Read the port number from the config file -->
                        <readFile>
                            <path>${datadir}/postgresql.conf</path>
                            <name>serverconfig</name>
                        </readFile>
                        <setInstallerVariableFromRegEx>
                            <name>defaultport</name>
                            <text>${serverconfig}</text>
                            <pattern>^.*port\s*=\s*([\d]+)\s+.*$</pattern>
                            <substitution>\1</substitution>
                        </setInstallerVariableFromRegEx>
                    </actionList>

                    <!-- We only check the data directory if it exists and isn't empty -->
                    <ruleList>
                        <fileExists>
                            <path>${datadir}</path>
                        </fileExists>
                        <fileTest>
                            <path>${datadir}</path>
                            <condition>is_not_empty</condition>
                        </fileTest>
                    </ruleList>
                </actionGroup> <!-- End of data directory check -->
    
            </postShowPageActionList>
            
        </directoryParameter>
        
        <!-- Explain that we're using an existing installation directory -->
        <labelParameter>
            <name>upgrade2</name>
            <title>${msg(upgrade.existing.datadir.title)}</title>
            <description>${msg(upgrade.existing.datadir.description)}</description>
            
            <preShowPageActionList>
                <!-- As we're upgrading, grab the port number from the existing config file -->
                <actionGroup>
                    <actionList>
                        <logMessage>
                            <text>Reading port number from ${datadir}/postgresql.conf</text>
                        </logMessage>
                        
                        <readFile>
                            <path>${datadir}/postgresql.conf</path>
                            <name>serverconfig</name>
                        </readFile>
                        <setInstallerVariableFromRegEx>
                            <name>serverport</name>
                            <text>${serverconfig}</text>
                            <pattern>^.*port\s*=\s*([\d]+)\s+.*$</pattern>
                            <substitution>\1</substitution>
                        </setInstallerVariableFromRegEx>
                    </actionList>
                </actionGroup>
            </preShowPageActionList>
            
            <ruleList>
                <compareValues>
                    <value1>${IsUpgrade}</value1>
                    <logic>equals</logic>
                    <value2>1</value2>
                </compareValues>
            </ruleList>
            
        </labelParameter>
        
        <!-- Superuser password. Show this if not an upgrade, unless this is Windows -->
        <passwordParameter>
            <name>superpassword</name>
            <description>${msg(config.superpassword.description)}</description>
            <explanation>${_explanation}</explanation>
            <value></value>
            <default>${defaultpassword}</default>
            <allowEmptyValue>1</allowEmptyValue>
            <ask>yes</ask>
            <cliOptionName>superpassword</cliOptionName>
            <descriptionRetype>${msg(config.superpassword.confirm)}</descriptionRetype>
            <width>20</width>
        
            <preShowPageActionList>
                <setInstallerVariable>
                    <name>_explanation</name>
                    <value>${msg(config.superpassword.explanation)}</value>
                </setInstallerVariable>
                
                <!-- On Windows, we need a different explanation -->
                <setInstallerVariable>
                    <name>_explanation</name>
                    <value>${msg(config.superpassword.explanation.windows)}</value>

                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </setInstallerVariable>
            </preShowPageActionList>
            
            <validationActionList>
                <throwError>
                    <text>${msg(config.superpassword.no.password)}</text>
                    <ruleList>
                        <stringTest>
                            <text>${superpassword}</text>
                            <type>empty</type>
                        </stringTest>
                    </ruleList>
                </throwError>
                
                <actionGroup>
                    <actionList>
                        <runProgram>
                            <program>${system_temp_directory}\postgresql_installer_${random_number}\createuser.exe</program>
                            <!-- The dot at the beginning of the arguments is the domain -->
                            <programArguments>. "${supername}" "${superpassword}"</programArguments>
                            <abortOnError>0</abortOnError>
                            <showMessageOnError>0</showMessageOnError>
                        </runProgram>

                        <throwError>
                            <text>${msg(script.command.line.error)}</text>
                            <ruleList>
                                <compareText>
                                    <logic>equals</logic>
                                    <text>127</text>
                                    <value>${program_exit_code}</value>
                                </compareText>
                            </ruleList>
                        </throwError>
                        <throwError>
                            <text>${msg(error.could.not.create.user)}</text>
                            <ruleList>
                                <compareText>
                                    <logic>does_not_equal</logic>
                                    <text>2203</text>
                                    <value>${program_exit_code}</value>
                                </compareText>
                                <compareText>
                                    <logic>does_not_equal</logic>
                                    <text>2245</text>
                                    <value>${program_exit_code}</value>
                                </compareText>
                                <compareText>
                                    <logic>does_not_equal</logic>
                                    <text>0</text>
                                    <value>${program_exit_code}</value>
                                </compareText>
                            </ruleList>
                        </throwError>
                        <throwError>
                            <text>${msg(config.superpassword.format.error.windows)}</text>
                            <ruleEvaluationLogic>OR</ruleEvaluationLogic>
                            <ruleList>
                                <compareText>
                                    <logic>equals</logic>
                                    <text>2203</text>
                                    <value>${program_exit_code}</value>
                                </compareText>
                                <compareText>
                                    <logic>equals</logic>
                                    <text>2245</text>
                                    <value>${program_exit_code}</value>
                                </compareText>
                            </ruleList>
                        </throwError>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </actionGroup>
                
                <!-- On Windows we need to validate the password if the user account exists -->
                <actionGroup>
                    <actionList>
                        <runProgram>
                            <program>${system_temp_directory}\postgresql_installer_${random_number}\validateuser.exe</program>
                            <!-- The dot at the beginning of the arguments is the domain -->
                            <programArguments>. "${supername}" "${superpassword}"</programArguments>
                            <abortOnError>0</abortOnError>
                            <showMessageOnError>0</showMessageOnError>
                        </runProgram>
                        
                        <throwError>
                            <text>${msg(script.command.line.error)}</text>
                            <ruleList>
                                <compareText>
                                    <logic>equals</logic>
                                    <text>127</text>
                                    <value>${program_exit_code}</value>
                                </compareText>
                            </ruleList>
                        </throwError>
                        <throwError>
                            <text>${msg(config.superpassword.incorrect.windows)}</text>
                            <ruleList>
                                <compareText>
                                    <logic>equals</logic>
                                    <text>1</text>
                                    <value>${program_exit_code}</value>
                                </compareText>
                            </ruleList>
                        </throwError>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </actionGroup>
            </validationActionList>
                       
            <ruleEvaluationLogic>or</ruleEvaluationLogic>
            <ruleList>
                <compareValues>
                    <value1>${IsUpgrade}</value1>
                    <logic>equals</logic>
                    <value2>0</value2>
                </compareValues>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </passwordParameter>
        
        <!-- Port number. Only show if there is no data directory -->
        <stringParameter>
            <name>serverport</name>
            <description>${msg(config.port.description)}</description>
            <explanation>${msg(config.port.explanation)}</explanation>
            <value></value>
            <default>${defaultport}</default>
            <allowEmptyValue>1</allowEmptyValue>
            <ask>yes</ask>
            <cliOptionName>serverport</cliOptionName>
            <width>30</width>
            <validationActionList>
                <throwError>
                    <text>${msg(config.port.invalid)}</text>
                    <ruleList>
                        <stringTest>
                            <text>${serverport}</text>
                            <type>not_digit</type>
                        </stringTest>
                    </ruleList>
                </throwError>
                <throwError>
                    <text>${msg(config.port.invalid)}</text>
                    <ruleList>
                        <stringTest>
                            <text>${serverport}</text>
                            <type>empty</type>
                        </stringTest>
                    </ruleList>
                </throwError>
                <throwError>
                    <text>${msg(config.port.invalid)}</text>
                    <ruleEvaluationLogic>or</ruleEvaluationLogic>
                    <ruleList>
                        <compareValues>
                            <value1>${serverport}</value1>
                            <logic>less</logic>
                            <value2>1024</value2>
                        </compareValues>
                        <compareValues>
                            <value1>${serverport}</value1>
                            <logic>greater</logic>
                            <value2>65535</value2>
                        </compareValues>
                    </ruleList>
                </throwError>
                <throwError>
                    <text>${msg(config.port.in.use)}</text>
                    <ruleList>
                        <portTest>
                            <condition>cannot_bind</condition>
                            <port>${serverport}</port>
                        </portTest>
                    </ruleList>
                </throwError>
            </validationActionList>
            <ruleList>
                <compareValues>
                    <value1>${IsUpgrade}</value1>
                    <logic>equals</logic>
                    <value2>0</value2>
                </compareValues>
            </ruleList>
        </stringParameter>

        <!-- Locale -->
        <choiceParameter>
            <name>locale</name>
            <description>${msg(config.locale.description)}</description>
            <explanation>${msg(config.locale.explanation)}</explanation>
            <cliOptionName>locale</cliOptionName>
            <ask>yes</ask>
            <validationActionList>
                <throwError>
                    <text>${msg(config.locale.no.locale)}</text>
                    <ruleList>
                        <stringTest>
                            <text>${locale}</text>
                            <type>empty</type>
                        </stringTest>
                    </ruleList>
                </throwError>
            </validationActionList>
            <ruleList>
                <compareValues>
                    <value1>${IsUpgrade}</value1>
                    <logic>equals</logic>
                    <value2>0</value2>
                </compareValues>
            </ruleList>
        </choiceParameter>

    </parameterList>
</project>

