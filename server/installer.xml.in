<project>
    <!-- Package details -->
    <shortName>postgresql</shortName>
    <fullName>PostgreSQL</fullName>
    <version>PG_MAJOR_VERSION</version>
    
    <!-- These options are used on Windows -->
    <productDisplayName>${product_fullname} ${product_version}</productDisplayName>
    <startMenuGroupName>PostgreSQL ${product_version}</startMenuGroupName>
    
    <!-- Misc paackage options -->
    <enableRollback>0</enableRollback>
    <outputDirectory>../output</outputDirectory>
    <requireInstallationByRootUser>1</requireInstallationByRootUser>
    <saveRelativePaths>1</saveRelativePaths>
	<defaultUnixGroup>wheel</defaultUnixGroup>
    <defaultUnixOwner>root</defaultUnixOwner>
    
    <!-- Images -->
    <leftImage>../resources/pg-side.png</leftImage>
    <splashImage>../resources/pg-splash.png</splashImage>
    
    <!-- Languages allowed? -->
    <allowLanguageSelection>1</allowLanguageSelection>
    <allowedLanguages>en</allowedLanguages>
    
    <!-- i18n files for the UI -->
    <customLanguageFileList>
        <language>
            <code>en</code>
            <encoding>iso8859-1</encoding>
            <file>i18n/en.lng</file>
        </language>
    </customLanguageFileList>
    
    <!-- Initialisation actions -->
    <initializationActionList>
        
        <!-- Set the superusername -->
        <!-- TODO: Make this user configurable -->
        <setInstallerVariable>
            <name>supername</name>
            <value>postgres</value>
        </setInstallerVariable>
        
        <!-- Set the default password, to be used only in unnattended mode -->
        <setInstallerVariable>
            <name>defaultpassword</name>
            <value>postgres</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${installer_ui}</text>
                    <value>unattended</value>
                </compareText>
            </ruleList>
             
        </setInstallerVariable>
        <setInstallerVariable>
            <name>defaultpassword</name>
            <value></value>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${installer_ui}</text>
                    <value>unattended</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
        
        <!-- Upgrading? -->
        <setInstallerVariable>
            <name>IsUpgrade</name>
            <value>0</value>
        </setInstallerVariable>
        
        <!-- Set the uninstaller name -->
        <setInstallerVariable>
            <name>uninstallerName</name>
            <persist>0</persist>
            <value>uninstall-postgresql</value>
        </setInstallerVariable>
        
        <!-- Catalog version -->
        <setInstallerVariable>
            <name>CatalogVersion</name>
            <value>PG_CATALOG_VERSION</value>
        </setInstallerVariable>
        
        <!-- Set the ini filename -->
        <setInstallerVariable>
            <name>PostgreSqlIni</name>
            <persist>1</persist>
            <value>/etc/postgresql-${product_version}.ini</value>
        </setInstallerVariable>
		
        <logMessage>
            <text>Using ini file: ${PostgreSqlIni}</text>
        </logMessage>
        
    </initializationActionList>
    
    <!-- Preinstallation actions (not used for RPMs) -->
    <preInstallationActionList>
        
        <!-- Get the existing data directory. -->
        <iniFileGet>
            <file>${PostgreSqlIni}</file>
            <key>DataDirectory</key>
            <section>Server</section>
            <variable>iDataDirectory</variable>
            <ruleList>
                <fileTest>
                    <condition>readable</condition>
                    <path>${PostgreSqlIni}</path>
                </fileTest>
            </ruleList>
        </iniFileGet>
        <setInstallerVariable>
            <name>iDataDirectory</name>
            <persist>0</persist>
            <value></value>
            <ruleList>
                <fileTest>
                    <condition>not_readable</condition>
                    <path>${PostgreSqlIni}</path>
                </fileTest>
            </ruleList>
        </setInstallerVariable>
        
        <!-- Get the base installation path. Any previous blade could have set this. -->
        <iniFileGet>
            <file>${PostgreSqlIni}</file>
            <key>BaseDirectory</key>
            <section>Installation</section>
            <variable>iBaseDirectory</variable>
            <ruleList>
                <fileTest>
                    <condition>readable</condition>
                    <path>${PostgreSqlIni}</path>
                </fileTest>
            </ruleList>
        </iniFileGet>
        <setInstallerVariable>
            <name>iBaseDirectory</name>
            <persist>0</persist>
            <value></value>
            <ruleList>
                <fileTest>
                    <condition>not_readable</condition>
                    <path>${PostgreSqlIni}</path>
                </fileTest>
            </ruleList>
        </setInstallerVariable>
        
        <!-- Debugging -->
        <logMessage>
            <text>Existing base directory: ${iBaseDirectory}</text>
        </logMessage>
        <logMessage>
            <text>Existing data directory: ${iDataDirectory}</text>
        </logMessage>
        
        <!-- Temp directory for preflight scripts -->
        <createDirectory path="${system_temp_directory}/postgresql_installer"/>
        
        <!-- Preinstall script -->
        <unpackFile>
            <component>default</component>
            <destination>${system_temp_directory}/postgresql_installer/preinstall.sh</destination>
            <folder>programfilesmacosx</folder>
            <origin>installer/server/preinstall.sh</origin>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
                 
            </ruleList>
        </unpackFile>
        
        <!-- pg_controldata (used to check existing clusters) -->
        <unpackFile>
            <component>default</component>
            <destination>${system_temp_directory}/postgresql_installer/pg_controldata</destination>
            <folder>programfilesmacosx</folder>
            <origin>bin/pg_controldata</origin>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </unpackFile>
        <unpackFile>
            <component>default</component>
            <destination>${system_temp_directory}/postgresql_installer/pg_controldata</destination>
            <folder>programfileslinux</folder>
            <origin>bin/pg_controldata</origin>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </unpackFile>
        <unpackFile>
            <component>default</component>
            <destination>${system_temp_directory}/postgresql_installer/pg_controldata</destination>
            <folder>programfileslinux-x64</folder>
            <origin>bin/pg_controldata</origin>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>linux-x64</value>
                </compareText>
            </ruleList>
        </unpackFile>
                
        <!-- If we have an existing data directory location and it's not empty, check it looks sane -->
        <actionGroup>
            <actionList>
                
                <!-- Do we have a pg_control file? -->
                <throwError>
                    <text>${msg(error.data.directory.registered.broken)}</text>
                    <ruleList>            
                        <fileTest>
                            <path>${iDataDirectory}/global/pg_control</path>
                            <condition>not_exists</condition>
                        </fileTest>
                    </ruleList>
                </throwError>
                
                <!-- Do we have a valid catalog version? -->
                <runProgram>
                    <program>${system_temp_directory}/postgresql_installer/pg_controldata</program>
                    <programArguments>"${iDataDirectory}"</programArguments>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>
                
                <setInstallerVariableFromRegEx>
                    <name>CurrentCatalogVersion</name>
                    <text>${program_stdout}</text>
                    <pattern>^.*Catalog version number:\s+([\d]+).*$</pattern>
                    <substitution>\1</substitution>
                </setInstallerVariableFromRegEx>
                
                <logMessage>
                    <text>Existing cluster catalog version: ${CurrentCatalogVersion}, installer catalog version: ${CatalogVersion}</text>
                </logMessage>
                
                <throwError>
                    <text>${msg(error.data.directory.incompatible)}</text>
                    <ruleList>
                        <compareText>
                            <value>${CurrentCatalogVersion}</value>
                            <logic>does_not_equal</logic>
                            <text>${CatalogVersion}</text>
                        </compareText>
                    </ruleList>
                </throwError>
            </actionList>
            
            <ruleList>
                <stringTest>
                    <text>${iDataDirectory}</text>
                    <type>not_empty</type>
                </stringTest>
                <fileExists>
                    <path>${iDataDirectory}</path>
                </fileExists>
                <fileTest>
                    <path>${iDataDirectory}</path>
                    <condition>is_not_empty</condition>
                </fileTest>
                 
            </ruleList>
        </actionGroup>
        
        <!-- So, is this an upgrade of an existing cluster? -->
        <!-- At this point, if we have an existing data directory it either looks valid, or is empty --> 
        <actionGroup>
            <actionList>
                <setInstallerVariable>
                    <name>IsUpgrade</name>
                    <value>1</value>
                </setInstallerVariable>
                <setInstallerVariable>
                    <name>datadir</name>
                    <value>${iDataDirectory}</value>
                </setInstallerVariable>
                <logMessage>
                    <text>Switching to upgrade mode with cluster: ${datadir}</text>
                </logMessage>
            </actionList>
            
            <ruleList>
                <stringTest>
                    <text>${iDataDirectory}</text>
                    <type>not_empty</type>
                </stringTest>
                <fileTest>
                    <path>${iDataDirectory}</path>
                    <condition>is_not_empty</condition>
                </fileTest>
            </ruleList>
        </actionGroup>
        
        <!-- MAC: Preinstall script. -->
        <actionGroup>
            <actionList>
                <runProgram>
                    <program>${system_temp_directory}/postgresql_installer/preinstall.sh</program>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>
                
                <!-- Check the output from the preinstall script -->
                <throwError>
                    <text>${msg(error.shared.memory.manual)}</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>1</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                    </ruleList>
                </throwError>
                <throwError>
                    <text>${msg(error.shared.memory.updated)}</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>2</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                    </ruleList>
                </throwError>
                <throwError>
                    <text>${msg(error.shared.memory.shmall.manual)}</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>3</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                    </ruleList>
                </throwError>
                <throwError>
                    <text>${msg(error.shared.memory.shmall.updated)}</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>4</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                    </ruleList>
                </throwError>
            </actionList>
            
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </actionGroup>
        
        <!-- Attempt to stop any existing server. We *always* do this, just in case  -->
        <!-- the existing installation is broken and it doesn't look like an upgrade -->
        
        <!-- MAC: Stop the server -->
        <runProgram>
            <program>/sbin/SystemStarter</program>
            <programArguments>stop postgresql-${product_version}</programArguments>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </runProgram>
        
        <!-- LINUX: Stop the server -->
        <runProgram>
            <program>/etc/init.d/postgresql-${product_version}</program>
            <programArguments>stop</programArguments>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
            <ruleList>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </runProgram>
        
        <!-- MAC: Set the default installation directory to /Library -->
        <setInstallerVariable>
            <name>installdir</name>
            <persist>0</persist>
            <value>/Library/PostgreSQL/${product_version}</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
                <stringTest>
                    <text>${iBaseDirectory}</text>
                    <type>empty</type>
                </stringTest>
            </ruleList>
        </setInstallerVariable>
        
        <!-- Set the default installation directory to the existing location-->
        <setInstallerVariable>
            <name>installdir</name>
            <persist>0</persist>
            <value>${iBaseDirectory}</value>
            <ruleList>
                <stringTest>
                    <text>${iBaseDirectory}</text>
                    <type>not_empty</type>
                </stringTest>
            </ruleList>
        </setInstallerVariable>
    </preInstallationActionList>
    
    <!-- Postinstallation actions -->
    <postInstallationActionList>
        <logMessage>
            <text>Running the post-installation/upgrade actions:</text>
        </logMessage>
        
        <!-- MAC: Rewrite the absolute shared library paths. -->
        <actionGroup>
            <actionList>
                <runProgram>
                    <program>${installdir}/installer/server/rewritepaths.sh</program>
                    <programArguments>"PG_STAGING_DIR/osx" "${installdir}"</programArguments>
                    <progressText>${msg(progress.text.rewriting.library.paths)}</progressText>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>
                <throwError>
                    <text>${msg(script.command.line.error)}</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>127</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                    </ruleList>
                </throwError>
                <throwError>
                    <text>${msg(error.could.not.rewrite.library.paths)}</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>1</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                    </ruleList>
                </throwError>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </actionGroup>
        
        <!-- Delete the temp scripts directory -->
        <logMessage>
            <text>Delete the temporary scripts directory...</text>
        </logMessage>
        <deleteFile>
            <path>${system_temp_directory}/postgresql_installer</path>
        </deleteFile>
        
        <!-- Log Installation directory -->
        <logMessage>
            <text>Write the base directory to the ini file...</text>
        </logMessage>
        <iniFileSet>
            <file>${PostgreSqlIni}</file>
            <section>Installation</section>
            <key>BaseDirectory</key>
            <value>${installdir}</value>
            <ruleList>
                <stringTest>
                    <text>${installdir}</text>
                    <type>not_empty</type>
                </stringTest>
            </ruleList>
        </iniFileSet>
        
        <!-- Log version number -->
        <logMessage>
            <text>Write the version number to the ini file...</text>
        </logMessage>
        <iniFileSet>
            <file>${PostgreSqlIni}</file>
            <section>Packages</section>
            <key>Server</key>
            <value>PG_MAJOR_VERSION.PG_MINOR_VERSION</value>
        </iniFileSet>
        
        <!-- Create the service user account -->
        <runProgram>
            <program>${installdir}/installer/server/createuser.sh</program>
            <programArguments>"${supername}" "${installdir}"</programArguments>
            <progressText>${msg(progress.text.creating.user)}</progressText>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
        </runProgram>
        
        <throwError>
            <text>${msg(script.command.line.error)}</text>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>127</text>
                    <value>${program_exit_code}</value>
                </compareText>
            </ruleList>
        </throwError>
        <throwError>
            <text>${msg(error.could.not.create.user)}</text>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>1</text>
                    <value>${program_exit_code}</value>
                </compareText>
            </ruleList>
        </throwError>
        
        <!-- Initialise the cluster if this is an installation -->
        <actionGroup>
            <actionList>
                
                <!-- Initdb -->
                <runProgram>
                    <program>${installdir}/installer/server/initcluster.sh</program>
                    <programArguments>"${supername}" "${superpassword}" "${installdir}" "${datadir}" ${serverport}</programArguments>
                    <progressText>${msg(progress.text.initialising.cluster)}</progressText>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>
                
                <throwError>
                    <text>${msg(script.command.line.error)}</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>127</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                    </ruleList>
                </throwError>
                <throwError>
                    <text>${msg(error.could.not.initialise.cluster)}</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>1</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                    </ruleList>
                </throwError>
                <showWarning>
                    <text>${msg(warning.during.cluster.initialisation)}</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>2</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                    </ruleList>
                </showWarning>
            </actionList>
            
            <!-- Only appropriate for installs -->
            <ruleList>
                <compareValues>
                    <value1>${IsUpgrade}</value1>
                    <logic>equals</logic>
                    <value2>0</value2>
                </compareValues>
            </ruleList>
        </actionGroup>
        
        <!-- At this point we always want to configure & start the server -->
        <!-- Startup config -->
        <runProgram>
            <program>${installdir}/installer/server/startupcfg.sh</program>
            <programArguments>${product_version} "${supername}" "${installdir}" "${datadir}"</programArguments>
            <progressText>${msg(progress.text.configuring.startup)}</progressText>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
        </runProgram>
        
        <throwError>
            <text>${msg(script.command.line.error)}</text>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>127</text>
                    <value>${program_exit_code}</value>
                </compareText>
            </ruleList>
        </throwError>
        <throwError>
            <text>${msg(error.could.not.configure.startup)}</text>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>1</text>
                    <value>${program_exit_code}</value>
                </compareText>
            </ruleList>
        </throwError>
        <showWarning>
            <text>${msg(warning.during.startup.configuration)}</text>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>2</text>
                    <value>${program_exit_code}</value>
                </compareText>
            </ruleList>
        </showWarning>
        
        <!-- Shortcuts -->
        <runProgram>
            <program>${installdir}/installer/server/createshortcuts.sh</program>
            <programArguments>${product_version} "${supername}" ${serverport} "${installdir}" "${datadir}"</programArguments>
            <progressText>${msg(progress.text.creating.shortcuts)}</progressText>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
        </runProgram>
        
        <throwError>
            <text>${msg(script.command.line.error)}</text>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>127</text>
                    <value>${program_exit_code}</value>
                </compareText>
            </ruleList>
        </throwError>
        <showWarning>
            <text>${msg(warning.could.not.create.shortcuts)}</text>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>1</text>
                    <value>${program_exit_code}</value>
                </compareText>
            </ruleList>
        </showWarning>
        
        <!-- Startup -->
        <runProgram>
            <program>${installdir}/installer/server/startserver.sh</program>
            <programArguments>${product_version}</programArguments>
            <progressText>${msg(progress.text.starting.server)}</progressText>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
        </runProgram>
        
        <throwError>
            <text>${msg(script.command.line.error)}</text>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>127</text>
                    <value>${program_exit_code}</value>
                </compareText>
            </ruleList>
        </throwError>
        <throwError>
            <text>${msg(error.could.not.start.server)}</text>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>1</text>
                    <value>${program_exit_code}</value>
                </compareText>
            </ruleList>
        </throwError>
        
        <!-- If this is an installation, load the various database modules -->
        <actionGroup>
            <actionList>
                
                <runProgram>
                    <program>${installdir}/installer/server/loadmodules.sh</program>
                    <programArguments>"${supername}" "${superpassword}" "${installdir}" ${serverport}</programArguments>
                    <progressText>${msg(progress.text.loading.modules)}</progressText>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>
                
                <throwError>
                    <text>${msg(script.command.line.error)}</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>127</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                    </ruleList>
                </throwError>
                <throwError>
                    <text>${msg(error.could.not.load.modules)}</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>1</text>
                            <value>${program_exit_code}</value>
                        </compareText>
                    </ruleList>
                </throwError>
                
            </actionList>
            
            <!-- Only appropriate for installs -->
            <ruleList>
                <compareValues>
                    <value1>${IsUpgrade}</value1>
                    <logic>equals</logic>
                    <value2>0</value2>
                </compareValues>
            </ruleList>
        </actionGroup>
        
        <!-- Set these last - if we get this far, initdb must have succeeded -->
        <!-- Data directory -->
        <logMessage>
            <text>Write the data directory to the ini file...</text>
        </logMessage>
        <iniFileSet>
            <file>${PostgreSqlIni}</file>
            <section>Server</section>
            <key>DataDirectory</key>
            <value>${datadir}</value>
            <ruleList>
                <stringTest>
                    <text>${datadir}</text>
                    <type>not_empty</type>
                </stringTest>
            </ruleList>
        </iniFileSet>
        
        <!-- Port -->
        <logMessage>
            <text>Write the port number and superuser to the ini file...</text>
        </logMessage>
        <iniFileSet>
            <file>${PostgreSqlIni}</file>
            <section>Server</section>
            <key>Port</key>
            <value>${serverport}</value>
            <ruleList>
                <stringTest>
                    <text>${serverport}</text>
                    <type>not_empty</type>
                </stringTest>
            </ruleList>
        </iniFileSet>
        <iniFileSet>
            <file>${PostgreSqlIni}</file>
            <section>Server</section>
            <key>Superuser</key>
            <value>${supername}</value>
            <ruleList>
                <stringTest>
                    <text>${supername}</text>
                    <type>not_empty</type>
                </stringTest>
            </ruleList>
        </iniFileSet>
		
        <!-- Log server description -->
        <logMessage>
            <text>Write the server description to the ini file...</text>
        </logMessage>
        <iniFileSet>
            <file>${PostgreSqlIni}</file>
            <section>Server</section>
            <key>Description</key>
            <value>PostgreSQL ${product_version}</value>
        </iniFileSet>
        
        <!-- LINUX: Remove files we want to leave behind -->
        <actionGroup>
            <actionList>
                <logMessage>
                    <text>Removing global files from the uninstaller.</text>
                </logMessage>
                <removeFilesFromUninstaller files="${installdir}/scripts/launchbrowser.sh" />
                <removeFilesFromUninstaller files="${installdir}/scripts/images/pg-postgresql.png" />
                <removeFilesFromUninstaller files="${installdir}/scripts/images/pg-website.png" />
                <removeFilesFromUninstaller files="${installdir}/scripts/xdg/pg-postgresql.directory" />
                <removeFilesFromUninstaller files="${installdir}/scripts/xdg/pg-website.desktop" />
            </actionList>
            <ruleList>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
             
        </actionGroup>
        
        <!-- All done!! -->
        <logMessage>
            <text>Finished running post-installation/upgrade tasks.</text>
        </logMessage>
        
    </postInstallationActionList>
    
    <!-- Preuninstallation actions -->
    <preUninstallationActionList>
        
        <!-- MAC: Stop the server -->
        <runProgram>
            <program>/sbin/SystemStarter</program>
            <programArguments>stop postgresql-${product_version}</programArguments>
            <abortOnError>0</abortOnError>
            <showMessageOnError>1</showMessageOnError>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </runProgram>
        
        <!-- LINUX: Stop the server -->
        <runProgram>
            <program>/etc/init.d/postgresql-${product_version}</program>
            <programArguments>stop</programArguments>
            <abortOnError>0</abortOnError>
            <showMessageOnError>1</showMessageOnError>
            <ruleList>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </runProgram>
        
        <!-- MAC: Remove menu shortcuts -->
        <deleteFile>
            <path>/Applications/PostgreSQL ${product_version}</path>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </deleteFile>
        
        <!-- LINUX: Remove menu shortcuts -->
        <runProgram>
            <program>${installdir}/installer/server/removeshortcuts.sh</program>
            <programArguments>"${installdir}"</programArguments>
            <ruleList>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </runProgram>
        
        <!-- Version -->
        <iniFileSet>
            <file>${PostgreSqlIni}</file>
            <section>Packages</section>
            <key>Server</key>
            <value></value>
        </iniFileSet>
        
        <!-- MAC: Remove the startup item -->
        <deleteFile>
            <path>/Library/StartupItems/postgresql-${product_version}</path>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </deleteFile>
        
        <!-- LINUX: Remove the startup item -->
        <actionGroup>
            <actionList>
                <!-- Attempt to remove any runlevel config with chkconfig -->
                <runProgram>
                    <program>/sbin/chkconfig</program>
                    <programArguments>--del postgresql-${product_version}</programArguments>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>
                
                <!-- Remove the startup script -->
                <deleteFile>
                    <path>/etc/init.d/postgresql-${product_version}</path>
                </deleteFile>
                
                <!-- Attempt to remove any runlevel config with update-rc.d -->
                <runProgram>
                    <program>/usr/sbin/update-rc.d</program>
                    <programArguments>-f postgresql-${product_version} remove</programArguments>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>
                
                <!-- Delete the dynamic loader config -->
                <deleteFile>
                    <path>/etc/ld.so.conf.d/postgresql-${product_version}.conf</path>
                </deleteFile>
                <substitute>
                    <substitutionList>
                        <substitution>
                            <pattern>${installdir}/lib</pattern>
                            <value></value>
                        </substitution>
                    </substitutionList>
                    <type>exact</type>
                    <files>/etc/ld.so.conf</files>
                </substitute>
            </actionList>
            
            <ruleList>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </actionGroup>

    </preUninstallationActionList>

    <!-- Components. Most components will be separate blades, so expect just one entry here most of the time -->
    <componentList>
        <component>
            <name>default</name>
            <description>Default Component</description>
            <canBeEdited>1</canBeEdited>
            <selected>1</selected>
            <show>1</show>
            <folderList>
                
                <!-- LINUX: Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfileslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux/bin</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux/doc</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux/include</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux/installer</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux/lib</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux/scripts</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux/share</origin>
                        </distributionDirectory>
                    </distributionFileList>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${platform_name}</text>
                            <value>linux-x64</value>
                        </compareText>
                    </ruleList>
                </folder>
                
                <!-- LINUX_X64: Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfileslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-x64/bin</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux-x64/doc</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux-x64/include</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux-x64/installer</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux-x64/lib</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux-x64/scripts</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux-x64/share</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                
                <!-- MAC: Program files -->
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfilesmacosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/osx/bin</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/osx/doc</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/osx/include</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/osx/installer</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/osx/lib</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/osx/pgAdmin3.app</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/osx/scripts</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/osx/share</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
            </folderList>
        </component>
    </componentList>
    
    
    <parameterList>
        
        <!-- Installation directory. Only show if ${iBaseDirectory} is empty -->
        <directoryParameter>
            <name>installdir</name>
            <description>Installer.Parameter.installdir.description</description>
            <explanation>Installer.Parameter.installdir.explanation</explanation>
            <value>${platform_install_prefix}/PostgreSQL/${product_version}</value>
            <default>${platform_install_prefix}/${product_shortname}-${product_version}</default>
            <allowEmptyValue>0</allowEmptyValue>
            <ask>yes</ask>
            <cliOptionName>prefix</cliOptionName>
            <mustBeWritable>yes</mustBeWritable>
            <mustExist>0</mustExist>
            <width>30</width>
            <ruleList>
                <stringTest>
                    <text>${iBaseDirectory}</text>
                    <type>empty</type>
                </stringTest>
            </ruleList>
        </directoryParameter>
        
        <!-- Explain that we're using an existing installation directory -->
        <labelParameter>
            <name>upgrade</name>
            <title>${msg(upgrade.existing.installation.title)}</title>
            <description>${msg(upgrade.existing.installation.description)}</description>
            
            <ruleList>
                <stringTest>
                    <text>${iBaseDirectory}</text>
                    <type>not_empty</type>
                </stringTest>
            </ruleList>
        </labelParameter>
        
        <!-- Data directory. Only show if not upgrading -->
        <directoryParameter>
            <name>datadir</name>
            <description>${msg(config.datadir.description)}</description>
            <explanation>${msg(config.datadir.explanation)}</explanation>
            <value>${installdir}/data</value>
            <default>${installdir}/data</default>
            <allowEmptyValue>0</allowEmptyValue>
            <ask>yes</ask>
            <cliOptionName>datadir</cliOptionName>
            <mustBeWritable>yes</mustBeWritable>
            <mustExist>0</mustExist>
            <width>30</width>
            <ruleList>
                <compareValues>
                    <value1>${IsUpgrade}</value1>
                    <logic>equals</logic>
                    <value2>0</value2>
                </compareValues>
            </ruleList>
            
            <!-- Check the directory selected. If it's a valid data directory, change to upgrade mode -->
            <validationActionList>
                <actionGroup>
                    <actionList>
                        <!-- Do we have a pg_control file? -->
                        <throwError>
                            <text>${msg(error.data.directory.existing.broken)}</text>
                            <ruleList>            
                                <fileTest>
                                    <path>${datadir}/global/pg_control</path>
                                    <condition>not_exists</condition>
                                </fileTest>
                            </ruleList>
                        </throwError>
                        
                        <!-- Do we have a valid catalog version? -->
                        <runProgram>
                            <program>${system_temp_directory}/postgresql_installer/pg_controldata</program>
                            <programArguments>"${datadir}"</programArguments>
                            <abortOnError>0</abortOnError>
                            <showMessageOnError>0</showMessageOnError>
                        </runProgram>
                        
                        <setInstallerVariableFromRegEx>
                            <name>CurrentCatalogVersion</name>
                            <text>${program_stdout}</text>
                            <pattern>^.*Catalog version number:\s+([\d]+).*$</pattern>
                            <substitution>\1</substitution>
                        </setInstallerVariableFromRegEx>
                        
                        <logMessage>
                            <text>Existing cluster catalog version: ${CurrentCatalogVersion}, installer catalog version: ${CatalogVersion}</text>
                        </logMessage>
                        
                        <throwError>
                            <text>${msg(error.data.directory.incompatible)}</text>
                            <ruleList>
                                <compareText>
                                    <value>${CurrentCatalogVersion}</value>
                                    <logic>does_not_equal</logic>
                                    <text>${CatalogVersion}</text>
                                </compareText>
                            </ruleList>
                        </throwError>
                    </actionList>
                    
                    <actionList>
                        <setInstallerVariable>
                            <name>IsUpgrade</name>
                            <value>1</value>
                        </setInstallerVariable>
                        <logMessage>
                            <text>Switching to upgrade mode with cluster: ${datadir}</text>
                        </logMessage>
                    </actionList>
                    
                    <ruleList>
                        <fileExists>
                            <path>${datadir}</path>
                        </fileExists>
                        <fileTest>
                            <path>${datadir}</path>
                            <condition>is_not_empty</condition>
                        </fileTest>
                    </ruleList>
                </actionGroup>
                
            </validationActionList>
        </directoryParameter>
        
        <!-- Explain that we're using an existing installation directory -->
        <labelParameter>
            <name>upgrade2</name>
            <title>${msg(upgrade.existing.datadir.title)}</title>
            <description>${msg(upgrade.existing.datadir.description)}</description>
            
            <preShowPageActionList>
                <!-- As we're upgrading, grab the port number from the existing config file -->
                <actionGroup>
                    <actionList>
                        <logMessage>
                            <text>Reading port number from ${datadir}/postgresql.conf</text>
                        </logMessage>
                        
                        <readFile>
                            <path>${datadir}/postgresql.conf</path>
                            <name>serverconfig</name>
                        </readFile>
                        <setInstallerVariableFromRegEx>
                            <name>serverport</name>
                            <text>${serverconfig}</text>
                            <pattern>^.*port\s*=\s*([\d]+)\s+.*$</pattern>
                            <substitution>\1</substitution>
                        </setInstallerVariableFromRegEx>
                    </actionList>
                </actionGroup>
            </preShowPageActionList>
            
            <ruleList>
                <compareValues>
                    <value1>${IsUpgrade}</value1>
                    <logic>equals</logic>
                    <value2>1</value2>
                </compareValues>
            </ruleList>
            
        </labelParameter>
        
        <!-- Superuser password. Show this if not an upgrade -->
        <passwordParameter>
            <name>superpassword</name>
            <description>${msg(config.superpassword.description)}</description>
            <explanation>${msg(config.superpassword.explanation)}</explanation>
            <value></value>
            <default>${defaultpassword}</default>
            <allowEmptyValue>1</allowEmptyValue>
            <ask>yes</ask>
            <cliOptionName>superpassword</cliOptionName>
            <descriptionRetype>${msg(config.superpassword.confirm)}</descriptionRetype>
            <width>20</width>
            <validationActionList>
                <throwError>
                    <text>${msg(config.superpassword.no.password)}</text>
                    <ruleList>
                        <stringTest>
                            <text>${superpassword}</text>
                            <type>empty</type>
                        </stringTest>
                    </ruleList>
                </throwError>
            </validationActionList>
            
			<ruleEvaluationLogic>or</ruleEvaluationLogic>
            <ruleList>
                <compareValues>
                    <value1>${IsUpgrade}</value1>
                    <logic>equals</logic>
                    <value2>0</value2>
                </compareValues>
				<compareText>
					<logic>equals</logic>
					<text>${platform_name}</text>
					<value>windows</value>
				</compareText>
            </ruleList>
        </passwordParameter>
        
        <!-- Port number. Only show if there is no data directory -->
        <stringParameter>
            <name>serverport</name>
            <description>${msg(config.port.description)}</description>
            <explanation>${msg(config.port.explanation)}</explanation>
            <value></value>
            <default>5432</default>
            <allowEmptyValue>1</allowEmptyValue>
            <cliOptionName>serverport</cliOptionName>
            <width>30</width>
            <validationActionList>
                <throwError>
                    <text>${msg(config.port.not.integer)}</text>
                    <ruleList>
                        <stringTest>
                            <text>${serverport}</text>
                            <type>not_digit</type>
                        </stringTest>
                    </ruleList>
                </throwError>
                <throwError>
                    <text>${msg(config.port.in.use)}</text>
                    <ruleList>
                        <portTest>
                            <condition>cannot_bind</condition>
                            <port>${serverport}</port>
                        </portTest>
                    </ruleList>
                </throwError>
            </validationActionList>
            <ruleList>
                <compareValues>
                    <value1>${IsUpgrade}</value1>
                    <logic>equals</logic>
                    <value2>0</value2>
                </compareValues>
            </ruleList>
        </stringParameter>
    </parameterList>
</project>

