#!/bin/sh
echo "Setting variables"

SOURCE_DIR=
PGADMIN_PYTHON_DIR=
PGBUILD=
BUILD_ROOT=${SOURCE_DIR}/mac-build
TEMP_DIR=${SOURCE_DIR}/mac-temp

_setup_env() {
	export PATH=/usr/local/opt/node\@20/bin:${PGBUILD}/bin:/usr/local/bin:${PATH}
	APP_RELEASE=`grep "^APP_RELEASE" ${SOURCE_DIR}/web/version.py | cut -d"=" -f2 | sed 's/ //g'`
	APP_REVISION=`grep "^APP_REVISION" ${SOURCE_DIR}/web/version.py | cut -d"=" -f2 | sed 's/ //g'`
	APP_NAME=`grep "^APP_NAME" ${SOURCE_DIR}/web/branding.py | cut -d"=" -f2 | sed "s/'//g" | sed 's/^ //'`
	APP_LONG_VERSION=${APP_RELEASE}.${APP_REVISION}
	APP_SHORT_VERSION=`echo ${APP_LONG_VERSION} | cut -d . -f1,2`
	APP_SUFFIX=`grep "^APP_SUFFIX" ${SOURCE_DIR}/web/version.py | cut -d"=" -f2 | sed 's/ //g' | sed "s/'//g"`
	if [ ! -z ${APP_SUFFIX} ]; then
		APP_LONG_VERSION=${APP_LONG_VERSION}-${APP_SUFFIX}
	fi

	BUNDLE_DIR="${BUILD_ROOT}/${APP_NAME}.app"

	PGADMIN_PYTHON_VERSION=$(${PGADMIN_PYTHON_DIR}/bin/python3 -c "import sys; print(sys.version.split(' ')[0])")
}


_cleanup() {
	echo "Cleaning up the old environment and app bundle..."
	rm -rf "${BUILD_ROOT}"
	rm -rf "${TEMP_DIR}"
}

_create_python_env() {
	echo "Creating the Python environment..."
	LD_LIBRARY_PATH=${PGBUILD}/lib:${LD_LIBRARY_PATH}

	git clone https://github.com/gregneagle/relocatable-python.git "${BUILD_ROOT}/relocatable_python"
	LDFLAGS="-L/opt/local/Current_v15/lib" CFLAGS="-I/opt/local/Current_v15/include" ${PGADMIN_PYTHON_DIR}/bin/python3 \
		"${BUILD_ROOT}/relocatable_python/make_relocatable_python_framework.py" \
		--python-version ${PGADMIN_PYTHON_VERSION} \
		--os-version=11 \
		--pip-requirements "${SOURCE_DIR}/requirements.txt" \
		--destination "${BUNDLE_DIR}/Contents/Frameworks/"
  
        "${BUNDLE_DIR}/Contents/Frameworks/Python.framework/Versions/Current/bin/python3" -m ensurepip --upgrade || exit 1
        "${BUNDLE_DIR}/Contents/Frameworks/Python.framework/Versions/Current/bin/pip3" install -r "${SOURCE_DIR}/requirements.txt" || exit 1

	# Make sure all the .so's in the Python env have the executable bit set
	# so they get properly signed later
	OLD_IFS=${IFS}
	IFS=$'\n'
	for i in $(find . -type f -name *.so -exec file "{}" \; | grep -v "(for architecture" | grep -E "Mach-O executable|Mach-O 64-bit executable|Mach-O 64-bit bundle|Mach-O 64-bit dynamically linked shared library" | awk -F":" '{print $1}' | uniq)
	do
		chmod +x "${i}"
	done
	IFS=${OLD_IFS}

	# Remove some things we don't need
	pushd "${BUNDLE_DIR}/Contents/Frameworks/Python.framework" > /dev/null
		find . -name test -type d -print0 | xargs -0 rm -rf
		find . -name tkinter -type d -print0 | xargs -0 rm -rf
		find . -name turtle.py -type f -print0 | xargs -0 rm -rf
		find . -name turtledemo -type d -print0 | xargs -0 rm -rf
		find . -name tcl* -type d -print0 | xargs -0 rm -rf
		find . -name tk* -type d -print0 | xargs -0 rm -rf
		find . -name tdbc* -type d -print0 | xargs -0 rm -rf
		find . -name itcl* -type d -print0 | xargs -0 rm -rf
		rm -f Versions/Current/lib/Tk.*
		rm -f Versions/Current/lib/libtcl*.dylib
		rm -f Versions/Current/lib/libtk*.dylib
		rm -f Versions/Current/lib/libtcl*.a
		rm -f Versions/Current/lib/libtk*.a
		rm -f Versions/Current/lib/tcl*.sh
		rm -f Versions/Current/lib/tk*.sh
		rm -rf Versions/Current/lib/pkgconfig*
		rm -rf Versions/Current/lib/sqlite*
		rm -rf Versions/Current/lib/thread*
		rm -rf Versions/Current/share
	popd > /dev/null
}

_build_docs() {
	echo "Building the docs..."
	# Create a temporary venv for the doc build, so we don't contaminate the one
	# that we're going to ship.
	${PGADMIN_PYTHON_DIR}/bin/python3 -m venv "${BUILD_ROOT}/venv"
	source "${BUILD_ROOT}/venv/bin/activate"
	pip3 install --upgrade pip
	LDFLAGS="-L/opt/local/Current_v15/lib" CFLAGS="-I/opt/local/Current_v15/include" pip3 install -r "${SOURCE_DIR}/requirements.txt"
	pip3 install sphinx==6.1.3
	pip3 install sphinxcontrib-youtube

	cd "${SOURCE_DIR}"
	make docs

	cd "${SOURCE_DIR}/docs/en_US"
	test -d "${BUNDLE_DIR}/Contents/Resources/docs/en_US" || mkdir -p "${BUNDLE_DIR}/Contents/Resources/docs/en_US"
	cp -r _build/html "${BUNDLE_DIR}/Contents/Resources/docs/en_US/"

	# Remove some things we don't need
	rm -rf "${BUNDLE_DIR}/Contents/Resources/docs/en_US/html/_sources"
	rm -f "${BUNDLE_DIR}/Contents/Resources/docs/en_US/html/_static"/*.png
}

_build_runtime() {
	echo "Assembling the runtime environment..."
	test -d "${BUILD_ROOT}" || mkdir "${BUILD_ROOT}"

	ELECTRON_ARCH="x64"
         if [ "$(uname -m)" == "arm64" ]; then
         ELECTRON_ARCH="arm64"
         fi

	ELECTRON_VERSION=$(npm info electron version)
        if [ "${ELECTRON_VERSION}" -eq "" ]; then
               echo "ELECTRON_VERSION variable value is NULL"
               exit 1
        fi

	pushd "${BUILD_ROOT}" > /dev/null || exit
        while true;do
            wget "https://github.com/electron/electron/releases/download/v${ELECTRON_VERSION}/electron-v${ELECTRON_VERSION}-darwin-${ELECTRON_ARCH}.zip" && break
            rm "electron-v${ELECTRON_VERSION}-darwin-${ELECTRON_ARCH}.zip"
        done
        unzip "electron-v${ELECTRON_VERSION}-darwin-${ELECTRON_ARCH}.zip" || exit 1
    popd > /dev/null || exit
    # WGET END

	mv "${BUILD_ROOT}/Electron.app" "${BUNDLE_DIR}"
	find "${BUNDLE_DIR}" -exec touch {} \;

	# Copy in the runtime code
	mkdir -p "${BUNDLE_DIR}/Contents/Resources/app/"
	cp -R "${SOURCE_DIR}/runtime/assets" "${BUNDLE_DIR}/Contents/Resources/app/"
	cp -R "${SOURCE_DIR}/runtime/src" "${BUNDLE_DIR}/Contents/Resources/app/"
	cp "${SOURCE_DIR}/runtime/package.json" "${BUNDLE_DIR}/Contents/Resources/app/"
        cp "${SOURCE_DIR}/runtime/.yarnrc.yml" "${BUNDLE_DIR}/Contents/Resources/app/"

	# Install the runtime node_modules, then replace the package.json
        pushd "${BUNDLE_DIR}/Contents/Resources/app/" > /dev/null || exit
        yarn set version berry
        yarn set version 3
        yarn plugin import workspace-tools
        yarn workspaces focus --production
	
        popd > /dev/null || exit	
}

_fixup_imports() {
	local TODO TODO_OLD FW_RELPATH LIB LIB_BN

	echo "Fixing imports on the core appbundle..."
	pushd "$1" > /dev/null
		# Find all the files that may need tweaks
		TODO=$(file `find . -perm +0111 -type f` | \
			grep -v "Frameworks/Python.framework" | \
			grep -E "Mach-O 64-bit" | \
			awk -F ':| ' '{ORS=" "; print $1}' | \
			uniq)

		# Add anything in the site-packages Python directory
                TODO+=$(find ./Contents/Frameworks/Python.framework/Versions/Current/lib/python*/site-packages -perm +0111 -type f -exec file "{}" \; | \
				grep -E "Mach-O 64-bit" | \
				awk -F ':| ' '{ORS=" "; print $1}' | \
				uniq)

		echo "Found executables: ${TODO}"
		while test "${TODO}" != ""; do
			TODO_OLD=${TODO} ;
			TODO="" ;
			for TODO_OBJ in ${TODO_OLD}; do
				echo "Post-processing: ${TODO_OBJ}"

				# The Rust interface in the Python Cryptography module contains
				# a reference to a .so that won't exist. See:
				# https://github.com/PyO3/setuptools-rust/issues/106
				if [[ "${TODO_OBJ}" =~ cryptography/hazmat/bindings/\_rust\.abi3\.so$ ]]; then
					echo "Skipping because of https://github.com/PyO3/setuptools-rust/issues/106."
					continue
				fi

				# Figure out the relative path from ${TODO_OBJ} to Contents/Frameworks
				FW_RELPATH=$(echo "${TODO_OBJ}" | \
						sed -n 's|^\(\.//*\)\(\([^/][^/]*/\)*\)[^/][^/]*$|\2|gp' | \
						sed -n 's|[^/][^/]*/|../|gp' \
						)"Contents/Frameworks"

				# Find all libraries ${TODO_OBJ} depends on, but skip system libraries
				for LIB in $(
					otool -L ${TODO_OBJ} | \
					sed -n 's|^.*[[:space:]]\([^[:space:]]*\.dylib\).*$|\1|p' | \
					grep -E -v '^(/usr/lib)|(/System)|@executable_path|@loader_path|/DLC/PIL/' \
					); do
						# Copy in any required dependencies
						LIB_BN="$(basename "${LIB}")" ;
						if ! test -f "Contents/Frameworks/${LIB_BN}"; then
							TARGET_FILE=""
							TARGET_PATH=""
							echo "Adding symlink: ${LIB_BN} (because of: ${TODO_OBJ})"
							cp -pR "${LIB}" "Contents/Frameworks/${LIB_BN}"
							if ! test -L "Contents/Frameworks/${LIB_BN}"; then
								chmod 755 "Contents/Frameworks/${LIB_BN}"
							else
								TARGET_FILE=$(readlink "${LIB}")
								TARGET_PATH=$(dirname "${LIB}")/${TARGET_FILE}
								echo "Adding symlink target: ${TARGET_PATH}"
								cp "${TARGET_PATH}" "Contents/Frameworks/${TARGET_FILE}"
								chmod 755 "Contents/Frameworks/${TARGET_FILE}"
							fi
							echo "Rewriting ID in Contents/Frameworks/${LIB_BN} to ${LIB_BN}"
							install_name_tool \
								-id "${LIB_BN}" \
								"Contents/Frameworks/${LIB_BN}" || exit 1
								TODO="${TODO} ./Contents/Frameworks/${LIB_BN}"
						fi

						# Rewrite the dependency paths
						echo "Rewriting library ${LIB} to @loader_path/${FW_RELPATH}/${LIB_BN} in ${TODO_OBJ}"
						install_name_tool -change \
							"${LIB}" \
							"@loader_path/${FW_RELPATH}/${LIB_BN}" \
							"${TODO_OBJ}" || exit 1

						install_name_tool -change \
							"${TARGET_PATH}" \
							"@loader_path/${FW_RELPATH}/${TARGET_FILE}" \
							"${TODO_OBJ}" || exit 1
				done
			done
		done

		echo "Imports updated on the core appbundle."
	popd > /dev/null
}

_complete_bundle() {
	echo "Completing the appbundle..."

	# Copy the binary utilities into place
	mkdir -p "${BUNDLE_DIR}/Contents/SharedSupport/"
	cp "${PGBUILD}/bin/psql" "${BUNDLE_DIR}/Contents/SharedSupport/"
	cp "${PGBUILD}/bin/pg_restore" "${BUNDLE_DIR}/Contents/SharedSupport/"
	cp "${PGBUILD}/bin/pg_dumpall" "${BUNDLE_DIR}/Contents/SharedSupport/"
	cp "${PGBUILD}/bin/pg_dump" "${BUNDLE_DIR}/Contents/SharedSupport/"

	# Update the plist
	cp ${SOURCE_DIR}/pkg/mac/Info.plist.in "${BUNDLE_DIR}/Contents/Info.plist"
	sed -i '' "s/%APPNAME%/${APP_NAME}/g" "${BUNDLE_DIR}/Contents/Info.plist"
	sed -i '' "s/%APPVER%/${APP_LONG_VERSION}/g" "${BUNDLE_DIR}/Contents/Info.plist"
	sed -i '' "s/%APPID%/org.pgadmin.pgadmin4/g" "${BUNDLE_DIR}/Contents/Info.plist"

	# Rename helper execs and Update the plist
    for helper_exec in "Electron Helper" "Electron Helper (Renderer)" "Electron Helper (Plugin)" "Electron Helper (GPU)"
    do
        pgadmin_exec=${helper_exec//Electron/pgAdmin 4}
        mv "${BUNDLE_DIR}/Contents/Frameworks/${helper_exec}.app/Contents/MacOS/${helper_exec}" "${BUNDLE_DIR}/Contents/Frameworks/${helper_exec}.app/Contents/MacOS/${pgadmin_exec}"
        mv "${BUNDLE_DIR}/Contents/Frameworks/${helper_exec}.app" "${BUNDLE_DIR}/Contents/Frameworks/${pgadmin_exec}.app"

        info_plist="${BUNDLE_DIR}/Contents/Frameworks/${pgadmin_exec}.app/Contents/Info.plist"
        cp Info.plist-helper.in "${info_plist}"
        sed -i '' "s/%APPNAME%/${pgadmin_exec}/g" "${info_plist}"
        sed -i '' "s/%APPVER%/${APP_LONG_VERSION}/g" "${info_plist}"
        sed -i '' "s/%APPID%/org.pgadmin.pgadmin4.helper/g" "${info_plist}"
	done

	# PkgInfo
	echo APPLPGA4 > "${BUNDLE_DIR}/Contents/PkgInfo"

	# Icon
	cp ${SOURCE_DIR}/pkg/mac/pgAdmin4.icns "${BUNDLE_DIR}/Contents/Resources/app.icns"

	# Rename the executable
	mv "${BUNDLE_DIR}/Contents/MacOS/Electron" "${BUNDLE_DIR}/Contents/MacOS/${APP_NAME}"

	# Rename the app in package.json so the menu looks as it should
	sed -i '' "s/\"name\": \"pgadmin4\"/\"name\": \"${APP_NAME}\"/g" "${BUNDLE_DIR}/Contents/Resources/app/package.json"

	# Import the dependencies, and rewrite any library references
	_fixup_imports "${BUNDLE_DIR}"

	# Build node modules
	pushd "${SOURCE_DIR}/web" > /dev/null || exit
                yarn set version berry
                yarn set version 3
		yarn install
		yarn run bundle

		cp /opt/local/Current_v15/certs/cacert.pem .
	popd > /dev/null || exit

	# copy the web directory to the bundle as it is required by runtime
	cp -r "${SOURCE_DIR}/web" "${BUNDLE_DIR}/Contents/Resources/"
	cd "${BUNDLE_DIR}/Contents/Resources/web"
	rm -f pgadmin4.db config_local.*
	rm -rf jest.config.js babel.* package.json .yarn* yarn* .editorconfig .eslint* node_modules/ regression/ tools/ pgadmin/static/js/generated/.cache
	find . -name "tests" -type d -print0 | xargs -0 rm -rf
	find . -name "feature_tests" -type d -print0 | xargs -0 rm -rf
	find . -name ".DS_Store" -print0 | xargs -0 rm -f

	echo "SERVER_MODE = False" > config_distro.py
	echo "HELP_PATH = '../../../docs/en_US/html/'" >> config_distro.py
	echo "DEFAULT_BINARY_PATHS = {" >> config_distro.py
	echo "    'pg':   '\$DIR/../../SharedSupport'," >> config_distro.py
	echo "    'ppas': ''" >> config_distro.py
	echo "}" >> config_distro.py
	echo "MINIFY_HTML = False" >> config_distro.py
	echo "UPGRADE_CHECK_KEY = 'edb-pgadmin4'" >> config_distro.py

#	# License files
#	cp -r ${SOURCE_DIR}/LICENSE "${BUNDLE_DIR}/Contents/"
#	cp -r ${SOURCE_DIR}/DEPENDENCIES "${BUNDLE_DIR}/Contents/"

	# Remove the .pyc files if any
	find "${BUNDLE_DIR}" -name "*.pyc" -print0 | xargs -0 rm -f
	cp -pR "${BUNDLE_DIR}" "${PGBUILD}"
}

_setup_env
_cleanup
_build_runtime
_create_python_env
_build_docs
_complete_bundle

