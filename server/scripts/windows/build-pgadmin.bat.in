CALL "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\Professional\VC\Auxiliary\Build\vcvarsall.bat" amd64
ECHO Setting variables
@SET PGADMIN_SRC_DIR=
@SET PGADMIN_PYTHON_DIR=
@SET PGBUILD=
@SET PGADMIN_POSTGRES_DIR=
@SET PGADMIN_KRB5_DIR=
@SET YARN_HOME=
@SET NODEJS_HOME=
@SET BUILDROOT=%PGADMIN_SRC_DIR%\win-build
@SET TMPDIR=%PGADMIN_SRC_DIR%\win-temp
@SET PATH=%YARN_HOME%\\\\bin;%NODEJS_HOME%;%PGBUILD%\\\\bin;%PGADMIN_POSTGRES_DIR%\\\\bin;%PATH%;

REM get Python version for the runtime build ex. 3.8.1 will be 38
FOR /f "tokens=1 DELims=." %%G IN ('%PGADMIN_PYTHON_DIR%/python.exe -c "import sys; print(sys.version.split(' ')[0])"') DO SET PYTHON_MAJOR=%%G
FOR /f "tokens=2 DELims=." %%G IN ('%PGADMIN_PYTHON_DIR%/python.exe -c "import sys; print(sys.version.split(' ')[0])"') DO SET PYTHON_MINOR=%%G

REM Main build sequence
CALL :CLEAN || EXIT /B 1
CALL :CREATE_VIRTUAL_ENV || EXIT /B 1
CALL :CREATE_PYTHON_ENV || EXIT /B 1
CALL :CREATE_RUNTIME_ENV || EXIT /B 1

EXIT /B %ERRORLEVEL%
REM Main build sequence Ends


:CLEAN
	ECHO Removing build directory...
	IF EXIST "%BUILDROOT%" RD "%BUILDROOT%" /S /Q > nul || EXIT /B 1

	ECHO Removing tmp directory...
	IF EXIST "%TMPDIR%" RD "%TMPDIR%" /S /Q > nul || EXIT /B 1
	EXIT /B 0

:CREATE_VIRTUAL_ENV
	ECHO Create Virtual enviroment
	IF NOT EXIST "%TMPDIR%"  MKDIR "%TMPDIR%"

	CD "%TMPDIR%"
	REM Note that we must use virtualenv.exe here, as the venv module doesn't allow python.exe to relocate.
	"%PGADMIN_PYTHON_DIR%\Scripts\virtualenv.exe" venv

	XCOPY /S /I /E /H /Y "%PGADMIN_PYTHON_DIR%\DLLs" "%TMPDIR%\venv\DLLs" > nul || EXIT /B 1
	XCOPY /S /I /E /H /Y "%PGADMIN_PYTHON_DIR%\Lib" "%TMPDIR%\venv\Lib" > nul || EXIT /B 1

	ECHO Activating virtual environment -  %TMPDIR%\venv...
	CALL "%TMPDIR%\venv\Scripts\activate" || EXIT /B 1

	ECHO Installing dependencies...
	CALL python -m pip install --upgrade pip || EXIT /B 1
	CALL pip install --only-binary=cryptography -r "%PGADMIN_SRC_DIR%\requirements.txt" || EXIT /B 1

	CD %WD%
    EXIT /B 0

:CREATE_PYTHON_ENV
	ECHO Create python enviroment

	ECHO Staging Python...
	MKDIR "%BUILDROOT%\python\Lib" || EXIT /B 1

	ECHO Downloading embedded Python...
	REM Get the python embeddable and extract it to %BUILDROOT%\python
	CD "%TMPDIR%
	%PGADMIN_PYTHON_DIR%\python -c "import sys; from urllib.request import urlretrieve; urlretrieve('https://www.python.org/ftp/python/' + sys.version.split(' ')[0] + '/python-' + sys.version.split(' ')[0] + '-embed-amd64.zip', 'python-embedded.zip')" || EXIT /B 1
	%PGADMIN_PYTHON_DIR%\python -c "import zipfile; z = zipfile.ZipFile('python-embedded.zip', 'r'); z.extractall('../win-build/python/')" || EXIT /B 1

	ECHO Copying site-packages...
	XCOPY /S /I /E /H /Y "%TMPDIR%\venv\Lib\site-packages" "%BUILDROOT%\python\Lib\site-packages" > nul || EXIT /B 1

	REM NOTE: There is intentionally no space after "site" in the line below, to prevent Python barfing if there's one in the file
	ECHO import site>> "%BUILDROOT%\python\python%PYTHON_MAJOR%%PYTHON_MINOR%._pth"

	ECHO Staging Kerberos components...
	COPY "%PGADMIN_KRB5_DIR%\\\\bin\\\\kinit.exe" "%BUILDROOT%\python" || EXIT /B 1
	COPY "%PGADMIN_KRB5_DIR%\\\\bin\\\\krb5_64.dll" "%BUILDROOT%\python" || EXIT /B 1
	COPY "%PGADMIN_KRB5_DIR%\\\\bin\\\\comerr64.dll" "%BUILDROOT%\python" || EXIT /B 1
	COPY "%PGADMIN_KRB5_DIR%\\\\bin\\\\k5sprt64.dll" "%BUILDROOT%\python" || EXIT /B 1
	COPY "%PGADMIN_KRB5_DIR%\\\\bin\\\\gssapi64.dll" "%BUILDROOT%\python" || EXIT /B 1

	ECHO Cleaning up unnecessary .pyc and .pyo files...
	FOR /R "%BUILDROOT%\python" %%f in (*.pyc *.pyo) do DEL /q "%%f" > nul
	ECHO Removing tests...
	FOR /R "%BUILDROOT%\python\Lib" %%f in (test tests) do RD /Q /S "%%f" > nul 2>&1

	CD %WD%
    EXIT /B 0

:CREATE_RUNTIME_ENV
	ECHO Create Runtime enviroment

    IF NOT EXIST "%BUILDROOT%"  MKDIR "%BUILDROOT%"
    MKDIR "%BUILDROOT%\runtime"

    ECHO Removing webpack caches...
    RD /Q /S "%PGADMIN_SRC_DIR%\web\pgadmin\static\js\generated\.cache" 1> nul 2>&1

    ECHO Copying web directory...
    XCOPY /S /I /E /H /Y "%PGADMIN_SRC_DIR%\web" "%BUILDROOT%\web" > nul || EXIT /B 1

    ECHO Installing javascript dependencies...
    CD "%BUILDROOT%\web"
    CALL yarn install
    CALL yarn run bundle

    ECHO Cleaning up unnecessary .pyc and .pyo files...
    FOR /R "%BUILDROOT%\web" %%f in (*.pyc *.pyo) do DEL /q "%%f" 1> nul 2>&1
    ECHO Removing tests, Python caches and node modules...
    FOR /R "%BUILDROOT%\web" %%f in (tests feature_tests __pycache__ node_modules) do RD /Q /S "%%f" 1> nul 2>&1
    ECHO Removing the test framework...
    RD /Q /S "%BUILDROOT%\web\regression" 1> nul 2>&1
    ECHO Removing tools...
    RD /Q /S "%BUILDROOT%\web\tools" 1> nul 2>&1
    ECHO Removing any existing configurations...
    DEL /q "%BUILDROOT%\web\pgadmin4.db" 1> nul 2>&1
    DEL /q "%BUILDROOT%\web\config_local.py" 1> nul 2>&1

    ECHO Staging license files...
    COPY "%PGADMIN_SRC_DIR%\LICENSE" "%BUILDROOT%\" > nul || EXIT /B 1
    COPY "%PGADMIN_SRC_DIR%\DEPENDENCIES" "%BUILDROOT%\" > nul || EXIT /B 1

    ECHO Creating config_distro.py
    ECHO SERVER_MODE = False > "%BUILDROOT%\web\config_distro.py"
    ECHO HELP_PATH = '../../../docs/en_US/html/' >> "%BUILDROOT%\web\config_distro.py"
    ECHO DEFAULT_BINARY_PATHS = { >> "%BUILDROOT%\web\config_distro.py"
    ECHO     'pg':   '$DIR/../runtime', >> "%BUILDROOT%\web\config_distro.py"
    ECHO     'ppas': '' >> "%BUILDROOT%\web\config_distro.py"
    ECHO } >> "%BUILDROOT%\web\config_distro.py"
    ECHO UPGRADE_CHECK_KEY = 'edb-pgadmin4' >> "%BUILDROOT%\web\config_distro.py"

    ECHO Building docs...
    CALL pip install sphinx || EXIT /B 1
    CALL pip install sphinxcontrib-youtube || EXIT /B 1

    MKDIR "%BUILDROOT%\docs\en_US\html"
    CD "%PGADMIN_SRC_DIR%\docs\en_US"
    CALL "%TMPDIR%\venv\Scripts\python.exe" build_code_snippet.py || EXIT /B 1
    CALL "%TMPDIR%\venv\Scripts\sphinx-build.exe" "%PGADMIN_SRC_DIR%\docs\en_US" "%BUILDROOT%\docs\en_US\html" || EXIT /B 1

    REM Remove unnecessary doc files
    DEL /q "%BUILDROOT%\docs\en_US\html\_static\*.png" 1> nul 2>&1
    RD /Q /S "%BUILDROOT%\docs\en_US\html\_sources" 1> nul 2>&1

    ECHO Staging runtime components...
    XCOPY /S /I /E /H /Y "%PGADMIN_SRC_DIR%\runtime\assets" "%BUILDROOT%\runtime\assets" > nul || EXIT /B 1
    XCOPY /S /I /E /H /Y "%PGADMIN_SRC_DIR%\runtime\src" "%BUILDROOT%\runtime\src" > nul || EXIT /B 1
    COPY "%PGADMIN_SRC_DIR%\runtime\package.json" "%BUILDROOT%\runtime\" > nul || EXIT /B 1

    CD "%BUILDROOT%\runtime\"
    CALL yarn install --production=true

    ECHO Downloading NWjs to %TMPDIR%...
    REM Get a fresh copy of nwjs.
    REM NOTE: The nw download servers seem to be very unreliable, so at the moment we're using wget which retries

    REM WGET
    FOR /f "tokens=2 delims='" %%i IN ('yarn info nw ^| findstr "latest: "') DO SET "NW_VERSION=%%i"
    :GET_NW
        SET "NW_VERSION=0.78.0"
        wget https://dl.nwjs.io/v%NW_VERSION%/nwjs-v%NW_VERSION%-win-x64.zip -O "%TMPDIR%\nwjs-v%NW_VERSION%-win-x64.zip"
        IF %ERRORLEVEL% NEQ 0 GOTO GET_NW

    unzip -d "%TMPDIR%" "%TMPDIR%\nwjs-v%NW_VERSION%-win-x64.zip" > nul || EXIT /B 1
    REM WGET END

    XCOPY /S /I /E /H /Y "%TMPDIR%\nwjs-v%NW_VERSION%-win-x64\*" "%BUILDROOT%\runtime" > nul || EXIT /B 1

    MOVE "%BUILDROOT%\runtime\nw.exe" "%BUILDROOT%\runtime\pgAdmin4.exe"

    ECHO Replacing executable icon...
    CALL yarn --cwd "%TMPDIR%" add winresourcer || EXIT /B
    "%TMPDIR%\node_modules\winresourcer\bin\Resourcer.exe" -op:upd -src:"%BUILDROOT%\runtime\pgAdmin4.exe" -type:Icongroup -name:IDR_MAINFRAME -file:"%PGADMIN_SRC_DIR%\pkg\win32\Resources\pgAdmin4.ico"

    CD %WD%
    EXIT /B 0
