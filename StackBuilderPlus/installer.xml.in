<project>
  <!-- Package details -->
  <shortName>stackbuilderplus</shortName>
  <fullName>StackBuilderPlus</fullName>
  <version>PG_VERSION_SBP-PG_BUILDNUM_SBP</version>
  <!-- These options are used on Windows -->
  <startMenuGroupName>${branding}</startMenuGroupName>
  <!-- Product Specific Options -->
  <productComments>Application Stack Builder Plus for the PostgreSQL</productComments>
  <productDisplayName>StackBuilder Plus ${productVersion}</productDisplayName>
  <productUrlHelpLink>http://www.enterprisedb.com</productUrlHelpLink>
  <productUrlInfoAbout>http://www.enterprisedb.com</productUrlInfoAbout>
  <requireInstallationByRootUser>${admin_rights}</requireInstallationByRootUser>
  <!-- The options are used for RPM registration -->
  <description>Advanced Application Stack Builder for the PostgreSQL server</description>
  <summary>Advnaced Application Stack Builder for the PostgreSQL server, packed by EnterpriseDB</summary>
  <vendor>EnterpriseDB</vendor>

  <!-- Installer Size -->
  <width>550</width>
  <height>400</height>

  <!-- Misc options -->
  <installerFilename>${product_shortname}-${product_version}-${platform_name}.${platform_exec_suffix}</installerFilename>
  <windowsSoftwareRegistryPrefix/>
  <wrapLicenseFileText>0</wrapLicenseFileText>
  <compressionAlgorithm>lzma</compressionAlgorithm>
  <unattendedModeUI>minimal</unattendedModeUI>
  <enableRollback>0</enableRollback>
  <saveRelativePaths>1</saveRelativePaths>
  <uninstallerName>uninstall-${product_shortname}</uninstallerName>
  <outputDirectory>../output</outputDirectory>
  <installationLogFile>${system_temp_directory}/install-${product_shortname}.log</installationLogFile>
  <uninstallationLogFile>${system_temp_directory}/uninstall-${product_shortname}.log</uninstallationLogFile>
  <allowWindowResize>1</allowWindowResize>
  <replaceLockedFilesOnReboot>1</replaceLockedFilesOnReboot>

  <!-- Images -->
  <disableSplashScreen>1</disableSplashScreen>
  <leftImage>../resources/pg-side.png</leftImage>

  <!-- i18n files for the UI -->
  <allowLanguageSelection>1</allowLanguageSelection> 
  <defaultLanguage>auto</defaultLanguage>
  <allowedLanguages>en zh_CN zh_TW ja ko</allowedLanguages>
  <customLanguageFileList>
    <language code="en" encoding="iso8859-1" file="i18n/en.lng"/>
    <language code="zh_CN" encoding="utf-8" file="i18n/zh_CN.lng"/>
    <language code="zh_TW" encoding="utf-8" file="i18n/zh_TW.lng"/>
    <language code="ja" encoding="utf-8" file="i18n/jp.lng"/>
    <language code="ko" encoding="utf-8" file="i18n/ko.lng"/>
  </customLanguageFileList>

  <preShowHelpActionList>
    <!-- MAC : Set the default installation directory -->
    <setInstallerVariable name="default_installdir" persist="1" value="/Library/PostgresPlus/Shared/StackBuilderPlus">
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="osx"/>
      </ruleList>
    </setInstallerVariable>
    <!-- LIN : Set the default installation directory -->
    <setInstallerVariable name="default_installdir" persist="1" value="${platform_install_prefix}/PostgresPlus/Shared/StackBuilderPlus">
      <ruleList>
        <compareText logic="contains" text="${platform_name}" value="linux"/>
      </ruleList>
    </setInstallerVariable>
    <!-- WIN : Set the default installation directory -->
    <setInstallerVariable name="default_installdir" persist="1" value="${platform_install_prefix}\PostgresPlus\Shared\StackBuilderPlus">
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
      </ruleList>
    </setInstallerVariable>
  </preShowHelpActionList>

  <!-- Prebuild Actons-->
  <preBuildActionList>
    <setInstallerVariable name="originalplatform" value="${platform_name}"/>
    <setInstallerVariable name="originalplatform" value="linux-x32">
      <ruleList>
        <compareText text="${platform_name}" value="linux"/>
      </ruleList>
    </setInstallerVariable>
  </preBuildActionList>

  <initializationActionList>
    <setInstallerVariable name="project.parameter(extract_mode).ask" value="0"/>
    <setInstallerVariable name="productVersion" persist="1" value="PG_VERSION_SBP"/>

    <!-- Abort Installation as trying to  run a 32-bit installer on 64-bit machine -->
    <throwError customErrorMessage="${msg(platform.not.match)}" text="Unknown Error">
      <ruleList>
      <platformTest type="linux-x64"/>
      <compareText text="${originalplatform}" value="linux-x32"/>
      </ruleList>
    </throwError>

  </initializationActionList>

  <preInstallationActionList>

    <actionGroup>
      <actionList>
        <setInstallerVariable name="branding" value=""/>
        <!-- Do not create uninstaller in case of extract-only mode -->
        <setInstallerVariable name="createUninstaller" value="0" persist="1"/>
        <componentSelection>
          <select>updatemanager</select>
        </componentSelection>
      </actionList>
      <ruleList>
        <isTrue value="${extract_mode}"/>
      </ruleList>
    </actionGroup>

    <setInstallerVariable name="iSBPVersion" value="" />

    <!-- Do not perform the below actions in case of extract-only mode -->
    <setInstallerVariable name="default_installdir" persist="1" value="/Library/PostgresPlus/Shared/StackBuilderPlus">
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="osx"/>
      </ruleList>
    </setInstallerVariable>

    <!-- LIN | Solaris : Set the default installation directory -->
    <setInstallerVariable name="default_installdir" persist="1" value="${platform_install_prefix}/PostgresPlus/Shared/StackBuilderPlus">
      <ruleEvaluationLogic>or</ruleEvaluationLogic>
      <ruleList>
        <compareText logic="contains" text="${platform_name}" value="linux"/>
        <compareText logic="contains" text="${platform_name}" value="solaris"/>
      </ruleList>
    </setInstallerVariable>

    <!-- WIN : Set the default installation directory -->
    <setInstallerVariable name="default_installdir" persist="1" value="${platform_install_prefix}\PostgresPlus\Shared\StackBuilderPlus">
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
      </ruleList>
    </setInstallerVariable>

    <actionGroup>
      <actionList>
        <!-- Abort installation if not super-user and not running in extract-only mode-->
        <throwError text="${msg(Installer.Warning.RootPrivileges)}">
          <ruleList>
            <isFalse value="${installer_is_root_install}"/>
          </ruleList>
        </throwError>
        <setInstallerVariable name="project.windowsSoftwareRegistryPrefix" value="${project.vendor}\${project.fullName}"/>

        <!-- Creates the ini file if not exits -->
        <touchFile path="/etc/postgres-reg.ini">
          <ruleList>
            <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
          </ruleList>
        </touchFile>

        <setInstallerVariable name="system_user" value="${env(SUDO_USER)}" />
        <setInstallerVariable name="system_user" value="${env(USER)}" >
            <ruleList>
                <compareText logic="equals" text="${system_user}" value=""/>
            </ruleList>
        </setInstallerVariable>

        <!-- Check if UpdateMonitoring is installed for PPSS 8.4 version, disable it if found -->
         <iniFileGet file="/etc/postgres-reg.ini" section="StackBuilderPlus_PG_8_4" key="InstallationDirectory" variable="oldinstalldir">
            <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
            </ruleList>
        </iniFileGet>
        <registryGet name="InstallationDirectory" key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\StackBuilderPlus_PG_8_4" variable="oldinstalldir">
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </registryGet>
        <actionGroup>
            <actionList>
                <!-- Stop the montioring if installed, before UM exe name change -->
                 <kill path="${oldinstalldir}\bin\UpdateManager.exe" >
                   <abortOnError>0</abortOnError>
                   <showMessageOnError>0</showMessageOnError>
                   <ruleList>
                     <compareText logic="equals" text="${platform_name}" value="windows"/>
                     <fileExists path="${oldinstalldir}\bin\UpdateManager.exe" />
                   </ruleList>
                 </kill>
                 <!-- Delete the UpdateManager.exe as the new name is UpdManager.exe -->
                 <deleteFile path="${oldinstalldir}\bin\UpdateManager.exe">
                   <ruleList>
                     <fileExists path="${oldinstalldir}\bin\UpdateManager.exe" />
                   </ruleList>
                 </deleteFile>
         
                 <!-- Stop the montioring if installed, after UM exe name change -->
                 <kill path="${oldinstalldir}\bin\UpdManager.exe" >
                   <abortOnError>0</abortOnError>
                   <showMessageOnError>0</showMessageOnError>
                   <ruleList>
                     <compareText logic="equals" text="${platform_name}" value="windows"/>
                     <fileExists path="${oldinstalldir}\bin\UpdManager.exe" />
                   </ruleList>
                 </kill>
                 <actionGroup>
                   <actionList>
                     <runProgram program="kill">
                        <programArguments>-9 `ps ax | grep "${oldinstalldir}/bin/UpdateManager" | grep -v "grep" | awk '{print $1}'`</programArguments>
                        <abortOnError>0</abortOnError>
                        <showMessageOnError>0</showMessageOnError>
                     </runProgram>
                   </actionList>
                   <ruleList>
                     <compareText logic="contains" text="${platform_name}" value="linux"/>
                   </ruleList>
                 </actionGroup>
                 <actionGroup>
                   <actionList>
                     <runProgram program="kill">
                        <programArguments>-9 `ps awx | grep "${oldinstalldir}/UpdateManager" | grep -v "grep" | awk '{print $1}'`</programArguments>
                        <abortOnError>0</abortOnError>
                        <showMessageOnError>0</showMessageOnError>
                     </runProgram>
                   </actionList>
                   <ruleList>
                     <compareText logic="equals" text="${platform_name}" value="osx"/>
                   </ruleList>
                 </actionGroup>
                 <actionGroup>
                   <actionList>
                     <!-- OSX: Remove the scripts from the startup items, if installed -->
                     <deleteFile path="/Library/LaunchAgents/com.edb.launchd.stackbuilderplus.plist"
                             showMessageOnError="0"
                             abortOnError="0">
                       <ruleList>
                         <compareText text="${platform_name}" logic="equals" value="osx"/>
                       </ruleList>
                     </deleteFile>
             
                     <!-- WIN: Remove the UpdateMonitor Entry from the Registry as the Startup program -->
                     <registryDelete key="HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run"
                                     name="StackBuilderPlus8_4 Update Monitor"
                                     showMessageOnError="0"
                                     abortOnError="0"/>
             
                     <!-- LIN/LIN-X64: Remove UpdateMonitor Entry from the startup items, if installed -->
                     <setInstallerVariable name="xdg_config_dir" value="${env(XDG_CONFIG_DIRS)}"/>
                     <setInstallerVariable name="xdg_config_dir" value="/etc/xdg">
                       <ruleList>
                         <compareText text="${xdg_config_dir}" logic="equals" value=""/>
                       </ruleList>
                     </setInstallerVariable>
                     <deleteFile path="${xdg_config_dir}/autostart/zzz-edb-sbp-pg_8_4-update-monitor.desktop">
                       <ruleList>
                         <fileExists path="${xdg_config_dir}/autostart/zzz-edb-sbp-pg_8_4-update-monitor.desktop"/>
                       </ruleList>
                     </deleteFile>
                   </actionList>
                 </actionGroup>          
             </actionList>
             <ruleList>
                  <compareText logic="does_not_equal" text="${oldinstalldir}" value=""/>
             </ruleList>
        </actionGroup> 
                    
        <!-- LIN & MAC : Get the branding & check Previous Installation of -->
        <actionGroup>
          <actionList>
            <iniFileGet file="/etc/postgres-reg.ini" section="StackBuilderPlus" key="Branding" variable="iBranding"/>
            <iniFileGet file="/etc/postgres-reg.ini" section="StackBuilderPlus" key="Version" variable="iSBPVersion"/>
          </actionList>
          <ruleList>
            <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
          </ruleList>
        </actionGroup>

        <!-- WIN : Check Previous Installation of StackBuilderPlus-->
        <actionGroup>
          <actionList>
            <!-- Get the branding -->
            <registryGet name="Branding" key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\StackBuilderPlus" variable="iBranding"/>
            <registryGet name="Version" key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\StackBuilderPlus" variable="iSBPVersion"/>
          </actionList>
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
          </ruleList>
        </actionGroup>

        <!-- If there appears to be an existing installation, with no Branding value. -->
        <!-- force the default value. Otherwise, set the branding to whatever we read, -->
        <!-- or, set the default -->

        <!-- Existing install, with branding -->
        <setInstallerVariable name="branding" persist="1" value="${iBranding}">
          <ruleList>
            <compareText logic="does_not_equal" text="${iBranding}" value=""/>
          </ruleList>
        </setInstallerVariable>

        <!-- New install, nothing set on the command line -->
        <setInstallerVariable name="branding" persist="1" value="Postgres Plus Addons">
          <ruleList>
            <compareText logic="equals" text="${branding}" value=""/>
          </ruleList>
        </setInstallerVariable>

        <logMessage text="Using branding: ${branding}"/>

        <actionGroup>
            <actionList>
                <setInstallerVariable name="installationType" value="upgrade" />
            </actionList>
            <ruleList>
                <compareText>
                    <text>${iSBPVersion}</text>
                    <logic>does_not_equal</logic>
                    <value/>
                </compareText>
            </ruleList>
        </actionGroup>

        <!-- Set the installation directory in case of re-install/upgrade -->
        <actionGroup>
          <actionList>
            <iniFileGet file="/etc/postgres-reg.ini" section="StackBuilderPlus" key="InstallationDirectory" variable="installdir"/>
          </actionList>
          <ruleList>
            <compareText logic="does_not_equal" text="${iSBPVersion}" value=""/>
            <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
          </ruleList>
        </actionGroup>

        <registryGet name="InstallationDirectory" key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\StackBuilderPlus" variable="installdir">
          <ruleList>
            <compareText logic="does_not_equal" text="${iSBPVersion}" value=""/>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
          </ruleList>
        </registryGet>

        <!-- Stop the montioring if installed, before UM exe name change -->
        <kill path="${installdir}\bin\UpdateManager.exe" >
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
            <compareText logic="does_not_equal" text="${iSBPVersion}" value=""/>
            <fileExists path="${installdir}\bin\UpdateManager.exe" />
          </ruleList>
        </kill>
        <!-- Delete the UpdateManager.exe as the new name is UpdManager.exe -->
        <deleteFile path="${installdir}\bin\UpdateManager.exe">
          <ruleList>
            <fileExists path="${installdir}\bin\UpdateManager.exe" />
          </ruleList>
        </deleteFile>

        <!-- Stop the montioring if installed, after UM exe name change -->
        <kill path="${installdir}\bin\UpdManager.exe" >
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
            <compareText logic="does_not_equal" text="${iSBPVersion}" value=""/>
            <fileExists path="${installdir}\bin\UpdManager.exe" />
          </ruleList>
        </kill>

        <actionGroup>
          <actionList>
            <runProgram program="kill">
               <programArguments>-9 `ps ax | grep "${installdir}/bin/UpdateManager" | grep -v "grep" | awk '{print $1}'`</programArguments>
               <abortOnError>0</abortOnError>
               <showMessageOnError>0</showMessageOnError>
            </runProgram>
          </actionList>
          <ruleList>
            <compareText logic="contains" text="${platform_name}" value="linux"/>
            <compareText logic="does_not_equal" text="${iSBPVersion}" value=""/>
          </ruleList>
        </actionGroup>
        <actionGroup>
          <actionList>
            <runProgram program="kill">
               <programArguments>-9 `ps awx | grep "${installdir}/UpdateManager" | grep -v "grep" | awk '{print $1}'`</programArguments>
               <abortOnError>0</abortOnError>
               <showMessageOnError>0</showMessageOnError>
            </runProgram>
          </actionList>
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="osx"/>
            <compareText logic="does_not_equal" text="${iSBPVersion}" value=""/>
          </ruleList>
        </actionGroup>
        <actionGroup>
          <actionList>
            <runProgram program="kill">
               <programArguments>-9 `ps -ef | grep "${installdir}/bin/UpdateManager" | grep -v "grep" | awk '{print $2}'`</programArguments>
               <abortOnError>0</abortOnError>
               <showMessageOnError>0</showMessageOnError>
            </runProgram>
          </actionList>
          <ruleList>
            <compareText logic="contains" text="${platform_name}" value="solaris"/>
            <compareText logic="does_not_equal" text="${iSBPVersion}" value=""/>
          </ruleList>
        </actionGroup>

        <componentSelection>
          <select>updatemanager</select>
          <ruleList>
            <ruleGroup>
                <ruleEvaluationLogic>or</ruleEvaluationLogic>
                <ruleList>
                    <fileExists path="${installdir}/bin/UpdateManager" />
                    <isTrue value="${installMonitoring}" />
                </ruleList>
            </ruleGroup>
            <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
          </ruleList>
        </componentSelection>
        <componentSelection>
          <select>updatemanager</select>
          <ruleList>
            <ruleGroup>
                <ruleEvaluationLogic>or</ruleEvaluationLogic>
                <ruleList>
                    <fileExists path="${installdir}\bin\UpdManager.exe" />
                    <isTrue value="${installMonitoring}" />
                </ruleList>
            </ruleGroup>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
          </ruleList>
        </componentSelection>

      </actionList>
      <ruleList>
        <isFalse value="${extract_mode}"/>
      </ruleList>
    </actionGroup>

  </preInstallationActionList>
  <postInstallationActionList>

    <!-- Do not perform the below actions in case of extract-only mode -->
    <actionGroup>
      <actionList>
        <!-- Set the installation date -->
        <createTimeStamp format="%Y-%m-%d" variable="installDate"></createTimeStamp>
    
        <!-- Remember it for the uninstaller -->
        <setInstallerVariable name="monitorServer" persist="1" value="${monitorServer}"/>
        <setInstallerVariable name="installdir" persist="1" value="${installdir}"/>
    
        <actionGroup>
          <actionList>
            <iniFileSet file="/etc/postgres-reg.ini" section="StackBuilderPlus" key="Description" value="${msg(install.summary)}"/>
            <iniFileSet file="/etc/postgres-reg.ini" section="StackBuilderPlus" key="InstallationDirectory" value="${installdir}"/>
            <iniFileSet file="/etc/postgres-reg.ini" section="StackBuilderPlus" key="Version" value="${product_version}"/>
            <iniFileSet file="/etc/postgres-reg.ini" section="StackBuilderPlus" key="InstallationDate" value="${installDate}">
              <ruleList>
                <compareText logic="equals" text="${iSBPVersion}" value=""/>
              </ruleList>
            </iniFileSet>
          </actionList>
          <ruleList>
            <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
          </ruleList>
        </actionGroup>
    
        <!-- Branding info -->
        <logMessage text="Write the branding to the ini file..."/>
    
        <iniFileSet file="/etc/postgres-reg.ini" section="StackBuilderPlus" key="Branding" value="${branding}">
          <ruleList>
            <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
          </ruleList>
        </iniFileSet>
        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\StackBuilderPlus" name="Description" value="${msg(install.summary)}"/>
        <registrySet key="HKEY_LOCAL_MACHINE\Software\EnterpriseDB\StackBuilderPlus" name="InstallationDirectory" value="${installdir}"/>
        <registrySet key="HKEY_LOCAL_MACHINE\Software\EnterpriseDB\StackBuilderPlus" name="Version" value="${product_version}"/>
        <registrySet key="HKEY_LOCAL_MACHINE\Software\EnterpriseDB\StackBuilderPlus" name="Branding" value="${branding}"/>
        <registrySet key="HKEY_LOCAL_MACHINE\Software\EnterpriseDB\StackBuilderPlus" name="InstallationDate" value="${installDate}">
            <ruleList>
              <compareText logic="equals" text="${iSBPVersion}" value=""/>
            </ruleList>
        </registrySet>
        <substitute>
          <files>${installdir}/scripts/launchSBPUpdateMonitor.vbs</files>
          <substitutionList>
             <substitution pattern="INSTALL_DIR" value="${installdir}"/>
          </substitutionList>
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
          </ruleList>
        </substitute>
    
        <substitute>
          <files>${installdir}/scripts/launchSBPUpdateMonitor.sh</files>
          <substitutionList>
             <substitution pattern="INSTALL_DIR" value="${installdir}"/>
             <substitution pattern="BRANDING" value="${branding}"/>
          </substitutionList>
          <ruleList>
            <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
          </ruleList>
        </substitute>
    
    
        <actionGroup>
          <actionList>
            <substitute>
              <files>${installdir}/installer/StackBuilderPlus/createshortcuts.sh</files>
              <substitutionList>
                <substitution pattern="@@INSTALL_DIR@@" value="${installdir}"/>
                <substitution pattern="@@BRANDING@@" value="${branding}"/>
              </substitutionList>
            </substitute>
            <substitute>
              <files>${installdir}/scripts/xdg/edb-stackbuilderplus-update-monitor.desktop</files>
              <substitutionList>
                <substitution pattern="@@INSTALL_DIR@@" value="${installdir}"/>
              </substitutionList>
            </substitute>
    
            <!-- Create shourtcuts for linux/linux-x64/osx -->
            <runProgram program="${installdir}/installer/StackBuilderPlus/createshortcuts.sh"
                        programArguments=""
                        progressText="${msg(progress.text.creating.shortcuts)}"
                        abortOnError="0"
                        showMessageOnError="0"/>
    
            <!-- Create shourtcuts for linux/linux-x64/osx -->
            <runProgram program="${installdir}/installer/StackBuilderPlus/configlibs.sh"
                        programArguments=""
                        progressText="${msg(progress.text.fixing.libs)}"
                        abortOnError="0"
                        showMessageOnError="0">
                <ruleEvaluationLogic>or</ruleEvaluationLogic>
                <ruleList>
                  <compareText logic="contains" text="${platform_name}" value="linux"/>
                  <compareText logic="contains" text="${platform_name}" value="solaris"/>
                </ruleList>
            </runProgram>
    
          </actionList>
          <ruleList>
            <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
          </ruleList>
        </actionGroup>
    
        <!-- OSX: Hide the dockIcon for shortcut -->
        <substitute>
          <files>/Applications/${branding}/StackBuilder Plus.app/Contents/Info.plist</files>
          <substitutionList>
              <substitution pattern="&lt;/dict&gt;" value="        &lt;key&gt;LSUIElement&lt;/key&gt; &lt;string&gt;1&lt;/string&gt; &lt;/dict&gt;"/>
          </substitutionList>
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="osx"/>
          </ruleList>
        </substitute>
    
        <actionGroup>
          <actionList>
            <!-- WIN: Register launchSBPUpdateMonitor script as a startup script -->
            <registrySet key="HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run"
                         name="StackBuilderPlus Update Monitor"
                         value="&quot;${installdir}\bin\UpdManager.exe&quot; --execute  &quot;${installdir}\bin\stackbuilderplus.exe&quot;"/>
    
            <actionGroup>
               <actionList>
                   <runProgram program="${installdir}/installer/StackBuilderPlus/startupcfg.sh"
                               programArguments="${installdir} &quot;${branding}&quot;"
                               abortOnError="0"
                               showMessageOnError="0"/>
                   <substitute>
                      <files>${installdir}/scripts/LaunchUpdateManager.app/Contents/Info.plist</files>
                      <substitutionList>
                          <substitution pattern="&lt;/dict&gt;" value="        &lt;key&gt;LSUIElement&lt;/key&gt; &lt;string&gt;1&lt;/string&gt; &lt;/dict&gt;"/>
                      </substitutionList>
                   </substitute>
    
                   <runProgram program="/usr/bin/defaults"
                               programArguments="read loginwindow AutoLaunchedApplicationDictionary"
                               runAs="${system_user}"
                               abortOnError="0"
                               showMessageOnError="0"/>
                   <runProgram program="/usr/bin/defaults"
                               programArguments="write loginwindow AutoLaunchedApplicationDictionary -array-add &quot;&lt;dict&gt;&lt;key&gt;Hide&lt;/key&gt;&lt;true/&gt;&lt;key&gt;Path&lt;/key&gt;&lt;string&gt;${installdir}/scripts/LaunchUpdateManager.app&lt;/string&gt;&lt;/dict&gt;&quot;"
                               runAs="${system_user}"
                               abortOnError="0"
                               showMessageOnError="0">
                               <ruleList>
                                    <regExMatch text="${program_stdout}" logic="does_not_match" pattern="^.*${installdir}/scripts/LaunchUpdateManager.*$"/>
                               </ruleList>
                   </runProgram>
               </actionList>
               <ruleList>
                   <compareText logic="equals" text="${platform_name}" value="osx"/>
               </ruleList>
            </actionGroup>
    
            <!-- LIN/LIN-X64: Register Stack Builder Plus Update Monitor as a startup script -->
            <actionGroup>
              <actionList>
                <setInstallerVariable name="xdg_config_dir_str" value="${env(XDG_CONFIG_DIRS)}"/>
                <setInstallerVariable name="xdg_config_dir_str" value="/etc/xdg">
                  <ruleList>
                    <compareText text="${xdg_config_dir_str}" logic="equals" value=""/>
                  </ruleList>
                </setInstallerVariable>
                <setInstallerVariableFromRegEx>
                  <name>xdg_config_dir</name>
                  <text>${xdg_config_dir_str}</text>
                  <pattern>^[:]*(.*)[:]*$</pattern>
                  <substitution>\1</substitution>
                </setInstallerVariableFromRegEx>
    
                <createDirectory path="${xdg_config_dir}/autostart">
                  <ruleList>
                    <fileTest condition="not_exists" path="${xdg_config_dir}/autostart"/>
                  </ruleList>
                </createDirectory>
                <substitute>
                  <files>${installdir}/scripts/xdg/edb-sbp-update-monitor.desktop</files>
                  <substitutionList>
                    <substitution pattern="@@INSTALL_DIR@@" value="${installdir}"/>
                  </substitutionList>
                </substitute>
    
                <!-- Make sure, this will start after the gnome/kde system tray get initialized -->
                <copyFile origin="${installdir}/scripts/xdg/edb-sbp-update-monitor.desktop"
                          destination="${xdg_config_dir}/autostart/zzz-edb-sbp-update-monitor.desktop"/>
              </actionList>
              <ruleList>
                <compareText text="${platform_name}" logic="contains" value="linux"/>
              </ruleList>
            </actionGroup>

            <!-- Add SBP UM launch script to gnome/default.session for autostart on user login -->    
            <actionGroup>
              <actionList>
                 <readFile path="/usr/share/gnome/default.session" name="conf_file" />
                 <setInstallerVariableFromRegEx>
                    <name>num_client</name>
                    <text>${conf_file}</text>
                    <pattern>^.*num_clients\s*=\s*([\d]+)\s*.*$</pattern>
                    <substitution>\1</substitution>
                 </setInstallerVariableFromRegEx>
                 <!-- Make it available in the uninstaller as well -->  
                 <setInstallerVariable name="num_client" value="${num_client}" persist="1" />

                 <mathExpression text="${num_client} + 1" variable="new_num_client" >
                    <ruleList>
                       <compareText text="${num_client}" logic="does_not_equal" value="" />
                    </ruleList>
                 </mathExpression>
                 <substitute>
                    <files>/usr/share/gnome/default.session</files>
                    <substitutionList>
                        <substitution>
                             <pattern>num_clients=[\d]+</pattern> 
                             <value>num_clients=${new_num_client}</value>
                        </substitution>
                    </substitutionList>
                 </substitute>    
                 <addTextToFile>
                    <file>/usr/share/gnome/default.session</file>
                    <text>${num_client},id=default${num_client}
${num_client},Priority=50
${num_client},RestartCommand=${installdir}/scripts/launchSBPUpdateMonitor.sh &amp;
</text> 
                 </addTextToFile>
              </actionList>
              <ruleList>
                <compareText text="${platform_name}" logic="contains" value="solaris"/>
                <compareText text="${iSBPVersion}" logic="equals" value=""/>
              </ruleList>
            </actionGroup>
          </actionList>
          <ruleList>
            <isTrue value="${component(updatemanager).selected}"/> 
          </ruleList>
        </actionGroup>
    
        <!-- Start Monitoring Service if installed -->
        <runProgram program="${installdir}/scripts/launchSBPUpdateMonitor.sh"
                    programArguments=""
                    runAs="${system_user}"
                    showMessageOnError="0"
                    abortOnError="0">
          <ruleList>
            <compareText text="${platform_name}" logic="contains" value="linux"/>
            <fileExists path="${installdir}/scripts/launchSBPUpdateMonitor.sh" />
          </ruleList>
       </runProgram>
       <runProgram program="${installdir}/scripts/launchSBPUpdateMonitor.sh"
                    programArguments=""
                    runAs="${system_user}"
                    showMessageOnError="0"
                    abortOnError="0">
          <ruleList>
            <compareText text="${platform_name}" logic="contains" value="solaris"/>
            <fileExists path="${installdir}/scripts/launchSBPUpdateMonitor.sh" />
          </ruleList>
        </runProgram>
        <runProgram program="${installdir}/scripts/LaunchUpdateManager.app/Contents/MacOS/applet"
                    programArguments=""
                    runAs="${system_user}"
                    showMessageOnError="0"
                    abortOnError="0">
          <ruleList>
            <compareText text="${platform_name}" logic="equals" value="osx"/>
            <fileExists path="${installdir}/scripts/LaunchUpdateManager.app/Contents/MacOS/applet" />
          </ruleList>
        </runProgram>
    
        <runProgram>
            <program>wscript</program>
            <programArguments>//NOLOGO "${installdir}\scripts\launchSBPUpdateMonitor.vbs"</programArguments>
            <workingDirectory>"${installdir}\scripts"</workingDirectory>
            <showMessageOnError>1</showMessageOnError>
            <abortOnError>0</abortOnError>
            <ruleList>
               <compareText text="${platform_name}" logic="equals" value="windows"/>
               <fileExists path="${installdir}\scripts\launchSBPUpdateMonitor.vbs" />
            </ruleList>
        </runProgram>
      </actionList>
      <ruleList>
        <isFalse value="${extract_mode}"/>
      </ruleList>
    </actionGroup>
    <actionGroup>
      <actionList>
        <substitute>
          <files>${installdir}/scripts/launchSBPUpdateMonitor.vbs</files>
          <substitutionList>
             <substitution pattern="INSTALL_DIR" value="${installdir}"/>
          </substitutionList>
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
          </ruleList>
        </substitute>
    
        <substitute>
          <files>${installdir}/scripts/launchSBPUpdateMonitor.sh</files>
          <substitutionList>
             <substitution pattern="INSTALL_DIR" value="${installdir}"/>
          </substitutionList>
          <ruleList>
            <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
          </ruleList>
        </substitute>
      </actionList>
      <ruleList>
        <isTrue value="${extract_mode}"/>
      </ruleList>
    </actionGroup>
  </postInstallationActionList>

  <!-- preUninstallation actions -->
  <preUninstallationActionList>

    <!-- Abort uninstallation if not super-user/Administrator -->
    <actionGroup>
      <actionList>
        <showWarning text="${msg(Installer.Warning.UninstallerAdministratorPrivileges)}"/>
        <exit/>
      </actionList>
      <ruleList>
        <isFalse value="${installer_is_root_install}"/>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
      </ruleList>
    </actionGroup>
    <actionGroup>
      <actionList>
        <showWarning text="${msg(Installer.Warning.UninstallerRootPrivileges)}"/>
        <exit/>
      </actionList>
      <ruleList>
        <isFalse value="${installer_is_root_install}"/>
        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
      </ruleList>
    </actionGroup>

    <!-- Stop the montioring if installed -->
    <kill path="${installdir}\bin\UpdManager.exe" >
      <abortOnError>0</abortOnError>
      <showMessageOnError>0</showMessageOnError>
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
      </ruleList>
    </kill>

    <actionGroup>
      <actionList>
        <runProgram program="kill">
           <programArguments>-9 `ps ax | grep "${installdir}/bin/UpdateManager" | grep -v "grep" | awk '{print $1}'`</programArguments>
           <abortOnError>0</abortOnError>
           <showMessageOnError>0</showMessageOnError>
        </runProgram>
      </actionList>
      <ruleList>
        <compareText logic="contains" text="${platform_name}" value="linux"/>
      </ruleList>
    </actionGroup>

    <actionGroup>
      <actionList>
        <runProgram program="kill">
           <programArguments>-9 `ps -ef | grep "${installdir}/bin/UpdateManager" | grep -v "grep" | awk '{print $2}'`</programArguments>
           <abortOnError>0</abortOnError>
           <showMessageOnError>0</showMessageOnError>
        </runProgram>
      </actionList>
      <ruleList>
        <compareText logic="contains" text="${platform_name}" value="solaris"/>
      </ruleList>
    </actionGroup>

    <actionGroup>
      <actionList>
        <runProgram program="kill">
           <programArguments>-9 `ps awx | grep "${installdir}/UpdateManager" | grep -v "grep" | awk '{print $1}'`</programArguments>
           <abortOnError>0</abortOnError>
           <showMessageOnError>0</showMessageOnError>
        </runProgram>
      </actionList>
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="osx"/>
      </ruleList>
    </actionGroup>
    <!-- Remove shortcuts -->
    <actionGroup>
      <actionList>
        <substitute>
          <files>${installdir}/installer/StackBuilderPlus/removeshortcuts.sh</files>
          <substitutionList>
            <substitution pattern="@@INSTALL_DIR@@" value="${installdir}"/>
            <substitution pattern="@@BRANDING@@" value="${branding}"/>
          </substitutionList>
        </substitute>
        <runProgram program="${installdir}/installer/StackBuilderPlus/removeshortcuts.sh"
                    programArguments=""
                    progressText="${msg(progress.text.removing.shortcuts)}"
                    abortOnError="0"
                    showMessageOnError="0"/>
      </actionList>
      <ruleEvaluationLogic>or</ruleEvaluationLogic>
      <ruleList>
        <compareText logic="contains" text="${platform_name}" value="linux"/>
        <compareText logic="contains" text="${platform_name}" value="solaris"/>
      </ruleList>
    </actionGroup>
    <actionGroup>
      <actionList>
        <iniFileSet file="/etc/postgres-reg.ini" section="StackBuilderPlus" key="Description" value=""/>
        <iniFileSet file="/etc/postgres-reg.ini" section="StackBuilderPlus" key="InstallationDirectory" value=""/>
        <iniFileSet file="/etc/postgres-reg.ini" section="StackBuilderPlus" key="Version" value=""/>
        <iniFileSet file="/etc/postgres-reg.ini" section="StackBuilderPlus" key="Branding" value=""/>
        <iniFileSet file="/etc/postgres-reg.ini" section="StackBuilderPlus" key="InstallationDate" value=""/>
      </actionList>
      <ruleList>
        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
      </ruleList>
    </actionGroup>

    <actionGroup>
      <actionList>
        <!-- OSX: Remove the scripts from the startup items, if installed -->
        <deleteFile path="/Library/LaunchAgents/com.edb.launchd.stackbuilderplus.plist"
                showMessageOnError="0"
                abortOnError="0">
          <ruleList>
            <compareText text="${platform_name}" logic="equals" value="osx"/>
          </ruleList>
        </deleteFile>

        <!-- WIN: Remove the UpdateMonitor Entry from the Registry as the Startup program -->
        <registryDelete key="HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run"
                        name="StackBuilderPlus Update Monitor"
                        showMessageOnError="0"
                        abortOnError="0"/>

        <!-- LIN/LIN-X64: Remove UpdateMonitor Entry from the startup items, if installed -->
        <setInstallerVariable name="xdg_config_dir" value="${env(XDG_CONFIG_DIRS)}"/>
        <setInstallerVariable name="xdg_config_dir" value="/etc/xdg">
          <ruleList>
            <compareText text="${xdg_config_dir}" logic="equals" value=""/>
          </ruleList>
        </setInstallerVariable>
        <deleteFile path="${xdg_config_dir}/autostart/zzz-edb-sbp-update-monitor.desktop">
          <ruleList>
            <fileExists path="${xdg_config_dir}/autostart/zzz-edb-sbp-update-monitor.desktop"/>
          </ruleList>
        </deleteFile>

      </actionList>
    </actionGroup>
    <readFile path="/usr/share/gnome/default.session" name="conf_file" >
       <ruleList>
         <compareText logic="contains" text="${platform_name}" value="solaris"/>
       </ruleList>
    </readFile>
    <actionGroup>
      <actionList>
          <setInstallerVariableFromRegEx>
             <name>current_num_client</name>
             <text>${conf_file}</text>
             <pattern>^.*num_clients\s*=\s*([\d]+)\s*.*$</pattern>
             <substitution>\1</substitution>
          </setInstallerVariableFromRegEx>
          <mathExpression text="${current_num_client} - 1" variable="new_num_client" >
             <ruleList>
                <compareText text="${current_num_client}" logic="does_not_equal" value="" />
             </ruleList>
          </mathExpression>
          <substitute>
             <files>/usr/share/gnome/default.session</files>
             <substitutionList>
                 <substitution>
                      <pattern>num_clients=[\d]+</pattern>
                      <value>num_clients=${new_num_client}</value>
                 </substitution>
                 <substitution>
                      <pattern>${num_client},id=default${num_client}
${num_client},Priority=50
${num_client},RestartCommand=${installdir}/scripts/launchSBPUpdateMonitor.sh &amp;
</pattern>
                      <value/>
                 </substitution>
             </substitutionList>
          </substitute>
       </actionList>
       <ruleList>
         <regExMatch text="${conf_file}" pattern="${num_client},RestartCommand=${installdir}/scripts/launchSBPUpdateMonitor.sh &amp;" />
         <compareText logic="contains" text="${platform_name}" value="solaris"/>
       </ruleList>
    </actionGroup>

    <!-- MAC: Remove Stack Builder Plus shortcut -->
    <deleteFile path="/Applications/${branding}/StackBuilder Plus.app">
      <ruleList>
        <fileExists path="/Applications/${branding}/StackBuilder Plus.app"/>
        <compareText logic="equals" text="${platform_name}" value="osx"/>
      </ruleList>
    </deleteFile>

    <!-- MAC: Remove LaunchUpdateManager  -->
    <deleteFile path="${installdir}/scripts/LaunchUpdateManager.app">
      <ruleList>
        <fileExists path="${installdir}/scripts/LaunchUpdateManager.app"/>
        <compareText logic="equals" text="${platform_name}" value="osx"/>
      </ruleList>
    </deleteFile>


  </preUninstallationActionList>

  <!-- Components -->
  <componentList>
    <component>
      <name>stackbuilderplus</name>
      <description>StackBuilder Plus</description>
      <canBeEdited>0</canBeEdited>
      <selected>1</selected>
      <show>0</show>
      <folderList>
        <!-- LIN- Program files -->
        <folder description="Program Files" destination="${installdir}" name="programfileslinux" platforms="linux">
          <distributionFileList>
            <distributionDirectory origin="staging/linux/bin"/>
            <distributionDirectory origin="staging/linux/share"/>
            <distributionDirectory origin="staging/linux/lib"/>
            <distributionDirectory origin="staging/linux/installer"/>
            <distributionDirectory origin="staging/linux/scripts"/>
          </distributionFileList>
        </folder>
        <!-- LIN-X64 - Program files -->
        <folder description="Program Files" destination="${installdir}" name="programfileslinux-x64" platforms="linux-x64">
          <distributionFileList>
            <distributionDirectory origin="staging/linux-x64/bin"/>
            <distributionDirectory origin="staging/linux-x64/share"/>
            <distributionDirectory origin="staging/linux-x64/lib"/>
            <distributionDirectory origin="staging/linux-x64/installer"/>
            <distributionDirectory origin="staging/linux-x64/scripts"/>
          </distributionFileList>
        </folder>
        <!-- SOLARIS-X64 - Program files -->
        <folder description="Program Files" destination="${installdir}" name="programfilessolaris-x64" platforms="solaris-intel">
          <distributionFileList>
            <distributionDirectory origin="staging/solaris-x64/bin"/>
            <distributionDirectory origin="staging/solaris-x64/share"/>
            <distributionDirectory origin="staging/solaris-x64/lib"/>
            <distributionDirectory origin="staging/solaris-x64/installer"/>
            <distributionDirectory origin="staging/solaris-x64/scripts"/>
          </distributionFileList>
        </folder>
        <!-- SOLARIS-SPARC - Program files -->
        <folder description="Program Files" destination="${installdir}" name="programfilessolaris-sparc" platforms="solaris-sparc">
          <distributionFileList>
            <distributionDirectory origin="staging/solaris-sparc/bin"/>
            <distributionDirectory origin="staging/solaris-sparc/share"/>
            <distributionDirectory origin="staging/solaris-sparc/lib"/>
            <distributionDirectory origin="staging/solaris-sparc/installer"/>
            <distributionDirectory origin="staging/solaris-sparc/scripts"/>
          </distributionFileList>
        </folder>
        <!-- LIN-PPC64 - Program files -->
        <folder description="Program Files" destination="${installdir}" name="programfileslinux-ppc64" platforms="linux-ppc">
          <distributionFileList>
            <distributionDirectory origin="staging/linux-ppc64/bin"/>
            <distributionDirectory origin="staging/linux-ppc64/share"/>
            <distributionDirectory origin="staging/linux-ppc64/lib"/>
            <distributionDirectory origin="staging/linux-ppc64/installer"/>
            <distributionDirectory origin="staging/linux-ppc64/scripts"/>
          </distributionFileList>
        </folder>
        <!-- MAC Program Files -->
        <folder description="Program Files" destination="${installdir}" name="programfilesosx" platforms="osx">
          <distributionFileList>
            <distributionDirectory origin="staging/osx/StackBuilderPlus.app"/>
            <distributionDirectory origin="staging/osx/installer"/>
            <distributionDirectory origin="staging/osx/scripts"/>
          </distributionFileList>
        </folder>
        <!-- WIN - Program files -->
        <folder description="Program Files" destination="${installdir}" name="programfileswindows" platforms="windows">
          <distributionFileList>
            <distributionDirectory origin="staging/windows/bin"/>
            <distributionDirectory origin="staging/windows/share"/>
          </distributionFileList>
        </folder>
      </folderList>
      <!-- WIN: Start Menu -->
      <startMenuShortcutList>

        <!-- Application Stack Builder Plus -->
        <startMenuShortcut name="StackBuilder Plus"
                           runInTerminal="0"
                           windowsExec="${installdir}\bin\stackbuilderplus.exe">
          <ruleList>
            <isFalse value="${extract_mode}"/>
          </ruleList>
        </startMenuShortcut>
      </startMenuShortcutList>
    </component>
    <component>
      <name>updatemanager</name>
      <description>UpdateManager</description>
      <canBeEdited>1</canBeEdited>
      <selected>0</selected>
      <show>0</show>
      <folderList>
        <!-- LIN- Program files -->
        <folder description="Program Files" destination="${installdir}" name="updatemanagerfileslinux" platforms="linux">
          <distributionFileList>
            <distributionDirectory origin="staging/linux/UpdateManager/bin"/>
            <distributionDirectory origin="staging/linux/UpdateManager/lib"/>
            <distributionDirectory origin="staging/linux/UpdateManager/scripts"/>
          </distributionFileList>
        </folder>
        <!-- LIN-X64 - Program files -->
        <folder description="Program Files" destination="${installdir}" name="updatemanagerfileslinux-x64" platforms="linux-x64">
          <distributionFileList>
            <distributionDirectory origin="staging/linux-x64/UpdateManager/bin"/>
            <distributionDirectory origin="staging/linux-x64/UpdateManager/lib"/>
            <distributionDirectory origin="staging/linux-x64/UpdateManager/scripts"/>
          </distributionFileList>
        </folder>
        <!-- SOLARIS-X64 - Program files -->
        <folder description="Program Files" destination="${installdir}" name="updatemanagerfilessolaris-x64" platforms="solaris-intel">
          <distributionFileList>
            <distributionDirectory origin="staging/solaris-x64/UpdateManager/bin"/>
            <distributionDirectory origin="staging/solaris-x64/UpdateManager/lib"/>
            <distributionDirectory origin="staging/solaris-x64/UpdateManager/scripts"/>
          </distributionFileList>
        </folder>
        <!-- SOLARIS-SPARC - Program files -->
        <folder description="Program Files" destination="${installdir}" name="updatemanagerfilessolaris-sparc" platforms="solaris-sparc">
          <distributionFileList>
            <distributionDirectory origin="staging/solaris-sparc/UpdateManager/bin"/>
            <distributionDirectory origin="staging/solaris-sparc/UpdateManager/lib"/>
            <distributionDirectory origin="staging/solaris-sparc/UpdateManager/scripts"/>
          </distributionFileList>
        </folder>
        <!-- LIN-PPC64 - Program files -->
        <folder description="Program Files" destination="${installdir}" name="updatemanagerfileslinux-ppc64" platforms="linux-ppc">
          <distributionFileList>
            <distributionDirectory origin="staging/linux-ppc64/UpdateManager/bin"/>
            <distributionDirectory origin="staging/linux-ppc64/UpdateManager/lib"/>
            <distributionDirectory origin="staging/linux-ppc64/UpdateManager/scripts"/>
          </distributionFileList>
        </folder>
        <!-- MAC Program Files -->
        <folder description="Program Files" destination="${installdir}" name="updatemanagerfilesosx" platforms="osx">
          <distributionFileList>
            <distributionDirectory origin="staging/osx/UpdateManager.app"/>
            <distributionDirectory origin="staging/osx/UpdateManager/scripts"/>
            <distributionDirectory origin="staging/osx/UpdateManager/installer"/>
          </distributionFileList>
        </folder>
        <!-- WIN - Program files -->
        <folder description="Program Files" destination="${installdir}" name="updatemanagerfileswindows" platforms="windows">
          <distributionFileList>
            <distributionDirectory origin="staging/windows/UpdateManager/bin"/>
            <distributionDirectory origin="staging/windows/scripts"/>
          </distributionFileList>
        </folder>
      </folderList>
   </component>
  </componentList>
  <!-- Install Directory -->
  <parameterList>
    <booleanParameter name="extract_mode" cliOptionName="extract-only" default="0" ask="1" cliOptionShow="1"/>
    <booleanParameter name="admin_rights" cliOptionName="require-admin" default="0" ask="0" cliOptionShow="0"/>
    <stringParameter name="originalplatform" ask="0" cliOptionShow="0"/>
    <stringParameter name="branding" cliOptionName="branding" ask="0" cliOptionShow="0"/>
    <booleanParameter name="installMonitoring" cliOptionName="install-monitoring" ask="0" cliOptionShow="0" default="0"/>

    <directoryParameter>
      <name>installdir</name>
      <description>Installer.Parameter.installdir.description</description>
      <explanation>Installer.Parameter.installdir.explanation</explanation>
      <value>${default_installdir}</value>
      <default/>
      <allowEmptyValue>0</allowEmptyValue>
      <ask>yes</ask>
      <cliOptionName>prefix</cliOptionName>
      <mustBeWritable>yes</mustBeWritable>
      <mustExist>0</mustExist>
      <width>40</width>
      <ruleList>
        <compareText text="${iSBPVersion}" logic="equals" value=""/>
      </ruleList>

      <!-- Validating whether installdir is empty -->
      <validationActionList>
        <actionGroup>
          <actionList>
            <setInstallerVariable name="installdir" value="${default_installdir}" />
            <throwError text="${msg(sbp.installdir.empty)}"/>
          </actionList>
          <ruleList>
            <compareText text="${installdir}" logic="equals" value=""/>
          </ruleList>
        </actionGroup>
      </validationActionList>
      <!-- Validating whether installdir contains whitespaces (Linux) -->
      <postShowPageActionList>
        <actionGroup>
          <actionList>
            <showWarning text="${msg(sbp.installdir.error)}"/>
            <setInstallerVariable name="next_page" value="installdir"/>
          </actionList>
          <ruleList>
             <regExMatch text="${installdir}" logic="does_not_match" pattern="^/([0-9a-zA-Z_/\.\-]*)$"/>
             <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
          </ruleList>
        </actionGroup>
        <!-- Validating whether installdir is valid (Windows) -->
        <actionGroup>
          <actionList>
          <setInstallerVariable name="installdir" value="${default_installdir}" />
          <showWarning text="${msg(sbp.installdir.error)}"/>
          <setInstallerVariable name="next_page" value="installdir"/>
          </actionList>
          <ruleList>
            <regExMatch text="${installdir}" logic="does_not_match" pattern="^([a-zA-Z]:)\\([0-9a-zA-Z_\\\s\.\-\(\)]*)$"/>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
          </ruleList>
        </actionGroup>
      </postShowPageActionList>
    </directoryParameter>
   <!-- Explain that we're using an existing installation directory -->
    <labelParameter>
      <name>upgrade</name>
      <title>${msg(upgrade.existing.installation.title)}</title>
      <description>${msg(upgrade.existing.installation.description)}</description>
      <ruleList>
        <compareText text="${iSBPVersion}" logic="does_not_equal" value=""/>
        <isFalse value="${extract_mode}" />
      </ruleList>
    </labelParameter>
  </parameterList>
</project>
