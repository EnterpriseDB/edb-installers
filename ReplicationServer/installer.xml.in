<project>
    <!-- Package details -->
    <shortName>xdbreplicationserver</shortName>
    <fullName>xDB Replication Server</fullName>
    <version>PG_VERSION_REPLICATIONSERVER-PG_BUILDNUM_REPLICATIONSERVER</version>

    <!-- These options are used on Windows -->
    <startMenuGroupName>${branding}</startMenuGroupName>

    <!-- Product Specific Options -->
    <productComments>Postgres Plus xDB Replication Server, by EnterpriseDB</productComments>
    <productDisplayName>${product_fullname} ${productVersion}</productDisplayName>
    <requireInstallationByRootUser>${admin_rights}</requireInstallationByRootUser>

    <!-- The options are used for RPM registration -->
    <description>Postgres Plus xDB Replication Server</description>
    <summary>Postgres Plus xDB Replication Server, by EnterpriseDB</summary>
    <vendor>EnterpriseDB</vendor>

    <!-- Installer Size -->
    <width>550</width>
    <height>400</height>

    <!-- Misc options -->
    <installerFilename>${product_shortname}-${product_version}-${platform_name}.${platform_exec_suffix}</installerFilename>
    <wrapLicenseFileText>1</wrapLicenseFileText>
    <compressionAlgorithm>lzma</compressionAlgorithm>
    <unattendedModeUI>minimal</unattendedModeUI>
    <enableRollback>0</enableRollback>
    <saveRelativePaths>1</saveRelativePaths>
    <uninstallerName>uninstall-${product_shortname}</uninstallerName>
    <outputDirectory>../output</outputDirectory>
    <installationLogFile>${system_temp_directory}/install-${product_shortname}.log</installationLogFile>
    <uninstallationLogFile>${system_temp_directory}/uninstall-${product_shortname}.log</uninstallationLogFile>
    <allowWindowResize>1</allowWindowResize>
    <licenseFile encoding="utf-8">resources/licence.txt</licenseFile>

    <!-- Images -->
    <disableSplashScreen>1</disableSplashScreen>
    <leftImage>../resources/pg-side.png</leftImage>

    <!-- i18n files for the UI -->
    <allowLanguageSelection>1</allowLanguageSelection>
    <defaultLanguage>auto</defaultLanguage>
    <allowedLanguages>en zh_CN ja</allowedLanguages>
    <customLanguageFileList>
        <language>
            <code>en</code>
            <encoding>iso8859-1</encoding>
            <file>i18n/en.lng</file>
        </language>
        <language>
            <code>zh_CN</code>
            <encoding>utf-8</encoding>
            <file>i18n/zh_CN.lng</file>
        </language>
        <language>
            <code>ja</code>
            <encoding>utf-8</encoding>
            <file>i18n/jp.lng</file>
        </language>
    </customLanguageFileList>
    <preShowHelpActionList>

        <setInstallerVariable name="defaultpubport" value="9011" />
        <setInstallerVariable name="defaultsubport" value="9012" />
        <setInstallerVariable name="defaultserviceaccount" value="postgres" />
        <setInstallerVariable name="defaultdbtype" value="postgresql" />
        <setInstallerVariable name="defaultcontroldb" value="postgres" />
        <setInstallerVariable name="defaultpghost" value="localhost" />
        <setInstallerVariable name="defaultpgport" value="5432" />
        <setInstallerVariable name="defaultpguser" value="postgres" />
        <setInstallerVariable name="defaultpgpassword" value="postgres" />


        <!-- MAC : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>/Library/PostgresPlus/EnterpriseDB-xDBReplicationServer</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
        <!-- LIN : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${platform_install_prefix}/PostgresPlus/EnterpriseDB-xDBReplicationServer</value>
            <ruleEvaluationLogic>or</ruleEvaluationLogic>
            <ruleList>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>solaris</value>
                </compareText>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
        <!-- WIN : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${platform_install_prefix}\PostgresPlus\EnterpriseDB-xDBReplicationServer</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
    </preShowHelpActionList>

    <!-- Prebuild Actons-->
    <preBuildActionList>
      <setInstallerVariable name="originalplatform" value="${platform_name}"/>
      <setInstallerVariable name="originalplatform" value="linux-x32">
          <ruleList>
              <compareText text="${platform_name}" value="linux"/>
          </ruleList>
      </setInstallerVariable>
    </preBuildActionList>
    <initializationActionList>
        <setInstallerVariable name="existingEmail" value=""/>
        <setInstallerVariable name="project.parameter(extract_mode).ask" value="0"/>
        <setInstallerVariable name="productVersion" persist="1" value="PG_VERSION_REPLICATIONSERVER" />
        <setInstallerVariable name="xDBReplicationServerVersion"  persist="1" value=""/>
        <setInstallerVariable name="defaultpubport" value="9011" />
        <setInstallerVariable name="defaultsubport" value="9012" />
        <setInstallerVariable name="defaultserviceaccount" value="postgres" />
        <setInstallerVariable name="defaultdbtype" value="postgresql" />
        <setInstallerVariable name="defaultcontroldb" value="postgres" />
        <setInstallerVariable name="defaultpghost" value="localhost" />
        <setInstallerVariable name="defaultpgport" value="5432" />
        <setInstallerVariable name="defaultpguser" value="postgres" />
        <setInstallerVariable name="defaultpgpassword" value="postgres" />
        <setInstallerVariable name="servicepassword" value="postgres" >
          <ruleList>
              <compareText text="${platform_name}" logic="does_not_equal" value="windows"/>
          </ruleList>
        </setInstallerVariable>
             
        
        <!-- Abort Installation as trying to  run a 32-bit installer on 64-bit machine -->
        <throwError>
          <customErrorMessage>${msg(platform.not.match)}</customErrorMessage>
          <text>Unknown Error</text>
          <ruleList>
            <platformTest type="linux-x64"/>
            <compareText text="${originalplatform}" value="linux-x32"/>
          </ruleList>
        </throwError>

        <!-- LIN : Set the default values for unattended mode -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="installdir" value="${platform_install_prefix}/PostgresPlus/EnterpriseDB-xDBReplicationServer"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${installer_ui}</text>
                    <value>unattended</value>
                </compareText>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </actionGroup>
        <!-- SOLARIS : Set the default values for unattended mode -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="installdir" value="${platform_install_prefix}/PostgresPlus/EnterpriseDB-xDBReplicationServer"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${installer_ui}</text>
                    <value>unattended</value>
                </compareText>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>solaris</value>
                </compareText>
            </ruleList>
        </actionGroup>
        <!-- WIN : Set the default values for unattended mode -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="installdir" value="${platform_install_prefix}\PostgresPlus\EnterpriseDB-xDBReplicationServer"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${installer_ui}</text>
                    <value>unattended</value>
                </compareText>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>
        <!-- MAC : Set the default values for unattended mode -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="installdir" value="/Library/PostgresPlus/EnterpriseDB-xDBReplicationServer"/>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${installer_ui}</text>
                    <value>unattended</value>
                </compareText>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </actionGroup>
        <!-- MAC : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>/Library/PostgresPlus/EnterpriseDB-xDBReplicationServer</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
        <!-- LIN : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${platform_install_prefix}/PostgresPlus/EnterpriseDB-xDBReplicationServer</value>
            <ruleEvaluationLogic>or</ruleEvaluationLogic>
            <ruleList>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>solaris</value>
                </compareText>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>
        <!-- WIN : Set the default installation directory -->
        <setInstallerVariable>
            <name>default_installdir</name>
            <persist>1</persist>
            <value>${platform_install_prefix}\PostgresPlus\EnterpriseDB-xDBReplicationServer</value>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </setInstallerVariable>

    </initializationActionList>
    <preInstallationActionList>
         
        <setInstallerVariable name="optionRequired" value="servicepassword" />
        <throwError text="${msg(Installer.CustomError.CommandLineOptionsNotPresent)}" >
          <ruleList>
               <compareText text="${installer_ui}" logic="equals" value="unattended" />
               <compareText text="${servicepassword}" logic="equals" value="" />
               <isFalse value="${extract_mode}" />
               <ruleGroup>
                   <ruleEvaluationLogic>or</ruleEvaluationLogic>
                   <ruleList>
                        <isTrue value="${component(pubserver).selected}" /> 
                        <isTrue value="${component(subserver).selected}" /> 
                   </ruleList>
               </ruleGroup>
          </ruleList>
        </throwError>
            
        <actionGroup>
            <actionList>
                <unpackFile>
                    <component>pubserver</component>
                    <destination>${system_temp_directory}\vcredist_x86.exe</destination>
                    <folder>pubserverinstallscriptswindows</folder>
                    <origin>installer/xDBReplicationServer/vcredist_x86.exe</origin>
                </unpackFile>
                <runProgram>
                    <program>${system_temp_directory}\vcredist_x86.exe</program>
                    <programArguments>/q</programArguments>
                    <workingDirectory>${windir}</workingDirectory>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>
           </actionList>
           <ruleList>
               <compareText logic="equals" text="${platform_name}" value="windows"/>
               <isFalse value="${extract_mode}"/>
           </ruleList>
       </actionGroup>


        <!-- Abort installation if not super-user and not running in extract-only mode-->
        <throwError text="${msg(Installer.Warning.RootPrivileges)}">
          <ruleList>
            <isFalse value="${installer_is_root_install}"/>
            <isFalse value="${extract_mode}"/>
          </ruleList>
        </throwError>
        
        <!-- Check if all components are deselected in unattended mode -->
        <throwError>
            <text>${msg(error.select.component)}</text>
            <ruleList>
                <compareText text="${component(repconsole).selected}" value="0" logic="equals"/>
                <compareText text="${component(pubserver).selected}" value="0" logic="equals"/>
                <compareText text="${component(subserver).selected}" value="0" logic="equals"/>
                <compareText text="${installer_ui}" value="unattended" logic="equals" /> 
            </ruleList>
        </throwError>

        <!-- Set the correct lib path for 64 bit binaries -->
        <runProgram>
            <program>crle</program>
            <programArguments>-64 -u -l /usr/sfw/lib/64</programArguments>
            <showMessageOnError>0</showMessageOnError>
            <abortOnError>0</abortOnError>
            <ruleList>
                <compareText text="${platform_name}" logic="contains" value="solaris" />
            </ruleList>
        </runProgram>
                  
        <!-- Check for AS84 installed jre -->
        <registryGet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\AS\8.4\jre</key>
          <name>Base Directory</name>
          <variable>jrehome</variable>
          <ruleList>
             <isFalse value="${extract_mode}"/>
          </ruleList>
        </registryGet>

        <iniFileGet>
          <file>/etc/postgres-reg.ini</file>
          <section>ppas_jre_8.4</section>
          <key>InstallationDirectory</key>
          <variable>jrehome</variable>
          <ruleList>
             <compareText text="${platform_name}" logic="does_not_equal" value="windows" />
             <fileExists path="/etc/postgres-reg.ini" />
             <isFalse value="${extract_mode}"/>
          </ruleList>
        </iniFileGet>

        <!-- Check if the valid jrehome switch is supplied -->
        <throwError>
          <customErrorMessage>${msg(jre.invalid.error)}</customErrorMessage>
          <text>Unknown Error</text>
          <ruleList>
             <compareText text="${jrehome}" logic="does_not_equal" value="" />
             <compareText text="${platform_name}" logic="does_not_equal" value="windows" />
             <fileTest path="${jrehome}/bin/java" condition="not_exists" />
          </ruleList>
        </throwError>    
        <throwError>
          <customErrorMessage>${msg(jre.invalid.error.windows)}</customErrorMessage>
          <text>Unknown Error</text>
          <ruleList>
             <compareText text="${jrehome}" logic="does_not_equal" value="" />
             <compareText text="${platform_name}" logic="equals" value="windows" />
             <fileTest path="${jrehome}\bin\java.exe" condition="not_exists" />
             <isFalse value="${extract_mode}"/>
          </ruleList>
        </throwError>    

        <!-- Set the java_executable variable if valid jrehome switch is supplied -->
        <setInstallerVariable name="java_executable" value="${jrehome}/bin/java" >
          <ruleList>
             <compareText text="${jrehome}" logic="does_not_equal" value="" />
             <compareText text="${platform_name}" logic="does_not_equal" value="windows" />
             <fileExists path="${jrehome}/bin/java" />
          </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="java_executable" value="${jrehome}\bin\java.exe" >
          <ruleList>
             <compareText text="${jrehome}" logic="does_not_equal" value="" />
             <compareText text="${platform_name}" logic="equals" value="windows" />
             <fileExists path="${jrehome}\bin\java.exe" />
          </ruleList>
        </setInstallerVariable>

        <!-- Detecting Java, Abort if not found -->
        <autodetectJava>
            <promptUser>0</promptUser>
            <validVersionList>
                <validVersion>
                    <vendor>sun</vendor>
                    <maxVersion/>
                    <minVersion>1.5.0</minVersion>
                    <requireJDK>0</requireJDK>
                </validVersion>
            </validVersionList>
            <abortOnError>1</abortOnError>
            <showMessageOnError>1</showMessageOnError>
            <customErrorMessage>${msg(java.error)}</customErrorMessage>
            <ruleList>
                <compareText text="${jrehome}" logic="equals" value="" />
                <isFalse value="${extract_mode}"/>
            </ruleList> 
        </autodetectJava>

        <actionGroup>
            <actionList>
                <setInstallerVariable name="branding" value=""/>
                <!-- Do not create uninstaller in case of extract-only mode -->
                <setInstallerVariable name="createUninstaller" value="0" persist="1"/>
            </actionList>
            <ruleList>
                <isTrue value="${extract_mode}"/>
            </ruleList>
        </actionGroup>

        <!-- Do not perform the below actions in case of extract-only mode -->
        <actionGroup>
            <actionList>

                <!-- Abort installation if not super-user and not running in extract-only mode-->
                <throwError text="${msg(Installer.Warning.RootPrivileges)}">
                    <ruleList>
                       <isFalse value="${installer_is_root_install}"/>
                    </ruleList>
                </throwError>

                <!-- Creates the ini file if not exits -->
                <touchFile path="/etc/postgres-reg.ini">
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </touchFile>

                <setInstallerVariable name="iExistingEmail" value=""/>

                <!-- LIN & MAC : Get the branding & check Previous Installation of xDBReplicationServer-->
                <actionGroup>
                    <actionList>
                        <iniFileGet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>xDBReplicationServer</section>
                            <key>Branding</key>
                            <variable>iBranding</variable>
                        </iniFileGet>
                        <iniFileGet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>xDBReplicationServer</section>
                            <key>Version</key>
                            <variable>xDBReplicationServerVersion</variable>
                        </iniFileGet>
                        <iniFileGet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>xDBReplicationServer</section>
                            <key>RepConsole</key>
                            <variable>IsRepConsoleUpgrade</variable>
                        </iniFileGet>
                        <iniFileGet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>xDBReplicationServer</section>
                            <key>PubServer</key>
                            <variable>IsPubServerUpgrade</variable>
                        </iniFileGet>
                        <iniFileGet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>xDBReplicationServer</section>
                            <key>SubServer</key>
                            <variable>IsSubServerUpgrade</variable>
                        </iniFileGet>
                        <iniFileGet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>xDBReplicationServer</section>
                            <key>ServiceAccount</key>
                            <variable>iServiceaccount</variable>
                        </iniFileGet>
                        <iniFileGet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>xDBReplicationServer</section>
                            <key>SubPort</key>
                            <variable>iSubport</variable>
                        </iniFileGet>
                        <iniFileGet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>xDBReplicationServer</section>
                            <key>PubPort</key>
                            <variable>iPubport</variable>
                        </iniFileGet>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </actionGroup>

                <!-- WIN : Check Previous Installation of xDBReplicationServer-->
                <actionGroup>
                    <actionList>
                        <!-- Get the branding -->
                        <registryGet>
                            <name>Branding</name>
                            <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\xDB Replication Server</key>
                            <variable>iBranding</variable>
                        </registryGet>
                        <registryGet>
                            <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\xDB Replication Server</key>
                            <name>Version</name>
                            <variable>xDBReplicationServerVersion</variable>
                        </registryGet>
                        <registryGet>
                            <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\xDB Replication Server</key>
                            <name>RepConsole</name>
                            <variable>IsRepConsoleUpgrade</variable>
                        </registryGet>
                        <registryGet>
                            <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\xDB Replication Server</key>
                            <name>PubServer</name>
                            <variable>IsPubServerUpgrade</variable>
                        </registryGet>
                        <registryGet>
                            <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\xDB Replication Server</key>
                            <name>SubServer</name>
                            <variable>IsSubServerUpgrade</variable>
                        </registryGet>
                        <registryGet>
                            <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\xDB Replication Server</key>
                            <name>ServiceAccount</name>
                            <variable>iServiceaccount</variable>
                        </registryGet>
                        <registryGet>
                            <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\xDB Replication Server</key>
                            <name>SubPort</name>
                            <variable>iSubport</variable>
                        </registryGet>
                        <registryGet>
                            <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\xDB Replication Server</key>
                            <name>PubPort</name>
                            <variable>iPubport</variable>
                        </registryGet>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </actionGroup>

                <!-- Creating a temporary directory -->
                <createDirectory path="${system_temp_directory}/${product_fullname}"/>

                <!-- Extracting installation scripts -->
                <unpackDirectory origin="instscripts"
                    destination="${system_temp_directory}/${product_fullname}"
                    folder="instscripts${platform_name}" component="psql">
                    <ruleList>
                       <compareText text="${platform_name}" logic="does_not_equal" value="solaris-intel" />
                    </ruleList>
                </unpackDirectory>  
                <unpackDirectory origin="instscripts"
                    destination="${system_temp_directory}/${product_fullname}"
                    folder="instscriptssolaris-x64" component="psql">
                    <ruleList>
                       <compareText text="${platform_name}" logic="equals" value="solaris-intel" />
                    </ruleList>
                </unpackDirectory>  

                <!-- Disable the components which are being upgraded -->
                <actionGroup>
                    <actionList>
                        <setInstallerVariable name="component(repconsole).selected" value="1" />
                        <setInstallerVariable name="component(repconsole).canBeEdited" value="0" />
                    </actionList>
                    <ruleList>
                        <isTrue value="${IsRepConsoleUpgrade}" />
                    </ruleList>
                </actionGroup>  
                <actionGroup>
                    <actionList>
                        <setInstallerVariable name="component(pubserver).selected" value="1" />
                        <setInstallerVariable name="component(pubserver).canBeEdited" value="0" />
                    </actionList>
                    <ruleList>
                        <isTrue value="${IsPubServerUpgrade}" />
                    </ruleList>
                </actionGroup>  
                <actionGroup>
                    <actionList>
                        <setInstallerVariable name="component(subserver).selected" value="1" />
                        <setInstallerVariable name="component(subserver).canBeEdited" value="0" />
                    </actionList>
                    <ruleList>
                        <isTrue value="${IsSubServerUpgrade}" />
                    </ruleList>
                </actionGroup>  

                <!-- Unselect the components which are not installed previously during upgradation -->
                <actionGroup>
                    <actionList>
                        <setInstallerVariable name="component(repconsole).selected" value="0" />
                        <setInstallerVariable name="component(repconsole).canBeEdited" value="1" />
                    </actionList>
                    <ruleList>
                        <isFalse value="${IsRepConsoleUpgrade}" />
                        <compareText text="${xDBReplicationServerVersion}" logic="does_not_equal" value="" />
                    </ruleList>
                </actionGroup>  
                <actionGroup>
                    <actionList>
                        <setInstallerVariable name="component(pubserver).selected" value="0" />
                        <setInstallerVariable name="component(pubserver).canBeEdited" value="1" />
                    </actionList>
                    <ruleList>
                        <isFalse value="${IsPubServerUpgrade}" />
                        <compareText text="${xDBReplicationServerVersion}" logic="does_not_equal" value="" />
                    </ruleList>
                </actionGroup>  
                <actionGroup>
                    <actionList>
                        <setInstallerVariable name="component(subserver).selected" value="0" />
                        <setInstallerVariable name="component(subserver).canBeEdited" value="1" />
                    </actionList>
                    <ruleList>
                        <isFalse value="${IsSubServerUpgrade}" />
                        <compareText text="${xDBReplicationServerVersion}" logic="does_not_equal" value="" />
                    </ruleList>
                </actionGroup>  


                <!-- If there appears to be an existing installation, with no Branding value. -->
                <!-- force the default value. Otherwise, set the branding to whatever we read, -->
                <!-- or, set the default -->

                <!-- Existing, old install (version, but no branding) -->
                <setInstallerVariable>
                    <name>branding</name>
                    <persist>0</persist>
                    <value>Postgres Plus</value>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${xDBReplicationServerVersion}</text>
                            <value></value>
                        </compareText>
                        <compareText>
                            <logic>equals</logic>
                            <text>${iBranding}</text>
                            <value></value>
                        </compareText>
                        <compareText>
                            <logic>equals</logic>
                            <text>${branding}</text>
                            <value></value>
                        </compareText>
                    </ruleList>
                </setInstallerVariable>

                <!-- Existing install, with branding -->
                <setInstallerVariable>
                    <name>branding</name>
                    <persist>0</persist>
                    <value>${iBranding}</value>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${iBranding}</text>
                            <value></value>
                        </compareText>
                    </ruleList>
                </setInstallerVariable>

                <!-- New install, nothing set on the command line -->
                <setInstallerVariable>
                    <name>branding</name>
                    <persist>0</persist>
                    <value>Postgres Plus Add-ons</value>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>${branding}</text>
                            <value></value>
                        </compareText>
                    </ruleList>
                </setInstallerVariable>

                <logMessage>
                    <text>Using branding: ${branding}</text>
                </logMessage>

		<actionGroup>
		    <actionList>
			<setInstallerVariable name="installationType" value="upgrade" />
		    </actionList>
		    <ruleList>
			<compareText>
			    <text>${xDBReplicationServerVersion}</text>
			    <logic>does_not_equal</logic>
			    <value/>
			</compareText>
		    </ruleList>
		</actionGroup>

                <!-- Set the installation directory in case of re-install/upgrade -->
                <actionGroup>
                    <actionList>
                        <iniFileGet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>xDBReplicationServer</section>
                            <key>InstallationDirectory</key>
                            <variable>installdir</variable>
                        </iniFileGet>
                        <iniFileGet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>xDBReplicationServer</section>
                            <key>EnterpriseDBEmail</key>
                            <variable>iExistingEmail</variable>
                        </iniFileGet>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${xDBReplicationServerVersion}</text>
                            <value/>
                        </compareText>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </actionGroup>

                <!-- WIN: Set the installation directory in case of re-install/upgrade -->
                <actionGroup>
                    <actionList>
                        <registryGet>
                            <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\xDB Replication Server</key>
                            <name>Location</name>
                            <variable>installdir</variable>
                        </registryGet>
                        <registryGet>
                            <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\xDB Replication Server</key>
                            <name>EnterpriseDBEmail</name>
                            <variable>iExistingEmail</variable>
                        </registryGet>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${xDBReplicationServerVersion}</text>
                            <value/>
                        </compareText>
                        <compareText>
                            <logic>equals</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </actionGroup>

                <!-- Set the serviceaccount, subport, pubport values
                     if its an upgrade -->
                <setInstallerVariable name="serviceaccount" value="${iServiceaccount}" >
                    <ruleList>
                        <compareText logic="does_not_equal" text="${iServiceaccount}" value="" />
                    </ruleList>
                </setInstallerVariable> 
                <setInstallerVariable name="subport" value="${iSubport}" >
                    <ruleList>
                        <compareText logic="does_not_equal" text="${iSubport}" value="" />
                    </ruleList>
                </setInstallerVariable> 
                <setInstallerVariable name="pubport" value="${iPubport}" >
                    <ruleList>
                        <compareText logic="does_not_equal" text="${iPubport}" value="" />
                    </ruleList>
                </setInstallerVariable>
 
                <!-- Set the serviceaccount, subport, pubport values to default values
                     if nothing set on command line and its a fresh install -->
                <setInstallerVariable name="serviceaccount" value="${defaultserviceaccount}" >
                    <ruleList>
                        <compareText logic="equals" text="${serviceaccount}" value="" />
                    </ruleList>
                </setInstallerVariable> 
                <setInstallerVariable name="subport" value="${defaultsubport}" >
                    <ruleList>
                        <compareText logic="equals" text="${subport}" value="" />
                    </ruleList>
                </setInstallerVariable> 
                <setInstallerVariable name="pubport" value="${defaultpubport}" >
                    <ruleList>
                        <compareText logic="equals" text="${pubport}" value="" />
                    </ruleList>
                </setInstallerVariable> 
                
                <!-- Set pghost, pguser, pgpassword, pgport and controldb
                     for unattended mode and nothing set on commandline -->
                <setInstallerVariable name="pghost" value="${defaultpghost}" >
                    <ruleList>
                        <compareText logic="equals" text="${pghost}" value="" /> 
                    </ruleList>
                </setInstallerVariable>  
                <setInstallerVariable name="pgport" value="${defaultpgport}" >
                    <ruleList>
                        <compareText logic="equals" text="${pgport}" value="" /> 
                    </ruleList>
                </setInstallerVariable>  
                <setInstallerVariable name="pguser" value="${defaultpguser}" >
                    <ruleList>
                        <compareText logic="equals" text="${pguser}" value="" /> 
                    </ruleList>
                </setInstallerVariable>  
                <setInstallerVariable name="pgpassword" value="${defaultpgpassword}" >
                    <ruleList>
                        <compareText logic="equals" text="${pgpassword}" value="" /> 
                        <compareText logic="equals" text="${installer_ui}" value="unattended" />
                    </ruleList>
                </setInstallerVariable>  
                <setInstallerVariable name="controldb" value="${defaultcontroldb}" >
                    <ruleList>
                        <compareText logic="equals" text="${controldb}" value="" /> 
                    </ruleList>
                </setInstallerVariable>

                <!-- Use already register user in case of upgrade mode -->
                <setInstallerVariable name="existingEmail" value="${iExistingEmail}">
                    <ruleList>
                        <stringTest text="${iExistingEmail}" type="not_empty"/>
                        <stringTest text="${xDBReplicationServerVersion}" type="not_empty"/>
                    </ruleList>
                </setInstallerVariable>

                <setInstallerVariable name="uuid_val" value=""/>
                <setInstallerVariableFromScriptOutput name="uuid_val" showMessageOnError="0" exec="uuidgen" abortOnError="0">
                    <ruleList>
                        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                        <compareText logic="does_not_contain" text="${platform_name}" value="solaris"/>
                    </ruleList>
                </setInstallerVariableFromScriptOutput>

                <setInstallerVariableFromScriptOutput name="uuid_val" showMessageOnError="0" abortOnError="0"
                      exec="${system_temp_directory}/${product_fullname}/instscripts/bin/uuid">
                    <ruleList>
                        <compareText logic="contains" text="${platform_name}" value="solaris"/>
                    </ruleList>
                </setInstallerVariableFromScriptOutput>

                <setInstallerVariableFromScriptOutput name="uuid_val" showMessageOnError="0" abortOnError="0"
                      exec="${system_temp_directory}\${product_fullname}\instscripts\bin\uuid.exe">
                    <ruleList>
                        <compareText logic="equals" text="${platform_name}" value="windows"/>
                    </ruleList>
                </setInstallerVariableFromScriptOutput>

                <setInstallerVariableFromRegEx name="uuid_val" text="${uuid_val}" pattern="^dbser_guid=([^\S]*)$"
                                 substitution="\1"  abortOnError="0" showMessageOnError="0">
                    <ruleList>
                        <compareText logic="does_not_equal" text="${uuid_val}" value=""/>
                        <compareText logic="equals" text="${platform_name}" value="windows"/>
                    </ruleList>
                </setInstallerVariableFromRegEx>

                <!-- Use predefined value, if uuid could not be determined -->
                <setInstallerVariable name="uuid_val" value="a172352a-20a4-11df-a5a3-000c29a2e41e">
                    <ruleList>
                        <stringTest text="${uuid_val}" type="empty"/>
                    </ruleList>
                </setInstallerVariable>
            </actionList>
            <ruleList>
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </actionGroup>

        <!-- Stop the publication service, if installed -->
        <actionGroup>
            <actionList>
                 <actionGroup>
                     <actionList> 
                         <runProgram>
                             <program>svcadm</program>
                             <programArguments>-v disable svc:/application/edb-xdbpubserver:default</programArguments> 
                             <abortOnError>0</abortOnError>
                             <showMessageOnError>0</showMessageOnError>
                         </runProgram>  
                         <runProgram>
                             <program>svccfg</program>
                             <programArguments>-v delete -f svc:/application/edb-xdbpubserver:default</programArguments> 
                             <abortOnError>0</abortOnError>
                             <showMessageOnError>0</showMessageOnError>
                         </runProgram>  
                     </actionList>
                     <ruleList>
                         <compareText text="${platform_name}" logic="contains" value="solaris" />
                     </ruleList>
                 </actionGroup>
                 <runProgram>
                     <program>/etc/init.d/edb-xdbpubserver</program>
                     <programArguments>stop &amp;</programArguments> 
                     <workingDirectory>/etc/initd.d</workingDirectory>
                     <abortOnError>0</abortOnError>
                     <showMessageOnError>0</showMessageOnError>
                     <ruleList>
                         <compareText text="${platform_name}" logic="contains" value="linux" />
                     </ruleList>
                 </runProgram>  
                 <runProgram>
                     <program>launchctl</program>
                     <programArguments>unload /Library/LaunchDaemons/com.edb.launchd.xdbpubserver.plist</programArguments> 
                     <workingDirectory/>
                     <abortOnError>0</abortOnError>
                     <showMessageOnError>0</showMessageOnError>
                     <ruleList>
                         <compareText text="${platform_name}" logic="equals" value="osx" />
                     </ruleList>
                 </runProgram>  
                 <stopWindowsService>
                     <serviceName>Publication Service</serviceName>
                     <displayName>Publication Service</displayName>
                     <abortOnError>0</abortOnError>
                     <showMessageOnError>0</showMessageOnError>
                 </stopWindowsService>
           </actionList>
           <ruleList>
                <isTrue value="${IsPubServerUpgrade}" />
                <isFalse value="${extract_mode}"/>
           </ruleList>
        </actionGroup> 

        <!-- Stop the subscription service, if installed -->
        <actionGroup>
            <actionList> 
                 <actionGroup>
                     <actionList> 
                         <runProgram>
                             <program>svcadm</program>
                             <programArguments>-v disable svc:/application/edb-xdbsubserver:default</programArguments> 
                             <abortOnError>0</abortOnError>
                             <showMessageOnError>0</showMessageOnError>
                         </runProgram>  
                         <runProgram>
                             <program>svccfg</program>
                             <programArguments>-v delete -f svc:/application/edb-xdbsubserver:default</programArguments> 
                             <abortOnError>0</abortOnError>
                             <showMessageOnError>0</showMessageOnError>
                         </runProgram>  
                     </actionList>
                     <ruleList>
                         <compareText text="${platform_name}" logic="contains" value="solaris" />
                     </ruleList>
                 </actionGroup>
                 <runProgram>
                     <program>/etc/init.d/edb-xdbsubserver</program>
                     <programArguments>stop &amp;</programArguments> 
                     <workingDirectory>/etc/initd.d</workingDirectory>
                     <abortOnError>0</abortOnError>
                     <showMessageOnError>0</showMessageOnError>
                     <ruleList>
                         <compareText text="${platform_name}" logic="contains" value="linux" />
                     </ruleList>
                 </runProgram>  
                 <runProgram>
                     <program>launchctl</program>
                     <programArguments>unload /Library/LaunchDaemons/com.edb.launchd.xdbsubserver.plist</programArguments> 
                     <workingDirectory/>
                     <abortOnError>0</abortOnError>
                     <showMessageOnError>0</showMessageOnError>
                     <ruleList>
                         <compareText text="${platform_name}" logic="equals" value="osx" />
                     </ruleList>
                 </runProgram>  
                 <stopWindowsService>
                     <serviceName>Subscription Service</serviceName>
                     <displayName>Subscription Service</displayName>
                     <abortOnError>0</abortOnError>
                     <showMessageOnError>0</showMessageOnError>
                 </stopWindowsService>
           </actionList>
           <ruleList>
                <isTrue value="${IsSubServerUpgrade}" />
                <isFalse value="${extract_mode}"/>
           </ruleList>
        </actionGroup> 

        <!-- Set Proxy values from environement variables if any -->
        <setInstallerVariable name="proxyHost" value="${env(PROXY_HOST)}" />
        <setInstallerVariable name="proxyPort" value="${env(PROXY_PORT)}" />

        <!-- Validate edb-user and password in unattended mode for the fresh installation -->
        <actionGroup>
            <actionList>
                <throwError text="${msg(xdb.registration.email.empty)}">
                    <ruleList>
                        <stringTest text="${existingEmail}" type="empty"/>
                    </ruleList>
                </throwError>
                <throwError text="${msg(xdb.registration.password.empty)}">
                    <ruleList>
                        <stringTest text="${existingPassword}" type="empty"/>
                    </ruleList>
                </throwError>
                <setEnvironmentVariable name="LD_LIBRARY_PATH"
                      value="${env(LD_LIBRARY_PATH)}:${system_temp_directory}/${product_fullname}/instscripts/lib"/>
                <!-- Email/Password Validation -->
                <setInstallerVariableFromScriptOutput name="registered"
                      exec="${system_temp_directory}/${product_fullname}/instscripts/validateUserClient.o"
                      execArgs="&quot;${uuid_val}&quot; &quot;xdb&quot; &quot;false&quot; &quot;false&quot; &quot;&quot; &quot;&quot; &quot;1&quot; &quot;&quot; &quot;&quot; &quot;0&quot; &quot;0&quot; &quot;${existingEmail}&quot; &quot;${existingPassword.password}&quot; &quot;${proxyHost}&quot; &quot;${proxyPort}&quot;"
                      abortOnError="1" showMessageOnError="1"
                      customErrorMessage="${msg(validatinguser.ws.error)}">
                    <ruleList>
                        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                    </ruleList>
                </setInstallerVariableFromScriptOutput>
                <setInstallerVariableFromScriptOutput name="registered"
                      exec="${system_temp_directory}\${product_fullname}\instscripts\bin\validateUserClient.exe"
                      execArgs="&quot;xdb&quot; &quot;false&quot; &quot;false&quot; &quot;${existingEmail}&quot; &quot;${existingPassword.password}&quot; &quot;${uuid_val}&quot; &quot;${proxyHost}&quot; &quot;${proxyPort}&quot;"
                      abortOnError="1" showMessageOnError="1"
                      customErrorMessage="${msg(validatinguser.ws.error)}">
                    <ruleList>
                        <compareText logic="equals" text="${platform_name}" value="windows"/>
                    </ruleList>
                </setInstallerVariableFromScriptOutput>
                <stringModify text="${registered}" variable="registered" logic="trim"/>

                <throwError text="${msg(ws.email.not.authenticated)}">
                    <ruleList>
                        <compareText logic="equals" text="${registered}" value="1"/>
                  </ruleList>
                </throwError>
                <throwError text="${msg(ws.email.not.validated)}">
                  <ruleList>
                    <compareText logic="equals" text="${registered}" value="2"/>
                  </ruleList>
                </throwError>
                <throwError text="${msg(ws.email.already.exists)}">
                  <ruleList>
                    <compareText logic="equals" text="${registered}" value="3"/>
                  </ruleList>
                </throwError>
                <throwError text="${msg(ws.exception.from.server)}">
                  <ruleList>
                    <compareText logic="equals" text="${registered}" value="4"/>
                  </ruleList>
                </throwError>
                <throwError text="${msg(ws.internet.not.connected)}">
                  <ruleList>
                    <compareText logic="equals" text="${registered}" value=""/>
                  </ruleList>
                </throwError>
            </actionList>
            <ruleList>
                <isTrue value="${validateEmail}"/>
                <compareText logic="equals" text="${installer_ui}" value="unattended"/> 
                <stringTest text="${xDBReplicationServerVersion}" type="empty"/>
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </actionGroup>
    </preInstallationActionList>
    <postInstallationActionList>

        <!-- Replace / with \  on windows -->
        <setInstallerVariableFromRegEx>
            <text>${java_executable}</text>
            <substitution>\</substitution>
            <name>java_executable_windows</name>
            <pattern>\/</pattern>

            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows" />
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </setInstallerVariableFromRegEx>

        <!-- Create the user account with which publication/subscription service will run-->
        <runProgram>
          <program>${installdir}/installer/xDBReplicationServer/createuser.sh</program>
          <programArguments>"${serviceaccount}" "${installdir}"</programArguments>
          <progressText>${msg(progress.text.creating.user)}</progressText>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
          <ruleList>            
            <isFalse value="${extract_mode}"/>
            <compareText text="${platform_name}" logic="does_not_equal" value="windows"/>
            <ruleGroup>
                 <ruleEvaluationLogic>or</ruleEvaluationLogic>
                 <ruleList>
                     <ruleGroup> 
                         <ruleList>
                             <isFalse value="${IsPubServerUpgrade}"/>
                             <isTrue value="${component(pubserver).selected}" />
                         </ruleList>
                     </ruleGroup>  
                     <ruleGroup> 
                         <ruleList>
                             <isFalse value="${IsSubServerUpgrade}"/>
                             <isTrue value="${component(subserver).selected}" />
                         </ruleList>                  
                     </ruleGroup>
                </ruleList>
            </ruleGroup> 
          </ruleList>
        </runProgram>

        <actionGroup>
          <actionList>
             <!-- WIN : Create user, if not exists -->
             <runProgram>
               <program>${installdir}\installer\xDBReplicationServer\createuser.exe</program>
               <!-- The dot at the beginning of the arguments is the domain -->
               <programArguments>. "${serviceaccount}" "${servicepassword.password}"</programArguments>
               <progressText>${msg(progress.text.creating.user)}</progressText>
               <abortOnError>0</abortOnError>
               <showMessageOnError>0</showMessageOnError>
             </runProgram>
             <!-- WIN : Validate user, if not exists -->
             <runProgram>
                <program>${installdir}\installer\xDBReplicationServer\validateuser.exe</program>
                <!-- The dot at the beginning of the arguments is the domain -->
                <programArguments>. "${serviceaccount}" "${servicepassword.password}"</programArguments>
                <progressText>${msg(progress.text.creating.user)}</progressText>
                <abortOnError>0</abortOnError>
                <showMessageOnError>0</showMessageOnError>
             </runProgram>
             <throwError>
                <text>${msg(script.command.line.error)}</text>
                <ruleList>
                    <compareText logic="equals" text="${program_exit_code}" value="127"/>
                </ruleList>
             </throwError>
             <throwError>
                <text>${msg(config.servicepassword.incorrect.windows)}</text>
                <ruleList>
                    <compareText logic="equals" text="${program_exit_code}" value="1"/>
                </ruleList>
             </throwError>
          </actionList>
          <ruleList>            
             <isFalse value="${extract_mode}"/>
             <compareText text="${platform_name}" logic="equals" value="windows"/>
             <compareText text="${installer_ui}" logic="equals" value="unattended" />
             <ruleGroup>
                 <ruleEvaluationLogic>or</ruleEvaluationLogic>
                 <ruleList>
                    <isTrue value="${component(pubserver).selected}" />
                    <isTrue value="${component(subserver).selected}" />
                 </ruleList>
             </ruleGroup> 
          </ruleList>
       </actionGroup>

       <actionGroup>
            <actionList>
                <actionGroup>
                    <actionList>
                        <iniFileSet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>xDBReplicationServer</section>
                            <key>Description</key>
                            <value>${msg(install.summary)}</value>
                        </iniFileSet>
                        <iniFileSet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>xDBReplicationServer</section>
                            <key>InstallationDirectory</key>
                            <value>${installdir}</value>
                        </iniFileSet>
                        <iniFileSet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>xDBReplicationServer</section>
                            <key>Version</key>
                            <value>${product_version}</value>
                        </iniFileSet>
                         <iniFileSet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>xDBReplicationServer</section>
                            <key>RepConsole</key>
                            <value>${component(repconsole).selected}</value>
                        </iniFileSet>
                        <iniFileSet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>xDBReplicationServer</section>
                            <key>PubServer</key>
                            <value>${component(pubserver).selected}</value>
                        </iniFileSet>
                        <iniFileSet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>xDBReplicationServer</section>
                            <key>SubServer</key>
                            <value>${component(subserver).selected}</value>
                        </iniFileSet>
                        <iniFileSet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>xDBReplicationServer</section>
                            <key>ServiceAccount</key>
                            <value>${serviceaccount}</value>
                            <ruleEvaluationLogic>or</ruleEvaluationLogic>
                            <ruleList>
                               <isTrue value="${component(subserver).selected}"/>
                               <isTrue value="${component(pubserver).selected}"/>
                            </ruleList>
                        </iniFileSet>
                        <iniFileSet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>xDBReplicationServer</section>
                            <key>SubPort</key>
                            <value>${subport}</value>
                            <ruleList>
                               <isTrue value="${component(subserver).selected}"/>
                            </ruleList>
                        </iniFileSet>
                        <iniFileSet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>xDBReplicationServer</section>
                            <key>PubPort</key>
                            <value>${pubport}</value>
                            <ruleList>
                               <isTrue value="${component(pubserver).selected}"/>
                            </ruleList>
                        </iniFileSet>
                        <iniFileSet>
                            <file>/etc/postgres-reg.ini</file>
                            <section>xDBReplicationServer</section>
                            <key>EnterpriseDBEmail</key>
                            <value>${existingEmail}</value>
                            <ruleList>
                               <stringTest text="${existingEmail}" type="not_empty"/>
                            </ruleList>
                        </iniFileSet>
                        <runProgram>
                            <program>${installdir}/installer/xDBReplicationServer/createshortcuts.sh</program>
                            <programArguments>"${installdir}" "${branding}"</programArguments>
                            <progressText>${msg(progress.text.creating.shortcuts)}</progressText>
                            <workingDirectory>${installdir}/installer/xDBReplicationServer</workingDirectory>
                            <abortOnError>0</abortOnError>
                            <showMessageOnError>0</showMessageOnError>
                            <ruleList>
                                <isTrue value="${component(repconsole).selected}" />
                            </ruleList>  
                        </runProgram>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </actionGroup>

                <!-- Branding info -->
                <logMessage>
                    <text>Write the branding to the ini file...</text>
                </logMessage>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>xDBReplicationServer</section>
                    <key>Branding</key>
                    <value>${branding}</value>
                    <ruleList>
                        <compareText>
                            <logic>does_not_equal</logic>
                            <text>${platform_name}</text>
                            <value>windows</value>
                        </compareText>
                    </ruleList>
                </iniFileSet>
                <registrySet>
                    <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\xDB Replication Server</key>
                    <name>Branding</name>
                    <value>${branding}</value>
                </registrySet>
                <registrySet>
                    <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\xDB Replication Server</key>
                    <name>RepConsole</name>
                    <value>${component(repconsole).selected}</value>
                </registrySet>
                <registrySet>
                    <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\xDB Replication Server</key>
                    <name>PubServer</name>
                    <value>${component(pubserver).selected}</value>
                </registrySet>
                <registrySet>
                    <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\xDB Replication Server</key>
                    <name>SubServer</name>
                    <value>${component(subserver).selected}</value>
                </registrySet>
                <registrySet>
                    <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\xDB Replication Server</key>
                    <name>ServiceAccount</name>
                    <value>${serviceaccount}</value>
                    <ruleEvaluationLogic>or</ruleEvaluationLogic>
                    <ruleList>
                        <isTrue value="${component(subserver).selected}"/>
                        <isTrue value="${component(pubserver).selected}"/>
                    </ruleList>
                </registrySet>
                <registrySet>
                    <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\xDB Replication Server</key>
                    <name>SubPort</name>
                    <value>${subport}</value>
                    <ruleList>
                        <isTrue value="${component(subserver).selected}"/>
                    </ruleList>
                </registrySet>
                <registrySet>
                    <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\xDB Replication Server</key>
                    <name>PubPort</name>
                    <value>${pubport}</value>
                    <ruleList>
                        <isTrue value="${component(pubserver).selected}"/>
                    </ruleList>
                </registrySet>
                <registrySet>
                    <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\xDB Replication Server</key>
                    <name>EnterpriseDBEmail</name>
                    <value>${existingEmail}</value>
                    <ruleList>
                        <stringTest text="${existingEmail}" type="not_empty"/>
                    </ruleList>
                </registrySet>
            </actionList>
            <ruleList>
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </actionGroup>
   
        <actionGroup>
            <actionList>
                <!-- Encrypt the password -->
                <setInstallerVariableFromScriptOutput>
                    <name>enc_password</name>
                    <exec>${java_executable}</exec>
                    <execArgs>-jar ${installdir}/installer/xDBReplicationServer/edb-repencrypter.jar "${pgpassword.password}"</execArgs>
                    <workingDirectory>${installdir}/installer/xDBReplicationServer</workingDirectory>
                    <ruleList>
                        <compareText text="${platform_name}" logic="does_not_equal" value="windows" /> 
                    </ruleList>
                </setInstallerVariableFromScriptOutput>  
 
                <setInstallerVariableFromScriptOutput>
                    <name>enc_password</name>
                    <exec>${java_executable_windows}</exec>
                    <execArgs>-jar "${installdir}\installer\xDBReplicationServer\edb-repencrypter.jar" "${pgpassword.password}"</execArgs>
                    <workingDirectory>${installdir}/installer/xDBReplicationServer</workingDirectory>
                    <ruleList>
                        <compareText text="${platform_name}" logic="equals" value="windows" /> 
                    </ruleList>
                </setInstallerVariableFromScriptOutput>   

                <deleteFile path="${installdir}/installer/xDBReplicationServer/edb-repencrypter.jar" />
                <deleteFile path="${installdir}/installer/xDBReplicationServer/lib" />

                <!-- Escape the = sign -->
                <setInstallerVariableFromRegEx>
                    <name>esc_enc_password</name>
                    <text>${enc_password}</text>
                    <pattern>=</pattern>
                    <substitution>\=</substitution>    
                </setInstallerVariableFromRegEx>

               <createDirectory path="${installdir}\etc" >
                    <ruleList>
                        <compareText text="${platform_name}" logic="equals" value="windows" />
                    </ruleList>
               </createDirectory> 

               <writeFile>
                   <path>${installdir}\etc\edb-repl.conf</path>
                   <text>
user=${pguser}
port=${pgport}
password=${esc_enc_password}
type=${dbtype}
host=${pghost}
database=${controldb}
                    </text>
                    <ruleList>
                        <compareText text="${platform_name}" logic="equals" value="windows" />
                    </ruleList>
               </writeFile>


               <writeFile>
                   <path>/etc/edb-repl.conf</path>
                   <text>
user=${pguser}
port=${pgport}
password=${esc_enc_password}
type=${dbtype}
host=${pghost}
database=${controldb}
                    </text>
                    <ruleList>
                        <compareText text="${platform_name}" logic="does_not_equal" value="windows" />
                    </ruleList>
                </writeFile>

                <!-- Set variable psql_path -->
                <setInstallerVariable name="psql_path" value="${system_temp_directory}/${product_fullname}/instscripts/bin/psql">
                    <ruleList>
                        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                    </ruleList>
                </setInstallerVariable>
                <setInstallerVariable name="psql_path" value="${system_temp_directory}\${product_fullname}\instscripts\bin\psql.exe">
                    <ruleList>
                        <compareText logic="equals" text="${platform_name}" value="windows"/>
                    </ruleList>
                </setInstallerVariable>

                <setEnvironmentVariable name="PGHOST" value="${pghost}"/>
                <setEnvironmentVariable name="PGUSER" value="${pguser}"/>
                <setEnvironmentVariable name="PGPASSWORD" value="${pgpassword}"/>
                <setEnvironmentVariable name="PGPORT" value="${pgport}"/>
                <setEnvironmentVariable name="PGDATABASE" value="postgres"/>
  
                <!-- START: validate the PostgreSQL Server Details -->
                <setInstallerVariable name="connection" value=""/>
                <setInstallerVariable name="dbexist" value=""/>

                <!-- Check connection -->
                <setInstallerVariableFromScriptOutput name="connection"
                                                      exec="${psql_path}"
                                                      execArgs="-l"
                                                      workingDirectory="${system_temp_directory}/${product_fullname}/instscripts/bin"
                                                      showMessageOnError="0"
                                                      abortOnError="0" />

                <!-- If it fails for postgres database, fall back to edb --> 
                <actionGroup>     
                    <actionList>     
                         <setEnvironmentVariable name="PGDATABASE" value="edb" />
                         <!-- Check connection -->
                         <setInstallerVariableFromScriptOutput name="connection"
                                                       exec="${psql_path}"
                                                       execArgs="-l ${env(PGDATABASE)}"
                                                       workingDirectory="${system_temp_directory}/${product_fullname}/instscripts/bin"
                                                       showMessageOnError="0"
                                                       abortOnError="0" />
                    </actionList>
                    <ruleList>
                         <compareText text="${program_stderr}" logic="does_not_equal" value="" />
                    </ruleList>
                </actionGroup>  


                <!-- If it fails for edb database, fall back to template1 --> 
                <actionGroup>     
                    <actionList>     
                         <setEnvironmentVariable name="PGDATABASE" value="template1" />
                         <!-- Check connection -->
                         <setInstallerVariableFromScriptOutput name="connection"
                                                       exec="${psql_path}"
                                                       execArgs="-l ${env(PGDATABASE)}"
                                                       workingDirectory="${system_temp_directory}/${product_fullname}/instscripts/bin"
                                                       customErrorMessage="${program_stderr}" />
                    </actionList>
                    <ruleList>
                         <compareText text="${program_stderr}" logic="does_not_equal" value="" />
                    </ruleList>
                </actionGroup>  


                <!-- Check the control database exits -->
                <setInstallerVariableFromScriptOutput name="dbexist"
                                                      exec="${psql_path}"
                                                      execArgs="-t -c &quot;SELECT d.datname FROM pg_catalog.pg_database d WHERE d.datname='${controldb}'&quot;"
                                                      workingDirectory="${system_temp_directory}/${product_fullname}/instscripts/bin"
                                                      abortOnError="0"
                                                      showMessageOnError="0"/>

                <runProgram>
                    <program>${psql_path}</program>
                    <programArguments>-t -c "CREATE DATABASE \"${controldb}\""</programArguments>
                    <workingDirectory>${system_temp_directory}/${product_fullname}/instscripts/bin</workingDirectory>
                    <progressText>${msg(progress.text.creating.controldb)}</progressText>
                    <ruleList>
                        <compareText>
                            <text>${dbexist}</text>
                            <logic>equals</logic>
                            <value/>
                        </compareText>
                    </ruleList>
                </runProgram> 
           </actionList>
           <ruleList>
               <ruleGroup>
                   <ruleEvaluationLogic>or</ruleEvaluationLogic>
                   <ruleList>
                       <isTrue value="${component(pubserver).selected}" />
                       <isTrue value="${component(subserver).selected}" />
                   </ruleList>
               </ruleGroup>
               <ruleGroup>
                   <ruleList>
                       <isFalse value="${IsPubServerUpgrade}" />  
                       <isFalse value="${IsSubServerUpgrade}" />  
                   </ruleList>
               </ruleGroup> 
               <isFalse value="${extract_mode}"/>
           </ruleList>
        </actionGroup>        
 
        <substitute>
            <files>${installdir}/bin/runRepConsole.sh</files>
            <substitutionList>
                <substitution>
                    <pattern>@@JAVA@@</pattern>
                    <value>${java_executable}</value>
                </substitution>
                <substitution>
                    <pattern>@@INSTALL_DIR@@</pattern>
                    <value>${installdir}</value>
                </substitution>
            </substitutionList>
            <ruleList>
                <isTrue value="${component(repconsole).selected}" />
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </substitute> 


        <substitute>
            <files>${installdir}/bin/runPubServer.sh</files>
            <substitutionList>
                <substitution>
                    <pattern>@@INSTALL_DIR@@</pattern>
                    <value>${installdir}</value>
                </substitution>
                <substitution>
                    <pattern>@@JAVA@@</pattern>
                    <value>${java_executable}</value>
                </substitution>
                <substitution>
                    <pattern>@@PUBPORT@@</pattern>
                    <value>${pubport}</value>
                </substitution>
            </substitutionList>
            <ruleList>
                <isTrue value="${component(pubserver).selected}" />
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </substitute> 

        <substitute>
            <files>${installdir}/bin/runSubServer.sh</files>
            <substitutionList>
                <substitution>
                    <pattern>@@INSTALL_DIR@@</pattern>
                    <value>${installdir}</value>
                </substitution>
                <substitution>
                    <pattern>@@JAVA@@</pattern>
                    <value>${java_executable}</value>
                </substitution>
                <substitution>
                    <pattern>@@SUBPORT@@</pattern>
                    <value>${subport}</value>
                </substitution>
            </substitutionList>
            <ruleList>
                <isTrue value="${component(subserver).selected}" />
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </substitute> 

        <substitute>
            <files>${installdir}/bin/runRepConsole.bat</files>
            <substitutionList>
                <substitution>
                    <pattern>@@JAVA@@</pattern>
                    <value>${java_executable_windows}</value>
                </substitution>
                <substitution>
                    <pattern>@@INSTALL_DIR@@</pattern>
                    <value>${installdir}</value>
                </substitution>
            </substitutionList>
            <ruleList>
                <isTrue value="${component(repconsole).selected}" />
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </substitute> 


        <substitute>
            <files>${installdir}/bin/runPubServer.bat</files>
            <substitutionList>
                <substitution>
                    <pattern>@@INSTALL_DIR@@</pattern>
                    <value>${installdir}</value>
                </substitution>
                <substitution>
                    <pattern>@@JAVA@@</pattern>
                    <value>${java_executable_windows}</value>
                </substitution>
                <substitution>
                    <pattern>@@PUBPORT@@</pattern>
                    <value>${pubport}</value>
                </substitution>
                <substitution>
                    <pattern>@@CONFPATH@@</pattern>
                    <value>${installdir}\etc</value>
                </substitution>
            </substitutionList>
            <ruleList>
                <isTrue value="${component(pubserver).selected}" />
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </substitute> 

        <substitute>
            <files>${installdir}/bin/runSubServer.bat</files>
            <substitutionList>
                <substitution>
                    <pattern>@@INSTALL_DIR@@</pattern>
                    <value>${installdir}</value>
                </substitution>
                <substitution>
                    <pattern>@@JAVA@@</pattern>
                    <value>${java_executable_windows}</value>
                </substitution>
                <substitution>
                    <pattern>@@SUBPORT@@</pattern>
                    <value>${subport}</value>
                </substitution>
                <substitution>
                    <pattern>@@CONFPATH@@</pattern>
                    <value>${installdir}\etc</value>
                </substitution>
            </substitutionList>
            <ruleList>
                <isTrue value="${component(subserver).selected}" />
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </substitute> 

        <changePermissions>
            <files>${installdir}/bin/runPubServer.sh</files>
            <permissions>755</permissions>
            <ruleList>
                <isTrue value="${component(pubserver).selected}" />
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </changePermissions> 

        <changePermissions>
            <files>${installdir}/bin/runSubServer.sh</files>
            <permissions>755</permissions>
            <ruleList>
                <isTrue value="${component(subserver).selected}" />
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </changePermissions> 

         <changePermissions>
            <files>${installdir}/bin/runRepConsole.sh
                   ${installdir}/bin/runValidation.sh
            </files>
            <permissions>755</permissions>
            <ruleList>
                <isTrue value="${component(repconsole).selected}" />
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </changePermissions> 

 
         <!-- Install Pub/Sub servers as service -->
         <runProgram>
            <program>${installdir}/scripts/startupcfg_publication.sh</program>
            <programArguments>"${installdir}" "${serviceaccount}" "${pubport}" "${java_executable}"</programArguments>
            <workingDirectory>${installdir}/scripts</workingDirectory>
            <progressText>${msg(progress.text.installing.pubservice)}</progressText>  
            <abortOnError>0</abortOnError>            
            <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows" />
                <isTrue value="${component(pubserver).selected}" />
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </runProgram>
        <!-- Pause for 10 sec between publication/subscription startup.
             On Mac we load the service from startupcfg scripts.
             So introducing wait here -->
        <wait ms="10000" >
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="osx" />
                <isTrue value="${component(subserver).selected}" />
                <isTrue value="${component(pubserver).selected}" />
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </wait>
        <runProgram>
            <program>${installdir}/scripts/startupcfg_subscription.sh</program>
            <programArguments>"${installdir}" "${serviceaccount}" "${subport}" "${java_executable}"</programArguments>
            <workingDirectory>${installdir}/scripts</workingDirectory>
            <progressText>${msg(progress.text.installing.subservice)}</progressText>  
            <abortOnError>0</abortOnError>            
            <ruleList>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows" />
                <isTrue value="${component(subserver).selected}" />
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </runProgram>
        <runProgram>
            <program>${installdir}\scripts\ServiceWrapper.exe</program>
            <programArguments>unregister -n "Publication Service"</programArguments>
            <workingDirectory>${installdir}\scripts</workingDirectory>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
            <ruleList>
                <compareText text="${platform_name}" logic="equals" value="windows" />
                <isTrue value="${component(pubserver).selected}" />
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </runProgram>
        <runProgram>
            <program>${installdir}\scripts\ServiceWrapper.exe</program>
            <programArguments>unregister -n "Subscription Service"</programArguments>
            <workingDirectory>${installdir}\scripts</workingDirectory>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
            <ruleList>
                <compareText text="${platform_name}" logic="equals" value="windows" />
                <isTrue value="${component(subserver).selected}" />
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </runProgram>

       <writeFile>
            <path>${system_temp_directory}/servicewrapper.bat</path>
            <text>"${installdir}\scripts\ServiceWrapper.exe" register -n "Publication Service" -d "Publication Service for xDB Replication Server." -c "${java_executable_windows}" -o "-jar """"${installdir}\bin\edb-repserver.jar"""" pubserver ${pubport} """"${installdir}\etc""""" -u "${serviceaccount}" -p "${servicepassword.password}" -w "${installdir}\bin"</text>
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows" />
                <isTrue value="${component(pubserver).selected}" />
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </writeFile>
        <runProgram>
            <program>cscript</program>
            <programArguments>//NOLOGO "${installdir}\scripts\serviceWrapper.vbs" "${system_temp_directory}"</programArguments>
            <workingDirectory>${installdir}\scripts</workingDirectory>
            <progressText>${msg(progress.text.installing.pubservice)}</progressText>  
            <abortOnError>0</abortOnError>            
            <show>0</show>
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows" />
                <isTrue value="${component(pubserver).selected}" />
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </runProgram>
        <deleteFile path="${system_temp_directory}/servicewrapper.bat" >          
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows" />
                <isTrue value="${component(pubserver).selected}" />
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </deleteFile>
        <writeFile>
            <path>${system_temp_directory}/servicewrapper.bat</path>
            <text>"${installdir}\scripts\ServiceWrapper.exe" register -n "Subscription Service" -d "Subscription Service for xDB Replication Server." -c "${java_executable_windows}" -o "-jar """"${installdir}\bin\edb-repserver.jar"""" subserver ${subport} """"${installdir}\etc""""" -u "${serviceaccount}" -p "${servicepassword.password}" -w "${installdir}\bin"</text>
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows" />
                <isTrue value="${component(subserver).selected}" />
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </writeFile>
        <runProgram>
            <program>cscript</program>
            <programArguments>//NOLOGO "${installdir}\scripts\serviceWrapper.vbs" "${system_temp_directory}"</programArguments>
            <workingDirectory>${installdir}\scripts</workingDirectory>
            <progressText>${msg(progress.text.installing.subservice)}</progressText>  
            <abortOnError>0</abortOnError> 
            <show>0</show>           
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows" />
                <isTrue value="${component(subserver).selected}" />
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </runProgram>
        <deleteFile path="${system_temp_directory}/servicewrapper.bat" >          
            <ruleList>
                <compareText logic="equals" text="${platform_name}" value="windows" />
                <isTrue value="${component(subserver).selected}" />
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </deleteFile>
        <startWindowsService>
            <serviceName>Publication Service</serviceName>
            <displayName>Publication Service</displayName>
            <ruleList>
                <isTrue value="${component(pubserver).selected}" />                  
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </startWindowsService>
       <runProgram>
            <program>/etc/init.d/edb-xdbpubserver</program>
            <programArguments>start &amp;</programArguments> 
            <workingDirectory>/etc/init.d</workingDirectory>
            <progressText>${msg(progress.text.starting.pubservice)}</progressText>
            <ruleList>
                <isTrue value="${component(pubserver).selected}" />
                <compareText logic="contains" text="${platform_name}" value="linux" />
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </runProgram> 
        <runProgram>
            <program>svcadm</program>
            <programArguments>-v enable svc:/application/edb-xdbpubserver:default</programArguments> 
            <progressText>${msg(progress.text.starting.pubservice)}</progressText>
            <ruleList>
                <isTrue value="${component(pubserver).selected}" />
                <compareText logic="contains" text="${platform_name}" value="solaris" />
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </runProgram> 
        <!-- Pause for 10 sec between publication/subscription startup. -->
        <wait ms="10000" >
            <ruleList>
                <isTrue value="${component(subserver).selected}" />
                <isTrue value="${component(pubserver).selected}" />
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </wait>
        <startWindowsService>
            <serviceName>Subscription Service</serviceName>
            <displayName>Subscription Service</displayName>
            <ruleList>
                <isTrue value="${component(subserver).selected}" />                  
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </startWindowsService>
        <runProgram>
            <program>/etc/init.d/edb-xdbsubserver</program>
            <programArguments>start &amp;</programArguments> 
            <workingDirectory>/etc/init.d</workingDirectory>
            <progressText>${msg(progress.text.starting.subservice)}</progressText>
            <ruleList>
                <isTrue value="${component(subserver).selected}" />
                <compareText logic="contains" text="${platform_name}" value="linux" />
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </runProgram>
        <runProgram>
            <program>svcadm</program>
            <programArguments>-v enable svc:/application/edb-xdbsubserver:default</programArguments> 
            <progressText>${msg(progress.text.starting.subservice)}</progressText>
            <ruleList>
                <isTrue value="${component(subserver).selected}" />
                <compareText logic="contains" text="${platform_name}" value="solaris" />
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </runProgram> 
 
        <!-- Add description to the services -->
        <registrySet key="HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Publication Service" name="Description" value="${msg(pub.service.description)}" >
            <ruleList>
                <isTrue value="${component(pubserver).selected}" />
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </registrySet>
        <registrySet key="HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Subscription Service" name="Description" value="${msg(sub.service.description)}" >
            <ruleList>
                <isTrue value="${component(subserver).selected}" />
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </registrySet>
            

        <!-- Remove different platform specific launch file runRepConsole.sh or runRepConsole.bat -->
        <deleteFile path="${installdir}/bin/runValidation.bat" >
            <ruleList>
                <fileExists path="${installdir}/bin/runValidation.bat" />
                <compareText logic="does_not_equal" text="${platform_name}" value="windows" />
            </ruleList>
        </deleteFile> 
        <deleteFile path="${installdir}/bin/runRepConsole.bat" >
            <ruleList>
                <fileExists path="${installdir}/bin/runRepConsole.bat" />
                <compareText logic="does_not_equal" text="${platform_name}" value="windows" />
            </ruleList>
        </deleteFile> 
        <deleteFile path="${installdir}/bin/runValidation.sh" >
            <ruleList>
                <fileExists path="${installdir}/bin/runValidation.sh" />
                <compareText logic="equals" text="${platform_name}" value="windows" />
            </ruleList>
        </deleteFile> 
        <deleteFile path="${installdir}/bin/runRepConsole.sh" >
            <ruleList>
                <fileExists path="${installdir}/bin/runRepConsole.sh" />
                <compareText logic="equals" text="${platform_name}" value="windows" />
            </ruleList>
        </deleteFile> 
        <!-- Remove the serviceWrapper.vbs file -->      
        <deleteFile path="${installdir}/scripts/serviceWrapper.vbs" >
            <ruleList>
                <fileExists path="${installdir}/scripts/serviceWrapper.vbs" />
                <compareText logic="equals" text="${platform_name}" value="windows" />
            </ruleList>
        </deleteFile> 

        <!-- Making sure this variable is available in uninstaller -->
        <setInstallerVariable name="EnterpriseDBEmail" value="${existingEmail}" persist="1"/>

        <!-- Remove the temporary folder -->
        <deleteFile path="${system_temp_directory}/${product_fullname}" >
            <ruleList>
                <fileExists path="${system_temp_directory}/${product_fullname}" />
            </ruleList>
        </deleteFile>

    </postInstallationActionList>

    <readyToInstallActionList>
        <setInstallerVariable name="branding" value="" >
            <ruleList>
               <isFalse value="${component(repconsole).selected}" /> 
            </ruleList>
        </setInstallerVariable>
    </readyToInstallActionList> 

    <!-- preUninstallation actions -->
    <preUninstallationActionList>

        <!-- Abort uninstallation if not super-user -->
        <actionGroup>
            <actionList>
                <showWarning text="${msg(Installer.Warning.UninstallerAdministratorPrivileges)}"/>
                <exit/>
            </actionList>
            <ruleList>
                <isFalse value="${installer_is_root_install}"/>
                <compareText logic="equals" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>
        <actionGroup>
            <actionList>
                <showWarning text="${msg(Installer.Warning.UninstallerRootPrivileges)}"/>
                <exit/>
            </actionList>
            <ruleList>
                <isFalse value="${installer_is_root_install}"/>
                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
            </ruleList>
        </actionGroup>

        <actionGroup>
            <actionList>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>xDBReplicationServer</section>
                    <key>Description</key>
                    <value/>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>xDBReplicationServer</section>
                    <key>InstallationDirectory</key>
                    <value/>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>xDBReplicationServer</section>
                    <key>Version</key>
                    <value/>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>xDBReplicationServer</section>
                    <key>Branding</key>
                    <value/>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>xDBReplicationServer</section>
                    <key>RepConsole</key>
                    <value/>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>xDBReplicationServer</section>
                    <key>PubServer</key>
                    <value/>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>xDBReplicationServer</section>
                    <key>SubServer</key>
                    <value/>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>xDBReplicationServer</section>
                    <key>ServiceAccount</key>
                    <value/>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>xDBReplicationServer</section>
                    <key>SubPort</key>
                    <value/>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>xDBReplicationServer</section>
                    <key>PubPort</key>
                    <value/>
                </iniFileSet>
                <iniFileSet>
                    <file>/etc/postgres-reg.ini</file>
                    <section>xDBReplicationServer</section>
                    <key>EnterpriseDBEmail</key>
                    <value/>
                    <ruleList>
                        <stringTest text="${existingEmail}" type="not_empty"/>
                    </ruleList>
                </iniFileSet>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>does_not_equal</logic>
                    <text>${platform_name}</text>
                    <value>windows</value>
                </compareText>
            </ruleList>
        </actionGroup>

        <registryDelete>
            <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\xDB Replication Server</key>
        </registryDelete> 

        <stopWindowsService>
            <serviceName>Publication Service</serviceName>
            <displayName>Publication Service</displayName>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
        </stopWindowsService>
        <stopWindowsService>
            <serviceName>Subscription Service</serviceName>
            <displayName>Subscription Service</displayName>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
        </stopWindowsService>
        <runProgram>
            <program>${installdir}\scripts\ServiceWrapper.exe</program>
            <programArguments>unregister -n "Publication Service"</programArguments>
            <workingDirectory>${installdir}\scripts</workingDirectory>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
            <ruleList>
                <compareText text="${platform_name}" logic="equals" value="windows" />
            </ruleList>
        </runProgram>
        <runProgram>
            <program>${installdir}\scripts\ServiceWrapper.exe</program>
            <programArguments>unregister -n "Subscription Service"</programArguments>
            <workingDirectory>${installdir}\scripts</workingDirectory>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
            <ruleList>
                <compareText text="${platform_name}" logic="equals" value="windows" />
            </ruleList>
        </runProgram>


        <runProgram>
            <program>/etc/init.d/edb-xdbpubserver</program>
            <programArguments>stop</programArguments>
            <workingDirectory>/etc/init.d</workingDirectory>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
            <ruleList>
                <fileExists path="/etc/init.d/edb-xdbpubserver" />
                <compareText text="${platform_name}" logic="contains" value="linux" />
            </ruleList>
        </runProgram>
        <runProgram>
            <program>/etc/init.d/edb-xdbsubserver</program>
            <programArguments>stop</programArguments>
            <workingDirectory>/etc/init.d</workingDirectory>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
            <ruleList>
                <fileExists path="/etc/init.d/edb-xdbsubserver" />
                <compareText text="${platform_name}" logic="contains" value="linux" />
            </ruleList>
        </runProgram>

        <runProgram>
            <program>launchctl</program>
            <programArguments>unload /Library/LaunchDaemons/com.edb.launchd.xdbpubserver.plist</programArguments>
            <workingDirectory/>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
            <ruleList>
                <fileExists path="/Library/LaunchDaemons/com.edb.launchd.xdbpubserver.plist" />
                <compareText text="${platform_name}" logic="equals" value="osx" />
            </ruleList>
        </runProgram>
        <runProgram>
            <program>launchctl</program>
            <programArguments>unload /Library/LaunchDaemons/com.edb.launchd.xdbsubserver.plist</programArguments>
            <workingDirectory/>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
            <ruleList>
                <fileExists path="/Library/LaunchDaemons/com.edb.launchd.xdbsubserver.plist" />
                <compareText text="${platform_name}" logic="equals" value="osx" />
            </ruleList>
        </runProgram>
        <deleteFile path="/Library/LaunchDaemons/com.edb.launchd.xdbpubserver.plist" >
            <ruleList>
                <fileExists path="/Library/LaunchDaemons/com.edb.launchd.xdbpubserver.plist" />
                <compareText text="${platform_name}" logic="equals" value="osx" />
            </ruleList>
        </deleteFile>    
         <deleteFile path="/Library/LaunchDaemons/com.edb.launchd.xdbsubserver.plist" >
            <ruleList>
                <fileExists path="/Library/LaunchDaemons/com.edb.launchd.xdbsubserver.plist" />
                <compareText text="${platform_name}" logic="equals" value="osx" />
            </ruleList>
        </deleteFile>    
 
        <deleteFile path="/etc/init.d/edb-xdbpubserver" >
            <ruleList>
                <fileExists path="/etc/init.d/edb-xdbpubserver" />
                <compareText text="${platform_name}" logic="contains" value="linux" />
            </ruleList>
        </deleteFile>    
 
        <deleteFile path="/etc/init.d/edb-xdbsubserver" >
            <ruleList>
                <fileExists path="/etc/init.d/edb-xdbsubserver" />
                <compareText text="${platform_name}" logic="contains" value="linux" />
            </ruleList>
        </deleteFile>    

        <deleteFile path="/etc/edb-repl.conf" >
            <ruleList>
                <fileExists path="/etc/edb-repl.conf" />
                <compareText text="${platform_name}" logic="contains" value="linux" />
            </ruleList>
        </deleteFile>    
 
        <actionGroup>
            <actionList>
               <runProgram>
                  <program>svcadm</program>
                  <programArguments>-v disable svc:/application/edb-xdbpubserver:default</programArguments>
                   <abortOnError>0</abortOnError>
                   <showMessageOnError>0</showMessageOnError>
               </runProgram>
               <runProgram>
                  <program>svccfg</program>
                  <programArguments>-v delete -f svc:/application/edb-xdbpubserver:default</programArguments>
                   <abortOnError>0</abortOnError>
                   <showMessageOnError>0</showMessageOnError>
               </runProgram>
               <deleteFile path="/lib/svc/method/edb-xdbpubserver" />
               <deleteFile path="/var/svc/manifest/application/edb-xdbpubserver.xml" />
               <deleteFile path="/etc/edb-repl.conf" >
                  <ruleList>
                     <fileExists path="/etc/edb-repl.conf" />
                  </ruleList>
               </deleteFile>
             </actionList>
             <ruleList>
                <fileExists path="/lib/svc/method/edb-xdbpubserver" />
                <compareText text="${platform_name}" logic="contains" value="solaris" />
            </ruleList>
        </actionGroup>>

        <actionGroup>
            <actionList>
               <runProgram>
                  <program>svcadm</program>
                  <programArguments>-v disable svc:/application/edb-xdbsubserver:default</programArguments>
                   <abortOnError>0</abortOnError>
                   <showMessageOnError>0</showMessageOnError>
               </runProgram>
               <runProgram>
                  <program>svccfg</program>
                  <programArguments>-v delete -f svc:/application/edb-xdbsubserver:default</programArguments>
                   <abortOnError>0</abortOnError>
                   <showMessageOnError>0</showMessageOnError>
               </runProgram>
               <deleteFile path="/lib/svc/method/edb-xdbsubserver" />
               <deleteFile path="/var/svc/manifest/application/edb-xdbsubserver.xml" />
             </actionList>
             <ruleList>
                <fileExists path="/lib/svc/method/edb-xdbsubserver" />
                <compareText text="${platform_name}" logic="contains" value="solaris" />
            </ruleList>
        </actionGroup>>
                
 
        <!-- LIN : Remove Menu shortcuts -->
        <actionGroup>
            <actionList>
                <runProgram>
                    <program>${installdir}/installer/xDBReplicationServer/removeshortcuts.sh</program>
                    <programArguments>"${installdir}" "${branding}"</programArguments>
                    <workingDirectory>${installdir}/installer/xDBReplicationServer</workingDirectory>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>
            </actionList>
            <ruleEvaluationLogic>or</ruleEvaluationLogic> 
            <ruleList>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>solaris</value>
                </compareText>
                <compareText>
                    <logic>contains</logic>
                    <text>${platform_name}</text>
                    <value>linux</value>
                </compareText>
            </ruleList>
        </actionGroup>
        <!-- MAC : Remove Menu shortcuts -->
        <actionGroup>
            <actionList>
                <deleteFile>
                    <path>/Applications/${branding}/Replication Console.app</path>
                </deleteFile>
            </actionList>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${platform_name}</text>
                    <value>osx</value>
                </compareText>
            </ruleList>
        </actionGroup>

        <!-- Delete the installdir\etc\edb-repl.conf file in windows -->
        <deleteFile path="${installdir}\etc\edb-repl.conf" >
            <ruleList>
                <fileExists path="${installdir}\etc\edb-repl.conf" />
                <compareText text="${platform_name}" logic="equals" value="windows" />
            </ruleList>
        </deleteFile> 

    </preUninstallationActionList>
    <allowComponentSelection>1</allowComponentSelection>
    <!-- Components -->
    <componentList>
        <component>
            <name>repconsole</name>
            <description>Replication Console</description>
            <canBeEdited>1</canBeEdited>
            <selected>1</selected>
            <show>1</show>
            <folderList>
                <!-- LIN- Program files -->
                <folder>
                    <description>RepConsole GUI Files</description>
                    <destination>${installdir}</destination>
                    <name>repconsoleguifileslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux/repconsole/bin</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>RepConsole lib Files</description>
                    <destination>${installdir}</destination>
                    <name>repconsolelibfileslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux/repconsole/lib</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>DataValidatorFiles</description>
                    <destination>${installdir}</destination>
                    <name>datavalidatorfileslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux/repconsole/doc</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux/repconsole/etc</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Scripts</description>
                    <destination>${installdir}</destination>
                    <name>installscriptslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Menu Scripts</description>
                    <destination>${installdir}</destination>
                    <name>menuscriptslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <!-- LIN-X64- Program files -->
                <folder>
                    <description>RepConsole GUI Files</description>
                    <destination>${installdir}</destination>
                    <name>repconsoleguifileslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-x64/repconsole/bin</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>RepConsole lib Files</description>
                    <destination>${installdir}</destination>
                    <name>repconsolelibfileslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-x64/repconsole/lib</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>DataValidatorFiles</description>
                    <destination>${installdir}</destination>
                    <name>datavalidatorfileslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-x64/repconsole/doc</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/linux-x64/repconsole/etc</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Scripts</description>
                    <destination>${installdir}</destination>
                    <name>installscriptslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-x64/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Menu Scripts</description>
                    <destination>${installdir}</destination>
                    <name>menuscriptslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-x64/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <!-- SOLARIS-X64- Program files -->
                <folder>
                    <description>RepConsole GUI Files</description>
                    <destination>${installdir}</destination>
                    <name>repconsoleguifilessolaris-x64</name>
                    <platforms>solaris-intel</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/solaris-x64/repconsole/bin</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>RepConsole lib Files</description>
                    <destination>${installdir}</destination>
                    <name>repconsolelibfilessolaris-x64</name>
                    <platforms>solaris-intel</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/solaris-x64/repconsole/lib</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>DataValidatorFiles</description>
                    <destination>${installdir}</destination>
                    <name>datavalidatorfilessolaris-x64</name>
                    <platforms>solaris-intel</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/solaris-x64/repconsole/doc</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/solaris-x64/repconsole/etc</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Scripts</description>
                    <destination>${installdir}</destination>
                    <name>installscriptssolaris-x64</name>
                    <platforms>solaris-intel</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/solaris-x64/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Menu Scripts</description>
                    <destination>${installdir}</destination>
                    <name>menuscriptssolaris-x64</name>
                    <platforms>solaris-intel</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/solaris-x64/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <!-- SOLARIS-SPARC - Program files -->
                <folder>
                    <description>RepConsole GUI Files</description>
                    <destination>${installdir}</destination>
                    <name>repconsoleguifilessolaris-sparc</name>
                    <platforms>solaris-sparc</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/solaris-sparc/repconsole/bin</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>RepConsole lib Files</description>
                    <destination>${installdir}</destination>
                    <name>repconsolelibfilessolaris-sparc</name>
                    <platforms>solaris-sparc</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/solaris-sparc/repconsole/lib</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>DataValidatorFiles</description>
                    <destination>${installdir}</destination>
                    <name>datavalidatorfilessolaris-sparc</name>
                    <platforms>solaris-sparc</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/solaris-sparc/repconsole/doc</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/solaris-sparc/repconsole/etc</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Scripts</description>
                    <destination>${installdir}</destination>
                    <name>installscriptssolaris-sparc</name>
                    <platforms>solaris-sparc</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/solaris-sparc/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Menu Scripts</description>
                    <destination>${installdir}</destination>
                    <name>menuscriptssolaris-sparc</name>
                    <platforms>solaris-sparc</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/solaris-sparc/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <!-- OSX- Program files -->
                <folder>
                    <description>RepConsole GUI Files</description>
                    <destination>${installdir}</destination>
                    <name>repconsoleguifilesosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/osx/repconsole/bin</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>RepConsole lib Files</description>
                    <destination>${installdir}</destination>
                    <name>repconsolelibfilesosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/osx/repconsole/lib</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>DataValidatorFiles</description>
                    <destination>${installdir}</destination>
                    <name>datavalidatorfilesosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/osx/repconsole/doc</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/osx/repconsole/etc</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Scripts</description>
                    <destination>${installdir}</destination>
                    <name>installscriptsosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/osx/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Menu Scripts</description>
                    <destination>${installdir}</destination>
                    <name>menuscriptsosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/osx/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <!-- Windows- Program files -->
                <folder>
                    <description>RepConsole GUI Files</description>
                    <destination>${installdir}</destination>
                    <name>repconsoleguifileswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/windows/repconsole/bin</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>RepConsole lib Files</description>
                    <destination>${installdir}</destination>
                    <name>repconsolelibfileswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/windows/repconsole/lib</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>DataValidatorFiles</description>
                    <destination>${installdir}</destination>
                    <name>datavalidatorfileswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/windows/repconsole/doc</origin>
                        </distributionDirectory>
                        <distributionDirectory>
                            <origin>staging/windows/repconsole/etc</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Scripts</description>
                    <destination>${installdir}</destination>
                    <name>installscriptswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/windows/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Menu Scripts</description>
                    <destination>${installdir}</destination>
                    <name>menuscriptswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/windows/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
            </folderList>
            <!-- WIN: Start Menu -->
            <startMenuShortcutList>
            <!-- Launch xDBReplicationServer -->
                 <startMenuShortcut>
                    <comment>xDB Replication Console</comment>
                    <name>xDB Replication Console</name>
                    <runInTerminal>0</runInTerminal>
                    <windowsExec>cscript</windowsExec>
                    <windowsExecArgs>//NOLOGO "${installdir}\scripts\runRepConsole.vbs" "${installdir}"</windowsExecArgs>
                    <windowsIcon>${installdir}\scripts\images\pg-launchReplicationConsole.ico</windowsIcon>
                 </startMenuShortcut>  
            </startMenuShortcutList>
        </component>
        <component>
            <name>pubserver</name>
            <description>Publication Server</description>
            <canBeEdited>1</canBeEdited>
            <selected>1</selected>
            <show>1</show>
            <folderList>
                <!-- LIN- Program files -->
                <folder>
                    <description>PubServer Files</description>
                    <destination>${installdir}/bin</destination>
                    <name>pubserverfileslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/linux/repserver/bin/edb-repserver.jar</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/linux/repserver/bin/runPubServer.sh</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>PubServer Files</description>
                    <destination>${installdir}</destination>
                    <name>pubserverlibfileslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux/repserver/lib</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>PubServer Files</description>
                    <destination>${installdir}/etc</destination>
                    <name>pubserveretcfileslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/linux/repserver/etc/xdb_pubserver.conf</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Scripts</description>
                    <destination>${installdir}</destination>
                    <name>pubserverinstallscriptslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Menu Scripts</description>
                    <destination>${installdir}</destination>
                    <name>pubservermenuscriptslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <!-- LIN-X64- Program files -->
                <folder>
                    <description>PubServer Files</description>
                    <destination>${installdir}/bin</destination>
                    <name>pubserverfileslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/linux-x64/repserver/bin/edb-repserver.jar</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/linux-x64/repserver/bin/runPubServer.sh</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>PubServer Files</description>
                    <destination>${installdir}</destination>
                    <name>pubserverlibfileslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-x64/repserver/lib</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>PubServer Files</description>
                    <destination>${installdir}/etc</destination>
                    <name>pubserveretcfileslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/linux-x64/repserver/etc/xdb_pubserver.conf</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Scripts</description>
                    <destination>${installdir}</destination>
                    <name>pubserverinstallscriptslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-x64/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Menu Scripts</description>
                    <destination>${installdir}</destination>
                    <name>pubservermenuscriptslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-x64/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <!-- SOLARIS-X64- Program files -->
                <folder>
                    <description>PubServer Files</description>
                    <destination>${installdir}/bin</destination>
                    <name>pubserverfilessolaris-x64</name>
                    <platforms>solaris-intel</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/solaris-x64/repserver/bin/edb-repserver.jar</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/solaris-x64/repserver/bin/runPubServer.sh</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>PubServer Files</description>
                    <destination>${installdir}</destination>
                    <name>pubserverlibfilessolaris-x64</name>
                    <platforms>solaris-intel</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/solaris-x64/repserver/lib</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>PubServer Files</description>
                    <destination>${installdir}/etc</destination>
                    <name>pubserveretcfilessolaris-x64</name>
                    <platforms>solaris-intel</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/solaris-x64/repserver/etc/xdb_pubserver.conf</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Scripts</description>
                    <destination>${installdir}</destination>
                    <name>pubserverinstallscriptssolaris-x64</name>
                    <platforms>solaris-intel</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/solaris-x64/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Menu Scripts</description>
                    <destination>${installdir}</destination>
                    <name>pubservermenuscriptssolaris-x64</name>
                    <platforms>solaris-intel</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/solaris-x64/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <!-- SOLARIS-SPARC - Program files -->
                <folder>
                    <description>PubServer Files</description>
                    <destination>${installdir}/bin</destination>
                    <name>pubserverfilessolaris-sparc</name>
                    <platforms>solaris-sparc</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/solaris-sparc/repserver/bin/edb-repserver.jar</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/solaris-sparc/repserver/bin/runPubServer.sh</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>PubServer Files</description>
                    <destination>${installdir}</destination>
                    <name>pubserverlibfilessolaris-sparc</name>
                    <platforms>solaris-sparc</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/solaris-sparc/repserver/lib</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>PubServer Files</description>
                    <destination>${installdir}/etc</destination>
                    <name>pubserveretcfilessolaris-sparc</name>
                    <platforms>solaris-sparc</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/solaris-sparc/repserver/etc/xdb_pubserver.conf</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Scripts</description>
                    <destination>${installdir}</destination>
                    <name>pubserverinstallscriptssolaris-sparc</name>
                    <platforms>solaris-sparc</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/solaris-sparc/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Menu Scripts</description>
                    <destination>${installdir}</destination>
                    <name>pubservermenuscriptssolaris-sparc</name>
                    <platforms>solaris-sparc</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/solaris-sparc/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <!-- OSX- Program files -->
                <folder>
                    <description>PubServer Files</description>
                    <destination>${installdir}/bin</destination>
                    <name>pubserverfilesosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/osx/repserver/bin/edb-repserver.jar</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/osx/repserver/bin/runPubServer.sh</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>PubServer lib Files</description>
                    <destination>${installdir}</destination>
                    <name>pubserverlibfilesosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/osx/repserver/lib</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>PubServer lib Files</description>
                    <destination>${installdir}/etc</destination>
                    <name>pubserveretcfilesosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/osx/repserver/etc/xdb_pubserver.conf</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Scripts</description>
                    <destination>${installdir}</destination>
                    <name>pubserverinstallscriptsosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/osx/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Menu Scripts</description>
                    <destination>${installdir}</destination>
                    <name>pubservermenuscriptsosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/osx/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <!-- Windows- Program files -->
                <folder>
                    <description>PubServerFiles</description>
                    <destination>${installdir}/bin</destination>
                    <name>pubserverfileswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/windows/repserver/bin/edb-repserver.jar</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/windows/repserver/bin/runPubServer.bat</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>PubServer lib Files</description>
                    <destination>${installdir}</destination>
                    <name>pubserverlibfileswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/windows/repserver/lib</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>PubServer lib Files</description>
                    <destination>${installdir}/etc</destination>
                    <name>pubserveretcfileswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/windows/repserver/etc/xdb_pubserver.conf</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Scripts</description>
                    <destination>${installdir}</destination>
                    <name>pubserverinstallscriptswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/windows/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Menu Scripts</description>
                    <destination>${installdir}</destination>
                    <name>pubservermenuscriptswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/windows/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
            </folderList>
        </component>
        <component>
            <name>subserver</name>
            <description>Subscription Server</description>
            <canBeEdited>1</canBeEdited>
            <selected>1</selected>
            <show>1</show>
            <folderList>
                <!-- LIN- Program files -->
                <folder>
                    <description>SubServer Files</description>
                    <destination>${installdir}/bin</destination>
                    <name>subserverfileslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/linux/repserver/bin/edb-repserver.jar</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/linux/repserver/bin/runSubServer.sh</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>SubServer Files</description>
                    <destination>${installdir}</destination>
                    <name>subserverlibfileslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux/repserver/lib</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>SubServer Files</description>
                    <destination>${installdir}/etc</destination>
                    <name>subserveretcfileslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/linux/repserver/etc/xdb_subserver.conf</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Scripts</description>
                    <destination>${installdir}</destination>
                    <name>subserverinstallscriptslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Menu Scripts</description>
                    <destination>${installdir}</destination>
                    <name>subservermenuscriptslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <!-- LIN-X64- Program files -->
                <folder>
                    <description>SubServer Files</description>
                    <destination>${installdir}/bin</destination>
                    <name>subserverfileslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/linux-x64/repserver/bin/edb-repserver.jar</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/linux-x64/repserver/bin/runSubServer.sh</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>SubServer Files</description>
                    <destination>${installdir}</destination>
                    <name>subserverlibfileslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-x64/repserver/lib</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>SubServer Files</description>
                    <destination>${installdir}/etc</destination>
                    <name>subserveretcfileslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/linux-x64/repserver/etc/xdb_subserver.conf</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Scripts</description>
                    <destination>${installdir}</destination>
                    <name>subserverinstallscriptslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-x64/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Menu Scripts</description>
                    <destination>${installdir}</destination>
                    <name>subservermenuscriptslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-x64/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <!-- SOLARIS-X64 - Program files -->
                <folder>
                    <description>SubServer Files</description>
                    <destination>${installdir}/bin</destination>
                    <name>subserverfilessolaris-x64</name>
                    <platforms>solaris-intel</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/solaris-x64/repserver/bin/edb-repserver.jar</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/solaris-x64/repserver/bin/runSubServer.sh</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>SubServer Files</description>
                    <destination>${installdir}</destination>
                    <name>subserverlibfilessolaris-x64</name>
                    <platforms>solaris-intel</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/solaris-x64/repserver/lib</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>SubServer Files</description>
                    <destination>${installdir}/etc</destination>
                    <name>subserveretcfilessolaris-x64</name>
                    <platforms>solaris-intel</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/solaris-x64/repserver/etc/xdb_subserver.conf</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Scripts</description>
                    <destination>${installdir}</destination>
                    <name>subserverinstallscriptssolaris-x64</name>
                    <platforms>solaris-intel</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/solaris-x64/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Menu Scripts</description>
                    <destination>${installdir}</destination>
                    <name>subservermenuscriptssolaris-x64</name>
                    <platforms>solaris-intel</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/solaris-x64/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <!-- SOLARIS-SPARC - Program files -->
                <folder>
                    <description>SubServer Files</description>
                    <destination>${installdir}/bin</destination>
                    <name>subserverfilessolaris-sparc</name>
                    <platforms>solaris-sparc</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/solaris-sparc/repserver/bin/edb-repserver.jar</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/solaris-sparc/repserver/bin/runSubServer.sh</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>SubServer Files</description>
                    <destination>${installdir}</destination>
                    <name>subserverlibfilessolaris-sparc</name>
                    <platforms>solaris-sparc</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/solaris-sparc/repserver/lib</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>SubServer Files</description>
                    <destination>${installdir}/etc</destination>
                    <name>subserveretcfilessolaris-sparc</name>
                    <platforms>solaris-sparc</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/solaris-sparc/repserver/etc/xdb_subserver.conf</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Scripts</description>
                    <destination>${installdir}</destination>
                    <name>subserverinstallscriptssolaris-sparc</name>
                    <platforms>solaris-sparc</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/solaris-sparc/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Menu Scripts</description>
                    <destination>${installdir}</destination>
                    <name>subservermenuscriptssolaris-sparc</name>
                    <platforms>solaris-sparc</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/solaris-sparc/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <!-- OSX- Program files -->
                <folder>
                    <description>SubServer Files</description>
                    <destination>${installdir}/bin</destination>
                    <name>subserverfilesosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/osx/repserver/bin/edb-repserver.jar</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/osx/repserver/bin/runSubServer.sh</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>SubServer lib Files</description>
                    <destination>${installdir}</destination>
                    <name>subserverlibfilesosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/osx/repserver/lib</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>SubServer Files</description>
                    <destination>${installdir}/etc</destination>
                    <name>subserveretcfilesosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/osx/repserver/etc/xdb_subserver.conf</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Scripts</description>
                    <destination>${installdir}</destination>
                    <name>subserverinstallscriptsosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/osx/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Menu Scripts</description>
                    <destination>${installdir}</destination>
                    <name>subservermenuscriptsosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/osx/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <!-- Windows- Program files -->
                <folder>
                    <description>SubServerFiles</description>
                    <destination>${installdir}/bin</destination>
                    <name>subserverfileswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/windows/repserver/bin/edb-repserver.jar</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>staging/windows/repserver/bin/runSubServer.bat</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>SubServer lib Files</description>
                    <destination>${installdir}</destination>
                    <name>subserverlibfileswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/windows/repserver/lib</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>SubServer Files</description>
                    <destination>${installdir}/etc</destination>
                    <name>subserveretcfileswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>staging/windows/repserver/etc/xdb_subserver.conf</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Installer Scripts</description>
                    <destination>${installdir}</destination>
                    <name>subserverinstallscriptswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/windows/installer</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Menu Scripts</description>
                    <destination>${installdir}</destination>
                    <name>subservermenuscriptswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/windows/scripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
            </folderList>
        </component>
        <component>
            <name>psql</name>
            <description>psql</description>
            <canBeEdited>0</canBeEdited>
            <selected>0</selected>
            <show>0</show>
            <folderList>
                <!-- LIN- Program files -->
                <folder>
                    <description>Installation Scripts</description>
                    <destination>${system_temp_directory}</destination>
                    <name>instscriptslinux</name>
                    <platforms>linux</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux/instscripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <!-- LIN-X64- Program files -->
                <folder>
                    <description>Installation Scripts</description>
                    <destination>${system_temp_directory}</destination>
                    <name>instscriptslinux-x64</name>
                    <platforms>linux-x64</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/linux-x64/instscripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <!-- SOLARIS-X64- Program files -->
                <folder>
                    <description>Installation Scripts</description>
                    <destination>${system_temp_directory}</destination>
                    <name>instscriptssolaris-x64</name>
                    <platforms>solaris-intel</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/solaris-x64/instscripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <!-- SOLARIS_SPARC - Program files -->
                <folder>
                    <description>Installation Scripts</description>
                    <destination>${system_temp_directory}</destination>
                    <name>instscriptssolaris-sparc</name>
                    <platforms>solaris-sparc</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/solaris-sparc/instscripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <!-- OSX- Program files -->
                <folder>
                    <description>Installation Scripts</description>
                    <destination>${system_temp_directory}</destination>
                    <name>instscriptsosx</name>
                    <platforms>osx</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/osx/instscripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                 <!-- Windows- Program files -->
                <folder>
                    <description>Installation Scripts</description>
                    <destination>${system_temp_directory}</destination>
                    <name>instscriptswindows</name>
                    <platforms>windows</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>staging/windows/instscripts</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
            </folderList>
        </component> 
        <component>
           <name>validatorComponent</name>
           <description>Component to validate user input</description>
           <show>0</show>
           <selected>1</selected>
           <canBeEdited>0</canBeEdited>
           <componentSelectionValidationActionList>
               <throwError>
                   <text>${msg(error.select.component)}</text>
                   <ruleList>
                       <compareText text="${component(repconsole).selected}" value="0" logic="equals"/>
                       <compareText text="${component(pubserver).selected}" value="0" logic="equals"/>
                       <compareText text="${component(subserver).selected}" value="0" logic="equals"/>
                   </ruleList>
              </throwError>
           </componentSelectionValidationActionList>
        </component>
   </componentList>
    <!-- Install Directory -->
    <parameterList>
        <parameterGroup name="registration"
              title="${msg(registration.title.value)}"
              explanation="${msg(registration.explanation.value)}">
            <parameterList>
                <choiceParameter name="alreadyRegistered" default="0"
                    width="30" allowEmptyValue="0" cliOptionShow="0"
                    displayType="radiobuttons">
                    <optionList>
                        <option text="${msg(registration.existingemail.no)}" value="0"/>
                        <option text="${msg(registration.existingemail.yes)}" value="1"/>
                    </optionList>
                </choiceParameter>
            </parameterList>
            <!-- Open registration page, if not already registered user -->
            <postShowPageActionList>
                <launchBrowser url="http://www.enterprisedb.com/create-promo-account.do?type=xdb"
                      abortOnError="1">
                    <ruleList>
                            <isFalse value="${alreadyRegistered}"/>
                    </ruleList>
                </launchBrowser>
            </postShowPageActionList>
            <!-- Check if upgradation is done on older version of xDBReplicationServer,
                 which does not have this authentication process -->
            <ruleList>
                <isTrue value="${validateEmail}"/>
                <stringTest text="${xDBReplicationServerVersion}" type="empty"/>
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </parameterGroup>
        <parameterGroup name="userAuthenticationPage"
            title="${msg(existingemail.authentication.title.value)}">
            <parameterList>
                <labelParameter name="existingemail_authentication_lbl"
                    explanation="${msg(existingemail.authentication.explanation.value)}"/>
                <stringParameter name="existingEmail" cliOptionName="existing-email"
                    width="30" ask="1" description="${msg(userAuth.email.value)}"
                    allowEmptyValue="1" cliOptionShow="1">
                    <validationActionList>
                        <throwError text="${msg(error.invalid.email.value)}">
                            <ruleList>
                                <regExMatch logic="does_not_match" text="${existingEmail}">
                                    <pattern>^([\w]+)(([-\.][\w]+)?)*@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)</pattern>
                                </regExMatch>
                            </ruleList>
                        </throwError>
                    </validationActionList>
                </stringParameter>
                <passwordParameter name="existingPassword" width="30" cliOptionName="existing-password"
                    ask="1" description="${msg(userAuth.password.value)}" allowEmptyValue="1"
                    askForConfirmation="0" cliOptionShow="1">
                    <validationActionList>
                        <throwError text="${msg(error.invalid.password.value)}">
                            <ruleEvaluationLogic>or</ruleEvaluationLogic>
                            <ruleList>
                                <stringTest text="${existingPassword}" type="empty"/>
                                <regExMatch logic="matches" pattern="\s+" text="${existingPassword}"/>
                            </ruleList>
                        </throwError>
                    </validationActionList>
                </passwordParameter>
            </parameterList>
            <!-- Validate entered email & password -->
            <postShowPageActionList>
                <setEnvironmentVariable name="LD_LIBRARY_PATH"
                      value="${env(LD_LIBRARY_PATH)}:${system_temp_directory}/${product_fullname}/instscripts/lib"/>
                <setInstallerVariableFromScriptOutput name="ws_existinguser_result"
                    customErrorMessage="${msg(validatinguser.ws.error)}" abortOnError="0"
                    exec="${system_temp_directory}/${product_fullname}/instscripts/validateUserClient.o"
                    execArgs="&quot;${uuid_val}&quot; &quot;xdb&quot; &quot;false&quot; &quot;false&quot; &quot;&quot; &quot;&quot; &quot;1&quot; &quot;&quot; &quot;&quot; &quot;0&quot; &quot;0&quot; &quot;${existingEmail}&quot; &quot;${existingPassword.password}&quot; &quot;${proxyHost}&quot; &quot;${proxyPort}&quot;"
                    workingDirectory="${system_temp_directory}/${product_fullname}/instscripts">
                    <ruleList>
                        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                    </ruleList>
                </setInstallerVariableFromScriptOutput>
                <setInstallerVariableFromScriptOutput name="ws_existinguser_result"
                    customErrorMessage="${msg(validatinguser.ws.error)}" abortOnError="0"
                    exec="${system_temp_directory}\${product_fullname}\instscripts\bin\validateUserClient.exe"
                    execArgs="&quot;xdb&quot; &quot;false&quot; &quot;false&quot; &quot;${existingEmail}&quot; &quot;${existingPassword.password}&quot; &quot;${uuid_val}&quot; &quot;${proxyHost}&quot; &quot;${proxyPort}&quot;"
                    workingDirectory="${system_temp_directory}\${product_fullname}\instscripts\bin">
                    <ruleList>
                        <compareText logic="equals" text="${platform_name}" value="windows"/>
                    </ruleList>
                </setInstallerVariableFromScriptOutput>
                <throwError abortOnError="0" text="${msg(ws.email.not.authenticated)}">
                    <ruleList>
                        <compareText logic="equals" text="${ws_existinguser_result}" value="1"/>
                    </ruleList>
                </throwError>
                <throwError abortOnError="0" text="${msg(ws.email.not.validated)}">
                    <ruleList>
                        <compareText logic="equals" text="${ws_existinguser_result}" value="2"/>
                    </ruleList>
                </throwError>
                <throwError abortOnError="0" text="${msg(ws.email.already.exists)}">
                    <ruleList>
                        <compareText logic="equals" text="${ws_existinguser_result}" value="3"/>
                    </ruleList>
                </throwError>
                <throwError abortOnError="0" text="${msg(ws.exception.from.server)}">
                    <ruleList>
                        <compareText logic="equals" text="${ws_existinguser_result}" value="4"/>
                    </ruleList>
                </throwError>
                <throwError abortOnError="0" text="${msg(ws.internet.not.connected)}">
                    <ruleList>
                        <compareText logic="equals" text="${ws_existinguser_result}" value=""/>
                    </ruleList>
                </throwError>
        
                <setInstallerVariable name="stay_on_this_page" value="true"/>
                <setInstallerVariable name="stay_on_this_page" value="false">
                    <ruleList>
                        <compareText logic="equals" text="${ws_existinguser_result}" value="0"/>
                    </ruleList>
                </setInstallerVariable>
                 <setInstallerVariable name="stay_on_this_page" value="false">
                    <ruleList>
                        <compareText logic="equals" text="${ws_existinguser_result}" value="00"/>
                        <isTrue value="${ws_existinguser_result}"/>
                    </ruleList>
                </setInstallerVariable>
        
                <setInstallerVariable name="next_page" value="userAuthenticationPage">
                    <ruleList>
                        <isTrue value="${stay_on_this_page}"/>
                    </ruleList>
                </setInstallerVariable>
            </postShowPageActionList>
            <!-- Check if upgradation is done on older version of xDBReplicationServer,
                 which does not have this authentication process -->
            <ruleList>
                <isTrue value="${validateEmail}"/>
                <stringTest text="${xDBReplicationServerVersion}" type="empty"/>
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </parameterGroup>
        <booleanParameter name="extract_mode" cliOptionName="extract-only" default="0" ask="1" cliOptionShow="1"/>
        <booleanParameter name="admin_rights" cliOptionName="require-admin" default="0" ask="0" cliOptionShow="0"/>
        <booleanParameter name="validateEmail" cliOptionName="validate" default="1" ask="0" cliOptionShow="0"/>
        <stringParameter name="originalplatform" ask="0" cliOptionShow="0"/>
        <stringParameter name="branding" cliOptionName="branding" ask="0" cliOptionShow="0"/>
        <stringParameter name="dbtype" cliOptionName="dbtype" default="${defaultdbtype}" ask="0" cliOptionShow="0"/>
        <stringParameter name="jrehome" cliOptionName="jrehome" default="" ask="0" cliOptionShow="0"/>

        <!-- PostgreSQL Server Details Verification Page -->
        <parameterGroup>
            <name>pgdetails</name>
            <title>${msg(pgplus.details.title)}</title>
            <explanation>${msg(pgplus.details.explanation)}</explanation>
            <value/>
            <default/>
            <parameterList>
                <!-- Postgres Host -->
                <stringParameter>
                    <name>pghost</name>
                    <description>Host</description>
                    <explanation/>
                    <value>${defaultpghost}</value>
                    <default/>
                    <allowEmptyValue>1</allowEmptyValue>
                    <width>40</width>
                </stringParameter>
                <!-- Postgres Port(Default 5432) -->
                <stringParameter>
                    <name>pgport</name>
                    <description>Port</description>
                    <explanation/>
                    <value>${defaultpgport}</value>
                    <default/>
                    <allowEmptyValue>1</allowEmptyValue>
                    <width>40</width>
                </stringParameter>
                <!-- Postgres User -->
                <stringParameter>
                    <name>pguser</name>
                    <description>User Name</description>
                    <explanation/>
                    <value>${defaultpguser}</value>
                    <default/>
                    <allowEmptyValue>1</allowEmptyValue>
                    <width>40</width>
                </stringParameter>
                <!-- Postgres User Password -->
                <passwordParameter>
                    <name>pgpassword</name>
                    <title>Password</title>
                    <description>Password</description>
                    <askForConfirmation>0</askForConfirmation>
                    <explanation/>
                    <value/>
                </passwordParameter>
                <!-- Control Database -->
                <stringParameter>
                    <name>controldb</name>
                    <description>Control Database</description>
                    <explanation/>
                    <value>${defaultcontroldb}</value>
                    <default/>
                    <allowEmptyValue>1</allowEmptyValue>
                    <width>40</width>
                </stringParameter>
            </parameterList>
            <!-- Checking the validity of PostgreSQL Server Details -->
            <validationActionList>
                <stringModify variable="controldb" text="${controldb}" logic="trim" />
                <actionGroup>
                    <actionList>
                        <throwError>
                            <text>${msg(pgplus.blank.error)}</text>
                        </throwError>
                    </actionList>
                    <ruleEvaluationLogic>or</ruleEvaluationLogic>
                    <ruleList>
                        <compareText>
                            <text>${pghost}</text>
                            <logic>equals</logic>
                            <value/>
                        </compareText>
                        <compareText>
                            <text>${pgport}</text>
                            <logic>equals</logic>
                            <value/>
                        </compareText>
                        <compareText>
                            <text>${pguser}</text>
                            <logic>equals</logic>
                            <value/>
                        </compareText>
                        <compareText>
                            <text>${pgpassword}</text>
                            <logic>equals</logic>
                            <value/>
                        </compareText>
                        <compareText>
                            <text>${controldb}</text>
                            <logic>equals</logic>
                            <value/>
                        </compareText>
                    </ruleList>
                </actionGroup>

                <throwError>
                    <text>${msg(pgplus.port.error)}</text>
                    <ruleEvaluationLogic>or</ruleEvaluationLogic>
                    <ruleList>
                        <compareValues>
                            <value1>${pgport}</value1>
                            <logic>less_or_equal</logic>
                            <value2>1023</value2>
                        </compareValues>
                        <compareValues>
                            <value1>${pgport}</value1>
                            <logic>greater_or_equal</logic>
                            <value2>65535</value2>
                        </compareValues>
                    </ruleList>
                </throwError>
                <actionGroup>
                    <actionList>
                        <!-- Set variable psql_path -->
                        <setInstallerVariable name="psql_path" value="${system_temp_directory}/${product_fullname}/instscripts/bin/psql">
                            <ruleList>
                                <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
                            </ruleList>
                        </setInstallerVariable>
                        <setInstallerVariable name="psql_path" value="${system_temp_directory}\${product_fullname}\instscripts\bin\psql.exe">
                            <ruleList>
                                <compareText logic="equals" text="${platform_name}" value="windows"/>
                            </ruleList>
                        </setInstallerVariable>
        
                        <setEnvironmentVariable name="PGHOST" value="${pghost}"/>
                        <setEnvironmentVariable name="PGUSER" value="${pguser}"/>
                        <setEnvironmentVariable name="PGPASSWORD" value="${pgpassword}"/>
                        <setEnvironmentVariable name="PGPORT" value="${pgport}"/>
                        <setEnvironmentVariable name="PGDATABASE" value="postgres"/>
          
                        <!-- START: validate the PostgreSQL Server Details -->
                        <setInstallerVariable name="connection" value=""/>
                        <setInstallerVariable name="dbexist" value=""/>
        
                        <!-- Check connection -->
                        <setInstallerVariableFromScriptOutput name="connection"
                                                              exec="${psql_path}"
                                                              execArgs="-l"
                                                              workingDirectory="${system_temp_directory}/${product_fullname}/bin"
                                                              showMessageOnError="0"
                                                              abortOnError="0" /> 
                        <!-- If it fails for postgres database, fall back to edb --> 
                        <actionGroup>
                             <actionList>
                                   <setEnvironmentVariable name="PGDATABASE" value="edb" />
                                   <!-- Check connection -->
                                   <setInstallerVariableFromScriptOutput name="connection"
                                                              exec="${psql_path}"
                                                              execArgs="-l ${env(PGDATABASE)}"
                                                              workingDirectory="${system_temp_directory}/${product_fullname}/bin"
                                                              showMessageOnError="0"
                                                              abortOnError="0" /> 
                            </actionList>
                            <ruleList>
                                  <compareText text="${program_stderr}" logic="does_not_equal" value="" />
                            </ruleList>
                       </actionGroup>  


                        <!-- If it fails for edb database, fall back to template1 --> 
                        <actionGroup>
                             <actionList>
                                   <setEnvironmentVariable name="PGDATABASE" value="template1" />
                                   <!-- Check connection -->
                                   <setInstallerVariableFromScriptOutput name="connection"
                                                              exec="${psql_path}"
                                                              execArgs="-l ${env(PGDATABASE)}"
                                                              workingDirectory="${system_temp_directory}/${product_fullname}/bin"
                                                              customErrorMessage="${program_stderr}" />
                            </actionList>
                            <ruleList>
                                  <compareText text="${program_stderr}" logic="does_not_equal" value="" />
                            </ruleList>
                       </actionGroup>  

                    </actionList>
                </actionGroup>

           </validationActionList>
           <ruleList>
                <ruleGroup>
                   <ruleEvaluationLogic>or</ruleEvaluationLogic> 
                   <ruleList>
                       <isTrue value="${component(pubserver).selected}" />
                       <isTrue value="${component(subserver).selected}" />
                   </ruleList>
                </ruleGroup> 
                <ruleGroup>
                   <ruleList>
                       <isFalse value="${IsPubServerUpgrade}" />
                       <isFalse value="${IsSubServerUpgrade}" />
                   </ruleList>
                </ruleGroup>
                <isFalse value="${extract_mode}"/>
            </ruleList> 
        </parameterGroup>

        <parameterGroup>
            <name>pubportdetails</name>
            <title>${msg(pubport.details.title)}</title>
            <explanation>${msg(pubport.details.explanation)}</explanation>
            <value/>
            <default/>
            <parameterList>
                <!-- PubServer Port -->
                <stringParameter>
                    <name>pubport</name>
                    <description>Port</description>
                    <explanation/>
                    <value>${defaultpubport}</value>
                    <default/>
                    <allowEmptyValue>1</allowEmptyValue>
                    <width>40</width>
                </stringParameter>
            </parameterList>
            <ruleList>
                <isTrue value="${component(pubserver).selected}" />
                <isFalse value="${IsPubServerUpgrade}" />
                <isFalse value="${extract_mode}"/>
            </ruleList>
            <!-- Checking the validity of Pubserver port -->
            <validationActionList>
                <actionGroup>
                    <actionList>
                        <throwError>
                            <text>${msg(pubport.blank.error)}</text>
                        </throwError>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <text>${pubport}</text>
                            <logic>equals</logic>
                            <value/>
                        </compareText>
                    </ruleList>
                </actionGroup>

                <throwError>
                    <text>${msg(pubport.port.error)}</text>
                    <ruleEvaluationLogic>or</ruleEvaluationLogic>
                    <ruleList>
                        <compareValues>
                            <value1>${pubport}</value1>
                            <logic>less_or_equal</logic>
                            <value2>1023</value2>
                        </compareValues>
                        <compareValues>
                            <value1>${pubport}</value1>
                            <logic>greater_or_equal</logic>
                            <value2>65533</value2>
                        </compareValues>
                    </ruleList>
                </throwError>

                <throwError>
                    <text>${msg(port.bind.error)}</text>
                    <ruleList>
                        <portTest>
                            <port>${pubport}</port>
                            <condition>cannot_bind</condition>
                        </portTest> 
                    </ruleList>
                </throwError>

                <!-- Check whether pubport + 2 is also free -->
                <mathExpression>
                    <text>${pubport} + 2</text>
                    <variable>offset_pubport</variable>
                </mathExpression>
                <throwError>
                    <text>${msg(port.offset.bind.error)}</text>
                    <ruleList>
                        <portTest>
                            <port>${offset_pubport}</port>
                            <condition>cannot_bind</condition>
                        </portTest> 
                    </ruleList>
                </throwError>

                <!-- If Sub Server is running in upgrade mode and PubServer is not, then check whether Pub port is not same as SubPort -->
                <throwError>
                    <text>${msg(port.pubsub.equal.error)}</text>
                    <ruleList>
                        <compareValues>
                            <value1>${pubport}</value1>
                            <logic>equals</logic>
                            <value2>${subport}</value2>
                        </compareValues>
                        <isTrue value="${IsSubServerUpgrade}" /> 
                    </ruleList>
                </throwError>

                <!-- If Sub Server is running in upgrade mode and PubServer is not, then check whether Pub port + 2 is not same as SubPort -->
                <throwError>
                    <text>${msg(pubport.offset.pubsub.equal.error)}</text>
                    <ruleList>
                        <compareValues>
                            <value1>${offset_pubport}</value1>
                            <logic>equals</logic>
                            <value2>${subport}</value2>
                        </compareValues>
                        <isTrue value="${IsSubServerUpgrade}" /> 
                    </ruleList>
                </throwError>

           </validationActionList>
        </parameterGroup>

        <parameterGroup>
            <name>subportdetails</name>
            <title>${msg(subport.details.title)}</title>
            <explanation>${msg(subport.details.explanation)}</explanation>
            <value/>
            <default/>
            <parameterList>
                <!-- SubServer Port -->
                <stringParameter>
                    <name>subport</name>
                    <description>Port</description>
                    <explanation/>
                    <value>${defaultsubport}</value>
                    <default/>
                    <allowEmptyValue>1</allowEmptyValue>
                    <width>40</width>
                </stringParameter>
            </parameterList>
            <ruleList>
                <isTrue value="${component(subserver).selected}" />
                <isFalse value="${IsSubServerUpgrade}" />
                <isFalse value="${extract_mode}"/>
            </ruleList>
            <!-- Checking the validity of SubServer port -->
            <validationActionList>
                <actionGroup>
                    <actionList>
                        <throwError>
                            <text>${msg(subport.blank.error)}</text>
                        </throwError>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <text>${subport}</text>
                            <logic>equals</logic>
                            <value/>
                        </compareText>
                    </ruleList>
                </actionGroup>

                <throwError>
                    <text>${msg(subport.port.error)}</text>
                    <ruleEvaluationLogic>or</ruleEvaluationLogic>
                    <ruleList>
                        <compareValues>
                            <value1>${subport}</value1>
                            <logic>less_or_equal</logic>
                            <value2>1023</value2>
                        </compareValues>
                        <compareValues>
                            <value1>${subport}</value1>
                            <logic>greater_or_equal</logic>
                            <value2>65533</value2>
                        </compareValues>
                    </ruleList>
                </throwError>

                <throwError>
                    <text>${msg(port.bind.error)}</text>
                    <ruleList>
                        <portTest>
                            <port>${subport}</port>
                            <condition>cannot_bind</condition>
                        </portTest> 
                    </ruleList>
                </throwError>

                <!-- Check whether subport + 2 is also free -->
                <mathExpression>
                    <text>${subport} + 2</text>
                    <variable>offset_subport</variable>
                </mathExpression>
                <throwError>
                    <text>${msg(port.offset.bind.error)}</text>
                    <ruleList>
                        <portTest>
                            <port>${offset_subport}</port>
                            <condition>cannot_bind</condition>
                        </portTest> 
                    </ruleList>
                </throwError>
 
                <!-- Check whether subport is not same as pubport --> 
                <throwError>
                    <text>${msg(port.pubsub.equal.error)}</text>
                    <ruleList>
                        <compareValues>
                            <value1>${pubport}</value1>
                            <logic>equals</logic>
                            <value2>${subport}</value2>
                        </compareValues>
                        <isTrue value="${component(pubserver).selected}" /> 
                    </ruleList>
                </throwError>

                <!-- If Pubserver is in upgrade mode and subserver not, check whether subserver + 2 is not same as pubserver -->
                <throwError>
                    <text>${msg(subport.offset.pubsub.equal.error)}</text>
                    <ruleList>
                        <compareValues>
                            <value1>${pubport}</value1>
                            <logic>equals</logic>
                            <value2>${offset_subport}</value2>
                        </compareValues>
                        <isTrue value="${component(pubserver).selected}" /> 
                    </ruleList>
                </throwError>


          </validationActionList>
        </parameterGroup>
        <parameterGroup>
           <name>sysuserdetails</name>
           <title>${msg(sysuser.details.title)}</title>
           <explanation>${_explanation}</explanation>
           <!-- Do not show this page if reinstallation other than windows -->
           <preShowPageActionList>
               <setInstallerVariable>
                   <name>_explanation</name>
                   <value>${msg(sysuser.details.explanation)}</value>
               </setInstallerVariable>

               <!-- On Windows, we need a different explanation -->
               <setInstallerVariable>
                  <name>_explanation</name>
                  <value>${msg(sysuser.details.explanation.windows)}</value>
                  <ruleList>
                      <compareText logic="equals" text="${platform_name}" value="windows"/>
                  </ruleList>
               </setInstallerVariable>

               <!-- On Windows, we need a different explanation -->
               <setInstallerVariable>
                  <name>_explanation</name>
                  <value>${msg(sysuser.details.explanation.withuser.windows)}</value>
                  <ruleList>
                      <compareText logic="equals" text="${platform_name}" value="windows"/>
                      <ruleGroup>
                           <ruleEvaluationLogic>or</ruleEvaluationLogic>
                           <ruleList>
                                 <isTrue value="${IsPubServerUpgrade}" />
                                 <isTrue value="${IsSubServerUpgrade}" />
                           </ruleList>
                      </ruleGroup> 
                  </ruleList>
               </setInstallerVariable>
           </preShowPageActionList>
           <parameterList>
               <stringParameter>
                   <name>serviceaccount</name>
                   <description>${msg(config.serviceaccount.description)}</description>
                   <explanation/>
                   <value>${defaultserviceaccount}</value>
                   <default/>
                   <allowEmptyValue>1</allowEmptyValue>
                   <width>40</width>
                   <cliOptionName>serviceaccount</cliOptionName>
                   <cliOptionShow>yes</cliOptionShow>
                   <ruleList>
                       <isFalse value="${IsPubServerUpgrade}"/>
                       <isFalse value="${IsSubServerUpgrade}"/>
                   </ruleList>
               </stringParameter>
               <passwordParameter>
                   <name>servicepassword</name>
                   <description>${msg(config.syspassword.description)}</description>
                   <explanation/>
                   <value/>
                   <default/>
                   <allowEmptyValue>1</allowEmptyValue>
                   <cliOptionName>servicepassword</cliOptionName>
                   <cliOptionShow>yes</cliOptionShow>
                   <descriptionRetype>${msg(config.syspassword.confirm)}</descriptionRetype>
                   <width>40</width>
                   <askForConfirmation>0</askForConfirmation>  
                   <ruleList>
                       <compareText logic="equals" text="${platform_name}" value="windows"/>
                   </ruleList>
               </passwordParameter>
           </parameterList>
           <ruleEvaluationLogic>or</ruleEvaluationLogic>
           <ruleList>
               <ruleGroup>
                    <ruleList>
                         <ruleGroup>
                             <ruleEvaluationLogic>or</ruleEvaluationLogic>
                             <ruleList>                 
                                 <isTrue value="${component(pubserver).selected}"/>
                                 <isTrue value="${component(subserver).selected}"/>
                             </ruleList>
                         </ruleGroup>
                         <ruleGroup>
                             <ruleList>                 
                                 <isFalse value="${IsPubServerUpgrade}"/>
                                 <isFalse value="${IsSubServerUpgrade}"/>
                             </ruleList>
                         </ruleGroup>                
                         <isFalse value="${extract_mode}"/>
                   </ruleList> 
               </ruleGroup>       
               <ruleGroup>
                   <ruleList>
                        <ruleGroup>
                             <ruleEvaluationLogic>or</ruleEvaluationLogic>
                             <ruleList>
                                 <isTrue value="${IsPubServerUpgrade}"/>
                                 <isTrue value="${IsSubServerUpgrade}"/>
                             </ruleList>
                        </ruleGroup>
                        <compareText logic="equals" text="${platform_name}" value="windows" />
                        <isFalse value="${extract_mode}"/>
                   </ruleList>
              </ruleGroup>  
           </ruleList>
           <validationActionList>
              <actionGroup>
                 <actionList>
                     <throwError>
                         <text>${msg(serviceaccount.blank.error)}</text>
                     </throwError>
                 </actionList>
                 <ruleList>
                     <compareText logic="equals" text="${serviceaccount}" value=""/>
                 </ruleList>
              </actionGroup>
              <actionGroup>
                 <actionList>
                     <throwError>
                         <text>${msg(servicepassword.blank.error)}</text>
                     </throwError>
                 </actionList>
                 <ruleList>
                     <compareText logic="equals" text="${servicepassword}" value=""/>
                 </ruleList>
              </actionGroup>
              
              <!-- WIN : Create user  -->
              <actionGroup>
                <actionList>
                    <unpackFile>
                      <component>pubserver</component>
                      <destination>${system_temp_directory}\${product_fullname}\createuser.exe</destination>
                      <folder>pubserverinstallscriptswindows</folder>
                      <origin>installer\xDBReplicationServer\createuser.exe</origin>
                    </unpackFile>
                    <runProgram>
                      <program>${system_temp_directory}\${product_fullname}\createuser.exe</program>
                      <programArguments>. "${serviceaccount}" "${servicepassword.password}"</programArguments>
                      <abortOnError>0</abortOnError>
                      <showMessageOnError>0</showMessageOnError>
                    </runProgram>
                    <throwError>
                      <text>${msg(script.command.line.error)}</text>
                      <ruleList>
                        <compareText logic="equals" text="${program_exit_code}" value="127"/>
                      </ruleList>
                    </throwError>
                    <throwError>
                      <text>${msg(config.servicepassword.incorrect.windows)}</text>
                      <ruleList>
                        <compareText logic="equals" text="${program_exit_code}" value="1"/>
                      </ruleList>
                    </throwError>
                  </actionList>
                  <ruleList>
                    <compareText logic="equals" text="${platform_name}" value="windows"/>
                  </ruleList>
              </actionGroup>
              <!-- WIN : Validate user name & password -->
              <actionGroup>
                <actionList>
                  <unpackFile>
                    <component>pubserver</component>
                    <destination>${system_temp_directory}\${product_fullname}\validateuser.exe</destination>
                    <folder>pubserverinstallscriptswindows</folder>
                    <origin>installer\xDBReplicationServer\validateuser.exe</origin>
                  </unpackFile>
                  <runProgram>
                    <program>${system_temp_directory}\${product_fullname}\validateuser.exe</program>
                    <programArguments>. "${serviceaccount}" "${servicepassword.password}"</programArguments>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                  </runProgram>
                  <throwError>
                    <text>${msg(script.command.line.error)}</text>
                    <ruleList>
                      <compareText logic="equals" text="${program_exit_code}" value="127"/>
                    </ruleList>
                  </throwError>
                  <throwError>
                    <text>${msg(config.servicepassword.incorrect.windows)}</text>
                    <ruleList>
                      <compareText logic="equals" text="${program_exit_code}" value="1"/>
                    </ruleList>
                  </throwError>
                </actionList>
                <ruleList>
                  <compareText logic="equals" text="${platform_name}" value="windows"/>
                </ruleList>
              </actionGroup>
           </validationActionList>
        </parameterGroup>
        <directoryParameter>
            <name>installdir</name>
            <description>Installer.Parameter.installdir.description</description>
            <explanation>Installer.Parameter.installdir.explanation</explanation>
            <value>${default_installdir}</value>
            <default/>
            <allowEmptyValue>0</allowEmptyValue>
            <ask>yes</ask>
            <cliOptionName>prefix</cliOptionName>
            <mustBeWritable>yes</mustBeWritable>
            <mustExist>0</mustExist>
            <width>40</width>
            <ruleList>
                <compareText>
                    <text>${xDBReplicationServerVersion}</text>
                    <logic>equals</logic>
                    <value/>
                </compareText>
            </ruleList>
            <!-- Validating whether installdir is empty -->
            <validationActionList>
                <actionGroup>
                    <actionList>
                        <setInstallerVariable name="installdir" value="${default_installdir}" />
                        <throwError>
                            <text>${msg(replicationserver.installdir.empty)}</text>
                        </throwError>
                    </actionList>
                    <ruleList>
                        <compareText>
                            <text>${installdir}</text>
                            <logic>equals</logic>
                            <value />
                        </compareText>
                    </ruleList>
                </actionGroup>
            </validationActionList>
            <!-- Validating whether installdir contains whitespaces (Linux) -->
            <postShowPageActionList>
                <actionGroup>
                    <actionList>  
                        <showWarning>
                            <text>${msg(replicationserver.installdir.error)}</text>
                        </showWarning>
                        <setInstallerVariable name="next_page" value="installdir"/>
                    </actionList>
                    <ruleList>
                       <regExMatch>
                           <text>${installdir}</text>
                           <logic>does_not_match</logic>
                           <pattern>^/([0-9a-zA-Z_/\.\-]*)$</pattern>
                       </regExMatch>
                       <compareText>
                           <logic>does_not_equal</logic>
                           <text>${platform_name}</text>
                           <value>windows</value>
                       </compareText>
                    </ruleList>
                </actionGroup>
                <!-- Validating whether installdir is valid (Windows) -->
                <actionGroup>
                   <actionList>
                     <setInstallerVariable name="installdir" value="${default_installdir}" />
                     <showWarning>
                        <text>${msg(replicationserver.installdir.error)}</text>
                     </showWarning>
                     <setInstallerVariable name="next_page" value="installdir"/>
                   </actionList>
                   <ruleList>
                       <regExMatch>
                         <text>${installdir}</text>
                         <logic>does_not_match</logic>
                         <pattern>^([a-zA-Z]:)\\([0-9a-zA-Z_\\\s\.\-\(\)]*)$</pattern>
                       </regExMatch>
                       <compareText>
                         <text>${platform_name}</text>
                         <logic>equals</logic>
                         <value>windows</value>
                       </compareText>
                   </ruleList>
                 </actionGroup>
            </postShowPageActionList>
        </directoryParameter>
        <!-- Explain that we're using an existing installation directory -->
        <labelParameter>
            <name>upgrade</name>
            <title>${msg(upgrade.existing.installation.title)}</title>
            <description>${msg(upgrade.existing.installation.description)}</description>
            <ruleList>
                <compareText>
                    <text>${xDBReplicationServerVersion}</text>
                    <logic>does_not_equal</logic>
                    <value/>
                </compareText>
                <isFalse value="${extract_mode}"/>
            </ruleList>
        </labelParameter>
    </parameterList>
</project>
