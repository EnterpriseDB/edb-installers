<?xml version="1.0"?>
<project>
  <!-- Package details -->
  <shortName>EDBMTK_SHORT_NAME</shortName>
  <fullName>Migration Toolkit</fullName>
  <version>EDB_VERSION_EDBMTK-EDB_BUILDNUM_EDBMTK</version>
  <windowsResourceProductVersion>EDB_VERSION_EDBMTK</windowsResourceProductVersion>
  <allowWindowResize>1</allowWindowResize>
  <!-- Product Specific Options -->
  <startMenuGroupName/>
  <productComments>Migration Toolkit for PostgreSQL, by EnterpriseDB</productComments>
  <productUrlHelpLink>http://www.enterprisedb.com/learning/documentation.do </productUrlHelpLink>
  <productUrlInfoAbout>http://www.enterprisedb.com</productUrlInfoAbout>
  <productDisplayName>${product_fullname} ${product_version}</productDisplayName>
  <requestedExecutionLevel>asInvoker</requestedExecutionLevel>
  <requireInstallationByRootUser>${admin_rights}</requireInstallationByRootUser>
  <wmImage>../resources/ppas-postgresql.png</wmImage>
  <!-- The options are used for RPM registration -->
  <description>Migration Toolkit for PostgreSQL</description>
  <summary>Migration Toolkit for PostgreSQL, by EnterpriseDB</summary>
  <vendor>EnterpriseDB</vendor>
  <!-- Installer Size -->
  <width>550</width>
  <height>400</height>
  <!-- Misc options -->
  <installerFilename>EDBMTK_INSTALLER_NAME_PREFIX-${product_version}-${platform_name}.${platform_exec_suffix}</installerFilename>
  <compressionAlgorithm>lzma</compressionAlgorithm>
  <unattendedModeUI>minimal</unattendedModeUI>
  <enableRollback>0</enableRollback>
  <saveRelativePaths>1</saveRelativePaths>
  <uninstallerName>uninstall-EDBMTK_INSTALLER_NAME_PREFIX</uninstallerName>
  <uninstallerDirectory>${installdir}</uninstallerDirectory>
  <outputDirectory>../output</outputDirectory>
  <licenseFile>../resources/license_unwrap.txt</licenseFile>
  <installationLogFile>${system_temp_directory}/install-EDBMTK_INSTALLER_NAME_PREFIX.log</installationLogFile>
  <uninstallationLogFile>${system_temp_directory}/uninstall-EDBMTK_INSTALLER_NAME_PREFIX.log</uninstallationLogFile>
  <windowsSoftwareRegistryPrefix/>
  <replaceLockedFilesOnReboot>1</replaceLockedFilesOnReboot>
  <!-- Images -->
  <disableSplashScreen>1</disableSplashScreen>
  <leftImage>../resources/edb-side.png</leftImage>
  <!-- i18n files for the UI -->
  <customLanguageFileList>
    <language>
      <code>en</code>
      <encoding>iso8859-1</encoding>
      <file>i18n/en.lng</file>
    </language>
    <language>
      <code>ja</code>
      <encoding>utf-8</encoding>
      <file>i18n/jp.lng</file>
    </language>
    <language>
      <code>zh_CN</code>
      <encoding>utf-8</encoding>
      <file>i18n/zh_cn.lng</file>
    </language>
    <language>
      <code>zh_TW</code>
      <encoding>utf-8</encoding>
      <file>i18n/zh_TW.lng</file>
    </language>
    <language>
      <code>ko</code>
      <encoding>utf-8</encoding>
      <file>i18n/ko.lng</file>
    </language>
  </customLanguageFileList>
  <allowedLanguages>en ja zh_CN zh_TW ko</allowedLanguages>
  <defaultLanguage>auto</defaultLanguage>
  <!-- Languages allowed? -->
  <allowLanguageSelection>1</allowLanguageSelection>
  <!-- Custom functions -->
  <functionDefinitionList>
    <actionDefinition name="createTempDir">
      <actionList>
        <globalVariables names="random_number"/>
        <actionGroup>
          <actionList>
            <setInstallerVariable name="iteration" value="0"/>
            <!-- Create a random number to use unique filenames -->
            <while>
              <actionList>
                <generateRandomValue length="10" variable="random_number"/>
                <runProgram>
                  <program>sh</program>
                  <programArguments>-c &lt;&lt;EOF '
                                     umask 0077
                                     mkdir "${system_temp_directory}/${dirPrefix}_${random_number}"
                                     if [ $? -ne 0 ];
                                     then
                                        exit 100
                                     fi
                                     '
EOF
                  </programArguments>
                </runProgram>
                <break>
                  <ruleList>
                    <compareText logic="equals" text="0" value="${program_exit_code}"/>
                  </ruleList>
                </break>
                <actionGroup>
                  <actionList>
                    <throwError text="${msg(cannot.create.tmp.dir)}" abortOnError="1">
                      <ruleList>
                         <compareValues value1="${iteration}" logic="equals" value2="9"/>
                       </ruleList>
                     </throwError>
                  </actionList>
                </actionGroup>
                <mathExpression text="${iteration}+1" variable="iteration"/>
              </actionList>
              <conditionRuleList>
                <compareValues value1="${iteration}" logic="less" value2="10"/>
              </conditionRuleList>
            </while>
            <setInstallerVariable name="random_number" value="${random_number}"/>
          </actionList>
          <ruleList>
            <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
          </ruleList>
        </actionGroup>
        <actionGroup>
          <actionList>
            <generateRandomValue length="10" variable="random_number"/>
            <createDirectory path="${system_temp_directory}/${dirPrefix}_${random_number}"/>
            <setInstallerVariable name="random_number" value="${random_number}"/>
          </actionList>
           <ruleList>
             <compareText logic="equals" text="${platform_name}" value="windows"/>
           </ruleList>
        </actionGroup>
      </actionList>
      <parameterList>
        <stringParameter name="dirPrefix" allowEmptyValue="0"/>
      </parameterList>
    </actionDefinition>

    <actionDefinition name="checkSolarisVersion">
      <actionList>
        <globalVariables names="solaris_version"/>
        <actionGroup>
          <actionList>
            <runProgram program="cat" programArguments="/etc/release" abortOnError="0" showMessageOnError="0"/>
            <setInstallerVariable name="solaris_version" value="${program_stdout}" persist="1"/>
            <stringModify text="${solaris_version}" variable="solaris_version" logic="trim"/>
          </actionList>
          <ruleList>
            <compareText logic="contains" text="${platform_name}" value="solaris"/>
          </ruleList>
        </actionGroup>
      </actionList>
    </actionDefinition>
  </functionDefinitionList>
  <!-- Prebuild Actons-->
  <preBuildActionList>
    <setInstallerVariable name="originalplatform" value="${platform_name}"/>
    <setInstallerVariable name="originalplatform" value="linux-x32">
      <ruleList>
        <compareText text="${platform_name}" value="linux"/>
      </ruleList>
    </setInstallerVariable>
    <!-- Setting windows64bitMode for windows-x64 -->
    <setInstallerVariable name="project.windows64bitMode" value="1">
      <ruleList>
        <compareText logic="equals" text="${windowsArchitecture}" value="x64"/>
      </ruleList>
    </setInstallerVariable>
    <setInstallerVariable name="project.parameter(install_runtimes).ask" value="0">
      <ruleList>
        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
      </ruleList>
    </setInstallerVariable>
  </preBuildActionList>
  <preShowHelpActionList>
    <!-- LIN/SOLARIS/HPUX : Set the default installation directory -->
    <setInstallerVariable>
      <name>default_installdir</name>
      <persist>1</persist>
      <value>${platform_install_prefix}/edb/EDBMTK_INSTALL_DIR</value>
      <ruleEvaluationLogic>or</ruleEvaluationLogic>
      <ruleList>
        <compareText logic="contains" text="${platform_name}" value="linux"/>
        <compareText logic="contains" text="${platform_name}" value="solaris"/>
        <compareText logic="contains" text="${platform_name}" value="hpux"/>
      </ruleList>
    </setInstallerVariable>
    <!-- WIN : Set the default installation directory -->
    <setInstallerVariable>
      <name>default_installdir</name>
      <persist>1</persist>
      <value>${platform_install_prefix}\edb\EDBMTK_INSTALL_DIR</value>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </setInstallerVariable>
    <!-- Mac -->
    <setInstallerVariable name="default_installdir" value="/Library/edb/EDBMTK_INSTALL_DIR">
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="osx"/>
      </ruleList>
    </setInstallerVariable>
    <setInstallerVariable name="project.parameter(install_runtimes).value" value="${project.parameter(install_runtimes).value}${booleanAllowedTag}">
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
      </ruleList>
    </setInstallerVariable>
  </preShowHelpActionList>
  <initializationActionList>
    <setInstallerVariable name="project.parameter(extract_mode).ask" value="0"/>
    <setInstallerVariable name="project.parameter(jrehome).ask" value="0"/>
    <setInstallerVariable name="project.parameter(install_runtimes).ask" value="0"/>
    <!-- Abort Installation as trying to  run a 32-bit installer on 64-bit machine -->
    <throwError>
      <customErrorMessage>${msg(platform.not.match)}</customErrorMessage>
      <text>Unknown Error</text>
      <ruleList>
        <platformTest type="linux-x64"/>
        <compareText text="${originalplatform}" value="linux-x32"/>
      </ruleList>
    </throwError>
    <!-- MAC: Set the default values for unattended mode -->
    <actionGroup>
      <actionList>
        <setInstallerVariable name="installdir" value="/Library/edb/EDBMTK_INSTALL_DIR"/>
      </actionList>
      <ruleList>
	<!-- following check means mode equals unattended -->
        <compareText text="${installer_interactivity}" logic="does_not_equal" value="normal"/>
        <compareText logic="equals" text="${platform_name}" value="osx"/>
      </ruleList>
    </actionGroup>
    <!-- LIN/SOLARIS/HPUX : Set the default values for unattended mode -->
    <actionGroup>
      <actionList>
        <setInstallerVariable name="installdir" value="${platform_install_prefix}/edb/EDBMTK_INSTALL_DIR"/>
      </actionList>
      <ruleList>
	<!-- following check means mode equals unattended -->
        <compareText text="${installer_interactivity}" logic="does_not_equal" value="normal"/>
        <ruleGroup ruleEvaluationLogic="or">
          <ruleList>
            <compareText logic="contains" text="${platform_name}" value="linux"/>
            <compareText logic="contains" text="${platform_name}" value="solaris"/>
            <compareText logic="contains" text="${platform_name}" value="hpux"/>
          </ruleList>
        </ruleGroup>
      </ruleList>
    </actionGroup>
    <!-- WIN : Set the default values for unattended mode -->
    <actionGroup>
      <actionList>
        <setInstallerVariable name="installdir" value="${platform_install_prefix}\edb\EDBMTK_INSTALL_DIR"/>
      </actionList>
      <ruleList>
	<!-- following check means mode equals unattended -->
        <compareText text="${installer_interactivity}" logic="does_not_equal" value="normal"/>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </actionGroup>
    <!-- MAC : Set the default installation directory -->
    <setInstallerVariable name="default_installdir" persist="1" value="/Library/edb/EDBMTK_INSTALL_DIR">
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="osx"/>
      </ruleList>
    </setInstallerVariable>
    <!-- LIN/SOLARIS/HPUX : Set the default installation directory -->
    <setInstallerVariable>
      <name>default_installdir</name>
      <persist>1</persist>
      <value>${platform_install_prefix}/edb/EDBMTK_INSTALL_DIR</value>
      <ruleEvaluationLogic>or</ruleEvaluationLogic>
      <ruleList>
        <compareText logic="contains" text="${platform_name}" value="linux"/>
        <compareText logic="contains" text="${platform_name}" value="solaris"/>
        <compareText logic="contains" text="${platform_name}" value="hpux"/>
      </ruleList>
    </setInstallerVariable>
    <!-- WIN : Set the default installation directory -->
    <setInstallerVariable>
      <name>default_installdir</name>
      <persist>1</persist>
      <value>${platform_install_prefix}\edb\EDBMTK_INSTALL_DIR</value>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </setInstallerVariable>
    <!-- On Solaris11, platform_install_prefix for an ordinary user expands to /home. and according to FB20570
         installation directory cannot be set explicitly to "^/home". Hence, prepend "/export" to the value.-->
    <checkSolarisVersion/>
    <setInstallerVariableFromRegEx>
      <name>default_installdir</name>
      <pattern>^/home/(.*)$</pattern>
      <substitution>/export/home/\1</substitution>
      <text>${default_installdir}</text>
      <ruleList>
        <compareText text="${platform_name}" logic="contains" value="solaris"/>
        <compareText text="${solaris_version}" logic="contains" value="Solaris 11"/>
        <regExMatch text="${platform_install_prefix}" logic="matches" pattern="^/(home)"/>
      </ruleList>
    </setInstallerVariableFromRegEx>
  </initializationActionList>
  <preInstallationActionList>
    <setInstallerVariable name="edb_postgres_branding" value="EDB_MAIN_MENU" persist="1"/>
    <!-- Creating a temporary directory -->
    <createTempDir dirPrefix="${product_shortname}"/>
    <!-- Setting defaultUnixGroup and defaultUnixOwner -->
    <actionGroup>
     <actionList>
       <setInstallerVariable name="project.defaultUnixGroup" value="daemon"/>
       <setInstallerVariable name="project.defaultUnixOwner" value="root"/>
     </actionList>
     <ruleList>
       <isFalse value="${extract_mode}"/>
     </ruleList>
    </actionGroup>
    <actionGroup>
      <actionList>
        <!-- Do not create uninstaller in case of extract-only mode -->
        <setInstallerVariable name="createUninstaller" value="0" persist="1"/>
      </actionList>
      <ruleList>
        <isTrue value="${extract_mode}"/>
      </ruleList>
    </actionGroup>
    <!-- Do not perform the below actions in case of extract-only mode -->
    <actionGroup>
      <actionList>
        <!-- Abort installation if not super-user and not running in extract-only mode-->
        <throwError text="${msg(Installer.Warning.RootPrivileges)}">
          <ruleList>
            <isFalse value="${installer_is_root_install}"/>
            <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
          </ruleList>
        </throwError>
        <throwError text="${msg(Installer.Warning.AdministratorPrivileges)}">
          <ruleList>
            <isFalse value="${installer_is_root_install}"/>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
          </ruleList>
        </throwError>
        <setInstallerVariable name="project.windowsSoftwareRegistryPrefix" value="${project.vendor}\AS\edbmtk"/>

	<!-- Creates the ini file if not exits -->
        <touchFile path="/etc/postgres-reg.ini">
          <ruleList>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </touchFile>
        <!-- LIN & MAC : Check Previous Installation of edbmtk-->
        <actionGroup>
          <actionList>
            <iniFileGet>
              <file>/etc/postgres-reg.ini</file>
              <section>ppas_edbmtk</section>
              <key>Version</key>
              <variable>edbmtkVersion</variable>
            </iniFileGet>
          </actionList>
          <ruleList>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </actionGroup>
        <!-- WIN : Check Previous Installation of edbmtk-->
        <actionGroup>
          <actionList>
            <registryGet>
              <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\AS\edbmtk</key>
              <name>Version</name>
              <variable>edbmtkVersion</variable>
            </registryGet>
          </actionList>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </actionGroup>
	
	<!-- Check existing JREs -->
	<actionGroup>
	  <actionList>
            <!-- Check if the valid jrehome switch is supplied -->
            <throwError customErrorMessage="${msg(jre.invalid.error)}" text="Unknown Error">
              <ruleList>
                <compareText text="${jrehome}" logic="does_not_equal" value="" />
                <compareText text="${platform_name}" logic="does_not_equal" value="windows" />
                <fileTest path="${jrehome}/bin/java" condition="not_exists" />
              </ruleList>
            </throwError>
            <throwError customErrorMessage="${msg(jre.invalid.error.windows)}" text="Unknown Error">
              <ruleList>
                <compareText text="${jrehome}" logic="does_not_equal" value="" />
                <compareText text="${platform_name}" logic="equals" value="windows" />
                <fileTest path="${jrehome}\bin\java.exe" condition="not_exists" />
              </ruleList>
            </throwError>

            <!-- Detecting Java, Abort if not found -->
	    <setInstallerVariable name="target_jre_version" value="TARGET_JRE_VERSION" persist="1"/>
            <autodetectJava promptUser="0" abortOnError="1" showMessageOnError="1" customErrorMessage="${msg(java.error)}">
              <validVersionList>
                <validVersion maxVersion="" minVersion="${target_jre_version}" requireJDK="0" />
              </validVersionList>
              <ruleList>
                <compareText text="${jrehome}" logic="equals" value="" />
              </ruleList>
            </autodetectJava>

	    <setInstallerVariable name="java_executable" value="${jrehome}/bin/java" >
              <ruleList>
                <compareText text="${jrehome}" logic="does_not_equal" value="" />
                <compareText text="${platform_name}" logic="contains" value="linux" />
                <fileExists path="${jrehome}/bin/java" />
              </ruleList>
            </setInstallerVariable>

	    <setInstallerVariable name="java_executable" value="${jrehome}/bin/java" >
	      <ruleList>
	        <compareText text="${jrehome}" logic="does_not_equal" value="" />
	        <compareText text="${platform_name}" logic="contains" value="osx" />
	        <fileExists path="${jrehome}/bin/java" />
	      </ruleList>
	    </setInstallerVariable>

            <!-- Adjust java_executable paths for Solaris and HPUX -->
            <!-- Setting path of 64 bit java on Solaris Sparc -->
            <setInstallerVariable name="java_executable" value="${jrehome}/bin/sparcv9/java" >
              <ruleList>
                <compareText text="${jrehome}" logic="does_not_equal" value="" />
                <platformTest type="solaris-sparc"/>
                <fileExists path="${jrehome}/bin/sparcv9/java" />
              </ruleList>
            </setInstallerVariable>

            <!-- Setting path of 32 bit java if 64 bit jre not found on Solaris Sparc -->
            <setInstallerVariable name="java_executable" value="${jrehome}/bin/java" >
              <ruleList>
                <compareText text="${jrehome}" logic="does_not_equal" value="" />
                <platformTest type="solaris-sparc"/>
                <fileTest path="${jrehome}/bin/sparcv9/java" condition="not_exists" />
                <fileExists path="${jrehome}/bin/java" />
              </ruleList>
            </setInstallerVariable>

            <!-- Setting path of 64 bit java on Solaris Intel -->
            <setInstallerVariable name="java_executable" value="${jrehome}/bin/amd64/java" >
              <ruleList>
                <compareText text="${jrehome}" logic="does_not_equal" value="" />
                <platformTest type="solaris-intel"/>
                <fileExists path="${jrehome}/bin/amd64/java" />
              </ruleList>
            </setInstallerVariable>

            <!-- Setting path of 32 bit java if 64 bit jre not found on Solaris Intel -->
            <setInstallerVariable name="java_executable" value="${jrehome}/bin/java" >
              <ruleList>
                <compareText text="${jrehome}" logic="does_not_equal" value="" />
                <platformTest type="solaris-intel"/>
                <fileTest path="${jrehome}/bin/amd64/java" condition="not_exists" />
                <fileExists path="${jrehome}/bin/java" />
              </ruleList>
            </setInstallerVariable>

            <!-- Setting path of 64 bit java on HPUX -->
            <setInstallerVariable name="java_executable" value="${jrehome}/bin/IA64W/java" >
              <ruleList>
                <compareText text="${jrehome}" logic="does_not_equal" value="" />
                <compareText text="${platform_name}" logic="contains" value="hpux" />
                <fileExists path="${jrehome}/bin/IA64W/java" />
              </ruleList>
            </setInstallerVariable>

            <!-- Setting path of 32 bit java if 64 bit jre not found on HPUX -->
            <setInstallerVariable name="java_executable" value="${jrehome}/bin/java" >
              <ruleList>
                <compareText text="${jrehome}" logic="does_not_equal" value="" />
                <compareText text="${platform_name}" logic="contains" value="hpux" />
                <fileTest path="${jrehome}/bin/IA64W/java" condition="not_exists" />
                <fileExists path="${jrehome}/bin/java" />
              </ruleList>
            </setInstallerVariable>

            <setInstallerVariable name="java_executable" value="${jrehome}\bin\java.exe" >
              <ruleList>
                <compareText text="${jrehome}" logic="does_not_equal" value="" />
                <compareText text="${platform_name}" logic="equals" value="windows" />
                <fileExists path="${jrehome}\bin\java.exe" />
              </ruleList>
            </setInstallerVariable>

          </actionList>
            <ruleList>
              <isFalse value="${extract_mode}"/>
            </ruleList>
        </actionGroup>

        <!-- Set the installation directory in case of re-install/upgrade -->
        <actionGroup>
          <actionList>
            <iniFileGet>
              <file>/etc/postgres-reg.ini</file>
              <section>ppas_edbmtk</section>
              <key>InstallationDirectory</key>
              <variable>installdir</variable>
            </iniFileGet>
          </actionList>
          <ruleList>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${edbmtkVersion}</text>
              <value/>
            </compareText>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </actionGroup>
        <!-- WIN: Set the installation directory in case of re-install/upgrade -->
        <actionGroup>
          <actionList>
            <registryGet>
              <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\AS\edbmtk</key>
              <name>Location</name>
              <variable>installdir</variable>
            </registryGet>
          </actionList>
          <ruleList>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${edbmtkVersion}</text>
              <value/>
            </compareText>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </actionGroup>
        <actionGroup>
            <actionList>
               <copyFile>
                   <origin>${installdir}/etc/toolkit.properties</origin>
                   <destination>${installdir}/etc/toolkit.properties.bak1</destination>
               </copyFile>
            </actionList>
           <ruleList>
               <compareText>
                   <logic>does_not_equal</logic>
                   <text>${edbmtkVersion}</text>
                   <value/>
               </compareText>
           </ruleList>
        </actionGroup>
      </actionList>
      <ruleList>
        <isFalse value="${extract_mode}"/>
      </ruleList>
    </actionGroup>

    <actionGroup>
      <actionList>
        <!-- We will also need to get the VC++ runtimes installed on Windows, before we do anything with binaries -->
        <setInstallerVariable name="rebootRequired" value="0"/>
        <setInstallerVariable name="vcredist_filename" value="vcredist_x86.exe">
          <ruleList>
            <compareText logic="equals" text="${windowsArchitecture}" value="x32"/>
          </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="vcredist_filename" value="vcredist_x64.exe">
          <ruleList>
            <compareText logic="equals" text="${windowsArchitecture}" value="x64"/>
          </ruleList>
        </setInstallerVariable>
        <unpackFile>
          <component>default</component>
          <destination>${system_temp_directory}\${product_shortname}_${random_number}\${vcredist_filename}</destination>
          <folder>programfileswindows</folder>
          <origin>installer/edbmtk/${vcredist_filename}</origin>
        </unpackFile>
        <unpackFile>
          <component>default</component>
          <destination>${system_temp_directory}/${product_shortname}_${random_number}/installruntimes.vbs</destination>
          <folder>programfileswindows</folder>
          <origin>installer/edbmtk/installruntimes.vbs</origin>
        </unpackFile>
        <runProgram>
          <program>cscript</program>
          <programArguments>//NoLogo "${system_temp_directory}\${product_shortname}_${random_number}\installruntimes.vbs" "${system_temp_directory}\${product_shortname}_${random_number}\${vcredist_filename}"</programArguments>
          <abortOnError>0</abortOnError>
          <showMessageOnError>0</showMessageOnError>
        </runProgram>
        <throwError>
          <text>${msg(error.installing.runtimes)}</text>
          <ruleList>
            <compareText logic="equals" text="127" value="${program_exit_code}"/>
          </ruleList>
        </throwError>
        <actionGroup>
          <actionList>
            <logMessage text="${msg(warning.reboot.machine)}"/>
            <setInstallerVariable name="rebootRequired" value="1"/>
          </actionList>
          <ruleList>
            <compareText logic="equals" text="${program_exit_code}" value="3010"/>
          </ruleList>
        </actionGroup>
      </actionList>
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
        <isFalse value="${extract_mode}"/>
        <isTrue value="${install_runtimes}"/>
      </ruleList>
    </actionGroup>
  </preInstallationActionList>
  <readyToInstallActionList>
    <!-- Take backup of config files in upgrade mode -->
    <actionGroup>
      <actionList>
        <generateRandomValue length="5" variable="bk_random_number_value"/>
        <renameFile origin="${installdir}/etc/sysconfig/edbmtk-CORE_EDBMTK_VERSION.config" destination="${installdir}/etc/sysconfig/edbmtk-CORE_EDBMTK_VERSION.config.${bk_random_number_value}">
          <ruleList>
            <fileTest path="${installdir}/etc/sysconfig/edbmtk-CORE_EDBMTK_VERSION.config" condition="exists" />
          </ruleList>
        </renameFile>
        <renameFile origin="${installdir}/etc/sysconfig/edbmtk-CORE_EDBMTK_VERSION.vbs" destination="${installdir}/etc/sysconfig/edbmtk-CORE_EDBMTK_VERSION.vbs.${bk_random_number_value}">
          <ruleList>
            <fileTest path="${installdir}/etc/sysconfig/edbmtk-CORE_EDBMTK_VERSION.vbs" condition="exists" />
            <compareText logic="equals" text="${platform_name}" value="windows" />
          </ruleList>
        </renameFile>
      </actionList>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${edbmtkVersion}</text>
          <value/>
        </compareText>
	<isFalse value="${extract_mode}"/>
      </ruleList>
    </actionGroup>

    <setInstallerVariable name="slash" persist="1" value="\">
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
      </ruleList>
    </setInstallerVariable>
    <setInstallerVariable name="slash" persist="1" value="/">
      <ruleList>
        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
      </ruleList>
    </setInstallerVariable>

    <!-- Remove old uninstaller and license file in upgrade mode (if exists) -->
    <deleteFile path="${installdir}${slash}uninstall-migrationtoolkit">
      <ruleList>
        <fileExists path="${installdir}${slash}uninstall-migrationtoolkit"/>
        <isFalse value="${extract_mode}"/>
	<compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
      </ruleList>
    </deleteFile>
    <deleteFile path="${installdir}${slash}uninstall-migrationtoolkit.exe">
      <ruleList>
        <fileExists path="${installdir}${slash}uninstall-migrationtoolkit.exe"/>
        <isFalse value="${extract_mode}"/>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
      </ruleList>
    </deleteFile>
    <deleteFile path="${installdir}${slash}uninstall-migrationtoolkit.dat">
      <ruleList>
        <fileExists path="${installdir}${slash}uninstall-migrationtoolkit.dat"/>
        <isFalse value="${extract_mode}"/>
      </ruleList>
    </deleteFile>
    <deleteFile path="${installdir}${slash}migrationtoolkit_license.txt">
      <ruleList>
        <fileExists path="${installdir}${slash}migrationtoolkit_license.txt"/>
      </ruleList>
    </deleteFile>
    <deleteFile path="${installdir}${slash}migrationtoolkit_3rd_party_licenses.txt">
      <ruleList>
        <fileExists path="${installdir}${slash}migrationtoolkit_3rd_party_licenses.txt"/>
      </ruleList>
    </deleteFile>

  </readyToInstallActionList>
  <postInstallationActionList>
    <!-- Replace / with \  on windows -->
    <setInstallerVariableFromRegEx>
      <text>${java_executable}</text>
      <substitution>\</substitution>
      <name>java_executable_windows</name>
      <pattern>\/</pattern>
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="windows" />
      </ruleList>
    </setInstallerVariableFromRegEx>

    <!-- Move edbmtk config file to /etc  -->
    <actionGroup>
      <actionList>
        <substitute>
          <files>${installdir}/etc/sysconfig/edbmtk-CORE_EDBMTK_VERSION.config</files>
          <substitutionList>
            <substitution>
              <pattern>JAVA_EXEC_PATH</pattern>
              <value>${java_executable}</value>
            </substitution>
            <substitution>
              <pattern>MINIMUM_JAVA_VERSION</pattern>
              <value>TARGET_JRE_VERSION</value>
            </substitution>
            <substitution>
              <pattern>REQUIRED_JAVA_BITNESS</pattern>
              <value>0</value>
            </substitution>
          </substitutionList>
        </substitute>
	<substitute>
          <files>${installdir}/bin/runMTK.sh</files>
          <substitutionList>
            <substitution>
              <pattern>@BASE_DIR@</pattern>
              <value>${installdir}</value>
            </substitution>
          </substitutionList>
        </substitute>
	<changePermissions>
          <files>${installdir}/etc/sysconfig/edbmtk-CORE_EDBMTK_VERSION.config</files>
          <permissions>755</permissions>
        </changePermissions>
	<!-- Stop uninstaller to remove runJavaApplication.sh until certain condition is met. -->
	<removeFilesFromUninstaller>
          <files>${installdir}/etc/sysconfig/runJavaApplication.sh</files>
        </removeFilesFromUninstaller>
      </actionList>
      <ruleList>
        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
        <isFalse value="${extract_mode}"/>
      </ruleList>
    </actionGroup>

    <!-- Move edbmtk config file to /etc  -->
    <actionGroup>
      <actionList>
        <substitute>
          <files>${installdir}/etc/sysconfig/edbmtk-CORE_EDBMTK_VERSION.config</files>
          <substitutionList>
            <substitution>
              <pattern>JAVA_EXEC_PATH</pattern>
              <value>${java_executable_windows}</value>
            </substitution>
            <substitution>
              <pattern>MINIMUM_JAVA_VERSION</pattern>
              <value>TARGET_JRE_VERSION</value>
            </substitution>
            <substitution>
              <pattern>REQUIRED_JAVA_BITNESS</pattern>
              <value>0</value>
            </substitution>
          </substitutionList>
        </substitute>
        <substitute>
          <files>${installdir}/bin/runMTK.bat</files>
          <substitutionList>
            <substitution>
              <pattern>%BASE_DIR%</pattern>
              <value>${installdir}</value>
            </substitution>
          </substitutionList>
        </substitute>
	<!-- Stop uninstaller to remove runJavaApplication.sh until certain condition is met. -->
        <removeFilesFromUninstaller>
          <files>${installdir}\etc\sysconfig\runJavaApplication.vbs</files>
        </removeFilesFromUninstaller>
      </actionList>
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
        <isFalse value="${extract_mode}"/>
      </ruleList>
    </actionGroup>

    <!-- Do not perform the below actions in case of extract-only mode -->
    <actionGroup>
      <actionList>
        <actionGroup>
          <actionList>
            <iniFileSet>
              <file>/etc/postgres-reg.ini</file>
              <section>ppas_edbmtk</section>
              <key>Description</key>
              <value>${msg(install.summary)}</value>
            </iniFileSet>
            <iniFileSet>
              <file>/etc/postgres-reg.ini</file>
              <section>ppas_edbmtk</section>
              <key>InstallationDirectory</key>
              <value>${installdir}</value>
            </iniFileSet>
            <iniFileSet>
              <file>/etc/postgres-reg.ini</file>
              <section>ppas_edbmtk</section>
              <key>Version</key>
              <value>${product_version}</value>
            </iniFileSet>
          </actionList>
          <ruleList>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </actionGroup>
        <registrySet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\AS\edbmtk</key>
          <name>Description</name>
          <value>${msg(install.summary)}</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </registrySet>
        <registrySet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\AS\edbmtk</key>
          <name>Location</name>
          <value>${installdir}</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </registrySet>
        <registrySet>
          <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\AS\edbmtk</key>
          <name>Version</name>
          <value>${product_version}</value>
          <ruleList>
            <compareText>
              <logic>equals</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </registrySet>
        <!-- Delete Add/Remove Programs Entry From Old Windows Installation -->
        <actionGroup>
          <actionList>
            <registryDelete>
                <key>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Migration Toolkit ${edbmtkVersion}</key>
                <showMessageOnError>0</showMessageOnError>
                <abortOnError>0</abortOnError>
            </registryDelete>
          </actionList>
          <ruleList>
            <compareText>
                <logic>equals</logic>
                <text>${platform_name}</text>
                <value>windows</value>
            </compareText>
            <compareText>
              <text>${edbmtkVersion}</text>
              <logic>does_not_equal</logic>
              <value/>
            </compareText>
          </ruleList>
        </actionGroup>
	<actionGroup>
          <actionList>
            <renameFile>
              <origin>${installdir}/etc/toolkit.properties</origin>
              <destination>${installdir}/etc/toolkit.properties.new</destination>
              <ruleList>
                <compareText logic="does_not_equal" text="${edbmtkVersion}" value=""/>
              </ruleList>
            </renameFile>
            <addFilesToUninstaller>
              <files>${installdir}/etc/toolkit.properties.new</files>
              <ruleList>
                <compareText logic="does_not_equal" text="${edbmtkVersion}" value=""/>
              </ruleList>
            </addFilesToUninstaller>
            <copyFile>
              <origin>${installdir}/etc/toolkit.properties.bak1</origin>
              <destination>${installdir}/etc/toolkit.properties</destination>
            </copyFile>
            <deleteFile>
              <path>${installdir}/etc/toolkit.properties.bak1</path>
            </deleteFile>
          </actionList>
          <ruleList>
            <fileTest>
              <path>${installdir}/etc/toolkit.properties.bak1</path>
              <condition>exists</condition>
            </fileTest>
          </ruleList>
        </actionGroup> 
	<changePermissions files="${installdir}/etc/toolkit.properties" permissions="600">
	  <ruleList>
            <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
	    <fileTest path="${installdir}/etc/toolkit.properties" condition="exists"/>
          </ruleList>
        </changePermissions>
	<changePermissions files="${installdir}/etc/toolkit.properties.new" permissions="600">
          <ruleList>
            <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
            <fileTest path="${installdir}/etc/toolkit.properties.new" condition="exists"/>
          </ruleList>
        </changePermissions>

	<!-- Administators maps to S-1-5-32-544 -->
	<actionGroup>
          <actionList>
            <clearWindowsACL files="${installdir}\etc\toolkit.properties"/>
            <setWindowsACL action="allow" files="${installdir}\etc\toolkit.properties" permissions="file_generic_write file_generic_read" users="S-1-5-32-544"/>
          </actionList>
          <ruleList>
            <fileExists path="${installdir}\etc\toolkit.properties" />
            <compareText text="${platform_name}" logic="equals" value="windows" />
          </ruleList>
        </actionGroup>
	<actionGroup>
          <actionList>
            <clearWindowsACL files="${installdir}\etc\toolkit.properties.new"/>
            <setWindowsACL action="allow" files="${installdir}\etc\toolkit.properties.new" permissions="file_generic_write file_generic_read" users="S-1-5-32-544"/>
          </actionList>
          <ruleList>
            <fileExists path="${installdir}\etc\toolkit.properties.new" />
            <compareText text="${platform_name}" logic="equals" value="windows" />
          </ruleList>
        </actionGroup>
      </actionList>
      <ruleList>
        <isFalse value="${extract_mode}"/>
      </ruleList>
    </actionGroup>

    <!-- Set SBP component_reference_count -->
    <actionGroup>
      <actionList>
        <setInstallerVariable name="sbp_comp_ref_count" value="0"/>
        <iniFileGet file="/etc/postgres-reg.ini" section="Global_ref_counts" key="sbp_components_ref_count" variable="sbp_comp_ref_count">
          <ruleList>
            <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
          </ruleList>
        </iniFileGet>
        <registryGet name="sbp_components_ref_count" key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Global_ref_counts" variable="sbp_comp_ref_count" wowMode="32">
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
          </ruleList>
        </registryGet>
        <mathExpression text="${sbp_comp_ref_count} + 1" variable="sbp_comp_ref_count"/>
        <iniFileSet file="/etc/postgres-reg.ini" key="sbp_components_ref_count" section="Global_ref_counts" value="${sbp_comp_ref_count}">
          <ruleList>
            <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
          </ruleList>
        </iniFileSet>
        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Global_ref_counts" name="sbp_components_ref_count" type="REG_SZ" value="${sbp_comp_ref_count}" wowMode="32">
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
          </ruleList>
        </registrySet>
      </actionList>
      <ruleList>
        <isFalse value="${extract_mode}"/>
        <compareText text="${edbmtkVersion}" logic="equals" value=""/>
      </ruleList>
    </actionGroup>

    <deleteFile path="${system_temp_directory}/${product_shortname}_${random_number}">
      <ruleList>
        <fileExists path="${system_temp_directory}/${product_shortname}_${random_number}"/>
      </ruleList>
    </deleteFile>
  </postInstallationActionList>
  <installationAbortedActionList>
    <deleteFile path="${system_temp_directory}/${product_shortname}_${random_number}" abortOnError="0" showMessageOnError="0">
      <ruleList>
        <fileTest path="${system_temp_directory}/${product_shortname}_${random_number}" condition="exists"/>
      </ruleList>
    </deleteFile>
  </installationAbortedActionList>
  <!-- preUninstallation actions -->
  <preUninstallationActionList>
    <actionGroup>
      <actionList>
        <showWarning text="${msg(Installer.Warning.UninstallerAdministratorPrivileges)}"/>
        <exit/>
      </actionList>
      <ruleList>
        <isFalse value="${installer_is_root_install}"/>
        <compareText logic="equals" text="${platform_name}" value="windows" />
      </ruleList>
    </actionGroup>
    <actionGroup>
      <actionList>
        <showWarning text="${msg(Installer.Warning.UninstallerRootPrivileges)}"/>
        <exit/>
      </actionList>
      <ruleList>
        <isFalse value="${installer_is_root_install}"/>
        <compareText logic="does_not_equal" text="${platform_name}" value="windows" />
      </ruleList>
    </actionGroup>
    <actionGroup>
      <actionList>
        <iniFileSet>
          <file>/etc/postgres-reg.ini</file>
          <section>ppas_edbmtk</section>
          <key>Description</key>
          <value/>
        </iniFileSet>
        <iniFileSet>
          <file>/etc/postgres-reg.ini</file>
          <section>ppas_edbmtk</section>
          <key>InstallationDirectory</key>
          <value/>
        </iniFileSet>
        <iniFileSet>
          <file>/etc/postgres-reg.ini</file>
          <section>ppas_edbmtk</section>
          <key>Version</key>
          <value/>
        </iniFileSet>
      </actionList>
      <ruleList>
        <compareText>
          <logic>does_not_equal</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
      </ruleList>
    </actionGroup>
    <registryDelete>
      <key>HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\AS\edbmtk</key>
    </registryDelete>
  </preUninstallationActionList>
  <postUninstallationActionList>
    <deleteFile path="${installdir}/etc/sysconfig/edbmtk-CORE_EDBMTK_VERSION.config*">
      <ruleList>
        <fileExists path="${installdir}/etc/sysconfig/edbmtk-CORE_EDBMTK_VERSION.config*"/>
      </ruleList>
    </deleteFile>
    <deleteFile path="${installdir}/etc/sysconfig/edbmtk-CORE_EDBMTK_VERSION.vbs*">
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
        <fileExists path="${installdir}/etc/sysconfig/edbmtk-CORE_EDBMTK_VERSION.vbs*"/>
      </ruleList>
    </deleteFile>

    <setInstallerVariableFromScriptOutput name="count_files_in_etc_sysconfig"
                                          exec="ls"
                                          execArgs="-l ${installdir}/etc/sysconfig | grep -c &quot;^-.*&quot;" 
                                          workingDirectory="${installdir}/etc/sysconfig"
                                          abortOnError="0"
                                          showMessageOnError="0">
      <ruleList>
        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
      </ruleList>
    </setInstallerVariableFromScriptOutput>

    <setInstallerVariableFromScriptOutput name="count_files_in_etc_sysconfig"
                                          exec="cmd"
                                          execArgs='/c dir /b | find /v /c ""'
                                          workingDirectory="${installdir}\etc\sysconfig"
                                          abortOnError="0"
                                          showMessageOnError="0">
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
      </ruleList>
    </setInstallerVariableFromScriptOutput>

    <deleteFile path="${installdir}/etc/sysconfig/runJavaApplication.sh">
      <ruleList>
        <fileExists path="${installdir}/etc/sysconfig/runJavaApplication.sh"/>
        <compareText logic="equals" text="${count_files_in_etc_sysconfig}" value="1"/>
        <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
      </ruleList>
    </deleteFile>

    <deleteFile path="${installdir}\etc\sysconfig\runJavaApplication.vbs">
      <ruleList>
        <fileExists path="${installdir}\etc\sysconfig\runJavaApplication.vbs"/>
        <compareText logic="equals" text="${count_files_in_etc_sysconfig}" value="1"/>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
      </ruleList>
    </deleteFile>

    <deleteFile path="${installdir}/etc/sysconfig">
      <ruleList>
	<fileTest path="${installdir}/etc/sysconfig" condition="is_empty"/>
      </ruleList>
    </deleteFile>
    <deleteFile path="${installdir}/etc">
      <ruleList>
        <fileTest path="${installdir}/etc" condition="is_empty"/>
      </ruleList>
    </deleteFile>

    <!-- Set SBP component_reference_count -->
    <actionGroup>
      <actionList>
        <iniFileGet file="/etc/postgres-reg.ini" section="Global_ref_counts" key="sbp_components_ref_count" variable="sbp_comp_ref_count">
          <ruleList>
            <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
          </ruleList>
        </iniFileGet>
        <registryGet name="sbp_components_ref_count" key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Global_ref_counts" variable="sbp_comp_ref_count" wowMode="32">
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
          </ruleList>
        </registryGet>
        <mathExpression text="${sbp_comp_ref_count} - 1" variable="sbp_comp_ref_count">
          <ruleList>
            <compareText logic="does_not_equal" text="${sbp_comp_ref_count}" value="0"/>
          </ruleList>
        </mathExpression>
        <iniFileSet file="/etc/postgres-reg.ini" key="sbp_components_ref_count" section="Global_ref_counts" value="${sbp_comp_ref_count}">
          <ruleList>
            <compareText logic="does_not_equal" text="${platform_name}" value="windows"/>
          </ruleList>
        </iniFileSet>
        <registrySet key="HKEY_LOCAL_MACHINE\SOFTWARE\EnterpriseDB\Global_ref_counts" name="sbp_components_ref_count" type="REG_SZ" value="${sbp_comp_ref_count}" wowMode="32">
          <ruleList>
            <compareText logic="equals" text="${platform_name}" value="windows"/>
          </ruleList>
        </registrySet>
      </actionList>
    </actionGroup>

    <deleteFile path="${installdir}">
      <ruleList>
        <fileTest path="${installdir}" condition="is_empty"/>
      </ruleList>
    </deleteFile>
  </postUninstallationActionList>
  <!-- Components -->
  <componentList>
    <component>
      <name>default</name>
      <description>Default Component</description>
      <canBeEdited>1</canBeEdited>
      <selected>1</selected>
      <show>1</show>
      <folderList>
        <!-- Licenses -->
        <folder description="Licenses Program Files" destination="${installdir}" name="licensesprogramfiles" platforms="all">
          <distributionFileList>                          
            <distributionFile origin="staging/EDBMTK_INSTALLER_NAME_PREFIX_license.txt"/>
          </distributionFileList>                                                                                                               
        </folder>   
        <!-- LIN- Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfileslinux</name>
          <platforms>linux</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/linux/bin</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/linux/etc</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/linux/lib</origin>
            </distributionDirectory>
            <distributionFile origin="staging/linux/EDBMTK_INSTALLER_NAME_PREFIX_3rd_party_licenses.txt"/>
          </distributionFileList>
        </folder>
        <!-- LIN-X64 - Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfileslinux_x64</name>
          <platforms>linux-x64</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/linux-x64/bin</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/linux-x64/etc</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/linux-x64/lib</origin>
            </distributionDirectory>
            <distributionFile origin="staging/linux-x64/EDBMTK_INSTALLER_NAME_PREFIX_3rd_party_licenses.txt"/>
          </distributionFileList>
        </folder>
        <!-- WIN - Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfileswindows</name>
          <platforms>windows</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/windows/bin</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/windows/etc</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/windows/lib</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/windows/installer</origin>
            </distributionDirectory>
            <distributionFile origin="staging/windows/EDBMTK_INSTALLER_NAME_PREFIX_3rd_party_licenses.txt"/>
          </distributionFileList>
        </folder>
        <!-- MAC - Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfilesosx</name>
          <platforms>osx</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/osx/bin</origin>
            </distributionDirectory>
	    <distributionDirectory>
              <origin>staging/osx/etc</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/osx/lib</origin>
            </distributionDirectory>
            <distributionFile origin="staging/osx/EDBMTK_INSTALLER_NAME_PREFIX_3rd_party_licenses.txt"/>
          </distributionFileList>
        </folder>
        <!-- SOLARIS INTEL- Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfilessolaris_intel</name>
          <platforms>solaris-intel</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/solaris-intel/bin</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/solaris-intel/etc</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/solaris-intel/lib</origin>
            </distributionDirectory>
            <distributionFile origin="staging/solaris-intel/EDBMTK_INSTALLER_NAME_PREFIX_3rd_party_licenses.txt"/>
          </distributionFileList>
        </folder>
        <!-- SOLARIS SPARC- Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfilessolaris_sparc</name>
          <platforms>solaris-sparc</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/solaris-sparc/bin</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/solaris-sparc/etc</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/solaris-sparc/lib</origin>
            </distributionDirectory>
            <distributionFile origin="staging/solaris-sparc/EDBMTK_INSTALLER_NAME_PREFIX_3rd_party_licenses.txt"/>
          </distributionFileList>
        </folder>
        <!-- HPUX- Program files -->
        <folder>
          <description>Program Files</description>
          <destination>${installdir}</destination>
          <name>programfileshpux</name>
          <platforms>hpux</platforms>
          <distributionFileList>
            <distributionDirectory>
              <origin>staging/hpux/bin</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/hpux/etc</origin>
            </distributionDirectory>
            <distributionDirectory>
              <origin>staging/hpux/lib</origin>
            </distributionDirectory>
            <distributionFile origin="staging/hpux/EDBMTK_INSTALLER_NAME_PREFIX_3rd_party_licenses.txt"/>
          </distributionFileList>
        </folder>
      </folderList>
    </component>
  </componentList>
  <!-- Install Directory -->
  <parameterList>
    <stringParameter name="windowsArchitecture" value="x32" ask="0">
      <ruleList>
        <compareText logic="equals" text="${platform_name}" value="windows"/>
      </ruleList>
    </stringParameter>
    <!-- Whether to install runtimes -->
    <booleanParameter>
      <name>install_runtimes</name>
      <description>${msg(install.runtimes.description)}</description>
      <explanation/>
      <value/>
      <default>yes</default>
      <ask>yes</ask>
      <cliOptionName>install_runtimes</cliOptionName>
      <cliOptionShow>1</cliOptionShow>
      <ruleList>
        <compareText>
          <logic>equals</logic>
          <text>${platform_name}</text>
          <value>windows</value>
        </compareText>
        <isFalse value="${extract_mode}"/>
      </ruleList>
    </booleanParameter>
    <booleanParameter name="extract_mode" cliOptionName="extract-only" default="0" ask="1" cliOptionShow="1"/>
    <booleanParameter name="admin_rights" cliOptionName="require-admin" default="0" ask="0" cliOptionShow="0"/>
    <stringParameter name="originalplatform" ask="0" cliOptionShow="0"/>
    <stringParameter name="jrehome" cliOptionName="jrehome" default="" ask="1" cliOptionShow="1"/>
    <directoryParameter>
      <name>installdir</name>
      <description>Installer.Parameter.installdir.description</description>
      <explanation>Installer.Parameter.installdir.explanation</explanation>
      <value>${default_installdir}</value>
      <default/>
      <allowEmptyValue>0</allowEmptyValue>
      <ask>yes</ask>
      <cliOptionName>prefix</cliOptionName>
      <mustBeWritable>yes</mustBeWritable>
      <mustExist>0</mustExist>
      <width>40</width>
      <ruleEvaluationLogic>or</ruleEvaluationLogic>
      <ruleList>
        <compareText>
          <text>${edbmtkVersion}</text>
          <logic>equals</logic>
          <value/>
        </compareText>
        <isTrue value="${extract_mode}"/>
      </ruleList>
      <!-- Validating whether installdir is empty -->
      <validationActionList>
        <actionGroup>
          <actionList>
            <setInstallerVariable name="installdir" value="${default_installdir}"/>
            <throwError>
              <text>${msg(edb_edbmtk.installdir.empty)}</text>
            </throwError>
          </actionList>
          <ruleList>
            <compareText>
              <text>${installdir}</text>
              <logic>equals</logic>
              <value/>
            </compareText>
            <isFalse value="${extract_mode}"/>
          </ruleList>
        </actionGroup>
      </validationActionList>
      <!-- Validating whether installdir contains whitespaces (Linux) -->
      <postShowPageActionList>
        <actionGroup>
          <actionList>
            <showWarning>
              <text>${msg(edbmtk.installdir.error)}</text>
            </showWarning>
            <setInstallerVariable name="next_page" value="installdir"/>
          </actionList>
          <ruleList>
            <regExMatch>
              <text>${installdir}</text>
              <logic>does_not_match</logic>
              <pattern>^/([0-9a-zA-Z_/\.\-]*)$</pattern>
            </regExMatch>
            <compareText>
              <logic>does_not_equal</logic>
              <text>${platform_name}</text>
              <value>windows</value>
            </compareText>
          </ruleList>
        </actionGroup>
        <!-- Validating whether installdir starts with /home on Solaris 11-->
        <checkSolarisVersion/>
        <actionGroup>
          <actionList>
            <showWarning text="${msg(edbmtk.installdir.invalid.solaris11)}"/>
            <setInstallerVariable name="next_page" value="installdir"/>
          </actionList>
          <ruleList>
            <compareText text="${platform_name}" logic="contains" value="solaris"/>
            <compareText text="${solaris_version}" logic="contains" value="Solaris 11"/>
            <regExMatch text="${installdir}" logic="matches" pattern="^/(home)"/>
          </ruleList>
        </actionGroup>
        <!-- Validating whether installdir is valid (Windows) -->
        <actionGroup>
          <actionList>
            <setInstallerVariable name="installdir" value="${default_installdir}"/>
            <showWarning>
              <text>${msg(edbmtk.installdir.error)}</text>
            </showWarning>
            <setInstallerVariable name="next_page" value="installdir"/>
          </actionList>
          <ruleList>
            <regExMatch>
              <text>${installdir}</text>
              <logic>does_not_match</logic>
              <pattern>^([a-zA-Z]:)\\([0-9a-zA-Z_\\\s\.\-\(\)]*)$</pattern>
            </regExMatch>
            <compareText>
              <text>${platform_name}</text>
              <logic>equals</logic>
              <value>windows</value>
            </compareText>
          </ruleList>
        </actionGroup>
      </postShowPageActionList>
    </directoryParameter>
    <!-- Explain that we're using an existing installation directory -->
    <labelParameter>
      <name>upgrade</name>
      <title>${msg(upgrade.existing.installation.title)}</title>
      <description>${msg(upgrade.existing.installation.description)}</description>
      <ruleList>
        <compareText>
          <text>${edbmtkVersion}</text>
          <logic>does_not_equal</logic>
          <value/>
        </compareText>
        <isFalse value="${extract_mode}"/>
      </ruleList>
    </labelParameter>
  </parameterList>
</project>
